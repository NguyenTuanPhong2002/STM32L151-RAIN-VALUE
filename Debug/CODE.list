
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112d4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  08011418  08011418  00021418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801311c  0801311c  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  0801311c  0801311c  0002311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013124  08013124  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013124  08013124  00023124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013128  08013128  00023128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0801312c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  20000210  08013338  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200013d8  08013338  000313d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4df  00000000  00000000  00030235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004923  00000000  00000000  0004b714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00050038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  00051880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8e1  00000000  00000000  00052e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000228e9  00000000  00000000  0006f751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955bc  00000000  00000000  0009203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001275f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007754  00000000  00000000  00127648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	080113fc 	.word	0x080113fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	080113fc 	.word	0x080113fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_uldivmod>:
 8001054:	b953      	cbnz	r3, 800106c <__aeabi_uldivmod+0x18>
 8001056:	b94a      	cbnz	r2, 800106c <__aeabi_uldivmod+0x18>
 8001058:	2900      	cmp	r1, #0
 800105a:	bf08      	it	eq
 800105c:	2800      	cmpeq	r0, #0
 800105e:	bf1c      	itt	ne
 8001060:	f04f 31ff 	movne.w	r1, #4294967295
 8001064:	f04f 30ff 	movne.w	r0, #4294967295
 8001068:	f000 b9ae 	b.w	80013c8 <__aeabi_idiv0>
 800106c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001074:	f000 f83e 	bl	80010f4 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fcab 	bl	80009ec <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa21 	bl	8000508 <__aeabi_dmul>
 80010c6:	f7ff fcf7 	bl	8000ab8 <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f9a2 	bl	8000414 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa18 	bl	8000508 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f85a 	bl	8000198 <__aeabi_dsub>
 80010e4:	f7ff fce8 	bl	8000ab8 <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <__udivmoddi4>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	9e08      	ldr	r6, [sp, #32]
 80010fa:	460d      	mov	r5, r1
 80010fc:	4604      	mov	r4, r0
 80010fe:	4688      	mov	r8, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d14d      	bne.n	80011a0 <__udivmoddi4+0xac>
 8001104:	428a      	cmp	r2, r1
 8001106:	4694      	mov	ip, r2
 8001108:	d968      	bls.n	80011dc <__udivmoddi4+0xe8>
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b152      	cbz	r2, 8001126 <__udivmoddi4+0x32>
 8001110:	fa01 f302 	lsl.w	r3, r1, r2
 8001114:	f1c2 0120 	rsb	r1, r2, #32
 8001118:	fa20 f101 	lsr.w	r1, r0, r1
 800111c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001120:	ea41 0803 	orr.w	r8, r1, r3
 8001124:	4094      	lsls	r4, r2
 8001126:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800112a:	fbb8 f7f1 	udiv	r7, r8, r1
 800112e:	fa1f fe8c 	uxth.w	lr, ip
 8001132:	fb01 8817 	mls	r8, r1, r7, r8
 8001136:	fb07 f00e 	mul.w	r0, r7, lr
 800113a:	0c23      	lsrs	r3, r4, #16
 800113c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001140:	4298      	cmp	r0, r3
 8001142:	d90a      	bls.n	800115a <__udivmoddi4+0x66>
 8001144:	eb1c 0303 	adds.w	r3, ip, r3
 8001148:	f107 35ff 	add.w	r5, r7, #4294967295
 800114c:	f080 811e 	bcs.w	800138c <__udivmoddi4+0x298>
 8001150:	4298      	cmp	r0, r3
 8001152:	f240 811b 	bls.w	800138c <__udivmoddi4+0x298>
 8001156:	3f02      	subs	r7, #2
 8001158:	4463      	add	r3, ip
 800115a:	1a1b      	subs	r3, r3, r0
 800115c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001160:	fb01 3310 	mls	r3, r1, r0, r3
 8001164:	fb00 fe0e 	mul.w	lr, r0, lr
 8001168:	b2a4      	uxth	r4, r4
 800116a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800116e:	45a6      	cmp	lr, r4
 8001170:	d90a      	bls.n	8001188 <__udivmoddi4+0x94>
 8001172:	eb1c 0404 	adds.w	r4, ip, r4
 8001176:	f100 33ff 	add.w	r3, r0, #4294967295
 800117a:	f080 8109 	bcs.w	8001390 <__udivmoddi4+0x29c>
 800117e:	45a6      	cmp	lr, r4
 8001180:	f240 8106 	bls.w	8001390 <__udivmoddi4+0x29c>
 8001184:	4464      	add	r4, ip
 8001186:	3802      	subs	r0, #2
 8001188:	2100      	movs	r1, #0
 800118a:	eba4 040e 	sub.w	r4, r4, lr
 800118e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001192:	b11e      	cbz	r6, 800119c <__udivmoddi4+0xa8>
 8001194:	2300      	movs	r3, #0
 8001196:	40d4      	lsrs	r4, r2
 8001198:	e9c6 4300 	strd	r4, r3, [r6]
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0xc2>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	f000 80ee 	beq.w	8001386 <__udivmoddi4+0x292>
 80011aa:	2100      	movs	r1, #0
 80011ac:	e9c6 0500 	strd	r0, r5, [r6]
 80011b0:	4608      	mov	r0, r1
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	fab3 f183 	clz	r1, r3
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d14a      	bne.n	8001254 <__udivmoddi4+0x160>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d302      	bcc.n	80011c8 <__udivmoddi4+0xd4>
 80011c2:	4282      	cmp	r2, r0
 80011c4:	f200 80fc 	bhi.w	80013c0 <__udivmoddi4+0x2cc>
 80011c8:	1a84      	subs	r4, r0, r2
 80011ca:	eb65 0303 	sbc.w	r3, r5, r3
 80011ce:	2001      	movs	r0, #1
 80011d0:	4698      	mov	r8, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d0e2      	beq.n	800119c <__udivmoddi4+0xa8>
 80011d6:	e9c6 4800 	strd	r4, r8, [r6]
 80011da:	e7df      	b.n	800119c <__udivmoddi4+0xa8>
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xec>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	f040 8091 	bne.w	800130c <__udivmoddi4+0x218>
 80011ea:	eba1 000c 	sub.w	r0, r1, ip
 80011ee:	2101      	movs	r1, #1
 80011f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f4:	fa1f fe8c 	uxth.w	lr, ip
 80011f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001200:	0c25      	lsrs	r5, r4, #16
 8001202:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001206:	fb0e f003 	mul.w	r0, lr, r3
 800120a:	42a8      	cmp	r0, r5
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x12c>
 800120e:	eb1c 0505 	adds.w	r5, ip, r5
 8001212:	f103 38ff 	add.w	r8, r3, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x12a>
 8001218:	42a8      	cmp	r0, r5
 800121a:	f200 80ce 	bhi.w	80013ba <__udivmoddi4+0x2c6>
 800121e:	4643      	mov	r3, r8
 8001220:	1a2d      	subs	r5, r5, r0
 8001222:	fbb5 f0f7 	udiv	r0, r5, r7
 8001226:	fb07 5510 	mls	r5, r7, r0, r5
 800122a:	fb0e fe00 	mul.w	lr, lr, r0
 800122e:	b2a4      	uxth	r4, r4
 8001230:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001234:	45a6      	cmp	lr, r4
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x156>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001240:	d202      	bcs.n	8001248 <__udivmoddi4+0x154>
 8001242:	45a6      	cmp	lr, r4
 8001244:	f200 80b6 	bhi.w	80013b4 <__udivmoddi4+0x2c0>
 8001248:	4628      	mov	r0, r5
 800124a:	eba4 040e 	sub.w	r4, r4, lr
 800124e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001252:	e79e      	b.n	8001192 <__udivmoddi4+0x9e>
 8001254:	f1c1 0720 	rsb	r7, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 fc07 	lsr.w	ip, r2, r7
 800125e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001262:	fa25 fa07 	lsr.w	sl, r5, r7
 8001266:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800126a:	fbba f8f9 	udiv	r8, sl, r9
 800126e:	fa20 f307 	lsr.w	r3, r0, r7
 8001272:	fb09 aa18 	mls	sl, r9, r8, sl
 8001276:	408d      	lsls	r5, r1
 8001278:	fa1f fe8c 	uxth.w	lr, ip
 800127c:	431d      	orrs	r5, r3
 800127e:	fa00 f301 	lsl.w	r3, r0, r1
 8001282:	fb08 f00e 	mul.w	r0, r8, lr
 8001286:	0c2c      	lsrs	r4, r5, #16
 8001288:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800128c:	42a0      	cmp	r0, r4
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90b      	bls.n	80012ac <__udivmoddi4+0x1b8>
 8001294:	eb1c 0404 	adds.w	r4, ip, r4
 8001298:	f108 3aff 	add.w	sl, r8, #4294967295
 800129c:	f080 8088 	bcs.w	80013b0 <__udivmoddi4+0x2bc>
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	f240 8085 	bls.w	80013b0 <__udivmoddi4+0x2bc>
 80012a6:	f1a8 0802 	sub.w	r8, r8, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	1a24      	subs	r4, r4, r0
 80012ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80012b2:	fb09 4410 	mls	r4, r9, r0, r4
 80012b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80012ba:	b2ad      	uxth	r5, r5
 80012bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x1e2>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012cc:	d26c      	bcs.n	80013a8 <__udivmoddi4+0x2b4>
 80012ce:	45a6      	cmp	lr, r4
 80012d0:	d96a      	bls.n	80013a8 <__udivmoddi4+0x2b4>
 80012d2:	3802      	subs	r0, #2
 80012d4:	4464      	add	r4, ip
 80012d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012da:	fba0 9502 	umull	r9, r5, r0, r2
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	42ac      	cmp	r4, r5
 80012e4:	46c8      	mov	r8, r9
 80012e6:	46ae      	mov	lr, r5
 80012e8:	d356      	bcc.n	8001398 <__udivmoddi4+0x2a4>
 80012ea:	d053      	beq.n	8001394 <__udivmoddi4+0x2a0>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d069      	beq.n	80013c4 <__udivmoddi4+0x2d0>
 80012f0:	ebb3 0208 	subs.w	r2, r3, r8
 80012f4:	eb64 040e 	sbc.w	r4, r4, lr
 80012f8:	fa22 f301 	lsr.w	r3, r2, r1
 80012fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001300:	431f      	orrs	r7, r3
 8001302:	40cc      	lsrs	r4, r1
 8001304:	e9c6 7400 	strd	r7, r4, [r6]
 8001308:	2100      	movs	r1, #0
 800130a:	e747      	b.n	800119c <__udivmoddi4+0xa8>
 800130c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001310:	f1c2 0120 	rsb	r1, r2, #32
 8001314:	fa25 f301 	lsr.w	r3, r5, r1
 8001318:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800131c:	fa20 f101 	lsr.w	r1, r0, r1
 8001320:	4095      	lsls	r5, r2
 8001322:	430d      	orrs	r5, r1
 8001324:	fbb3 f1f7 	udiv	r1, r3, r7
 8001328:	fb07 3311 	mls	r3, r7, r1, r3
 800132c:	fa1f fe8c 	uxth.w	lr, ip
 8001330:	0c28      	lsrs	r0, r5, #16
 8001332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001336:	fb01 f30e 	mul.w	r3, r1, lr
 800133a:	4283      	cmp	r3, r0
 800133c:	fa04 f402 	lsl.w	r4, r4, r2
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x260>
 8001342:	eb1c 0000 	adds.w	r0, ip, r0
 8001346:	f101 38ff 	add.w	r8, r1, #4294967295
 800134a:	d22f      	bcs.n	80013ac <__udivmoddi4+0x2b8>
 800134c:	4283      	cmp	r3, r0
 800134e:	d92d      	bls.n	80013ac <__udivmoddi4+0x2b8>
 8001350:	3902      	subs	r1, #2
 8001352:	4460      	add	r0, ip
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	fbb0 f3f7 	udiv	r3, r0, r7
 800135a:	fb07 0013 	mls	r0, r7, r3, r0
 800135e:	b2ad      	uxth	r5, r5
 8001360:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001364:	fb03 f00e 	mul.w	r0, r3, lr
 8001368:	42a8      	cmp	r0, r5
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x28a>
 800136c:	eb1c 0505 	adds.w	r5, ip, r5
 8001370:	f103 38ff 	add.w	r8, r3, #4294967295
 8001374:	d216      	bcs.n	80013a4 <__udivmoddi4+0x2b0>
 8001376:	42a8      	cmp	r0, r5
 8001378:	d914      	bls.n	80013a4 <__udivmoddi4+0x2b0>
 800137a:	3b02      	subs	r3, #2
 800137c:	4465      	add	r5, ip
 800137e:	1a28      	subs	r0, r5, r0
 8001380:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001384:	e738      	b.n	80011f8 <__udivmoddi4+0x104>
 8001386:	4631      	mov	r1, r6
 8001388:	4630      	mov	r0, r6
 800138a:	e707      	b.n	800119c <__udivmoddi4+0xa8>
 800138c:	462f      	mov	r7, r5
 800138e:	e6e4      	b.n	800115a <__udivmoddi4+0x66>
 8001390:	4618      	mov	r0, r3
 8001392:	e6f9      	b.n	8001188 <__udivmoddi4+0x94>
 8001394:	454b      	cmp	r3, r9
 8001396:	d2a9      	bcs.n	80012ec <__udivmoddi4+0x1f8>
 8001398:	ebb9 0802 	subs.w	r8, r9, r2
 800139c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013a0:	3801      	subs	r0, #1
 80013a2:	e7a3      	b.n	80012ec <__udivmoddi4+0x1f8>
 80013a4:	4643      	mov	r3, r8
 80013a6:	e7ea      	b.n	800137e <__udivmoddi4+0x28a>
 80013a8:	4628      	mov	r0, r5
 80013aa:	e794      	b.n	80012d6 <__udivmoddi4+0x1e2>
 80013ac:	4641      	mov	r1, r8
 80013ae:	e7d1      	b.n	8001354 <__udivmoddi4+0x260>
 80013b0:	46d0      	mov	r8, sl
 80013b2:	e77b      	b.n	80012ac <__udivmoddi4+0x1b8>
 80013b4:	4464      	add	r4, ip
 80013b6:	3802      	subs	r0, #2
 80013b8:	e747      	b.n	800124a <__udivmoddi4+0x156>
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4465      	add	r5, ip
 80013be:	e72f      	b.n	8001220 <__udivmoddi4+0x12c>
 80013c0:	4608      	mov	r0, r1
 80013c2:	e706      	b.n	80011d2 <__udivmoddi4+0xde>
 80013c4:	4631      	mov	r1, r6
 80013c6:	e6e9      	b.n	800119c <__udivmoddi4+0xa8>

080013c8 <__aeabi_idiv0>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <deviceInit>:
#include <stdio.h>

//extern DATA data;
extern DEVICE device;

void deviceInit(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	sprintf((char *)device.id,"%s","+84123456789");
 80013d0:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <deviceInit+0x1c>)
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <deviceInit+0x20>)
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <deviceInit+0x24>)
 80013d6:	f00c fb41 	bl	800da5c <siprintf>
	sprintf((char *)device.url,"%s","https://rain-4a16a-default-rtdb.firebaseio.com/test2.json");
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <deviceInit+0x28>)
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <deviceInit+0x20>)
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <deviceInit+0x2c>)
 80013e0:	f00c fb3c 	bl	800da5c <siprintf>
};
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08011418 	.word	0x08011418
 80013ec:	08011428 	.word	0x08011428
 80013f0:	2000072c 	.word	0x2000072c
 80013f4:	0801142c 	.word	0x0801142c
 80013f8:	2000073b 	.word	0x2000073b

080013fc <dataCounter>:

MODE dataCounter()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	extern DATA data;
	DATA_STATUS status = dataGetTime(&data);
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <dataCounter+0x38>)
 8001404:	f00a fcca 	bl	800bd9c <dataGetTime>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	if (status == DATA_STOP)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <dataCounter+0x1a>
	{
		return FINISH;
 8001412:	2302      	movs	r3, #2
 8001414:	e00a      	b.n	800142c <dataCounter+0x30>
	};
	if (status == DATA_WAITE)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d101      	bne.n	8001420 <dataCounter+0x24>
	{
		return WAITE_MODE;
 800141c:	2300      	movs	r3, #0
 800141e:	e005      	b.n	800142c <dataCounter+0x30>
	};
	if (status == DATA_RUN)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <dataCounter+0x2e>
	{
		return RUN_MODE;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <dataCounter+0x30>
	};
	return WAITE_MODE;
 800142a:	2300      	movs	r3, #0
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003d0 	.word	0x200003d0

08001438 <start>:
SD_CARD_STATUS sdStatus;

uint8_t flagButtion = 0;

void start()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    setup_moniter();
 800143c:	f00a fdd2 	bl	800bfe4 <setup_moniter>
    //moniter_begin();
    deviceInit();
 8001440:	f7ff ffc4 	bl	80013cc <deviceInit>
    dataInit();
 8001444:	f00a fc7e 	bl	800bd44 <dataInit>
    startSIM();
 8001448:	f00b fa16 	bl	800c878 <startSIM>
    checkMode = RUN;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <start+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    simStatus = simInit();
 8001452:	f00b fa25 	bl	800c8a0 <simInit>
 8001456:	4603      	mov	r3, r0
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <start+0x50>)
 800145c:	701a      	strb	r2, [r3, #0]
    sdStatus = SD_Init();
 800145e:	f00b f9af 	bl	800c7c0 <SD_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <start+0x54>)
 8001468:	701a      	strb	r2, [r3, #0]
    initCounter(&data);
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <start+0x58>)
 800146c:	f00a fc58 	bl	800bd20 <initCounter>
    home_moniter(simStatus, sdStatus, &data);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <start+0x50>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <start+0x54>)
 8001476:	7811      	ldrb	r1, [r2, #0]
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <start+0x58>)
 800147a:	4618      	mov	r0, r3
 800147c:	f00a fdf6 	bl	800c06c <home_moniter>
};
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	2000022c 	.word	0x2000022c
 800148c:	2000022d 	.word	0x2000022d
 8001490:	200003d0 	.word	0x200003d0

08001494 <maincontroller>:

void maincontroller()
{
 8001494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001498:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800149c:	af0c      	add	r7, sp, #48	; 0x30
    MODE status = WAITE_MODE;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
    if (checkMode == RUN)
 80014a4:	4ba3      	ldr	r3, [pc, #652]	; (8001734 <maincontroller+0x2a0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <maincontroller+0x22>
    {
        status = dataCounter();
 80014ac:	f7ff ffa6 	bl	80013fc <dataCounter>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
    }
    if (status == WAITE_MODE)
    {
    }

    if (status == FINISH)
 80014b6:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 80ad 	bne.w	800161a <maincontroller+0x186>
    {
    	char forder[10] = {0};
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80014c6:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	809a      	strh	r2, [r3, #4]
    	char file[10] = {0};
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80014d6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	809a      	strh	r2, [r3, #4]
    	char timeSend[50] = {0};
 80014e0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80014e4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	222e      	movs	r2, #46	; 0x2e
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00b fad6 	bl	800caa4 <memset>
    	char bufferData[500] = {0};
 80014f8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80014fc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f00b fac9 	bl	800caa4 <memset>
        
        SIM checkSimStatus = SIM_STATUS_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256

        checkMode = STOP;
 8001518:	4b86      	ldr	r3, [pc, #536]	; (8001734 <maincontroller+0x2a0>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
        handleData();
 800151e:	f00a fcf5 	bl	800bf0c <handleData>

        getDateTime(&realtimedata);
 8001522:	4885      	ldr	r0, [pc, #532]	; (8001738 <maincontroller+0x2a4>)
 8001524:	f00b f9dc 	bl	800c8e0 <getDateTime>
        getRealTime(&realtimedata);
 8001528:	4883      	ldr	r0, [pc, #524]	; (8001738 <maincontroller+0x2a4>)
 800152a:	f00b fa1f 	bl	800c96c <getRealTime>
        memcpy(forder, (char *)&realtimedata.dateTime, 8);
 800152e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001532:	2208      	movs	r2, #8
 8001534:	4980      	ldr	r1, [pc, #512]	; (8001738 <maincontroller+0x2a4>)
 8001536:	4618      	mov	r0, r3
 8001538:	f00b faa6 	bl	800ca88 <memcpy>
        memcpy(file, (char *)&realtimedata.realTime, 8);
 800153c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001540:	2208      	movs	r2, #8
 8001542:	497e      	ldr	r1, [pc, #504]	; (800173c <maincontroller+0x2a8>)
 8001544:	4618      	mov	r0, r3
 8001546:	f00b fa9f 	bl	800ca88 <memcpy>

        sprintf(timeSend, "DATE %s-TIME %s", forder, file);
 800154a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800154e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001552:	f107 0014 	add.w	r0, r7, #20
 8001556:	497a      	ldr	r1, [pc, #488]	; (8001740 <maincontroller+0x2ac>)
 8001558:	f00c fa80 	bl	800da5c <siprintf>

        sprintf(bufferData , "{\"id\":\"%s\",\"time\":\"%s\",\"count\":\"%lu\",\"hour\":\"%lu\",\"minute\":\"%lu\",\"second\":\"%lu\",\"Distance high\":\"%.2f\",\"Distance\":\"%.2f\",\"flow water\":\"%.2f\",\"percent\":\"%.2f\"}", device.id, timeSend, data.count, data.hour, data.minute, data.second, data.Distance_high, data.Distance, data.Flow_warter, data.percent);
 800155c:	4b79      	ldr	r3, [pc, #484]	; (8001744 <maincontroller+0x2b0>)
 800155e:	681e      	ldr	r6, [r3, #0]
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <maincontroller+0x2b0>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <maincontroller+0x2b0>)
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	60ba      	str	r2, [r7, #8]
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <maincontroller+0x2b0>)
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	6079      	str	r1, [r7, #4]
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <maincontroller+0x2b0>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff6e 	bl	8000458 <__aeabi_f2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <maincontroller+0x2b0>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff67 	bl	8000458 <__aeabi_f2d>
 800158a:	4680      	mov	r8, r0
 800158c:	4689      	mov	r9, r1
 800158e:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <maincontroller+0x2b0>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff60 	bl	8000458 <__aeabi_f2d>
 8001598:	4682      	mov	sl, r0
 800159a:	468b      	mov	fp, r1
 800159c:	4b69      	ldr	r3, [pc, #420]	; (8001744 <maincontroller+0x2b0>)
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff59 	bl	8000458 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	f107 0114 	add.w	r1, r7, #20
 80015ae:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80015b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80015b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80015ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80015be:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80015c2:	687c      	ldr	r4, [r7, #4]
 80015c4:	9403      	str	r4, [sp, #12]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	9202      	str	r2, [sp, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9600      	str	r6, [sp, #0]
 80015d0:	460b      	mov	r3, r1
 80015d2:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <maincontroller+0x2b4>)
 80015d4:	495d      	ldr	r1, [pc, #372]	; (800174c <maincontroller+0x2b8>)
 80015d6:	f00c fa41 	bl	800da5c <siprintf>

        SD_CARD_STATUS checkSdStatus = SD_CreatFile(forder, file, bufferData);
 80015da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015de:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80015e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00b f8fc 	bl	800c7e4 <SD_CreatFile>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
        if (checkSdStatus == SD_CARD_OK)
 80015f2:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <maincontroller+0x176>
        {
            checkSimStatus = sendDataFirebase(bufferData);
 80015fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015fe:	4618      	mov	r0, r3
 8001600:	f00b f9fc 	bl	800c9fc <sendDataFirebase>
 8001604:	4603      	mov	r3, r0
 8001606:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        }
        finish_moniter(&data, checkSimStatus, checkSdStatus);
 800160a:	f897 2255 	ldrb.w	r2, [r7, #597]	; 0x255
 800160e:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8001612:	4619      	mov	r1, r3
 8001614:	484b      	ldr	r0, [pc, #300]	; (8001744 <maincontroller+0x2b0>)
 8001616:	f00a feb9 	bl	800c38c <finish_moniter>
    }

    if (ButtionOn == 1)
 800161a:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <maincontroller+0x2bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <maincontroller+0x192>
    {
        HAL_NVIC_SystemReset();
 8001622:	f001 f91c 	bl	800285e <HAL_NVIC_SystemReset>
        // sdStatus = SD_Init();
        // dataInit();
        // home_moniter(simStatus, sdStatus, &data);
    }

    if (ButtionOn == 2)
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <maincontroller+0x2bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d108      	bne.n	8001640 <maincontroller+0x1ac>
    {
        ButtionOn = 0;
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <maincontroller+0x2bc>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
        flagButtion = 0;
 8001634:	4b47      	ldr	r3, [pc, #284]	; (8001754 <maincontroller+0x2c0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
        deviceInformatio(&device);
 800163a:	4843      	ldr	r0, [pc, #268]	; (8001748 <maincontroller+0x2b4>)
 800163c:	f00a fff0 	bl	800c620 <deviceInformatio>
    }
    if (ButtionOn == 3 && flagButtion == 1)
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <maincontroller+0x2bc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d114      	bne.n	8001672 <maincontroller+0x1de>
 8001648:	4b42      	ldr	r3, [pc, #264]	; (8001754 <maincontroller+0x2c0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d110      	bne.n	8001672 <maincontroller+0x1de>
    {
        ButtionOn = 0;
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <maincontroller+0x2bc>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
        data.Distance_high = data.Distance_high + 0.5;
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <maincontroller+0x2b0>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff faa0 	bl	8000ba4 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <maincontroller+0x2b0>)
 800166a:	61da      	str	r2, [r3, #28]
        dataConfigure(&data);
 800166c:	4835      	ldr	r0, [pc, #212]	; (8001744 <maincontroller+0x2b0>)
 800166e:	f00b f82b 	bl	800c6c8 <dataConfigure>
    }
    if (ButtionOn == 4 && flagButtion == 1)
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <maincontroller+0x2bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b04      	cmp	r3, #4
 8001678:	d117      	bne.n	80016aa <maincontroller+0x216>
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <maincontroller+0x2c0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d113      	bne.n	80016aa <maincontroller+0x216>
    {
        flagButtion = 1;
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <maincontroller+0x2c0>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
        ButtionOn = 0;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <maincontroller+0x2bc>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
        data.Distance_high = data.Distance_high - 0.5;
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <maincontroller+0x2b0>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fa82 	bl	8000ba0 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <maincontroller+0x2b0>)
 80016a2:	61da      	str	r2, [r3, #28]
        dataConfigure(&data);
 80016a4:	4827      	ldr	r0, [pc, #156]	; (8001744 <maincontroller+0x2b0>)
 80016a6:	f00b f80f 	bl	800c6c8 <dataConfigure>
    }
    if (ButtionOn == 5)
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <maincontroller+0x2bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d108      	bne.n	80016c4 <maincontroller+0x230>
    {
        ButtionOn = 0;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <maincontroller+0x2bc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
        flagButtion = 1;
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <maincontroller+0x2c0>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
        dataConfigure(&data);
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <maincontroller+0x2b0>)
 80016c0:	f00b f802 	bl	800c6c8 <dataConfigure>
    }
    if (ButtionOn == 6 && flagButtion == 1)
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <maincontroller+0x2bc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d114      	bne.n	80016f6 <maincontroller+0x262>
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <maincontroller+0x2c0>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d110      	bne.n	80016f6 <maincontroller+0x262>
    {
        ButtionOn = 0;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <maincontroller+0x2bc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
        data.Distance = data.Distance + 0.5;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <maincontroller+0x2b0>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa5e 	bl	8000ba4 <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <maincontroller+0x2b0>)
 80016ee:	621a      	str	r2, [r3, #32]
        dataConfigure(&data);
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <maincontroller+0x2b0>)
 80016f2:	f00a ffe9 	bl	800c6c8 <dataConfigure>
    }
    if (ButtionOn == 7 && flagButtion == 1)
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <maincontroller+0x2bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d114      	bne.n	8001728 <maincontroller+0x294>
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <maincontroller+0x2c0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d110      	bne.n	8001728 <maincontroller+0x294>
    {
        ButtionOn = 0;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <maincontroller+0x2bc>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
        data.Distance = data.Distance - 0.5;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <maincontroller+0x2b0>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fa43 	bl	8000ba0 <__aeabi_fsub>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <maincontroller+0x2b0>)
 8001720:	621a      	str	r2, [r3, #32]
        dataConfigure(&data);
 8001722:	4808      	ldr	r0, [pc, #32]	; (8001744 <maincontroller+0x2b0>)
 8001724:	f00a ffd0 	bl	800c6c8 <dataConfigure>
    }
}
 8001728:	bf00      	nop
 800172a:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 800172e:	46bd      	mov	sp, r7
 8001730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000804 	.word	0x20000804
 800173c:	2000080e 	.word	0x2000080e
 8001740:	08011468 	.word	0x08011468
 8001744:	200003d0 	.word	0x200003d0
 8001748:	2000072c 	.word	0x2000072c
 800174c:	08011478 	.word	0x08011478
 8001750:	2000081a 	.word	0x2000081a
 8001754:	2000022e 	.word	0x2000022e

08001758 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
uint8_t gettick;
uint8_t time;
uint8_t ButtionOn = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  gettick = HAL_GetTick();
 8001762:	f000 ff39 	bl	80025d8 <HAL_GetTick>
 8001766:	4603      	mov	r3, r0
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_GPIO_EXTI_Callback+0xfc>)
 800176c:	701a      	strb	r2, [r3, #0]
  //if (gettick - time > 20)
  {
    switch (GPIO_PIN)
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b20      	cmp	r3, #32
 8001772:	dc47      	bgt.n	8001804 <HAL_GPIO_EXTI_Callback+0xac>
 8001774:	2b00      	cmp	r3, #0
 8001776:	dd63      	ble.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
 8001778:	3b01      	subs	r3, #1
 800177a:	2b1f      	cmp	r3, #31
 800177c:	d860      	bhi.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001839 	.word	0x08001839
 8001788:	08001831 	.word	0x08001831
 800178c:	08001841 	.word	0x08001841
 8001790:	08001829 	.word	0x08001829
 8001794:	08001841 	.word	0x08001841
 8001798:	08001841 	.word	0x08001841
 800179c:	08001841 	.word	0x08001841
 80017a0:	08001821 	.word	0x08001821
 80017a4:	08001841 	.word	0x08001841
 80017a8:	08001841 	.word	0x08001841
 80017ac:	08001841 	.word	0x08001841
 80017b0:	08001841 	.word	0x08001841
 80017b4:	08001841 	.word	0x08001841
 80017b8:	08001841 	.word	0x08001841
 80017bc:	08001841 	.word	0x08001841
 80017c0:	08001819 	.word	0x08001819
 80017c4:	08001841 	.word	0x08001841
 80017c8:	08001841 	.word	0x08001841
 80017cc:	08001841 	.word	0x08001841
 80017d0:	08001841 	.word	0x08001841
 80017d4:	08001841 	.word	0x08001841
 80017d8:	08001841 	.word	0x08001841
 80017dc:	08001841 	.word	0x08001841
 80017e0:	08001841 	.word	0x08001841
 80017e4:	08001841 	.word	0x08001841
 80017e8:	08001841 	.word	0x08001841
 80017ec:	08001841 	.word	0x08001841
 80017f0:	08001841 	.word	0x08001841
 80017f4:	08001841 	.word	0x08001841
 80017f8:	08001841 	.word	0x08001841
 80017fc:	08001841 	.word	0x08001841
 8001800:	08001811 	.word	0x08001811
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d11b      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    {
    case BUTTION7:
      ButtionOn = 1;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e017      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION6:
      ButtionOn = 2;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e013      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION5:
      ButtionOn = 3;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e00f      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION4:
      ButtionOn = 4;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 8001822:	2204      	movs	r2, #4
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e00b      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION3:
      ButtionOn = 5;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 800182a:	2205      	movs	r2, #5
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	e007      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION2:
      ButtionOn = 6;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 8001832:	2206      	movs	r2, #6
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e003      	b.n	8001840 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION1:
      ButtionOn = 7;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_GPIO_EXTI_Callback+0x100>)
 800183a:	2207      	movs	r2, #7
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	bf00      	nop
    }
    time = HAL_GetTick();
 8001840:	f000 feca 	bl	80025d8 <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_GPIO_EXTI_Callback+0x104>)
 800184a:	701a      	strb	r2, [r3, #0]
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000818 	.word	0x20000818
 8001858:	2000081a 	.word	0x2000081a
 800185c:	20000819 	.word	0x20000819

08001860 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e1b      	ldrb	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d111      	bne.n	8001894 <HAL_TIM_IC_CaptureCallback+0x34>
  {
    data.countTime = evenMode(&data, RUN_TIME);
 8001870:	2102      	movs	r1, #2
 8001872:	480a      	ldr	r0, [pc, #40]	; (800189c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001874:	f00a fa7a 	bl	800bd6c <evenMode>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_TIM_IC_CaptureCallback+0x3c>)
 800187e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    data.evenMode = countTime(&data, RUN_COUNT);
 8001882:	2100      	movs	r1, #0
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001886:	f00a fa7d 	bl	800bd84 <countTime>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001890:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200003d0 	.word	0x200003d0

080018a0 <HAL_UARTEx_RxEventCallback>:

 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
   sim.rxFlag = SIMTRUE;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_UARTEx_RxEventCallback+0x30>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
   SIM_StatusTypeDef status = SIM_BUSY;
 80018b2:	2303      	movs	r3, #3
 80018b4:	73fb      	strb	r3, [r7, #15]
   HAL_UARTEx_ReceiveToIdle_DMA(sim.UART, (uint8_t *)sim.rxBuffer,
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_UARTEx_RxEventCallback+0x30>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018be:	4905      	ldr	r1, [pc, #20]	; (80018d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 f9a8 	bl	8005c16 <HAL_UARTEx_ReceiveToIdle_DMA>
                                SIM_BUFFER_SIZE);
 }
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000400 	.word	0x20000400
 80018d4:	2000040c 	.word	0x2000040c

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018dc:	f000 fe0a 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e0:	f000 f81c 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e4:	f000 f9e2 	bl	8001cac <MX_GPIO_Init>
  MX_DMA_Init();
 80018e8:	f000 f9c2 	bl	8001c70 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018ec:	f000 f996 	bl	8001c1c <MX_USART1_UART_Init>
  MX_RTC_Init();
 80018f0:	f000 f878 	bl	80019e4 <MX_RTC_Init>
  MX_SPI1_Init();
 80018f4:	f000 f8d0 	bl	8001a98 <MX_SPI1_Init>
  MX_SPI3_Init();
 80018f8:	f000 f906 	bl	8001b08 <MX_SPI3_Init>
  MX_TIM4_Init();
 80018fc:	f000 f93a 	bl	8001b74 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001900:	f005 f948 	bl	8006b94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  start();
 8001904:	f7ff fd98 	bl	8001438 <start>

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <main+0x40>)
 800190c:	f003 fbec 	bl	80050e8 <HAL_TIM_OC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    maincontroller();
 8001910:	f7ff fdc0 	bl	8001494 <maincontroller>
 8001914:	e7fc      	b.n	8001910 <main+0x38>
 8001916:	bf00      	nop
 8001918:	20000300 	.word	0x20000300

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f00b f8ba 	bl	800caa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <SystemClock_Config+0xc4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <SystemClock_Config+0xc4>)
 8001952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001956:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001958:	2306      	movs	r3, #6
 800195a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001970:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fcbf 	bl	8003304 <HAL_RCC_OscConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800198c:	f000 fa62 	bl	8001e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001990:	230f      	movs	r3, #15
 8001992:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001994:	2303      	movs	r3, #3
 8001996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 ffda 	bl	8003964 <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019b6:	f000 fa4d 	bl	8001e54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019ba:	2301      	movs	r3, #1
 80019bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fa50 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80019d2:	f000 fa3f 	bl	8001e54 <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3750      	adds	r7, #80	; 0x50
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019f8:	2300      	movs	r3, #0
 80019fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <MX_RTC_Init+0xac>)
 80019fe:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <MX_RTC_Init+0xb0>)
 8001a00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a0a:	227f      	movs	r2, #127	; 0x7f
 8001a0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	481a      	ldr	r0, [pc, #104]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a28:	f002 faf0 	bl	800400c <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a32:	f000 fa0f 	bl	8001e54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8001a3e:	231e      	movs	r3, #30
 8001a40:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480f      	ldr	r0, [pc, #60]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a52:	f002 fb5e 	bl	8004112 <HAL_RTC_SetTime>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001a5c:	f000 f9fa 	bl	8001e54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a64:	2301      	movs	r3, #1
 8001a66:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_RTC_Init+0xac>)
 8001a78:	f002 fc43 	bl	8004302 <HAL_RTC_SetDate>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001a82:	f000 f9e7 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000230 	.word	0x20000230
 8001a94:	40002800 	.word	0x40002800

08001a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <MX_SPI1_Init+0x6c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001aac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001aec:	f002 fd97 	bl	800461e <HAL_SPI_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001af6:	f000 f9ad 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000250 	.word	0x20000250
 8001b04:	40013000 	.word	0x40013000

08001b08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <MX_SPI3_Init+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b3c:	2218      	movs	r2, #24
 8001b3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b54:	220a      	movs	r2, #10
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	; (8001b6c <MX_SPI3_Init+0x64>)
 8001b5a:	f002 fd60 	bl	800461e <HAL_SPI_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001b64:	f000 f976 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200002a8 	.word	0x200002a8
 8001b70:	40003c00 	.word	0x40003c00

08001b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <MX_TIM4_Init+0xa4>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001b98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bb8:	4816      	ldr	r0, [pc, #88]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001bba:	f003 fb77 	bl	80052ac <HAL_TIM_IC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f946 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001bd8:	f003 feec 	bl	80059b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001be2:	f000 f937 	bl	8001e54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001be6:	2302      	movs	r3, #2
 8001be8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bea:	2301      	movs	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_TIM4_Init+0xa0>)
 8001bfe:	f003 fc70 	bl	80054e2 <HAL_TIM_IC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c08:	f000 f924 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000300 	.word	0x20000300
 8001c18:	40000800 	.word	0x40000800

08001c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART1_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c54:	f003 ff0c 	bl	8005a70 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f8f9 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000340 	.word	0x20000340
 8001c6c:	40013800 	.word	0x40013800

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_DMA_Init+0x38>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <MX_DMA_Init+0x38>)
 8001c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_DMA_Init+0x38>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 fdb9 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c98:	200f      	movs	r0, #15
 8001c9a:	f000 fdd2 	bl	8002842 <HAL_NVIC_EnableIRQ>

}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a5e      	ldr	r2, [pc, #376]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <MX_GPIO_Init+0x194>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_Pin|RI_Pin|DETEC_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f248 0106 	movw	r1, #32774	; 0x8006
 8001d28:	4846      	ldr	r0, [pc, #280]	; (8001e44 <MX_GPIO_Init+0x198>)
 8001d2a:	f001 fabb 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|RST_SIM_Pin|FLIGHT_Pin|PWRKEY_Pin
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f24f 0198 	movw	r1, #61592	; 0xf098
 8001d34:	4844      	ldr	r0, [pc, #272]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001d36:	f001 fab5 	bl	80032a4 <HAL_GPIO_WritePin>
                          |DC_Pin|RST_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	4843      	ldr	r0, [pc, #268]	; (8001e4c <MX_GPIO_Init+0x1a0>)
 8001d40:	f001 fab0 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8001d48:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	483d      	ldr	r0, [pc, #244]	; (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d5a:	f001 f923 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT3_Pin BT4_Pin BT5_Pin
                           BT6_Pin BT7_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT3_Pin|BT4_Pin|BT5_Pin
 8001d5e:	237e      	movs	r3, #126	; 0x7e
 8001d60:	617b      	str	r3, [r7, #20]
                          |BT6_Pin|BT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4837      	ldr	r0, [pc, #220]	; (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d74:	f001 f916 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_Pin RI_Pin DETEC_Pin */
  GPIO_InitStruct.Pin = DTR_Pin|RI_Pin|DETEC_Pin;
 8001d78:	f248 0306 	movw	r3, #32774	; 0x8006
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	482c      	ldr	r0, [pc, #176]	; (8001e44 <MX_GPIO_Init+0x198>)
 8001d92:	f001 f907 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_Pin RST_SIM_Pin FLIGHT_Pin PWRKEY_Pin
                           DC_Pin RST_Pin CS_Pin */
  GPIO_InitStruct.Pin = PWR_Pin|RST_SIM_Pin|FLIGHT_Pin|PWRKEY_Pin
 8001d96:	f24f 0398 	movw	r3, #61592	; 0xf098
 8001d9a:	617b      	str	r3, [r7, #20]
                          |DC_Pin|RST_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4826      	ldr	r0, [pc, #152]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001db0:	f001 f8f8 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCS_Pin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8001db4:	2304      	movs	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4820      	ldr	r0, [pc, #128]	; (8001e4c <MX_GPIO_Init+0x1a0>)
 8001dcc:	f001 f8ea 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <MX_GPIO_Init+0x19c>)
 8001de4:	f001 f8de 	bl	8002fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2007      	movs	r0, #7
 8001dee:	f000 fd0c 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001df2:	2007      	movs	r0, #7
 8001df4:	f000 fd25 	bl	8002842 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2008      	movs	r0, #8
 8001dfe:	f000 fd04 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e02:	2008      	movs	r0, #8
 8001e04:	f000 fd1d 	bl	8002842 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2009      	movs	r0, #9
 8001e0e:	f000 fcfc 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e12:	2009      	movs	r0, #9
 8001e14:	f000 fd15 	bl	8002842 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f000 fcf4 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e22:	200a      	movs	r0, #10
 8001e24:	f000 fd0d 	bl	8002842 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2017      	movs	r0, #23
 8001e2e:	f000 fcec 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e32:	2017      	movs	r0, #23
 8001e34:	f000 fd05 	bl	8002842 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40020800 	.word	0x40020800

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <Error_Handler+0x8>
	...

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e70:	6253      	str	r3, [r2, #36]	; 0x24
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_MspInit+0x78>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_MspInit+0x78>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2004      	movs	r0, #4
 8001eb4:	f000 fca9 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f000 fcc2 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2005      	movs	r0, #5
 8001ec4:	f000 fca1 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ec8:	2005      	movs	r0, #5
 8001eca:	f000 fcba 	bl	8002842 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_RTC_MspInit+0x24>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d102      	bne.n	8001ef4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RTC_MspInit+0x28>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40002800 	.word	0x40002800
 8001f04:	424706d8 	.word	0x424706d8

08001f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_SPI_MspInit+0xf8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d130      	bne.n	8001f8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a35      	ldr	r2, [pc, #212]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f5a:	23a0      	movs	r3, #160	; 0xa0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <HAL_SPI_MspInit+0x100>)
 8001f76:	f001 f815 	bl	8002fa4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2023      	movs	r0, #35	; 0x23
 8001f80:	f000 fc43 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f84:	2023      	movs	r0, #35	; 0x23
 8001f86:	f000 fc5c 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f8a:	e035      	b.n	8001ff8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_SPI_MspInit+0x104>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d130      	bne.n	8001ff8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa0:	6253      	str	r3, [r2, #36]	; 0x24
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_SPI_MspInit+0xfc>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fd8:	2306      	movs	r3, #6
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480b      	ldr	r0, [pc, #44]	; (8002010 <HAL_SPI_MspInit+0x108>)
 8001fe4:	f000 ffde 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	202f      	movs	r0, #47	; 0x2f
 8001fee:	f000 fc0c 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ff2:	202f      	movs	r0, #47	; 0x2f
 8001ff4:	f000 fc25 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40013000 	.word	0x40013000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40003c00 	.word	0x40003c00
 8002010:	40020800 	.word	0x40020800

08002014 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_TIM_IC_MspInit+0x8c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12f      	bne.n	8002096 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6253      	str	r3, [r2, #36]	; 0x24
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_TIM_IC_MspInit+0x90>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002076:	2302      	movs	r3, #2
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_TIM_IC_MspInit+0x94>)
 8002082:	f000 ff8f 	bl	8002fa4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2101      	movs	r1, #1
 800208a:	201e      	movs	r0, #30
 800208c:	f000 fbbd 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002090:	201e      	movs	r0, #30
 8002092:	f000 fbd6 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <HAL_UART_MspInit+0xd8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d156      	bne.n	800217c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a2d      	ldr	r2, [pc, #180]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_UART_MspInit+0xdc>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80020fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002110:	2307      	movs	r3, #7
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	481c      	ldr	r0, [pc, #112]	; (800218c <HAL_UART_MspInit+0xe0>)
 800211c:	f000 ff42 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_UART_MspInit+0xe8>)
 8002124:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_UART_MspInit+0xe4>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_UART_MspInit+0xe4>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_UART_MspInit+0xe4>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002152:	f000 fb95 	bl	8002880 <HAL_DMA_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800215c:	f7ff fe7a 	bl	8001e54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_UART_MspInit+0xe4>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2025      	movs	r0, #37	; 0x25
 8002172:	f000 fb4a 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002176:	2025      	movs	r0, #37	; 0x25
 8002178:	f000 fb63 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40013800 	.word	0x40013800
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	20000388 	.word	0x20000388
 8002194:	40026058 	.word	0x40026058

08002198 <SDTimer_Handler>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <SDTimer_Handler+0x3c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <SDTimer_Handler+0x1c>
		Timer1--;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <SDTimer_Handler+0x3c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <SDTimer_Handler+0x3c>)
 80021b2:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <SDTimer_Handler+0x40>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <SDTimer_Handler+0x34>
		Timer2--;
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SDTimer_Handler+0x40>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <SDTimer_Handler+0x40>)
 80021ca:	701a      	strb	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	2000081c 	.word	0x2000081c
 80021d8:	2000081d 	.word	0x2000081d

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021e0:	e7fe      	b.n	80021e0 <NMI_Handler+0x4>

080021e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <MemManage_Handler+0x4>

080021ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <SysTick_Handler+0x30>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <SysTick_Handler+0x30>)
 8002230:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <SysTick_Handler+0x30>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b09      	cmp	r3, #9
 800223a:	d904      	bls.n	8002246 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Handler+0x30>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002242:	f7ff ffa9 	bl	8002198 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 f9b5 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000081b 	.word	0x2000081b

08002254 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002258:	f000 fd42 	bl	8002ce0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 8002270:	2002      	movs	r0, #2
 8002272:	f001 f82f 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}

0800227a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT3_Pin);
 800227e:	2004      	movs	r0, #4
 8002280:	f001 f828 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT4_Pin);
 800228c:	2008      	movs	r0, #8
 800228e:	f001 f821 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}

08002296 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT5_Pin);
 800229a:	2010      	movs	r0, #16
 800229c:	f001 f81a 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Channel5_IRQHandler+0x10>)
 80022aa:	f000 fc3b 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000388 	.word	0x20000388

080022b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT6_Pin);
 80022bc:	2020      	movs	r0, #32
 80022be:	f001 f809 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT7_Pin);
 80022c2:	2040      	movs	r0, #64	; 0x40
 80022c4:	f001 f806 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM4_IRQHandler+0x10>)
 80022d2:	f003 f82a 	bl	800532a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000300 	.word	0x20000300

080022e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <SPI1_IRQHandler+0x10>)
 80022e6:	f002 fd17 	bl	8004d18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000250 	.word	0x20000250

080022f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <USART1_IRQHandler+0x10>)
 80022fa:	f003 fce9 	bl	8005cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000340 	.word	0x20000340

08002308 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <SPI3_IRQHandler+0x10>)
 800230e:	f002 fd03 	bl	8004d18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002a8 	.word	0x200002a8

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <_kill>:

int _kill(int pid, int sig)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002334:	f00a fb76 	bl	800ca24 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	2216      	movs	r2, #22
 800233c:	601a      	str	r2, [r3, #0]
  return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_exit>:

void _exit (int status)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002352:	f04f 31ff 	mov.w	r1, #4294967295
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffe7 	bl	800232a <_kill>
  while (1) {}    /* Make sure we hang here */
 800235c:	e7fe      	b.n	800235c <_exit+0x12>

0800235e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e00a      	b.n	8002386 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002370:	f3af 8000 	nop.w
 8002374:	4601      	mov	r1, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	60ba      	str	r2, [r7, #8]
 800237c:	b2ca      	uxtb	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbf0      	blt.n	8002370 <_read+0x12>
  }

  return len;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e009      	b.n	80023be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dbf1      	blt.n	80023aa <_write+0x12>
  }
  return len;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_close>:

int _close(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f6:	605a      	str	r2, [r3, #4]
  return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <_isatty>:

int _isatty(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800240c:	2301      	movs	r3, #1
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
     __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f00a fae0 	bl	800ca24 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20008000 	.word	0x20008000
 8002490:	00000800 	.word	0x00000800
 8002494:	20000820 	.word	0x20000820
 8002498:	200013d8 	.word	0x200013d8

0800249c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
	    bl  SystemInit
 80024a8:	f7ff fff8 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ae:	490c      	ldr	r1, [pc, #48]	; (80024e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024b0:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024c4:	4c09      	ldr	r4, [pc, #36]	; (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f00a faad 	bl	800ca30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d6:	f7ff f9ff 	bl	80018d8 <main>
  bx lr
 80024da:	4770      	bx	lr
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80024e4:	0801312c 	.word	0x0801312c
  ldr r2, =_sbss
 80024e8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80024ec:	200013d8 	.word	0x200013d8

080024f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_IRQHandler>
	...

080024f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71fb      	strb	r3, [r7, #7]

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_Init+0x48>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_Init+0x48>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_Init+0x48>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_Init+0x48>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002516:	2003      	movs	r0, #3
 8002518:	f000 f96c 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f80f 	bl	8002540 <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_Init+0x3a>
  {
    status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	e001      	b.n	8002532 <HAL_Init+0x3e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800252e:	f7ff fc97 	bl	8001e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002532:	79fb      	ldrb	r3, [r7, #7]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023c00 	.word	0x40023c00

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_InitTick+0x68>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d022      	beq.n	800259a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_InitTick+0x6c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_InitTick+0x68>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002560:	fbb1 f3f3 	udiv	r3, r1, r3
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f97c 	bl	8002866 <HAL_SYSTICK_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	d809      	bhi.n	800258e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257a:	2200      	movs	r2, #0
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	f000 f942 	bl	800280a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_InitTick+0x70>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e007      	b.n	800259e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e004      	b.n	800259e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e001      	b.n	800259e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	20000004 	.word	0x20000004
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_IncTick+0x1c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_IncTick+0x20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_IncTick+0x1c>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000824 	.word	0x20000824
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <HAL_GetTick+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000824 	.word	0x20000824

080025ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d004      	beq.n	8002610 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_Delay+0x40>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002610:	bf00      	nop
 8002612:	f7ff ffe1 	bl	80025d8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	429a      	cmp	r2, r3
 8002620:	d8f7      	bhi.n	8002612 <HAL_Delay+0x26>
  {
  }
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000000c 	.word	0x2000000c

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4906      	ldr	r1, [pc, #24]	; (80026c8 <__NVIC_EnableIRQ+0x34>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002788:	f3bf 8f4f 	dsb	sy
}
 800278c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <__NVIC_SystemReset+0x24>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <__NVIC_SystemReset+0x24>)
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <__NVIC_SystemReset+0x28>)
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800279e:	f3bf 8f4f 	dsb	sy
}
 80027a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <__NVIC_SystemReset+0x20>
 80027a8:	e000ed00 	.word	0xe000ed00
 80027ac:	05fa0004 	.word	0x05fa0004

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f7ff ff7a 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff17 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff2c 	bl	8002678 <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff7a 	bl	8002720 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff49 	bl	80026cc <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff1f 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002862:	f7ff ff8f 	bl	8002784 <__NVIC_SystemReset>

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff9e 	bl	80027b0 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e059      	b.n	8002946 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_DMA_Init+0xd0>)
 800289a:	429a      	cmp	r2, r3
 800289c:	d80f      	bhi.n	80028be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_DMA_Init+0xd4>)
 80028a6:	4413      	add	r3, r2
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <HAL_DMA_Init+0xd8>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	009a      	lsls	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_DMA_Init+0xdc>)
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80028bc:	e00e      	b.n	80028dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_DMA_Init+0xe0>)
 80028c6:	4413      	add	r3, r2
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_DMA_Init+0xd8>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_DMA_Init+0xe4>)
 80028da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40026407 	.word	0x40026407
 8002954:	bffd9ff8 	.word	0xbffd9ff8
 8002958:	cccccccd 	.word	0xcccccccd
 800295c:	40026000 	.word	0x40026000
 8002960:	bffd9bf8 	.word	0xbffd9bf8
 8002964:	40026400 	.word	0x40026400

08002968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_DMA_Start_IT+0x20>
 8002984:	2302      	movs	r3, #2
 8002986:	e04b      	b.n	8002a20 <HAL_DMA_Start_IT+0xb8>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d13a      	bne.n	8002a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f95e 	bl	8002c82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 020e 	orr.w	r2, r2, #14
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00f      	b.n	8002a00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 020a 	orr.w	r2, r2, #10
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e005      	b.n	8002a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020e 	bic.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 021c 	and.w	r2, r3, #28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d005      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e029      	b.n	8002b1a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 020e 	bic.w	r2, r2, #14
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 021c 	and.w	r2, r3, #28
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
    }
  }
  return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 031c 	and.w	r3, r3, #28
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d026      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x7a>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d021      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 021c 	and.w	r2, r3, #28
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	2104      	movs	r1, #4
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d071      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b9c:	e06c      	b.n	8002c78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 031c 	and.w	r3, r3, #28
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02e      	beq.n	8002c10 <HAL_DMA_IRQHandler+0xec>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d029      	beq.n	8002c10 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 020a 	bic.w	r2, r2, #10
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 021c 	and.w	r2, r3, #28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2102      	movs	r1, #2
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d038      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c0e:	e033      	b.n	8002c78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f003 031c 	and.w	r3, r3, #28
 8002c18:	2208      	movs	r2, #8
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02a      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x156>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d025      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 020e 	bic.w	r2, r2, #14
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 021c 	and.w	r2, r3, #28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
}
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f003 021c 	and.w	r2, r3, #28
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d108      	bne.n	8002cc6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc4:	e007      	b.n	8002cd6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d022      	beq.n	8002d3e <HAL_FLASH_IRQHandler+0x5e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d04:	d01b      	beq.n	8002d3e <HAL_FLASH_IRQHandler+0x5e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002d06:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d014      	beq.n	8002d3e <HAL_FLASH_IRQHandler+0x5e>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d20:	d00d      	beq.n	8002d3e <HAL_FLASH_IRQHandler+0x5e>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2e:	d006      	beq.n	8002d3e <HAL_FLASH_IRQHandler+0x5e>
#endif /* FLASH_SR_OPTVERRUSR */
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) )
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8002d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3c:	d117      	bne.n	8002d6e <HAL_FLASH_IRQHandler+0x8e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_FLASH_IRQHandler+0x78>
    {
      /* Return the faulty sector */
      addresstmp = pFlash.Page;
 8002d48:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	607b      	str	r3, [r7, #4]
      pFlash.Page = 0xFFFFFFFFU;
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e002      	b.n	8002d5e <HAL_FLASH_IRQHandler+0x7e>
    }
    else
    {
      /* Return the faulty address */
      addresstmp = pFlash.Address;
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	607b      	str	r3, [r7, #4]
    }
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002d5e:	f000 f887 	bl	8002e70 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f87b 	bl	8002e5e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d14c      	bne.n	8002e14 <HAL_FLASH_IRQHandler+0x134>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	619a      	str	r2, [r3, #24]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d044      	beq.n	8002e14 <HAL_FLASH_IRQHandler+0x134>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d12d      	bne.n	8002df0 <HAL_FLASH_IRQHandler+0x110>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.NbPagesToErase--;
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002d9c:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.NbPagesToErase != 0U)
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_FLASH_IRQHandler+0xf6>
        {
          addresstmp = pFlash.Page;
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f84d 	bl	8002e4c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Page + FLASH_PAGE_SIZE;
 8002db2:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dba:	607b      	str	r3, [r7, #4]
          pFlash.Page = addresstmp;
 8002dbc:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60d3      	str	r3, [r2, #12]

          /* If the erase operation is completed, disable the ERASE Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dcc:	6053      	str	r3, [r2, #4]

          FLASH_PageErase(addresstmp);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8c6 	bl	8002f60 <FLASH_PageErase>
 8002dd4:	e01e      	b.n	8002e14 <HAL_FLASH_IRQHandler+0x134>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Page = addresstmp = 0xFFFFFFFFU;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60d3      	str	r3, [r2, #12]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f82f 	bl	8002e4c <HAL_FLASH_EndOfOperationCallback>
 8002dee:	e011      	b.n	8002e14 <HAL_FLASH_IRQHandler+0x134>
        }
      }
      else
      {
          /* If the program operation is completed, disable the PROG Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002df6:	f023 0308 	bic.w	r3, r3, #8
 8002dfa:	6053      	str	r3, [r2, #4]

          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f823 	bl	8002e4c <HAL_FLASH_EndOfOperationCallback>
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <HAL_FLASH_IRQHandler+0x15c>
  {
    /* Operation is completed, disable the PROG and ERASE */
    CLEAR_BIT(FLASH->PECR, (FLASH_PECR_ERASE | FLASH_PECR_PROG));
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002e24:	f423 7302 	bic.w	r3, r3, #520	; 0x208
 8002e28:	6053      	str	r3, [r2, #4]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <HAL_FLASH_IRQHandler+0x164>)
 8002e30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e34:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <HAL_FLASH_IRQHandler+0x168>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	741a      	strb	r2, [r3, #16]
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	20000828 	.word	0x20000828

08002e4c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d109      	bne.n	8002e9c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002e92:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea8:	d109      	bne.n	8002ebe <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002eb4:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eca:	d109      	bne.n	8002ee0 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002ed6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ede:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d109      	bne.n	8002f02 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f043 0310 	orr.w	r3, r3, #16
 8002ef6:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002ef8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f00:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	d109      	bne.n	8002f24 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f043 0320 	orr.w	r3, r3, #32
 8002f18:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002f1a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f22:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d109      	bne.n	8002f46 <FLASH_SetErrorCode+0xd6>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <FLASH_SetErrorCode+0xec>)
 8002f3c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f44:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <FLASH_SetErrorCode+0xe8>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6193      	str	r3, [r2, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	20000828 	.word	0x20000828

08002f60 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <FLASH_PageErase+0x3c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <FLASH_PageErase+0x40>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <FLASH_PageErase+0x40>)
 8002f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f78:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <FLASH_PageErase+0x40>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <FLASH_PageErase+0x40>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000828 	.word	0x20000828
 8002fa0:	40023c00 	.word	0x40023c00

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fba:	e154      	b.n	8003266 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8146 	beq.w	8003260 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d005      	beq.n	8002fec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d130      	bne.n	800304e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003022:	2201      	movs	r2, #1
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0201 	and.w	r2, r3, #1
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d017      	beq.n	800308a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d123      	bne.n	80030de <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	6939      	ldr	r1, [r7, #16]
 80030da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a0 	beq.w	8003260 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003120:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_GPIO_Init+0x2e0>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a57      	ldr	r2, [pc, #348]	; (8003284 <HAL_GPIO_Init+0x2e0>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4b55      	ldr	r3, [pc, #340]	; (8003284 <HAL_GPIO_Init+0x2e0>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003138:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_GPIO_Init+0x2e4>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_GPIO_Init+0x2e8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d019      	beq.n	8003198 <HAL_GPIO_Init+0x1f4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_GPIO_Init+0x2ec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_GPIO_Init+0x1f0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_GPIO_Init+0x2f0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00d      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0x1e8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a47      	ldr	r2, [pc, #284]	; (800329c <HAL_GPIO_Init+0x2f8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_GPIO_Init+0x1e4>
 8003184:	2304      	movs	r3, #4
 8003186:	e008      	b.n	800319a <HAL_GPIO_Init+0x1f6>
 8003188:	2305      	movs	r3, #5
 800318a:	e006      	b.n	800319a <HAL_GPIO_Init+0x1f6>
 800318c:	2303      	movs	r3, #3
 800318e:	e004      	b.n	800319a <HAL_GPIO_Init+0x1f6>
 8003190:	2302      	movs	r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_Init+0x1f6>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_GPIO_Init+0x1f6>
 8003198:	2300      	movs	r3, #0
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	f002 0203 	and.w	r2, r2, #3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4093      	lsls	r3, r2
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031aa:	4937      	ldr	r1, [pc, #220]	; (8003288 <HAL_GPIO_Init+0x2e4>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b8:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031dc:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f aea3 	bne.w	8002fbc <HAL_GPIO_Init+0x18>
  }
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40010000 	.word	0x40010000
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800
 8003298:	40020c00 	.word	0x40020c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010400 	.word	0x40010400

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ea:	4a05      	ldr	r2, [pc, #20]	; (8003300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fa30 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e31b      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003316:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003320:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d07b      	beq.n	800342e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d006      	beq.n	800334a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x5e>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06a      	beq.n	800342c <HAL_RCC_OscConfig+0x128>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d166      	bne.n	800342c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e2f5      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d106      	bne.n	8003378 <HAL_RCC_OscConfig+0x74>
 800336a:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7e      	ldr	r2, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e02d      	b.n	80033d4 <HAL_RCC_OscConfig+0xd0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10c      	bne.n	800339a <HAL_RCC_OscConfig+0x96>
 8003380:	4b79      	ldr	r3, [pc, #484]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a75      	ldr	r2, [pc, #468]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0xd0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0xb8>
 80033a2:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6d      	ldr	r2, [pc, #436]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xd0>
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a69      	ldr	r2, [pc, #420]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a66      	ldr	r2, [pc, #408]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7ff f8fc 	bl	80025d8 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7ff f8f8 	bl	80025d8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e2ab      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xe0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7ff f8e8 	bl	80025d8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7ff f8e4 	bl	80025d8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e297      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800341e:	4b52      	ldr	r3, [pc, #328]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x108>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d05a      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d005      	beq.n	800344c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d119      	bne.n	800347a <HAL_RCC_OscConfig+0x176>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_OscConfig+0x160>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e274      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	493d      	ldr	r1, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003478:	e03a      	b.n	80034f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003482:	4b3a      	ldr	r3, [pc, #232]	; (800356c <HAL_RCC_OscConfig+0x268>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff f8a6 	bl	80025d8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003490:	f7ff f8a2 	bl	80025d8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e255      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	492a      	ldr	r1, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c4:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_OscConfig+0x268>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7ff f885 	bl	80025d8 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d2:	f7ff f881 	bl	80025d8 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e234      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80b8 	beq.w	800366e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d170      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_OscConfig+0x218>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e218      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003528:	429a      	cmp	r2, r3
 800352a:	d921      	bls.n	8003570 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fc3b 	bl	8003dac <RCC_SetFlashLatencyFromMSIRange>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e206      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4906      	ldr	r1, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	4901      	ldr	r1, [pc, #4]	; (8003568 <HAL_RCC_OscConfig+0x264>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]
 8003566:	e020      	b.n	80035aa <HAL_RCC_OscConfig+0x2a6>
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003570:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4996      	ldr	r1, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003582:	4b95      	ldr	r3, [pc, #596]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	4991      	ldr	r1, [pc, #580]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fc06 	bl	8003dac <RCC_SetFlashLatencyFromMSIRange>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1d1      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	3301      	adds	r3, #1
 80035b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035ba:	4a87      	ldr	r2, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	0912      	lsrs	r2, r2, #4
 80035c0:	f002 020f 	and.w	r2, r2, #15
 80035c4:	4985      	ldr	r1, [pc, #532]	; (80037dc <HAL_RCC_OscConfig+0x4d8>)
 80035c6:	5c8a      	ldrb	r2, [r1, r2]
 80035c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035ca:	4a85      	ldr	r2, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x4dc>)
 80035cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCC_OscConfig+0x4e0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe ffb4 	bl	8002540 <HAL_InitTick>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d045      	beq.n	800366e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	e1b3      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d029      	beq.n	8003642 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ee:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x4e4>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fff0 	bl	80025d8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fc:	f7fe ffec 	bl	80025d8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e19f      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800360e:	4b72      	ldr	r3, [pc, #456]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361a:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	496c      	ldr	r1, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	4967      	ldr	r1, [pc, #412]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003642:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x4e4>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe ffc6 	bl	80025d8 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003650:	f7fe ffc2 	bl	80025d8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e175      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d030      	beq.n	80036dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <HAL_RCC_OscConfig+0x4e8>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003688:	f7fe ffa6 	bl	80025d8 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe ffa2 	bl	80025d8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e155      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x38c>
 80036ae:	e015      	b.n	80036dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7fe ff8f 	bl	80025d8 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036be:	f7fe ff8b 	bl	80025d8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e13e      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b3 	beq.w	8003850 <HAL_RCC_OscConfig+0x54c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ee:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4a36      	ldr	r2, [pc, #216]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6253      	str	r3, [r2, #36]	; 0x24
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a32      	ldr	r2, [pc, #200]	; (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe ff53 	bl	80025d8 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe ff4f 	bl	80025d8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e102      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x466>
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6353      	str	r3, [r2, #52]	; 0x34
 8003768:	e02d      	b.n	80037c6 <HAL_RCC_OscConfig+0x4c2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x488>
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377c:	6353      	str	r3, [r2, #52]	; 0x34
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003788:	6353      	str	r3, [r2, #52]	; 0x34
 800378a:	e01c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4c2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x4aa>
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800379a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379e:	6353      	str	r3, [r2, #52]	; 0x34
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6353      	str	r3, [r2, #52]	; 0x34
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x4c2>
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	6353      	str	r3, [r2, #52]	; 0x34
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d023      	beq.n	8003816 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe ff03 	bl	80025d8 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d4:	e018      	b.n	8003808 <HAL_RCC_OscConfig+0x504>
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	0801193c 	.word	0x0801193c
 80037e0:	20000004 	.word	0x20000004
 80037e4:	20000008 	.word	0x20000008
 80037e8:	42470020 	.word	0x42470020
 80037ec:	42470680 	.word	0x42470680
 80037f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe fef0 	bl	80025d8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <HAL_RCC_OscConfig+0x654>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0a2      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003808:	4b54      	ldr	r3, [pc, #336]	; (800395c <HAL_RCC_OscConfig+0x658>)
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4f0>
 8003814:	e013      	b.n	800383e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe fedf 	bl	80025d8 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0x52e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fedb 	bl	80025d8 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x654>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e08d      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003832:	4b4a      	ldr	r3, [pc, #296]	; (800395c <HAL_RCC_OscConfig+0x658>)
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1ef      	bne.n	800381e <HAL_RCC_OscConfig+0x51a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800383e:	7ffb      	ldrb	r3, [r7, #31]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_RCC_OscConfig+0x54c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003844:	4b45      	ldr	r3, [pc, #276]	; (800395c <HAL_RCC_OscConfig+0x658>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	4a44      	ldr	r2, [pc, #272]	; (800395c <HAL_RCC_OscConfig+0x658>)
 800384a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d079      	beq.n	800394c <HAL_RCC_OscConfig+0x648>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d056      	beq.n	800390c <HAL_RCC_OscConfig+0x608>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b02      	cmp	r3, #2
 8003864:	d13b      	bne.n	80038de <HAL_RCC_OscConfig+0x5da>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x65c>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe feb4 	bl	80025d8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe feb0 	bl	80025d8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e063      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003886:	4b35      	ldr	r3, [pc, #212]	; (800395c <HAL_RCC_OscConfig+0x658>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x570>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <HAL_RCC_OscConfig+0x658>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	4319      	orrs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	430b      	orrs	r3, r1
 80038aa:	492c      	ldr	r1, [pc, #176]	; (800395c <HAL_RCC_OscConfig+0x658>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_OscConfig+0x65c>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fe8f 	bl	80025d8 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x5cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fe8b 	bl	80025d8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x5cc>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e03e      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_RCC_OscConfig+0x658>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x5ba>
 80038dc:	e036      	b.n	800394c <HAL_RCC_OscConfig+0x648>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_OscConfig+0x65c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fe78 	bl	80025d8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x5fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fe74 	bl	80025d8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e027      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_RCC_OscConfig+0x658>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x5e8>
 800390a:	e01f      	b.n	800394c <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e01a      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_RCC_OscConfig+0x658>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	429a      	cmp	r2, r3
 800392a:	d10d      	bne.n	8003948 <HAL_RCC_OscConfig+0x644>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x644>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x648>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	0007a120 	.word	0x0007a120
 800395c:	40023800 	.word	0x40023800
 8003960:	42470060 	.word	0x42470060

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e11a      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d919      	bls.n	80039ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_ClockConfig+0x34>
 800398c:	4b8a      	ldr	r3, [pc, #552]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a89      	ldr	r2, [pc, #548]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0201 	bic.w	r2, r3, #1
 80039a0:	4985      	ldr	r1, [pc, #532]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a8:	4b83      	ldr	r3, [pc, #524]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0f9      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c6:	4b7d      	ldr	r3, [pc, #500]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	497a      	ldr	r1, [pc, #488]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 808e 	beq.w	8003b02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039ee:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d121      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0d7      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d115      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0cb      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1e:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0bf      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0b7      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	495c      	ldr	r1, [pc, #368]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fdc2 	bl	80025d8 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe fdba 	bl	80025d8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e09b      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d1ee      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xfc>
 8003a82:	e03e      	b.n	8003b02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d112      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8e:	f7fe fda3 	bl	80025d8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e084      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa4:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d1ee      	bne.n	8003a8e <HAL_RCC_ClockConfig+0x12a>
 8003ab0:	e027      	b.n	8003b02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d11d      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fe fd8c 	bl	80025d8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e06d      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d1ee      	bne.n	8003abc <HAL_RCC_ClockConfig+0x158>
 8003ade:	e010      	b.n	8003b02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fe fd7a 	bl	80025d8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e05b      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b02:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d219      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x1be>
 8003b16:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	4923      	ldr	r1, [pc, #140]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <HAL_RCC_ClockConfig+0x254>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e034      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4917      	ldr	r1, [pc, #92]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490f      	ldr	r1, [pc, #60]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f823 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_RCC_ClockConfig+0x258>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490b      	ldr	r1, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fccc 	bl	8002540 <HAL_InitTick>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bac:	7afb      	ldrb	r3, [r7, #11]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	0801193c 	.word	0x0801193c
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	20000008 	.word	0x20000008

08003bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b08e      	sub	sp, #56	; 0x38
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d00d      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f200 8092 	bhi.w	8003d0e <HAL_RCC_GetSysClockFreq+0x142>
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x28>
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x2e>
 8003bf2:	e08c      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x170>)
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bf8:	e097      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x174>)
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bfe:	e094      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	0c9b      	lsrs	r3, r3, #18
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	4b4e      	ldr	r3, [pc, #312]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x178>)
 8003c0a:	5c9b      	ldrb	r3, [r3, r2]
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	0d9b      	lsrs	r3, r3, #22
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	61fa      	str	r2, [r7, #28]
 8003c2e:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x174>)
 8003c30:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003c34:	464a      	mov	r2, r9
 8003c36:	fb03 f202 	mul.w	r2, r3, r2
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4644      	mov	r4, r8
 8003c3e:	fb04 f303 	mul.w	r3, r4, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	4a3e      	ldr	r2, [pc, #248]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x174>)
 8003c46:	4644      	mov	r4, r8
 8003c48:	fba4 0102 	umull	r0, r1, r4, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	2200      	movs	r2, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	617a      	str	r2, [r7, #20]
 8003c58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c5c:	f7fd f9fa 	bl	8001054 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	e04e      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	4652      	mov	r2, sl
 8003c74:	465b      	mov	r3, fp
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	0159      	lsls	r1, r3, #5
 8003c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c84:	0150      	lsls	r0, r2, #5
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8003caa:	eb63 0509 	sbc.w	r5, r3, r9
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	00eb      	lsls	r3, r5, #3
 8003cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cbc:	00e2      	lsls	r2, r4, #3
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	eb14 030a 	adds.w	r3, r4, sl
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	eb45 030b 	adc.w	r3, r5, fp
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003ce8:	4601      	mov	r1, r0
 8003cea:	028a      	lsls	r2, r1, #10
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	60fa      	str	r2, [r7, #12]
 8003cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfc:	f7fd f9aa 	bl	8001054 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d0c:	e00d      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0b5b      	lsrs	r3, r3, #13
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3738      	adds	r7, #56	; 0x38
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	016e3600 	.word	0x016e3600
 8003d44:	08011930 	.word	0x08011930

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff2 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	0801194c 	.word	0x0801194c

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff ffde 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0adb      	lsrs	r3, r3, #11
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	0801194c 	.word	0x0801194c

08003dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003db8:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d12c      	bne.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e016      	b.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de6:	6253      	str	r3, [r2, #36]	; 0x24
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003dfc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003e10:	d105      	bne.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e18:	d101      	bne.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0f      	ldr	r2, [pc, #60]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	490b      	ldr	r1, [pc, #44]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40007000 	.word	0x40007000
 8003e68:	40023c00 	.word	0x40023c00

08003e6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80b7 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b5a      	ldr	r3, [pc, #360]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	4a59      	ldr	r2, [pc, #356]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6253      	str	r3, [r2, #36]	; 0x24
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b54      	ldr	r3, [pc, #336]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a50      	ldr	r2, [pc, #320]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb87 	bl	80025d8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe fb83 	bl	80025d8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e088      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003ef4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d00f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f10:	d108      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f12:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e066      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d033      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d02c      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d026      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f56:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fe fb30 	bl	80025d8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fe fb2c 	bl	80025d8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	4a20      	ldr	r2, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e030      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x172>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fb4:	d10a      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003fc6:	490d      	ldr	r1, [pc, #52]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd8:	4908      	ldr	r1, [pc, #32]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000
 8004004:	424706dc 	.word	0x424706dc
 8004008:	0007a120 	.word	0x0007a120

0800400c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e073      	b.n	800410a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7f5b      	ldrb	r3, [r3, #29]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd ff52 	bl	8001edc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d055      	beq.n	80040f8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	22ca      	movs	r2, #202	; 0xca
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2253      	movs	r2, #83	; 0x53
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa48 	bl	80044f2 <RTC_EnterInitMode>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d12c      	bne.n	80040c6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800407a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	041a      	lsls	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa4f 	bl	8004560 <RTC_ExitInitMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
 80040f6:	e001      	b.n	80040fc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004112:	b590      	push	{r4, r7, lr}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	7f1b      	ldrb	r3, [r3, #28]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_RTC_SetTime+0x1c>
 800412a:	2302      	movs	r3, #2
 800412c:	e087      	b.n	800423e <HAL_RTC_SetTime+0x12c>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d126      	bne.n	800418e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2200      	movs	r2, #0
 8004152:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa26 	bl	80045aa <RTC_ByteToBcd2>
 800415e:	4603      	mov	r3, r0
 8004160:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fa1f 	bl	80045aa <RTC_ByteToBcd2>
 800416c:	4603      	mov	r3, r0
 800416e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004170:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	789b      	ldrb	r3, [r3, #2]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa17 	bl	80045aa <RTC_ByteToBcd2>
 800417c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800417e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e018      	b.n	80041c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2200      	movs	r2, #0
 80041a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041ae:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	78db      	ldrb	r3, [r3, #3]
 80041ba:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	22ca      	movs	r2, #202	; 0xca
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2253      	movs	r2, #83	; 0x53
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f98e 	bl	80044f2 <RTC_EnterInitMode>
 80041d6:	4603      	mov	r3, r0
 80041d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d120      	bne.n	8004222 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f9a1 	bl	8004560 <RTC_ExitInitMode>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]

  return status;
 800423c:	7cfb      	ldrb	r3, [r7, #19]
}
 800423e:	4618      	mov	r0, r3
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}

08004246 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004278:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800427c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	0d9b      	lsrs	r3, r3, #22
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11a      	bne.n	80042f8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f98c 	bl	80045e4 <RTC_Bcd2ToByte>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f983 	bl	80045e4 <RTC_Bcd2ToByte>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f97a 	bl	80045e4 <RTC_Bcd2ToByte>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	7f1b      	ldrb	r3, [r3, #28]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_RTC_SetDate+0x1c>
 800431a:	2302      	movs	r3, #2
 800431c:	e071      	b.n	8004402 <HAL_RTC_SetDate+0x100>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2202      	movs	r2, #2
 8004328:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10e      	bne.n	800434e <HAL_RTC_SetDate+0x4c>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	330a      	adds	r3, #10
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11c      	bne.n	800438e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f926 	bl	80045aa <RTC_ByteToBcd2>
 800435e:	4603      	mov	r3, r0
 8004360:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f91f 	bl	80045aa <RTC_ByteToBcd2>
 800436c:	4603      	mov	r3, r0
 800436e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004370:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f917 	bl	80045aa <RTC_ByteToBcd2>
 800437c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800437e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e00e      	b.n	80043ac <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800439a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	22ca      	movs	r2, #202	; 0xca
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2253      	movs	r2, #83	; 0x53
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f898 	bl	80044f2 <RTC_EnterInitMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043c6:	7cfb      	ldrb	r3, [r7, #19]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10c      	bne.n	80043e6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043da:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f8bf 	bl	8004560 <RTC_ExitInitMode>
 80043e2:	4603      	mov	r3, r0
 80043e4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]

  return status;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}

0800440a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004424:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004428:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	b2da      	uxtb	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	0b5b      	lsrs	r3, r3, #13
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11a      	bne.n	800449e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	78db      	ldrb	r3, [r3, #3]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f8b9 	bl	80045e4 <RTC_Bcd2ToByte>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f8b0 	bl	80045e4 <RTC_Bcd2ToByte>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	789b      	ldrb	r3, [r3, #2]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f8a7 	bl	80045e4 <RTC_Bcd2ToByte>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f64f 7257 	movw	r2, #65367	; 0xff57
 80044bc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044be:	f7fe f88b 	bl	80025d8 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044c4:	e009      	b.n	80044da <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044c6:	f7fe f887 	bl	80025d8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d4:	d901      	bls.n	80044da <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e007      	b.n	80044ea <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d122      	bne.n	8004556 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800451e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004520:	f7fe f85a 	bl	80025d8 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004526:	e00c      	b.n	8004542 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004528:	f7fe f856 	bl	80025d8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004536:	d904      	bls.n	8004542 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <RTC_EnterInitMode+0x64>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d1e8      	bne.n	8004528 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457a:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff8c 	bl	80044a8 <HAL_RTC_WaitForSynchro>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045b8:	e005      	b.n	80045c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	3b0a      	subs	r3, #10
 80045c4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d8f6      	bhi.n	80045ba <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b2db      	uxtb	r3, r3
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4413      	add	r3, r2
 8004612:	b2db      	uxtb	r3, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e07b      	b.n	8004728 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d108      	bne.n	800464a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004640:	d009      	beq.n	8004656 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
 8004648:	e005      	b.n	8004656 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fd fc49 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	ea42 0103 	orr.w	r1, r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 0104 	and.w	r1, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0210 	and.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004716:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_SPI_Transmit+0x22>
 800474e:	2302      	movs	r3, #2
 8004750:	e12d      	b.n	80049ae <HAL_SPI_Transmit+0x27e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475a:	f7fd ff3d 	bl	80025d8 <HAL_GetTick>
 800475e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d002      	beq.n	8004776 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004770:	2302      	movs	r3, #2
 8004772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004774:	e116      	b.n	80049a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Transmit+0x52>
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004786:	e10d      	b.n	80049a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2203      	movs	r2, #3
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	d10f      	bne.n	80047f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d007      	beq.n	800480e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004816:	d14f      	bne.n	80048b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Transmit+0xf6>
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d142      	bne.n	80048ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800484a:	e02f      	b.n	80048ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d112      	bne.n	8004880 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	86da      	strh	r2, [r3, #54]	; 0x36
 800487e:	e015      	b.n	80048ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004880:	f7fd feaa 	bl	80025d8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d803      	bhi.n	8004898 <HAL_SPI_Transmit+0x168>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <HAL_SPI_Transmit+0x16e>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048aa:	e07b      	b.n	80049a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ca      	bne.n	800484c <HAL_SPI_Transmit+0x11c>
 80048b6:	e050      	b.n	800495a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x196>
 80048c0:	8afb      	ldrh	r3, [r7, #22]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d144      	bne.n	8004950 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ec:	e030      	b.n	8004950 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d113      	bne.n	8004924 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	; 0x36
 8004922:	e015      	b.n	8004950 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004924:	f7fd fe58 	bl	80025d8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d803      	bhi.n	800493c <HAL_SPI_Transmit+0x20c>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <HAL_SPI_Transmit+0x212>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800494e:	e029      	b.n	80049a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1c9      	bne.n	80048ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fb80 	bl	8005064 <SPI_EndRxTxTransaction>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e003      	b.n	80049a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08c      	sub	sp, #48	; 0x30
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049c4:	2301      	movs	r3, #1
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x26>
 80049d8:	2302      	movs	r3, #2
 80049da:	e198      	b.n	8004d0e <HAL_SPI_TransmitReceive+0x358>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e4:	f7fd fdf8 	bl	80025d8 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d00f      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x70>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0c:	d107      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x68>
 8004a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d003      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a24:	e16d      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x82>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x82>
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a3e:	e160      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d003      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2205      	movs	r2, #5
 8004a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	887a      	ldrh	r2, [r7, #2]
 8004a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	887a      	ldrh	r2, [r7, #2]
 8004a7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab0:	d17c      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x10a>
 8004aba:	8b7b      	ldrh	r3, [r7, #26]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d16a      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae4:	e057      	b.n	8004b96 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d11b      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x176>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x176>
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d113      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d119      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1b8>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d014      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b6e:	f7fd fd33 	bl	80025d8 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d80b      	bhi.n	8004b96 <HAL_SPI_TransmitReceive+0x1e0>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d007      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b94:	e0b5      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1a2      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x130>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d19d      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x130>
 8004baa:	e080      	b.n	8004cae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x204>
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d16f      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be0:	e05b      	b.n	8004c9a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11c      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x274>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0x274>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d114      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d119      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x2b6>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d014      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c6c:	f7fd fcb4 	bl	80025d8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d803      	bhi.n	8004c84 <HAL_SPI_TransmitReceive+0x2ce>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x2d4>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c98:	e033      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d19e      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x22c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d199      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f9d6 	bl	8005064 <SPI_EndRxTxTransaction>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cca:	e01a      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf8:	e003      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3730      	adds	r7, #48	; 0x30
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10f      	bne.n	8004d5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
    return;
 8004d5a:	e0d7      	b.n	8004f0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_SPI_IRQHandler+0x66>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
    return;
 8004d7c:	e0c6      	b.n	8004f0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <HAL_SPI_IRQHandler+0x8c>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80b4 	beq.w	8004f0c <HAL_SPI_IRQHandler+0x1f4>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80ad 	beq.w	8004f0c <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d023      	beq.n	8004e06 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d011      	beq.n	8004dee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f043 0204 	orr.w	r2, r3, #4
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	e00b      	b.n	8004e06 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693b      	ldr	r3, [r7, #16]
        return;
 8004e04:	e082      	b.n	8004f0c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f043 0208 	orr.w	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04f      	beq.n	8004f0a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e78:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_SPI_IRQHandler+0x17e>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d034      	beq.n	8004f00 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0203 	bic.w	r2, r2, #3
 8004ea4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d011      	beq.n	8004ed2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_SPI_IRQHandler+0x1fc>)
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd fdf1 	bl	8002aa2 <HAL_DMA_Abort_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <HAL_SPI_IRQHandler+0x1fc>)
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd fddb 	bl	8002aa2 <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004efe:	e003      	b.n	8004f08 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f809 	bl	8004f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f06:	e000      	b.n	8004f0a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f08:	bf00      	nop
    return;
 8004f0a:	bf00      	nop
  }
}
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	08004f2b 	.word	0x08004f2b

08004f18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ffe7 	bl	8004f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f64:	f7fd fb38 	bl	80025d8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f74:	f7fd fb30 	bl	80025d8 <HAL_GetTick>
 8004f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	015b      	lsls	r3, r3, #5
 8004f80:	0d1b      	lsrs	r3, r3, #20
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	e054      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d050      	beq.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f94:	f7fd fb20 	bl	80025d8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d902      	bls.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d111      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fcc:	d004      	beq.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d107      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d10f      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e017      	b.n	8005056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	429a      	cmp	r2, r3
 8005052:	d19b      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000004 	.word	0x20000004

08005064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <SPI_EndRxTxTransaction+0x7c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <SPI_EndRxTxTransaction+0x80>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0d5b      	lsrs	r3, r3, #21
 800507c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d112      	bne.n	80050b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2200      	movs	r2, #0
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff5a 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00f      	b.n	80050d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3b01      	subs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b80      	cmp	r3, #128	; 0x80
 80050ce:	d0f2      	beq.n	80050b6 <SPI_EndRxTxTransaction+0x52>
 80050d0:	e000      	b.n	80050d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050d2:	bf00      	nop
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000004 	.word	0x20000004
 80050e4:	165e9f81 	.word	0x165e9f81

080050e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_TIM_OC_Start_IT+0x28>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e022      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6e>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d109      	bne.n	800512a <HAL_TIM_OC_Start_IT+0x42>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e015      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6e>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d109      	bne.n	8005144 <HAL_TIM_OC_Start_IT+0x5c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e008      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e09c      	b.n	8005298 <HAL_TIM_OC_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_OC_Start_IT+0x86>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800516c:	e013      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xae>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_OC_Start_IT+0x96>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800517c:	e00b      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xae>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_OC_Start_IT+0xa6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800518c:	e003      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xae>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d841      	bhi.n	8005220 <HAL_TIM_OC_Start_IT+0x138>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <HAL_TIM_OC_Start_IT+0xbc>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	08005221 	.word	0x08005221
 80051ac:	08005221 	.word	0x08005221
 80051b0:	08005221 	.word	0x08005221
 80051b4:	080051eb 	.word	0x080051eb
 80051b8:	08005221 	.word	0x08005221
 80051bc:	08005221 	.word	0x08005221
 80051c0:	08005221 	.word	0x08005221
 80051c4:	080051fd 	.word	0x080051fd
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005221 	.word	0x08005221
 80051d0:	08005221 	.word	0x08005221
 80051d4:	0800520f 	.word	0x0800520f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0202 	orr.w	r2, r2, #2
 80051e6:	60da      	str	r2, [r3, #12]
      break;
 80051e8:	e01d      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0204 	orr.w	r2, r2, #4
 80051f8:	60da      	str	r2, [r3, #12]
      break;
 80051fa:	e014      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	60da      	str	r2, [r3, #12]
      break;
 800520c:	e00b      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0210 	orr.w	r2, r2, #16
 800521c:	60da      	str	r2, [r3, #12]
      break;
 800521e:	e002      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	bf00      	nop
  }

  if (status == HAL_OK)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d134      	bne.n	8005296 <HAL_TIM_OC_Start_IT+0x1ae>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fb98 	bl	800596a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005242:	d00e      	beq.n	8005262 <HAL_TIM_OC_Start_IT+0x17a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <HAL_TIM_OC_Start_IT+0x1b8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIM_OC_Start_IT+0x17a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_TIM_OC_Start_IT+0x1bc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIM_OC_Start_IT+0x17a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <HAL_TIM_OC_Start_IT+0x1c0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d111      	bne.n	8005286 <HAL_TIM_OC_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b06      	cmp	r3, #6
 8005272:	d010      	beq.n	8005296 <HAL_TIM_OC_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	e007      	b.n	8005296 <HAL_TIM_OC_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40010800 	.word	0x40010800

080052ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e031      	b.n	8005322 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fe9e 	bl	8002014 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 f9ba 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d122      	bne.n	8005386 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d11b      	bne.n	8005386 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0202 	mvn.w	r2, #2
 8005356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fc fa77 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 8005372:	e005      	b.n	8005380 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f959 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f95f 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d122      	bne.n	80053da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d11b      	bne.n	80053da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0204 	mvn.w	r2, #4
 80053aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fc fa4d 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 80053c6:	e005      	b.n	80053d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f92f 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f935 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d122      	bne.n	800542e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11b      	bne.n	800542e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0208 	mvn.w	r2, #8
 80053fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2204      	movs	r2, #4
 8005404:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc fa23 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 800541a:	e005      	b.n	8005428 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f905 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f90b 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b10      	cmp	r3, #16
 800543a:	d122      	bne.n	8005482 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b10      	cmp	r3, #16
 8005448:	d11b      	bne.n	8005482 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0210 	mvn.w	r2, #16
 8005452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2208      	movs	r2, #8
 8005458:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc f9f9 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 800546e:	e005      	b.n	800547c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8db 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8e1 	bl	800563e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d10e      	bne.n	80054ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f06f 0201 	mvn.w	r2, #1
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8b6 	bl	800561a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d10e      	bne.n	80054da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d107      	bne.n	80054da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8bb 	bl	8005650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e088      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x130>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11b      	bne.n	8005546 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f000 f911 	bl	8005744 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 020c 	bic.w	r2, r2, #12
 8005530:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6999      	ldr	r1, [r3, #24]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]
 8005544:	e060      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d11c      	bne.n	8005586 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f000 f952 	bl	8005804 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800556e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	e040      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f000 f96e 	bl	800587c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 020c 	bic.w	r2, r2, #12
 80055ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69d9      	ldr	r1, [r3, #28]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
 80055c2:	e021      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d11c      	bne.n	8005604 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f000 f98a 	bl	80058f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	61da      	str	r2, [r3, #28]
 8005602:	e001      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
	...

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a2b      	ldr	r2, [pc, #172]	; (800572c <TIM_Base_SetConfig+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2a      	ldr	r2, [pc, #168]	; (8005730 <TIM_Base_SetConfig+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a29      	ldr	r2, [pc, #164]	; (8005734 <TIM_Base_SetConfig+0xd0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x38>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a28      	ldr	r2, [pc, #160]	; (8005738 <TIM_Base_SetConfig+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d017      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_Base_SetConfig+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <TIM_Base_SetConfig+0xcc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <TIM_Base_SetConfig+0xd0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <TIM_Base_SetConfig+0xd4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <TIM_Base_SetConfig+0xd8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_Base_SetConfig+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <TIM_Base_SetConfig+0xdc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d108      	bne.n	80056f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	615a      	str	r2, [r3, #20]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010800 	.word	0x40010800
 800573c:	40010c00 	.word	0x40010c00
 8005740:	40011000 	.word	0x40011000

08005744 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0201 	bic.w	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d00f      	beq.n	8005792 <TIM_TI1_SetConfig+0x4e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <TIM_TI1_SetConfig+0xb0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_TI1_SetConfig+0x4e>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <TIM_TI1_SetConfig+0xb4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_TI1_SetConfig+0x4e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <TIM_TI1_SetConfig+0xb8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_TI1_SetConfig+0x4e>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <TIM_TI1_SetConfig+0xbc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <TIM_TI1_SetConfig+0x52>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <TIM_TI1_SetConfig+0x54>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e003      	b.n	80057b6 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f023 030a 	bic.w	r3, r3, #10
 80057d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f003 030a 	and.w	r3, r3, #10
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010800 	.word	0x40010800

08005804 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f023 0210 	bic.w	r2, r3, #16
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	031b      	lsls	r3, r3, #12
 8005848:	b29b      	uxth	r3, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f023 0303 	bic.w	r3, r3, #3
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	b29b      	uxth	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2201      	movs	r2, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	43db      	mvns	r3, r3
 800598c:	401a      	ands	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e046      	b.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10c      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40010800 	.word	0x40010800

08005a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e042      	b.n	8005b08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fb08 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 ff89 	bl	80069cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d16d      	bne.n	8005c0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_UART_Transmit+0x2c>
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e066      	b.n	8005c0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	; 0x21
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4e:	f7fc fd43 	bl	80025d8 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d108      	bne.n	8005b7c <HAL_UART_Transmit+0x6c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e003      	b.n	8005b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b84:	e02a      	b.n	8005bdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fc51 	bl	8006438 <UART_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e036      	b.n	8005c0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	3302      	adds	r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e007      	b.n	8005bce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1cf      	bne.n	8005b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2140      	movs	r1, #64	; 0x40
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fc21 	bl	8006438 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08c      	sub	sp, #48	; 0x30
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d14a      	bne.n	8005cc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e043      	b.n	8005cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fc5e 	bl	8006514 <UART_Start_Receive_DMA>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d12c      	bne.n	8005cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d125      	bne.n	8005cba <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	617b      	str	r3, [r7, #20]
   return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6a39      	ldr	r1, [r7, #32]
 8005caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005cb8:	e002      	b.n	8005cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cc4:	e000      	b.n	8005cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3730      	adds	r7, #48	; 0x30
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b0ba      	sub	sp, #232	; 0xe8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_UART_IRQHandler+0x66>
 8005d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd8e 	bl	8006850 <UART_Receive_IT>
      return;
 8005d34:	e25b      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80de 	beq.w	8005efc <HAL_UART_IRQHandler+0x22c>
 8005d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80d1 	beq.w	8005efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_UART_IRQHandler+0xae>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	f043 0201 	orr.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_UART_IRQHandler+0xd2>
 8005d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	f043 0202 	orr.w	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xf6>
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_UART_IRQHandler+0x126>
 8005dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f043 0208 	orr.w	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 81f2 	beq.w	80061e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14e>
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd19 	bl	8006850 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <HAL_UART_IRQHandler+0x17a>
 8005e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04f      	beq.n	8005eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fc23 	bl	8006696 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d141      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1d9      	bne.n	8005e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d013      	beq.n	8005eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	4a7e      	ldr	r2, [pc, #504]	; (80060b0 <HAL_UART_IRQHandler+0x3e0>)
 8005eb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fc fdef 	bl	8002aa2 <HAL_DMA_Abort_IT>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	e00e      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9a5 	bl	800622a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	e00a      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9a1 	bl	800622a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	e006      	b.n	8005ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f99d 	bl	800622a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ef6:	e175      	b.n	80061e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef8:	bf00      	nop
    return;
 8005efa:	e173      	b.n	80061e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	f040 814f 	bne.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8148 	beq.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8141 	beq.w	80061a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	f040 80b6 	bne.w	80060b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8145 	beq.w	80061e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f66:	429a      	cmp	r2, r3
 8005f68:	f080 813e 	bcs.w	80061e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	f000 8088 	beq.w	8006090 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1d9      	bne.n	8005f80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3314      	adds	r3, #20
 8005fec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ff0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ff8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e1      	bne.n	8005fcc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800602c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800602e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800603a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800605e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006072:	65ba      	str	r2, [r7, #88]	; 0x58
 8006074:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e3      	bne.n	800604e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fccc 	bl	8002a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fb fbfa 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060ac:	e09c      	b.n	80061e8 <HAL_UART_IRQHandler+0x518>
 80060ae:	bf00      	nop
 80060b0:	0800675b 	.word	0x0800675b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 808e 	beq.w	80061ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8089 	beq.w	80061ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e3      	bne.n	80060da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	623b      	str	r3, [r7, #32]
   return(result);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006136:	633a      	str	r2, [r7, #48]	; 0x30
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800613c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60fb      	str	r3, [r7, #12]
   return(result);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800617c:	61fa      	str	r2, [r7, #28]
 800617e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	69b9      	ldr	r1, [r7, #24]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	617b      	str	r3, [r7, #20]
   return(result);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e3      	bne.n	8006158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb fb7f 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a2:	e023      	b.n	80061ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_UART_IRQHandler+0x4f4>
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fae0 	bl	8006782 <UART_Transmit_IT>
    return;
 80061c2:	e014      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <HAL_UART_IRQHandler+0x51e>
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fb1f 	bl	8006820 <UART_EndTransmit_IT>
    return;
 80061e2:	e004      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
    return;
 80061e4:	bf00      	nop
 80061e6:	e002      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
      return;
 80061e8:	bf00      	nop
 80061ea:	e000      	b.n	80061ee <HAL_UART_IRQHandler+0x51e>
      return;
 80061ec:	bf00      	nop
  }
}
 80061ee:	37e8      	adds	r7, #232	; 0xe8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b09c      	sub	sp, #112	; 0x70
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d172      	bne.n	800633e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625a:	2200      	movs	r2, #0
 800625c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	66bb      	str	r3, [r7, #104]	; 0x68
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800627e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006280:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800628c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3314      	adds	r3, #20
 8006298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
 80062aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3314      	adds	r3, #20
 80062b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062b2:	647a      	str	r2, [r7, #68]	; 0x44
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	663b      	str	r3, [r7, #96]	; 0x60
 80062de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062e6:	633a      	str	r2, [r7, #48]	; 0x30
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	2b01      	cmp	r3, #1
 8006308:	d119      	bne.n	800633e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	60fb      	str	r3, [r7, #12]
   return(result);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0310 	bic.w	r3, r3, #16
 8006320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	617b      	str	r3, [r7, #20]
   return(result);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	2200      	movs	r2, #0
 8006342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	2b01      	cmp	r3, #1
 800634a:	d106      	bne.n	800635a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800634c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006350:	4619      	mov	r1, r3
 8006352:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006354:	f7fb faa4 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006358:	e002      	b.n	8006360 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800635a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800635c:	f7ff ff53 	bl	8006206 <HAL_UART_RxCpltCallback>
}
 8006360:	bf00      	nop
 8006362:	3770      	adds	r7, #112	; 0x70
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	d108      	bne.n	8006396 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	4619      	mov	r1, r3
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7fb fa86 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006394:	e002      	b.n	800639c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ff3e 	bl	8006218 <HAL_UART_RxHalfCpltCallback>
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b21      	cmp	r3, #33	; 0x21
 80063d6:	d108      	bne.n	80063ea <UART_DMAError+0x46>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f000 f92f 	bl	8006648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b22      	cmp	r3, #34	; 0x22
 800640a:	d108      	bne.n	800641e <UART_DMAError+0x7a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f000 f93c 	bl	8006696 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f043 0210 	orr.w	r2, r3, #16
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f7ff fefd 	bl	800622a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b090      	sub	sp, #64	; 0x40
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006448:	e050      	b.n	80064ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d04c      	beq.n	80064ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0x30>
 8006458:	f7fc f8be 	bl	80025d8 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006464:	429a      	cmp	r2, r3
 8006466:	d241      	bcs.n	80064ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006488:	637a      	str	r2, [r7, #52]	; 0x34
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800648e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	613b      	str	r3, [r7, #16]
   return(result);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3314      	adds	r3, #20
 80064ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064bc:	623a      	str	r2, [r7, #32]
 80064be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e00f      	b.n	800650c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4013      	ands	r3, r2
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	429a      	cmp	r2, r3
 8006508:	d09f      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3740      	adds	r7, #64	; 0x40
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b098      	sub	sp, #96	; 0x60
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2222      	movs	r2, #34	; 0x22
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	4a3e      	ldr	r2, [pc, #248]	; (800663c <UART_Start_Receive_DMA+0x128>)
 8006542:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	4a3d      	ldr	r2, [pc, #244]	; (8006640 <UART_Start_Receive_DMA+0x12c>)
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <UART_Start_Receive_DMA+0x130>)
 8006552:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	2200      	movs	r2, #0
 800655a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800655c:	f107 0308 	add.w	r3, r7, #8
 8006560:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	f7fc f9f8 	bl	8002968 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d019      	beq.n	80065ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80065b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80065c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e5      	bne.n	8006596 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	657b      	str	r3, [r7, #84]	; 0x54
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3314      	adds	r3, #20
 8006604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	617b      	str	r3, [r7, #20]
   return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006614:	653b      	str	r3, [r7, #80]	; 0x50
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3314      	adds	r3, #20
 800661c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800661e:	627a      	str	r2, [r7, #36]	; 0x24
 8006620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6a39      	ldr	r1, [r7, #32]
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	61fb      	str	r3, [r7, #28]
   return(result);
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e5      	bne.n	80065fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3760      	adds	r7, #96	; 0x60
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	0800623d 	.word	0x0800623d
 8006640:	08006369 	.word	0x08006369
 8006644:	080063a5 	.word	0x080063a5

08006648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	; 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	61ba      	str	r2, [r7, #24]
 8006672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6979      	ldr	r1, [r7, #20]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	613b      	str	r3, [r7, #16]
   return(result);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800668c:	bf00      	nop
 800668e:	3724      	adds	r7, #36	; 0x24
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006696:	b480      	push	{r7}
 8006698:	b095      	sub	sp, #84	; 0x54
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066be:	643a      	str	r2, [r7, #64]	; 0x40
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e5      	bne.n	80066d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	2b01      	cmp	r3, #1
 800670c:	d119      	bne.n	8006742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800672e:	61ba      	str	r2, [r7, #24]
 8006730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006750:	bf00      	nop
 8006752:	3754      	adds	r7, #84	; 0x54
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fd58 	bl	800622a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b21      	cmp	r3, #33	; 0x21
 8006794:	d13e      	bne.n	8006814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d114      	bne.n	80067ca <UART_Transmit_IT+0x48>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]
 80067c8:	e008      	b.n	80067dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6211      	str	r1, [r2, #32]
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4619      	mov	r1, r3
 80067ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10f      	bne.n	8006810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
  }
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fcd7 	bl	80061f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	; 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b22      	cmp	r3, #34	; 0x22
 8006862:	f040 80ae 	bne.w	80069c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d117      	bne.n	80068a0 <UART_Receive_IT+0x50>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	b29a      	uxth	r2, r3
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	1c9a      	adds	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
 800689e:	e026      	b.n	80068ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d007      	beq.n	80068c4 <UART_Receive_IT+0x74>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <UART_Receive_IT+0x82>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e008      	b.n	80068e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4619      	mov	r1, r3
 80068fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d15d      	bne.n	80069be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0220 	bic.w	r2, r2, #32
 8006910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d135      	bne.n	80069b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	623a      	str	r2, [r7, #32]
 8006970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69f9      	ldr	r1, [r7, #28]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	61bb      	str	r3, [r7, #24]
   return(result);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	d10a      	bne.n	80069a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fa ff77 	bl	80018a0 <HAL_UARTEx_RxEventCallback>
 80069b2:	e002      	b.n	80069ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fc26 	bl	8006206 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e002      	b.n	80069c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	; 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a0c:	f023 030c 	bic.w	r3, r3, #12
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	430b      	orrs	r3, r1
 8006a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a55      	ldr	r2, [pc, #340]	; (8006b8c <UART_SetConfig+0x1c0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d103      	bne.n	8006a42 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a3a:	f7fd f9a3 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	e002      	b.n	8006a48 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7fd f98b 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8006a46:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a50:	d14c      	bne.n	8006aec <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009a      	lsls	r2, r3, #2
 8006a5c:	441a      	add	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	4a49      	ldr	r2, [pc, #292]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	0119      	lsls	r1, r3, #4
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009a      	lsls	r2, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a88:	4b41      	ldr	r3, [pc, #260]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	2064      	movs	r0, #100	; 0x64
 8006a92:	fb00 f303 	mul.w	r3, r0, r3
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	3332      	adds	r3, #50	; 0x32
 8006a9c:	4a3c      	ldr	r2, [pc, #240]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006aaa:	4419      	add	r1, r3
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009a      	lsls	r2, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac2:	4b33      	ldr	r3, [pc, #204]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006ac4:	fba3 0302 	umull	r0, r3, r3, r2
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	2064      	movs	r0, #100	; 0x64
 8006acc:	fb00 f303 	mul.w	r3, r0, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	3332      	adds	r3, #50	; 0x32
 8006ad6:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8006adc:	095b      	lsrs	r3, r3, #5
 8006ade:	f003 0207 	and.w	r2, r3, #7
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aea:	e04a      	b.n	8006b82 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009a      	lsls	r2, r3, #2
 8006af6:	441a      	add	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	0119      	lsls	r1, r3, #4
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009a      	lsls	r2, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b22:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006b24:	fba3 0302 	umull	r0, r3, r3, r2
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	2064      	movs	r0, #100	; 0x64
 8006b2c:	fb00 f303 	mul.w	r3, r0, r3
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	3332      	adds	r3, #50	; 0x32
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b42:	4419      	add	r1, r3
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009a      	lsls	r2, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006b5c:	fba3 0302 	umull	r0, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	2064      	movs	r0, #100	; 0x64
 8006b64:	fb00 f303 	mul.w	r3, r0, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	3332      	adds	r3, #50	; 0x32
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <UART_SetConfig+0x1c4>)
 8006b70:	fba2 2303 	umull	r2, r3, r2, r3
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	440a      	add	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40013800 	.word	0x40013800
 8006b90:	51eb851f 	.word	0x51eb851f

08006b94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <MX_FATFS_Init+0x18>)
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <MX_FATFS_Init+0x1c>)
 8006b9c:	f003 fb1e 	bl	800a1dc <FATFS_LinkDriver>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <MX_FATFS_Init+0x20>)
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000844 	.word	0x20000844
 8006bb0:	20000010 	.word	0x20000010
 8006bb4:	20000840 	.word	0x20000840

08006bb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006bbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f004 faba 	bl	800b14c <SD_disk_initialize>
 8006bd8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	4603      	mov	r3, r0
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status (pdrv);
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f004 fb98 	bl	800b324 <SD_disk_status>
 8006bf4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 8006c0e:	7bf8      	ldrb	r0, [r7, #15]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	f004 fb99 	bl	800b34c <SD_disk_read>
 8006c1a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8006c34:	7bf8      	ldrb	r0, [r7, #15]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	f004 fbf0 	bl	800b420 <SD_disk_write>
 8006c40:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	603a      	str	r2, [r7, #0]
 8006c54:	71fb      	strb	r3, [r7, #7]
 8006c56:	460b      	mov	r3, r1
 8006c58:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8006c5a:	79b9      	ldrb	r1, [r7, #6]
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f004 fc61 	bl	800b528 <SD_disk_ioctl>
 8006c66:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <disk_status+0x30>)
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	79fa      	ldrb	r2, [r7, #7]
 8006c88:	4905      	ldr	r1, [pc, #20]	; (8006ca0 <disk_status+0x30>)
 8006c8a:	440a      	add	r2, r1
 8006c8c:	7a12      	ldrb	r2, [r2, #8]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000a70 	.word	0x20000a70

08006ca4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <disk_initialize+0x48>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d111      	bne.n	8006ce0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <disk_initialize+0x48>)
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <disk_initialize+0x48>)
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	79fa      	ldrb	r2, [r7, #7]
 8006cd2:	4906      	ldr	r1, [pc, #24]	; (8006cec <disk_initialize+0x48>)
 8006cd4:	440a      	add	r2, r1
 8006cd6:	7a12      	ldrb	r2, [r2, #8]
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000a70 	.word	0x20000a70

08006cf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <disk_read+0x3c>)
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	689c      	ldr	r4, [r3, #8]
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <disk_read+0x3c>)
 8006d10:	4413      	add	r3, r2
 8006d12:	7a18      	ldrb	r0, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	47a0      	blx	r4
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd90      	pop	{r4, r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000a70 	.word	0x20000a70

08006d30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <disk_write+0x3c>)
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68dc      	ldr	r4, [r3, #12]
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <disk_write+0x3c>)
 8006d50:	4413      	add	r3, r2
 8006d52:	7a18      	ldrb	r0, [r3, #8]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	47a0      	blx	r4
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000a70 	.word	0x20000a70

08006d70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	603a      	str	r2, [r7, #0]
 8006d7a:	71fb      	strb	r3, [r7, #7]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <disk_ioctl+0x38>)
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	79fa      	ldrb	r2, [r7, #7]
 8006d8e:	4906      	ldr	r1, [pc, #24]	; (8006da8 <disk_ioctl+0x38>)
 8006d90:	440a      	add	r2, r1
 8006d92:	7a10      	ldrb	r0, [r2, #8]
 8006d94:	79b9      	ldrb	r1, [r7, #6]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4798      	blx	r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000a70 	.word	0x20000a70

08006dac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3301      	adds	r3, #1
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006dbc:	89fb      	ldrh	r3, [r7, #14]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	b21a      	sxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	b21b      	sxth	r3, r3
 8006dcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006dce:	89fb      	ldrh	r3, [r7, #14]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3303      	adds	r3, #3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	3202      	adds	r2, #2
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	3201      	adds	r2, #1
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	7812      	ldrb	r2, [r2, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e12:	68fb      	ldr	r3, [r7, #12]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	887a      	ldrh	r2, [r7, #2]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	887b      	ldrh	r3, [r7, #2]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	887a      	ldrh	r2, [r7, #2]
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00d      	beq.n	8006ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	1c53      	adds	r3, r2, #1
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	6179      	str	r1, [r7, #20]
 8006ece:	7812      	ldrb	r2, [r2, #0]
 8006ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f1      	bne.n	8006ec2 <mem_cpy+0x1a>
	}
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	617a      	str	r2, [r7, #20]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f3      	bne.n	8006ef8 <mem_set+0x10>
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f1c:	b480      	push	{r7}
 8006f1e:	b089      	sub	sp, #36	; 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	61ba      	str	r2, [r7, #24]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	1acb      	subs	r3, r1, r3
 8006f48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <mem_cmp+0x40>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0eb      	beq.n	8006f34 <mem_cmp+0x18>

	return r;
 8006f5c:	697b      	ldr	r3, [r7, #20]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3724      	adds	r7, #36	; 0x24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f72:	e002      	b.n	8006f7a <chk_chr+0x12>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3301      	adds	r3, #1
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <chk_chr+0x26>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d1f2      	bne.n	8006f74 <chk_chr+0xc>
	return *str;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	781b      	ldrb	r3, [r3, #0]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e029      	b.n	8007004 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fb0:	4a26      	ldr	r2, [pc, #152]	; (800704c <chk_lock+0xb0>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	4413      	add	r3, r2
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01d      	beq.n	8006ffa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fbe:	4a23      	ldr	r2, [pc, #140]	; (800704c <chk_lock+0xb0>)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d116      	bne.n	8006ffe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006fd0:	4a1e      	ldr	r2, [pc, #120]	; (800704c <chk_lock+0xb0>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3304      	adds	r3, #4
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d10c      	bne.n	8006ffe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <chk_lock+0xb0>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	3308      	adds	r3, #8
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d102      	bne.n	8006ffe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ff8:	e007      	b.n	800700a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d9d2      	bls.n	8006fb0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d109      	bne.n	8007024 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <chk_lock+0x80>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d101      	bne.n	8007020 <chk_lock+0x84>
 800701c:	2300      	movs	r3, #0
 800701e:	e010      	b.n	8007042 <chk_lock+0xa6>
 8007020:	2312      	movs	r3, #18
 8007022:	e00e      	b.n	8007042 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d108      	bne.n	800703c <chk_lock+0xa0>
 800702a:	4a08      	ldr	r2, [pc, #32]	; (800704c <chk_lock+0xb0>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	4413      	add	r3, r2
 8007032:	330c      	adds	r3, #12
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d101      	bne.n	8007040 <chk_lock+0xa4>
 800703c:	2310      	movs	r3, #16
 800703e:	e000      	b.n	8007042 <chk_lock+0xa6>
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr
 800704c:	20000850 	.word	0x20000850

08007050 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
 800705a:	e002      	b.n	8007062 <enq_lock+0x12>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d806      	bhi.n	8007076 <enq_lock+0x26>
 8007068:	4a08      	ldr	r2, [pc, #32]	; (800708c <enq_lock+0x3c>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	4413      	add	r3, r2
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b02      	cmp	r3, #2
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr
 800708c:	20000850 	.word	0x20000850

08007090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e01f      	b.n	80070e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070a0:	4a41      	ldr	r2, [pc, #260]	; (80071a8 <inc_lock+0x118>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d113      	bne.n	80070da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <inc_lock+0x118>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	4413      	add	r3, r2
 80070ba:	3304      	adds	r3, #4
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d109      	bne.n	80070da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <inc_lock+0x118>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	4413      	add	r3, r2
 80070ce:	3308      	adds	r3, #8
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d006      	beq.n	80070e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d9dc      	bls.n	80070a0 <inc_lock+0x10>
 80070e6:	e000      	b.n	80070ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80070e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d132      	bne.n	8007156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e002      	b.n	80070fc <inc_lock+0x6c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d806      	bhi.n	8007110 <inc_lock+0x80>
 8007102:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <inc_lock+0x118>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	4413      	add	r3, r2
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f2      	bne.n	80070f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d101      	bne.n	800711a <inc_lock+0x8a>
 8007116:	2300      	movs	r3, #0
 8007118:	e040      	b.n	800719c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4922      	ldr	r1, [pc, #136]	; (80071a8 <inc_lock+0x118>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	440b      	add	r3, r1
 8007126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	491e      	ldr	r1, [pc, #120]	; (80071a8 <inc_lock+0x118>)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	440b      	add	r3, r1
 8007134:	3304      	adds	r3, #4
 8007136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	491a      	ldr	r1, [pc, #104]	; (80071a8 <inc_lock+0x118>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	440b      	add	r3, r1
 8007144:	3308      	adds	r3, #8
 8007146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007148:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <inc_lock+0x118>)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4413      	add	r3, r2
 8007150:	330c      	adds	r3, #12
 8007152:	2200      	movs	r2, #0
 8007154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <inc_lock+0xe0>
 800715c:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <inc_lock+0x118>)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	4413      	add	r3, r2
 8007164:	330c      	adds	r3, #12
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <inc_lock+0xe0>
 800716c:	2300      	movs	r3, #0
 800716e:	e015      	b.n	800719c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d108      	bne.n	8007188 <inc_lock+0xf8>
 8007176:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <inc_lock+0x118>)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	4413      	add	r3, r2
 800717e:	330c      	adds	r3, #12
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	e001      	b.n	800718c <inc_lock+0xfc>
 8007188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800718c:	4906      	ldr	r1, [pc, #24]	; (80071a8 <inc_lock+0x118>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	440b      	add	r3, r1
 8007194:	330c      	adds	r3, #12
 8007196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000850 	.word	0x20000850

080071ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d825      	bhi.n	800720c <dec_lock+0x60>
		n = Files[i].ctr;
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <dec_lock+0x70>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	4413      	add	r3, r2
 80071c8:	330c      	adds	r3, #12
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d101      	bne.n	80071da <dec_lock+0x2e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80071da:	89fb      	ldrh	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <dec_lock+0x3a>
 80071e0:	89fb      	ldrh	r3, [r7, #14]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80071e6:	4a0d      	ldr	r2, [pc, #52]	; (800721c <dec_lock+0x70>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	4413      	add	r3, r2
 80071ee:	330c      	adds	r3, #12
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071f4:	89fb      	ldrh	r3, [r7, #14]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <dec_lock+0x5a>
 80071fa:	4a08      	ldr	r2, [pc, #32]	; (800721c <dec_lock+0x70>)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	737b      	strb	r3, [r7, #13]
 800720a:	e001      	b.n	8007210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800720c:	2302      	movs	r3, #2
 800720e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007210:	7b7b      	ldrb	r3, [r7, #13]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	20000850 	.word	0x20000850

08007220 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e010      	b.n	8007250 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800722e:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <clear_lock+0x44>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	4413      	add	r3, r2
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d105      	bne.n	800724a <clear_lock+0x2a>
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <clear_lock+0x44>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d9eb      	bls.n	800722e <clear_lock+0xe>
	}
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000850 	.word	0x20000850

08007268 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d034      	beq.n	80072e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	7858      	ldrb	r0, [r3, #1]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800728c:	2301      	movs	r3, #1
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	f7ff fd4e 	bl	8006d30 <disk_write>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800729a:	2301      	movs	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e022      	b.n	80072e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d217      	bcs.n	80072e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	789b      	ldrb	r3, [r3, #2]
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	e010      	b.n	80072e0 <sync_window+0x78>
					wsect += fs->fsize;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7858      	ldrb	r0, [r3, #1]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072d2:	2301      	movs	r3, #1
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	f7ff fd2b 	bl	8006d30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3b01      	subs	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d8eb      	bhi.n	80072be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d01b      	beq.n	8007340 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ffad 	bl	8007268 <sync_window>
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7858      	ldrb	r0, [r3, #1]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007322:	2301      	movs	r3, #1
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	f7ff fce3 	bl	8006cf0 <disk_read>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007330:	f04f 33ff 	mov.w	r3, #4294967295
 8007334:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff ff87 	bl	8007268 <sync_window>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d159      	bne.n	8007418 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d149      	bne.n	8007400 <sync_fs+0xb4>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	791b      	ldrb	r3, [r3, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d145      	bne.n	8007400 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	899b      	ldrh	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	2100      	movs	r1, #0
 8007382:	f7ff fdb1 	bl	8006ee8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3338      	adds	r3, #56	; 0x38
 800738a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800738e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fd43 	bl	8006e1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3338      	adds	r3, #56	; 0x38
 800739c:	4921      	ldr	r1, [pc, #132]	; (8007424 <sync_fs+0xd8>)
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fd57 	bl	8006e52 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3338      	adds	r3, #56	; 0x38
 80073a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ac:	491e      	ldr	r1, [pc, #120]	; (8007428 <sync_fs+0xdc>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fd4f 	bl	8006e52 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3338      	adds	r3, #56	; 0x38
 80073b8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7ff fd45 	bl	8006e52 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3338      	adds	r3, #56	; 0x38
 80073cc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f7ff fd3b 	bl	8006e52 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7858      	ldrb	r0, [r3, #1]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f4:	2301      	movs	r3, #1
 80073f6:	f7ff fc9b 	bl	8006d30 <disk_write>
			fs->fsi_flag = 0;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff fcb1 	bl	8006d70 <disk_ioctl>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <sync_fs+0xcc>
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	41615252 	.word	0x41615252
 8007428:	61417272 	.word	0x61417272

0800742c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	3b02      	subs	r3, #2
 800743a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	3b02      	subs	r3, #2
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d301      	bcc.n	800744c <clust2sect+0x20>
 8007448:	2300      	movs	r3, #0
 800744a:	e008      	b.n	800745e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	895b      	ldrh	r3, [r3, #10]
 8007450:	461a      	mov	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	fb03 f202 	mul.w	r2, r3, r2
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4413      	add	r3, r2
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d904      	bls.n	8007488 <get_fat+0x20>
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d302      	bcc.n	800748e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	e0bb      	b.n	8007606 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800748e:	f04f 33ff 	mov.w	r3, #4294967295
 8007492:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b03      	cmp	r3, #3
 800749a:	f000 8083 	beq.w	80075a4 <get_fat+0x13c>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	f300 80a7 	bgt.w	80075f2 <get_fat+0x18a>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d002      	beq.n	80074ae <get_fat+0x46>
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d056      	beq.n	800755a <get_fat+0xf2>
 80074ac:	e0a1      	b.n	80075f2 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	899b      	ldrh	r3, [r3, #12]
 80074c4:	4619      	mov	r1, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80074cc:	4413      	add	r3, r2
 80074ce:	4619      	mov	r1, r3
 80074d0:	6938      	ldr	r0, [r7, #16]
 80074d2:	f7ff ff0d 	bl	80072f0 <move_window>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 808d 	bne.w	80075f8 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	60fa      	str	r2, [r7, #12]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	8992      	ldrh	r2, [r2, #12]
 80074e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ec:	fb01 f202 	mul.w	r2, r1, r2
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4413      	add	r3, r2
 80074f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	899b      	ldrh	r3, [r3, #12]
 8007504:	4619      	mov	r1, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	fbb3 f3f1 	udiv	r3, r3, r1
 800750c:	4413      	add	r3, r2
 800750e:	4619      	mov	r1, r3
 8007510:	6938      	ldr	r0, [r7, #16]
 8007512:	f7ff feed 	bl	80072f0 <move_window>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d16f      	bne.n	80075fc <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	899b      	ldrh	r3, [r3, #12]
 8007520:	461a      	mov	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	fbb3 f1f2 	udiv	r1, r3, r2
 8007528:	fb01 f202 	mul.w	r2, r1, r2
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	461a      	mov	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4313      	orrs	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <get_fat+0xe8>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	091b      	lsrs	r3, r3, #4
 800754e:	e002      	b.n	8007556 <get_fat+0xee>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007556:	617b      	str	r3, [r7, #20]
			break;
 8007558:	e055      	b.n	8007606 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	899b      	ldrh	r3, [r3, #12]
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	b29b      	uxth	r3, r3
 8007566:	4619      	mov	r1, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	fbb3 f3f1 	udiv	r3, r3, r1
 800756e:	4413      	add	r3, r2
 8007570:	4619      	mov	r1, r3
 8007572:	6938      	ldr	r0, [r7, #16]
 8007574:	f7ff febc 	bl	80072f0 <move_window>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d140      	bne.n	8007600 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	8992      	ldrh	r2, [r2, #12]
 800758c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007590:	fb00 f202 	mul.w	r2, r0, r2
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	440b      	add	r3, r1
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fc07 	bl	8006dac <ld_word>
 800759e:	4603      	mov	r3, r0
 80075a0:	617b      	str	r3, [r7, #20]
			break;
 80075a2:	e030      	b.n	8007606 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	899b      	ldrh	r3, [r3, #12]
 80075ac:	089b      	lsrs	r3, r3, #2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80075b8:	4413      	add	r3, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7ff fe97 	bl	80072f0 <move_window>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11d      	bne.n	8007604 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	8992      	ldrh	r2, [r2, #12]
 80075d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80075da:	fb00 f202 	mul.w	r2, r0, r2
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	440b      	add	r3, r1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fbf9 	bl	8006dda <ld_dword>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075ee:	617b      	str	r3, [r7, #20]
			break;
 80075f0:	e009      	b.n	8007606 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075f2:	2301      	movs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e006      	b.n	8007606 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075f8:	bf00      	nop
 80075fa:	e004      	b.n	8007606 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075fc:	bf00      	nop
 80075fe:	e002      	b.n	8007606 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007604:	bf00      	nop
		}
	}

	return val;
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800761c:	2302      	movs	r3, #2
 800761e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b01      	cmp	r3, #1
 8007624:	f240 8102 	bls.w	800782c <put_fat+0x21c>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	f080 80fc 	bcs.w	800782c <put_fat+0x21c>
		switch (fs->fs_type) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b03      	cmp	r3, #3
 800763a:	f000 80b6 	beq.w	80077aa <put_fat+0x19a>
 800763e:	2b03      	cmp	r3, #3
 8007640:	f300 80fd 	bgt.w	800783e <put_fat+0x22e>
 8007644:	2b01      	cmp	r3, #1
 8007646:	d003      	beq.n	8007650 <put_fat+0x40>
 8007648:	2b02      	cmp	r3, #2
 800764a:	f000 8083 	beq.w	8007754 <put_fat+0x144>
 800764e:	e0f6      	b.n	800783e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	4413      	add	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	899b      	ldrh	r3, [r3, #12]
 8007666:	4619      	mov	r1, r3
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	fbb3 f3f1 	udiv	r3, r3, r1
 800766e:	4413      	add	r3, r2
 8007670:	4619      	mov	r1, r3
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff fe3c 	bl	80072f0 <move_window>
 8007678:	4603      	mov	r3, r0
 800767a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f040 80d6 	bne.w	8007830 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	61ba      	str	r2, [r7, #24]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	8992      	ldrh	r2, [r2, #12]
 8007694:	fbb3 f0f2 	udiv	r0, r3, r2
 8007698:	fb00 f202 	mul.w	r2, r0, r2
 800769c:	1a9b      	subs	r3, r3, r2
 800769e:	440b      	add	r3, r1
 80076a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <put_fat+0xb8>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	b25a      	sxtb	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	b25b      	sxtb	r3, r3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	b25b      	sxtb	r3, r3
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e001      	b.n	80076cc <put_fat+0xbc>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	899b      	ldrh	r3, [r3, #12]
 80076de:	4619      	mov	r1, r3
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076e6:	4413      	add	r3, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fe00 	bl	80072f0 <move_window>
 80076f0:	4603      	mov	r3, r0
 80076f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076f4:	7ffb      	ldrb	r3, [r7, #31]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 809c 	bne.w	8007834 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	899b      	ldrh	r3, [r3, #12]
 8007706:	461a      	mov	r2, r3
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	fbb3 f0f2 	udiv	r0, r3, r2
 800770e:	fb00 f202 	mul.w	r2, r0, r2
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	440b      	add	r3, r1
 8007716:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <put_fat+0x11a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e00e      	b.n	8007748 <put_fat+0x138>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b25b      	sxtb	r3, r3
 8007730:	f023 030f 	bic.w	r3, r3, #15
 8007734:	b25a      	sxtb	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	b25b      	sxtb	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b25b      	sxtb	r3, r3
 8007746:	b2db      	uxtb	r3, r3
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	70da      	strb	r2, [r3, #3]
			break;
 8007752:	e074      	b.n	800783e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	899b      	ldrh	r3, [r3, #12]
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	fbb3 f3f1 	udiv	r3, r3, r1
 8007768:	4413      	add	r3, r2
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff fdbf 	bl	80072f0 <move_window>
 8007772:	4603      	mov	r3, r0
 8007774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007776:	7ffb      	ldrb	r3, [r7, #31]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d15d      	bne.n	8007838 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	8992      	ldrh	r2, [r2, #12]
 800778a:	fbb3 f0f2 	udiv	r0, r3, r2
 800778e:	fb00 f202 	mul.w	r2, r0, r2
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	440b      	add	r3, r1
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	b292      	uxth	r2, r2
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fb3e 	bl	8006e1e <st_word>
			fs->wflag = 1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	70da      	strb	r2, [r3, #3]
			break;
 80077a8:	e049      	b.n	800783e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	899b      	ldrh	r3, [r3, #12]
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80077be:	4413      	add	r3, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fd94 	bl	80072f0 <move_window>
 80077c8:	4603      	mov	r3, r0
 80077ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077cc:	7ffb      	ldrb	r3, [r7, #31]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d134      	bne.n	800783c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	8992      	ldrh	r2, [r2, #12]
 80077e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80077ea:	fb00 f202 	mul.w	r2, r0, r2
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	440b      	add	r3, r1
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff faf1 	bl	8006dda <ld_dword>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077fe:	4323      	orrs	r3, r4
 8007800:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	8992      	ldrh	r2, [r2, #12]
 8007810:	fbb3 f0f2 	udiv	r0, r3, r2
 8007814:	fb00 f202 	mul.w	r2, r0, r2
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	440b      	add	r3, r1
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fb17 	bl	8006e52 <st_dword>
			fs->wflag = 1;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	70da      	strb	r2, [r3, #3]
			break;
 800782a:	e008      	b.n	800783e <put_fat+0x22e>
		}
	}
 800782c:	bf00      	nop
 800782e:	e006      	b.n	800783e <put_fat+0x22e>
			if (res != FR_OK) break;
 8007830:	bf00      	nop
 8007832:	e004      	b.n	800783e <put_fat+0x22e>
			if (res != FR_OK) break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <put_fat+0x22e>
			if (res != FR_OK) break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <put_fat+0x22e>
			if (res != FR_OK) break;
 800783c:	bf00      	nop
	return res;
 800783e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3724      	adds	r7, #36	; 0x24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd90      	pop	{r4, r7, pc}

08007848 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d904      	bls.n	800786e <remove_chain+0x26>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	429a      	cmp	r2, r3
 800786c:	d301      	bcc.n	8007872 <remove_chain+0x2a>
 800786e:	2302      	movs	r3, #2
 8007870:	e04b      	b.n	800790a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00c      	beq.n	8007892 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	69b8      	ldr	r0, [r7, #24]
 8007880:	f7ff fec6 	bl	8007610 <put_fat>
 8007884:	4603      	mov	r3, r0
 8007886:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007888:	7ffb      	ldrb	r3, [r7, #31]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <remove_chain+0x4a>
 800788e:	7ffb      	ldrb	r3, [r7, #31]
 8007890:	e03b      	b.n	800790a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fde7 	bl	8007468 <get_fat>
 800789a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d031      	beq.n	8007906 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <remove_chain+0x64>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e02e      	b.n	800790a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d101      	bne.n	80078b8 <remove_chain+0x70>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e028      	b.n	800790a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078b8:	2200      	movs	r2, #0
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	69b8      	ldr	r0, [r7, #24]
 80078be:	f7ff fea7 	bl	8007610 <put_fat>
 80078c2:	4603      	mov	r3, r0
 80078c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80078c6:	7ffb      	ldrb	r3, [r7, #31]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <remove_chain+0x88>
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
 80078ce:	e01c      	b.n	800790a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	3b02      	subs	r3, #2
 80078da:	429a      	cmp	r2, r3
 80078dc:	d20b      	bcs.n	80078f6 <remove_chain+0xae>
			fs->free_clst++;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	791b      	ldrb	r3, [r3, #4]
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d3c6      	bcc.n	8007892 <remove_chain+0x4a>
 8007904:	e000      	b.n	8007908 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007906:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b088      	sub	sp, #32
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <create_chain+0x2c>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	429a      	cmp	r2, r3
 800793c:	d31b      	bcc.n	8007976 <create_chain+0x64>
 800793e:	2301      	movs	r3, #1
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	e018      	b.n	8007976 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fd8e 	bl	8007468 <get_fat>
 800794c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d801      	bhi.n	8007958 <create_chain+0x46>
 8007954:	2301      	movs	r3, #1
 8007956:	e070      	b.n	8007a3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d101      	bne.n	8007964 <create_chain+0x52>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e06a      	b.n	8007a3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	429a      	cmp	r2, r3
 800796c:	d201      	bcs.n	8007972 <create_chain+0x60>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	e063      	b.n	8007a3a <create_chain+0x128>
		scl = clst;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	429a      	cmp	r2, r3
 8007988:	d307      	bcc.n	800799a <create_chain+0x88>
				ncl = 2;
 800798a:	2302      	movs	r3, #2
 800798c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	429a      	cmp	r2, r3
 8007994:	d901      	bls.n	800799a <create_chain+0x88>
 8007996:	2300      	movs	r3, #0
 8007998:	e04f      	b.n	8007a3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800799a:	69f9      	ldr	r1, [r7, #28]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fd63 	bl	8007468 <get_fat>
 80079a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00e      	beq.n	80079c8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d003      	beq.n	80079b8 <create_chain+0xa6>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b6:	d101      	bne.n	80079bc <create_chain+0xaa>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	e03e      	b.n	8007a3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d1da      	bne.n	800797a <create_chain+0x68>
 80079c4:	2300      	movs	r3, #0
 80079c6:	e038      	b.n	8007a3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80079c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295
 80079ce:	69f9      	ldr	r1, [r7, #28]
 80079d0:	6938      	ldr	r0, [r7, #16]
 80079d2:	f7ff fe1d 	bl	8007610 <put_fat>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <create_chain+0xe2>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d006      	beq.n	80079f4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6938      	ldr	r0, [r7, #16]
 80079ec:	f7ff fe10 	bl	8007610 <put_fat>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d116      	bne.n	8007a28 <create_chain+0x116>
		fs->last_clst = ncl;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	3b02      	subs	r3, #2
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d804      	bhi.n	8007a18 <create_chain+0x106>
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	1e5a      	subs	r2, r3, #1
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	711a      	strb	r2, [r3, #4]
 8007a26:	e007      	b.n	8007a38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d102      	bne.n	8007a34 <create_chain+0x122>
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	e000      	b.n	8007a36 <create_chain+0x124>
 8007a34:	2301      	movs	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a38:	69fb      	ldr	r3, [r7, #28]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	3304      	adds	r3, #4
 8007a58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	899b      	ldrh	r3, [r3, #12]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	8952      	ldrh	r2, [r2, #10]
 8007a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1d1a      	adds	r2, r3, #4
 8007a74:	613a      	str	r2, [r7, #16]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <clmt_clust+0x42>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e010      	b.n	8007aa6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d307      	bcc.n	8007a9c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3304      	adds	r3, #4
 8007a98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a9a:	e7e9      	b.n	8007a70 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007a9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4413      	add	r3, r2
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc80      	pop	{r7}
 8007aae:	4770      	bx	lr

08007ab0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac6:	d204      	bcs.n	8007ad2 <dir_sdi+0x22>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e071      	b.n	8007bba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <dir_sdi+0x46>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d902      	bls.n	8007af6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10c      	bne.n	8007b16 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	8912      	ldrh	r2, [r2, #8]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d301      	bcc.n	8007b0c <dir_sdi+0x5c>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e056      	b.n	8007bba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	61da      	str	r2, [r3, #28]
 8007b14:	e02d      	b.n	8007b72 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	895b      	ldrh	r3, [r3, #10]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	899b      	ldrh	r3, [r3, #12]
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b26:	e019      	b.n	8007b5c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fc9b 	bl	8007468 <get_fat>
 8007b32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d101      	bne.n	8007b40 <dir_sdi+0x90>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e03c      	b.n	8007bba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d904      	bls.n	8007b50 <dir_sdi+0xa0>
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d301      	bcc.n	8007b54 <dir_sdi+0xa4>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e032      	b.n	8007bba <dir_sdi+0x10a>
			ofs -= csz;
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d2e1      	bcs.n	8007b28 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f7ff fc60 	bl	800742c <clust2sect>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <dir_sdi+0xd4>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e01a      	b.n	8007bba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	899b      	ldrh	r3, [r3, #12]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	899b      	ldrh	r3, [r3, #12]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bac:	fb00 f202 	mul.w	r2, r0, r2
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	18ca      	adds	r2, r1, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	3320      	adds	r3, #32
 8007bd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <dir_next+0x28>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007be8:	d301      	bcc.n	8007bee <dir_next+0x2c>
 8007bea:	2304      	movs	r3, #4
 8007bec:	e0bb      	b.n	8007d66 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	899b      	ldrh	r3, [r3, #12]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bfa:	fb01 f202 	mul.w	r2, r1, r2
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 809d 	bne.w	8007d40 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	8912      	ldrh	r2, [r2, #8]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	f0c0 808d 	bcc.w	8007d40 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	61da      	str	r2, [r3, #28]
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	e09a      	b.n	8007d66 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	899b      	ldrh	r3, [r3, #12]
 8007c34:	461a      	mov	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	8952      	ldrh	r2, [r2, #10]
 8007c40:	3a01      	subs	r2, #1
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d17b      	bne.n	8007d40 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7ff fc09 	bl	8007468 <get_fat>
 8007c56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d801      	bhi.n	8007c62 <dir_next+0xa0>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e081      	b.n	8007d66 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d101      	bne.n	8007c6e <dir_next+0xac>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e07b      	b.n	8007d66 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d359      	bcc.n	8007d2c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	61da      	str	r2, [r3, #28]
 8007c84:	2304      	movs	r3, #4
 8007c86:	e06e      	b.n	8007d66 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7ff fe3e 	bl	8007912 <create_chain>
 8007c96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <dir_next+0xe0>
 8007c9e:	2307      	movs	r3, #7
 8007ca0:	e061      	b.n	8007d66 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <dir_next+0xea>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e05c      	b.n	8007d66 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	d101      	bne.n	8007cb8 <dir_next+0xf6>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e056      	b.n	8007d66 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff fad5 	bl	8007268 <sync_window>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <dir_next+0x106>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e04e      	b.n	8007d66 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	899b      	ldrh	r3, [r3, #12]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f7ff f907 	bl	8006ee8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	6979      	ldr	r1, [r7, #20]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fba3 	bl	800742c <clust2sect>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	635a      	str	r2, [r3, #52]	; 0x34
 8007cec:	e012      	b.n	8007d14 <dir_next+0x152>
						fs->wflag = 1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fab7 	bl	8007268 <sync_window>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <dir_next+0x142>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e030      	b.n	8007d66 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	3301      	adds	r3, #1
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	635a      	str	r2, [r3, #52]	; 0x34
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	895b      	ldrh	r3, [r3, #10]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d3e6      	bcc.n	8007cee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff fb79 	bl	800742c <clust2sect>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	899b      	ldrh	r3, [r3, #12]
 8007d50:	461a      	mov	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d58:	fb00 f202 	mul.w	r2, r0, r2
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	18ca      	adds	r2, r1, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d7e:	2100      	movs	r1, #0
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fe95 	bl	8007ab0 <dir_sdi>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d12b      	bne.n	8007de8 <dir_alloc+0x7a>
		n = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff faa8 	bl	80072f0 <move_window>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11d      	bne.n	8007de6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2be5      	cmp	r3, #229	; 0xe5
 8007db2:	d004      	beq.n	8007dbe <dir_alloc+0x50>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d102      	bne.n	8007dd2 <dir_alloc+0x64>
 8007dcc:	e00c      	b.n	8007de8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fef4 	bl	8007bc2 <dir_next>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0d7      	beq.n	8007d94 <dir_alloc+0x26>
 8007de4:	e000      	b.n	8007de8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007de6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d101      	bne.n	8007df2 <dir_alloc+0x84>
 8007dee:	2307      	movs	r3, #7
 8007df0:	75fb      	strb	r3, [r7, #23]
	return res;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	331a      	adds	r3, #26
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe ffce 	bl	8006dac <ld_word>
 8007e10:	4603      	mov	r3, r0
 8007e12:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d109      	bne.n	8007e30 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe ffc3 	bl	8006dac <ld_word>
 8007e26:	4603      	mov	r3, r0
 8007e28:	041b      	lsls	r3, r3, #16
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e30:	68fb      	ldr	r3, [r7, #12]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	331a      	adds	r3, #26
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	b292      	uxth	r2, r2
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe ffe4 	bl	8006e1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d109      	bne.n	8007e72 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f103 0214 	add.w	r2, r3, #20
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f7fe ffd6 	bl	8006e1e <st_word>
	}
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007e7c:	b590      	push	{r4, r7, lr}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	331a      	adds	r3, #26
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe ff8e 	bl	8006dac <ld_word>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <cmp_lfn+0x1e>
 8007e96:	2300      	movs	r3, #0
 8007e98:	e059      	b.n	8007f4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea2:	1e5a      	subs	r2, r3, #1
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	81fb      	strh	r3, [r7, #14]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	e033      	b.n	8007f22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007eba:	4a27      	ldr	r2, [pc, #156]	; (8007f58 <cmp_lfn+0xdc>)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe ff6f 	bl	8006dac <ld_word>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2bfe      	cmp	r3, #254	; 0xfe
 8007edc:	d812      	bhi.n	8007f04 <cmp_lfn+0x88>
 8007ede:	89bb      	ldrh	r3, [r7, #12]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 f9c5 	bl	800a270 <ff_wtoupper>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	461c      	mov	r4, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	617a      	str	r2, [r7, #20]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f002 f9b9 	bl	800a270 <ff_wtoupper>
 8007efe:	4603      	mov	r3, r0
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d001      	beq.n	8007f08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007f04:	2300      	movs	r3, #0
 8007f06:	e022      	b.n	8007f4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007f08:	89bb      	ldrh	r3, [r7, #12]
 8007f0a:	81fb      	strh	r3, [r7, #14]
 8007f0c:	e006      	b.n	8007f1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007f0e:	89bb      	ldrh	r3, [r7, #12]
 8007f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d001      	beq.n	8007f1c <cmp_lfn+0xa0>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e018      	b.n	8007f4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	d9c8      	bls.n	8007eba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <cmp_lfn+0xd0>
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <cmp_lfn+0xd0>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4413      	add	r3, r2
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <cmp_lfn+0xd0>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e000      	b.n	8007f4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007f4c:	2301      	movs	r3, #1
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd90      	pop	{r4, r7, pc}
 8007f56:	bf00      	nop
 8007f58:	080119d4 	.word	0x080119d4

08007f5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4611      	mov	r1, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	71fb      	strb	r3, [r7, #7]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	330d      	adds	r3, #13
 8007f76:	79ba      	ldrb	r2, [r7, #6]
 8007f78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	330b      	adds	r3, #11
 8007f7e:	220f      	movs	r2, #15
 8007f80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	330c      	adds	r3, #12
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	331a      	adds	r3, #26
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe ff44 	bl	8006e1e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	82fb      	strh	r3, [r7, #22]
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007fae:	8afb      	ldrh	r3, [r7, #22]
 8007fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <put_lfn+0x6c>
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	61fa      	str	r2, [r7, #28]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007fc8:	4a17      	ldr	r2, [pc, #92]	; (8008028 <put_lfn+0xcc>)
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	4413      	add	r3, r2
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	8afa      	ldrh	r2, [r7, #22]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe ff1f 	bl	8006e1e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007fe0:	8afb      	ldrh	r3, [r7, #22]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <put_lfn+0x90>
 8007fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b0c      	cmp	r3, #12
 8007ff6:	d9da      	bls.n	8007fae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d006      	beq.n	8008010 <put_lfn+0xb4>
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <put_lfn+0xbc>
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008016:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	79fa      	ldrb	r2, [r7, #7]
 800801c:	701a      	strb	r2, [r3, #0]
}
 800801e:	bf00      	nop
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	080119d4 	.word	0x080119d4

0800802c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08c      	sub	sp, #48	; 0x30
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800803a:	220b      	movs	r2, #11
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f7fe ff32 	bl	8006ea8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b05      	cmp	r3, #5
 8008048:	d92b      	bls.n	80080a2 <gen_numname+0x76>
		sr = seq;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800804e:	e022      	b.n	8008096 <gen_numname+0x6a>
			wc = *lfn++;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800805a:	2300      	movs	r3, #0
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
 800805e:	e017      	b.n	8008090 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	005a      	lsls	r2, r3, #1
 8008064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	4413      	add	r3, r2
 800806c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800806e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <gen_numname+0x5e>
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008084:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008088:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	3301      	adds	r3, #1
 800808e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	2b0f      	cmp	r3, #15
 8008094:	d9e4      	bls.n	8008060 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1d8      	bne.n	8008050 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80080a2:	2307      	movs	r3, #7
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80080b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080ba:	2b39      	cmp	r3, #57	; 0x39
 80080bc:	d904      	bls.n	80080c8 <gen_numname+0x9c>
 80080be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080c2:	3307      	adds	r3, #7
 80080c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	1e5a      	subs	r2, r3, #1
 80080cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80080ce:	3330      	adds	r3, #48	; 0x30
 80080d0:	443b      	add	r3, r7
 80080d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80080d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	603b      	str	r3, [r7, #0]
	} while (seq);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1df      	bne.n	80080a6 <gen_numname+0x7a>
	ns[i] = '~';
 80080e6:	f107 0214 	add.w	r2, r7, #20
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	4413      	add	r3, r2
 80080ee:	227e      	movs	r2, #126	; 0x7e
 80080f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
 80080f6:	e002      	b.n	80080fe <gen_numname+0xd2>
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	3301      	adds	r3, #1
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
 80080fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	429a      	cmp	r2, r3
 8008104:	d205      	bcs.n	8008112 <gen_numname+0xe6>
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	4413      	add	r3, r2
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b20      	cmp	r3, #32
 8008110:	d1f2      	bne.n	80080f8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2b07      	cmp	r3, #7
 8008116:	d807      	bhi.n	8008128 <gen_numname+0xfc>
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	62ba      	str	r2, [r7, #40]	; 0x28
 800811e:	3330      	adds	r3, #48	; 0x30
 8008120:	443b      	add	r3, r7
 8008122:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008126:	e000      	b.n	800812a <gen_numname+0xfe>
 8008128:	2120      	movs	r1, #32
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	627a      	str	r2, [r7, #36]	; 0x24
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	460a      	mov	r2, r1
 8008136:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2b07      	cmp	r3, #7
 800813c:	d9e9      	bls.n	8008112 <gen_numname+0xe6>
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3730      	adds	r7, #48	; 0x30
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008154:	230b      	movs	r3, #11
 8008156:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	0852      	lsrs	r2, r2, #1
 800815e:	01db      	lsls	r3, r3, #7
 8008160:	4313      	orrs	r3, r2
 8008162:	b2da      	uxtb	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	1c59      	adds	r1, r3, #1
 8008168:	6079      	str	r1, [r7, #4]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	4413      	add	r3, r2
 800816e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1ed      	bne.n	8008158 <sum_sfn+0x10>
	return sum;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008196:	2100      	movs	r1, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fc89 	bl	8007ab0 <dir_sdi>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <dir_find+0x24>
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	e0a9      	b.n	8008300 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081ac:	23ff      	movs	r3, #255	; 0xff
 80081ae:	753b      	strb	r3, [r7, #20]
 80081b0:	7d3b      	ldrb	r3, [r7, #20]
 80081b2:	757b      	strb	r3, [r7, #21]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4619      	mov	r1, r3
 80081c2:	6938      	ldr	r0, [r7, #16]
 80081c4:	f7ff f894 	bl	80072f0 <move_window>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 8090 	bne.w	80082f4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <dir_find+0x60>
 80081e2:	2304      	movs	r3, #4
 80081e4:	75fb      	strb	r3, [r7, #23]
 80081e6:	e08a      	b.n	80082fe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	330b      	adds	r3, #11
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7bfa      	ldrb	r2, [r7, #15]
 80081fa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80081fc:	7dbb      	ldrb	r3, [r7, #22]
 80081fe:	2be5      	cmp	r3, #229	; 0xe5
 8008200:	d007      	beq.n	8008212 <dir_find+0x8a>
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <dir_find+0x98>
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b0f      	cmp	r3, #15
 8008210:	d006      	beq.n	8008220 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008212:	23ff      	movs	r3, #255	; 0xff
 8008214:	757b      	strb	r3, [r7, #21]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	631a      	str	r2, [r3, #48]	; 0x30
 800821e:	e05e      	b.n	80082de <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b0f      	cmp	r3, #15
 8008224:	d136      	bne.n	8008294 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800822c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d154      	bne.n	80082de <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008234:	7dbb      	ldrb	r3, [r7, #22]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	7b5b      	ldrb	r3, [r3, #13]
 8008244:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008246:	7dbb      	ldrb	r3, [r7, #22]
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	75bb      	strb	r3, [r7, #22]
 800824e:	7dbb      	ldrb	r3, [r7, #22]
 8008250:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800825a:	7dba      	ldrb	r2, [r7, #22]
 800825c:	7d7b      	ldrb	r3, [r7, #21]
 800825e:	429a      	cmp	r2, r3
 8008260:	d115      	bne.n	800828e <dir_find+0x106>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	330d      	adds	r3, #13
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	7d3a      	ldrb	r2, [r7, #20]
 800826c:	429a      	cmp	r2, r3
 800826e:	d10e      	bne.n	800828e <dir_find+0x106>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	4619      	mov	r1, r3
 800827a:	4610      	mov	r0, r2
 800827c:	f7ff fdfe 	bl	8007e7c <cmp_lfn>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <dir_find+0x106>
 8008286:	7d7b      	ldrb	r3, [r7, #21]
 8008288:	3b01      	subs	r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	e000      	b.n	8008290 <dir_find+0x108>
 800828e:	23ff      	movs	r3, #255	; 0xff
 8008290:	757b      	strb	r3, [r7, #21]
 8008292:	e024      	b.n	80082de <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008294:	7d7b      	ldrb	r3, [r7, #21]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <dir_find+0x126>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff ff52 	bl	8008148 <sum_sfn>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	7d3b      	ldrb	r3, [r7, #20]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d024      	beq.n	80082f8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <dir_find+0x14a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a18      	ldr	r0, [r3, #32]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3324      	adds	r3, #36	; 0x24
 80082c4:	220b      	movs	r2, #11
 80082c6:	4619      	mov	r1, r3
 80082c8:	f7fe fe28 	bl	8006f1c <mem_cmp>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d014      	beq.n	80082fc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80082d2:	23ff      	movs	r3, #255	; 0xff
 80082d4:	757b      	strb	r3, [r7, #21]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fc6e 	bl	8007bc2 <dir_next>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f43f af65 	beq.w	80081bc <dir_find+0x34>
 80082f2:	e004      	b.n	80082fe <dir_find+0x176>
		if (res != FR_OK) break;
 80082f4:	bf00      	nop
 80082f6:	e002      	b.n	80082fe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80082fc:	bf00      	nop

	return res;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	; 0x30
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800831c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <dir_register+0x20>
 8008324:	2306      	movs	r3, #6
 8008326:	e0e0      	b.n	80084ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008328:	2300      	movs	r3, #0
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
 800832c:	e002      	b.n	8008334 <dir_register+0x2c>
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	3301      	adds	r3, #1
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f4      	bne.n	800832e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	220c      	movs	r2, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fda9 	bl	8006ea8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d032      	beq.n	80083c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2240      	movs	r2, #64	; 0x40
 8008364:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008368:	2301      	movs	r3, #1
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28
 800836c:	e016      	b.n	800839c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	f107 010c 	add.w	r1, r7, #12
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	f7ff fe55 	bl	800802c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff ff00 	bl	8008188 <dir_find>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800838e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	3301      	adds	r3, #1
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2b63      	cmp	r3, #99	; 0x63
 80083a0:	d9e5      	bls.n	800836e <dir_register+0x66>
 80083a2:	e000      	b.n	80083a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80083a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	2b64      	cmp	r3, #100	; 0x64
 80083aa:	d101      	bne.n	80083b0 <dir_register+0xa8>
 80083ac:	2307      	movs	r3, #7
 80083ae:	e09c      	b.n	80084ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80083b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d002      	beq.n	80083be <dir_register+0xb6>
 80083b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083bc:	e095      	b.n	80084ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80083be:	7dfa      	ldrb	r2, [r7, #23]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <dir_register+0xd8>
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	330c      	adds	r3, #12
 80083d4:	4a47      	ldr	r2, [pc, #284]	; (80084f4 <dir_register+0x1ec>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	089b      	lsrs	r3, r3, #2
 80083dc:	3301      	adds	r3, #1
 80083de:	e000      	b.n	80083e2 <dir_register+0xda>
 80083e0:	2301      	movs	r3, #1
 80083e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80083e4:	6a39      	ldr	r1, [r7, #32]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fcc1 	bl	8007d6e <dir_alloc>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80083f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d148      	bne.n	800848c <dir_register+0x184>
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d042      	beq.n	800848c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	015b      	lsls	r3, r3, #5
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fb4c 	bl	8007ab0 <dir_sdi>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800841e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008422:	2b00      	cmp	r3, #0
 8008424:	d132      	bne.n	800848c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3324      	adds	r3, #36	; 0x24
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff fe8c 	bl	8008148 <sum_sfn>
 8008430:	4603      	mov	r3, r0
 8008432:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	4619      	mov	r1, r3
 800843a:	69f8      	ldr	r0, [r7, #28]
 800843c:	f7fe ff58 	bl	80072f0 <move_window>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800844a:	2b00      	cmp	r3, #0
 800844c:	d11d      	bne.n	800848a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	6918      	ldr	r0, [r3, #16]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a19      	ldr	r1, [r3, #32]
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	7efb      	ldrb	r3, [r7, #27]
 800845c:	f7ff fd7e 	bl	8007f5c <put_lfn>
				fs->wflag = 1;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2201      	movs	r2, #1
 8008464:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008466:	2100      	movs	r1, #0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fbaa 	bl	8007bc2 <dir_next>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <dir_register+0x184>
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	3b01      	subs	r3, #1
 8008480:	623b      	str	r3, [r7, #32]
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1d5      	bne.n	8008434 <dir_register+0x12c>
 8008488:	e000      	b.n	800848c <dir_register+0x184>
				if (res != FR_OK) break;
 800848a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800848c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008490:	2b00      	cmp	r3, #0
 8008492:	d128      	bne.n	80084e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	4619      	mov	r1, r3
 800849a:	69f8      	ldr	r0, [r7, #28]
 800849c:	f7fe ff28 	bl	80072f0 <move_window>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80084a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d11b      	bne.n	80084e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	2220      	movs	r2, #32
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fd16 	bl	8006ee8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a18      	ldr	r0, [r3, #32]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3324      	adds	r3, #36	; 0x24
 80084c4:	220b      	movs	r2, #11
 80084c6:	4619      	mov	r1, r3
 80084c8:	f7fe fcee 	bl	8006ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	330c      	adds	r3, #12
 80084d8:	f002 0218 	and.w	r2, r2, #24
 80084dc:	b2d2      	uxtb	r2, r2
 80084de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2201      	movs	r2, #1
 80084e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80084e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3730      	adds	r7, #48	; 0x30
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	4ec4ec4f 	.word	0x4ec4ec4f

080084f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	613b      	str	r3, [r7, #16]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	61ba      	str	r2, [r7, #24]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4413      	add	r3, r2
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008528:	2b1f      	cmp	r3, #31
 800852a:	d940      	bls.n	80085ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800852c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800852e:	2b2f      	cmp	r3, #47	; 0x2f
 8008530:	d006      	beq.n	8008540 <create_name+0x48>
 8008532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008534:	2b5c      	cmp	r3, #92	; 0x5c
 8008536:	d110      	bne.n	800855a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008538:	e002      	b.n	8008540 <create_name+0x48>
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	3301      	adds	r3, #1
 800853e:	61bb      	str	r3, [r7, #24]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b2f      	cmp	r3, #47	; 0x2f
 800854a:	d0f6      	beq.n	800853a <create_name+0x42>
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	4413      	add	r3, r2
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b5c      	cmp	r3, #92	; 0x5c
 8008556:	d0f0      	beq.n	800853a <create_name+0x42>
			break;
 8008558:	e02a      	b.n	80085b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2bfe      	cmp	r3, #254	; 0xfe
 800855e:	d901      	bls.n	8008564 <create_name+0x6c>
 8008560:	2306      	movs	r3, #6
 8008562:	e17d      	b.n	8008860 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008566:	b2db      	uxtb	r3, r3
 8008568:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800856a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800856c:	2101      	movs	r1, #1
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fe44 	bl	800a1fc <ff_convert>
 8008574:	4603      	mov	r3, r0
 8008576:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <create_name+0x8a>
 800857e:	2306      	movs	r3, #6
 8008580:	e16e      	b.n	8008860 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008584:	2b7f      	cmp	r3, #127	; 0x7f
 8008586:	d809      	bhi.n	800859c <create_name+0xa4>
 8008588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800858a:	4619      	mov	r1, r3
 800858c:	488d      	ldr	r0, [pc, #564]	; (80087c4 <create_name+0x2cc>)
 800858e:	f7fe fceb 	bl	8006f68 <chk_chr>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <create_name+0xa4>
 8008598:	2306      	movs	r3, #6
 800859a:	e161      	b.n	8008860 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	617a      	str	r2, [r7, #20]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80085ac:	e7b4      	b.n	8008518 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80085ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	441a      	add	r2, r3
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80085ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085bc:	2b1f      	cmp	r3, #31
 80085be:	d801      	bhi.n	80085c4 <create_name+0xcc>
 80085c0:	2304      	movs	r3, #4
 80085c2:	e000      	b.n	80085c6 <create_name+0xce>
 80085c4:	2300      	movs	r3, #0
 80085c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085ca:	e011      	b.n	80085f0 <create_name+0xf8>
		w = lfn[di - 1];
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085d2:	3b01      	subs	r3, #1
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80085de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d002      	beq.n	80085ea <create_name+0xf2>
 80085e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085e6:	2b2e      	cmp	r3, #46	; 0x2e
 80085e8:	d106      	bne.n	80085f8 <create_name+0x100>
		di--;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1ea      	bne.n	80085cc <create_name+0xd4>
 80085f6:	e000      	b.n	80085fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80085f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	2200      	movs	r2, #0
 8008604:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <create_name+0x118>
 800860c:	2306      	movs	r3, #6
 800860e:	e127      	b.n	8008860 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	220b      	movs	r2, #11
 8008616:	2120      	movs	r1, #32
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fc65 	bl	8006ee8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e002      	b.n	800862a <create_name+0x132>
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	3301      	adds	r3, #1
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	2b20      	cmp	r3, #32
 8008636:	d0f5      	beq.n	8008624 <create_name+0x12c>
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	2b2e      	cmp	r3, #46	; 0x2e
 8008644:	d0ee      	beq.n	8008624 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <create_name+0x168>
 800864c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008650:	f043 0303 	orr.w	r3, r3, #3
 8008654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008658:	e002      	b.n	8008660 <create_name+0x168>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	3b01      	subs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <create_name+0x182>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800866c:	3b01      	subs	r3, #1
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2b2e      	cmp	r3, #46	; 0x2e
 8008678:	d1ef      	bne.n	800865a <create_name+0x162>

	i = b = 0; ni = 8;
 800867a:	2300      	movs	r3, #0
 800867c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008680:	2300      	movs	r3, #0
 8008682:	623b      	str	r3, [r7, #32]
 8008684:	2308      	movs	r3, #8
 8008686:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	61ba      	str	r2, [r7, #24]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 8090 	beq.w	80087c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80086a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d006      	beq.n	80086b4 <create_name+0x1bc>
 80086a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a8:	2b2e      	cmp	r3, #46	; 0x2e
 80086aa:	d10a      	bne.n	80086c2 <create_name+0x1ca>
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d006      	beq.n	80086c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80086b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b8:	f043 0303 	orr.w	r3, r3, #3
 80086bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086c0:	e07d      	b.n	80087be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80086c2:	6a3a      	ldr	r2, [r7, #32]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d203      	bcs.n	80086d2 <create_name+0x1da>
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d123      	bne.n	800871a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b0b      	cmp	r3, #11
 80086d6:	d106      	bne.n	80086e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80086d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086dc:	f043 0303 	orr.w	r3, r3, #3
 80086e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086e4:	e075      	b.n	80087d2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d005      	beq.n	80086fa <create_name+0x202>
 80086ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f2:	f043 0303 	orr.w	r3, r3, #3
 80086f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d866      	bhi.n	80087d0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	2308      	movs	r3, #8
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	230b      	movs	r3, #11
 800870c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800870e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008718:	e051      	b.n	80087be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800871a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800871c:	2b7f      	cmp	r3, #127	; 0x7f
 800871e:	d914      	bls.n	800874a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f001 fd69 	bl	800a1fc <ff_convert>
 800872a:	4603      	mov	r3, r0
 800872c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800872e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <create_name+0x246>
 8008734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008736:	3b80      	subs	r3, #128	; 0x80
 8008738:	4a23      	ldr	r2, [pc, #140]	; (80087c8 <create_name+0x2d0>)
 800873a:	5cd3      	ldrb	r3, [r2, r3]
 800873c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800873e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008742:	f043 0302 	orr.w	r3, r3, #2
 8008746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800874a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <create_name+0x268>
 8008750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008752:	4619      	mov	r1, r3
 8008754:	481d      	ldr	r0, [pc, #116]	; (80087cc <create_name+0x2d4>)
 8008756:	f7fe fc07 	bl	8006f68 <chk_chr>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008760:	235f      	movs	r3, #95	; 0x5f
 8008762:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008768:	f043 0303 	orr.w	r3, r3, #3
 800876c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008770:	e01b      	b.n	80087aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d909      	bls.n	800878c <create_name+0x294>
 8008778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800877a:	2b5a      	cmp	r3, #90	; 0x5a
 800877c:	d806      	bhi.n	800878c <create_name+0x294>
					b |= 2;
 800877e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008782:	f043 0302 	orr.w	r3, r3, #2
 8008786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800878a:	e00e      	b.n	80087aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800878c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800878e:	2b60      	cmp	r3, #96	; 0x60
 8008790:	d90b      	bls.n	80087aa <create_name+0x2b2>
 8008792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008794:	2b7a      	cmp	r3, #122	; 0x7a
 8008796:	d808      	bhi.n	80087aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008798:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80087a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087a6:	3b20      	subs	r3, #32
 80087a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	623a      	str	r2, [r7, #32]
 80087b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087b2:	b2d1      	uxtb	r1, r2
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	460a      	mov	r2, r1
 80087ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80087be:	e763      	b.n	8008688 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80087c0:	bf00      	nop
 80087c2:	e006      	b.n	80087d2 <create_name+0x2da>
 80087c4:	08011518 	.word	0x08011518
 80087c8:	08011954 	.word	0x08011954
 80087cc:	08011524 	.word	0x08011524
			if (si > di) break;			/* No extension */
 80087d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087d8:	2be5      	cmp	r3, #229	; 0xe5
 80087da:	d103      	bne.n	80087e4 <create_name+0x2ec>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2205      	movs	r2, #5
 80087e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d104      	bne.n	80087f4 <create_name+0x2fc>
 80087ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80087f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087f8:	f003 030c 	and.w	r3, r3, #12
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d005      	beq.n	800880c <create_name+0x314>
 8008800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	2b03      	cmp	r3, #3
 800880a:	d105      	bne.n	8008818 <create_name+0x320>
 800880c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008810:	f043 0302 	orr.w	r3, r3, #2
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d117      	bne.n	8008854 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d105      	bne.n	800883c <create_name+0x344>
 8008830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008834:	f043 0310 	orr.w	r3, r3, #16
 8008838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800883c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008840:	f003 030c 	and.w	r3, r3, #12
 8008844:	2b04      	cmp	r3, #4
 8008846:	d105      	bne.n	8008854 <create_name+0x35c>
 8008848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800884c:	f043 0308 	orr.w	r3, r3, #8
 8008850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800885a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800885e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	; 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800887c:	e002      	b.n	8008884 <follow_path+0x1c>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b2f      	cmp	r3, #47	; 0x2f
 800888a:	d0f8      	beq.n	800887e <follow_path+0x16>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b5c      	cmp	r3, #92	; 0x5c
 8008892:	d0f4      	beq.n	800887e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2200      	movs	r2, #0
 8008898:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b1f      	cmp	r3, #31
 80088a0:	d80a      	bhi.n	80088b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2280      	movs	r2, #128	; 0x80
 80088a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff f8ff 	bl	8007ab0 <dir_sdi>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
 80088b6:	e048      	b.n	800894a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088b8:	463b      	mov	r3, r7
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fe1b 	bl	80084f8 <create_name>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d139      	bne.n	8008940 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fc5b 	bl	8008188 <dir_find>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d12c      	bne.n	8008944 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088ea:	7afb      	ldrb	r3, [r7, #11]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d127      	bne.n	8008944 <follow_path+0xdc>
 80088f4:	2305      	movs	r3, #5
 80088f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80088f8:	e024      	b.n	8008944 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d121      	bne.n	8008948 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	799b      	ldrb	r3, [r3, #6]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008910:	2305      	movs	r3, #5
 8008912:	75fb      	strb	r3, [r7, #23]
 8008914:	e019      	b.n	800894a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	8992      	ldrh	r2, [r2, #12]
 8008924:	fbb3 f0f2 	udiv	r0, r3, r2
 8008928:	fb00 f202 	mul.w	r2, r0, r2
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	440b      	add	r3, r1
 8008930:	4619      	mov	r1, r3
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fa62 	bl	8007dfc <ld_clust>
 8008938:	4602      	mov	r2, r0
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800893e:	e7bb      	b.n	80088b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008940:	bf00      	nop
 8008942:	e002      	b.n	800894a <follow_path+0xe2>
				break;
 8008944:	bf00      	nop
 8008946:	e000      	b.n	800894a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008948:	bf00      	nop
			}
		}
	}

	return res;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800895c:	f04f 33ff 	mov.w	r3, #4294967295
 8008960:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d031      	beq.n	80089ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e002      	b.n	8008978 <get_ldnumber+0x24>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	3301      	adds	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b1f      	cmp	r3, #31
 800897e:	d903      	bls.n	8008988 <get_ldnumber+0x34>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b3a      	cmp	r3, #58	; 0x3a
 8008986:	d1f4      	bne.n	8008972 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b3a      	cmp	r3, #58	; 0x3a
 800898e:	d11c      	bne.n	80089ca <get_ldnumber+0x76>
			tp = *path;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	60fa      	str	r2, [r7, #12]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	3b30      	subs	r3, #48	; 0x30
 80089a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d80e      	bhi.n	80089c6 <get_ldnumber+0x72>
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d10a      	bne.n	80089c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <get_ldnumber+0x72>
					vol = (int)i;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	3301      	adds	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	e002      	b.n	80089d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80089ce:	693b      	ldr	r3, [r7, #16]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr
	...

080089dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	70da      	strb	r2, [r3, #3]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fe fc7a 	bl	80072f0 <move_window>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <check_fs+0x2a>
 8008a02:	2304      	movs	r3, #4
 8008a04:	e038      	b.n	8008a78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3338      	adds	r3, #56	; 0x38
 8008a0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe f9cc 	bl	8006dac <ld_word>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <check_fs+0x48>
 8008a20:	2303      	movs	r3, #3
 8008a22:	e029      	b.n	8008a78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a2a:	2be9      	cmp	r3, #233	; 0xe9
 8008a2c:	d009      	beq.n	8008a42 <check_fs+0x66>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a34:	2beb      	cmp	r3, #235	; 0xeb
 8008a36:	d11e      	bne.n	8008a76 <check_fs+0x9a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a3e:	2b90      	cmp	r3, #144	; 0x90
 8008a40:	d119      	bne.n	8008a76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3338      	adds	r3, #56	; 0x38
 8008a46:	3336      	adds	r3, #54	; 0x36
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe f9c6 	bl	8006dda <ld_dword>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a54:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <check_fs+0xa4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d101      	bne.n	8008a5e <check_fs+0x82>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e00c      	b.n	8008a78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3338      	adds	r3, #56	; 0x38
 8008a62:	3352      	adds	r3, #82	; 0x52
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f9b8 	bl	8006dda <ld_dword>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4a05      	ldr	r2, [pc, #20]	; (8008a84 <check_fs+0xa8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d101      	bne.n	8008a76 <check_fs+0x9a>
 8008a72:	2300      	movs	r3, #0
 8008a74:	e000      	b.n	8008a78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a76:	2302      	movs	r3, #2
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	00544146 	.word	0x00544146
 8008a84:	33544146 	.word	0x33544146

08008a88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b096      	sub	sp, #88	; 0x58
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff ff59 	bl	8008954 <get_ldnumber>
 8008aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da01      	bge.n	8008aae <find_volume+0x26>
 8008aaa:	230b      	movs	r3, #11
 8008aac:	e265      	b.n	8008f7a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008aae:	4a9f      	ldr	r2, [pc, #636]	; (8008d2c <find_volume+0x2a4>)
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <find_volume+0x3a>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	e25b      	b.n	8008f7a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01a      	beq.n	8008b0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe f8c7 	bl	8006c70 <disk_status>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10c      	bne.n	8008b0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <find_volume+0x82>
 8008afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008b06:	230a      	movs	r3, #10
 8008b08:	e237      	b.n	8008f7a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e235      	b.n	8008f7a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe f8bf 	bl	8006ca4 <disk_initialize>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e21e      	b.n	8008f7a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <find_volume+0xca>
 8008b42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e213      	b.n	8008f7a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	7858      	ldrb	r0, [r3, #1]
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	330c      	adds	r3, #12
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2102      	movs	r1, #2
 8008b5e:	f7fe f907 	bl	8006d70 <disk_ioctl>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <find_volume+0xe4>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e206      	b.n	8008f7a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	899b      	ldrh	r3, [r3, #12]
 8008b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b74:	d80d      	bhi.n	8008b92 <find_volume+0x10a>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	899b      	ldrh	r3, [r3, #12]
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7e:	d308      	bcc.n	8008b92 <find_volume+0x10a>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	899b      	ldrh	r3, [r3, #12]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	899b      	ldrh	r3, [r3, #12]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <find_volume+0x10e>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e1f1      	b.n	8008f7a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b9e:	f7ff ff1d 	bl	80089dc <check_fs>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d149      	bne.n	8008c44 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb4:	e01e      	b.n	8008bf4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008bc4:	4413      	add	r3, r2
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	3304      	adds	r3, #4
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d006      	beq.n	8008be0 <find_volume+0x158>
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe f8ff 	bl	8006dda <ld_dword>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	e000      	b.n	8008be2 <find_volume+0x15a>
 8008be0:	2200      	movs	r2, #0
 8008be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3358      	adds	r3, #88	; 0x58
 8008be8:	443b      	add	r3, r7
 8008bea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8008bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d9dd      	bls.n	8008bb6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <find_volume+0x182>
 8008c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c06:	3b01      	subs	r3, #1
 8008c08:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	3358      	adds	r3, #88	; 0x58
 8008c10:	443b      	add	r3, r7
 8008c12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008c16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <find_volume+0x1a2>
 8008c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c22:	f7ff fedb 	bl	80089dc <check_fs>
 8008c26:	4603      	mov	r3, r0
 8008c28:	e000      	b.n	8008c2c <find_volume+0x1a4>
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d905      	bls.n	8008c44 <find_volume+0x1bc>
 8008c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d9e2      	bls.n	8008c0a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d101      	bne.n	8008c50 <find_volume+0x1c8>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e194      	b.n	8008f7a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d901      	bls.n	8008c5c <find_volume+0x1d4>
 8008c58:	230d      	movs	r3, #13
 8008c5a:	e18e      	b.n	8008f7a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	3338      	adds	r3, #56	; 0x38
 8008c60:	330b      	adds	r3, #11
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe f8a2 	bl	8006dac <ld_word>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	899b      	ldrh	r3, [r3, #12]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d001      	beq.n	8008c78 <find_volume+0x1f0>
 8008c74:	230d      	movs	r3, #13
 8008c76:	e180      	b.n	8008f7a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	3338      	adds	r3, #56	; 0x38
 8008c7c:	3316      	adds	r3, #22
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe f894 	bl	8006dac <ld_word>
 8008c84:	4603      	mov	r3, r0
 8008c86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <find_volume+0x214>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	3324      	adds	r3, #36	; 0x24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fe f8a0 	bl	8006dda <ld_dword>
 8008c9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ca0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	789b      	ldrb	r3, [r3, #2]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d005      	beq.n	8008cc0 <find_volume+0x238>
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	789b      	ldrb	r3, [r3, #2]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d001      	beq.n	8008cc0 <find_volume+0x238>
 8008cbc:	230d      	movs	r3, #13
 8008cbe:	e15c      	b.n	8008f7a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	789b      	ldrb	r3, [r3, #2]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	895b      	ldrh	r3, [r3, #10]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d008      	beq.n	8008cf4 <find_volume+0x26c>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	895b      	ldrh	r3, [r3, #10]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	895b      	ldrh	r3, [r3, #10]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <find_volume+0x270>
 8008cf4:	230d      	movs	r3, #13
 8008cf6:	e140      	b.n	8008f7a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	3338      	adds	r3, #56	; 0x38
 8008cfc:	3311      	adds	r3, #17
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe f854 	bl	8006dac <ld_word>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	891b      	ldrh	r3, [r3, #8]
 8008d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d12:	8992      	ldrh	r2, [r2, #12]
 8008d14:	0952      	lsrs	r2, r2, #5
 8008d16:	b292      	uxth	r2, r2
 8008d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d1c:	fb01 f202 	mul.w	r2, r1, r2
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <find_volume+0x2a8>
 8008d28:	230d      	movs	r3, #13
 8008d2a:	e126      	b.n	8008f7a <find_volume+0x4f2>
 8008d2c:	20000848 	.word	0x20000848

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	3338      	adds	r3, #56	; 0x38
 8008d34:	3313      	adds	r3, #19
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe f838 	bl	8006dac <ld_word>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <find_volume+0x2cc>
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	3338      	adds	r3, #56	; 0x38
 8008d4a:	3320      	adds	r3, #32
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe f844 	bl	8006dda <ld_dword>
 8008d52:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	3338      	adds	r3, #56	; 0x38
 8008d58:	330e      	adds	r3, #14
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe f826 	bl	8006dac <ld_word>
 8008d60:	4603      	mov	r3, r0
 8008d62:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008d64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <find_volume+0x2e6>
 8008d6a:	230d      	movs	r3, #13
 8008d6c:	e105      	b.n	8008f7a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008d6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d72:	4413      	add	r3, r2
 8008d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d76:	8911      	ldrh	r1, [r2, #8]
 8008d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7a:	8992      	ldrh	r2, [r2, #12]
 8008d7c:	0952      	lsrs	r2, r2, #5
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	fbb1 f2f2 	udiv	r2, r1, r2
 8008d84:	b292      	uxth	r2, r2
 8008d86:	4413      	add	r3, r2
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d201      	bcs.n	8008d96 <find_volume+0x30e>
 8008d92:	230d      	movs	r3, #13
 8008d94:	e0f1      	b.n	8008f7a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9e:	8952      	ldrh	r2, [r2, #10]
 8008da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <find_volume+0x328>
 8008dac:	230d      	movs	r3, #13
 8008dae:	e0e4      	b.n	8008f7a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008db0:	2303      	movs	r3, #3
 8008db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d802      	bhi.n	8008dc6 <find_volume+0x33e>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d802      	bhi.n	8008dd6 <find_volume+0x34e>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008de4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de8:	441a      	add	r2, r3
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008dee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	441a      	add	r2, r3
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d11e      	bne.n	8008e3e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	3338      	adds	r3, #56	; 0x38
 8008e04:	332a      	adds	r3, #42	; 0x2a
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd ffd0 	bl	8006dac <ld_word>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <find_volume+0x38e>
 8008e12:	230d      	movs	r3, #13
 8008e14:	e0b1      	b.n	8008f7a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	891b      	ldrh	r3, [r3, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <find_volume+0x39a>
 8008e1e:	230d      	movs	r3, #13
 8008e20:	e0ab      	b.n	8008f7a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	3338      	adds	r3, #56	; 0x38
 8008e26:	332c      	adds	r3, #44	; 0x2c
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fd ffd6 	bl	8006dda <ld_dword>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	e01f      	b.n	8008e7e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	891b      	ldrh	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <find_volume+0x3c2>
 8008e46:	230d      	movs	r3, #13
 8008e48:	e097      	b.n	8008f7a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e50:	441a      	add	r2, r3
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d103      	bne.n	8008e66 <find_volume+0x3de>
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	e00a      	b.n	8008e7c <find_volume+0x3f4>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	69da      	ldr	r2, [r3, #28]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	4413      	add	r3, r2
 8008e70:	085a      	lsrs	r2, r3, #1
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008e7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	899b      	ldrh	r3, [r3, #12]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8a:	440b      	add	r3, r1
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e90:	8989      	ldrh	r1, [r1, #12]
 8008e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d201      	bcs.n	8008e9e <find_volume+0x416>
 8008e9a:	230d      	movs	r3, #13
 8008e9c:	e06d      	b.n	8008f7a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea4:	619a      	str	r2, [r3, #24]
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	2280      	movs	r2, #128	; 0x80
 8008eb2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d149      	bne.n	8008f50 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	3338      	adds	r3, #56	; 0x38
 8008ec0:	3330      	adds	r3, #48	; 0x30
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fd ff72 	bl	8006dac <ld_word>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d140      	bne.n	8008f50 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ed6:	f7fe fa0b 	bl	80072f0 <move_window>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d137      	bne.n	8008f50 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	3338      	adds	r3, #56	; 0x38
 8008eea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fd ff5c 	bl	8006dac <ld_word>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d127      	bne.n	8008f50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	3338      	adds	r3, #56	; 0x38
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fd ff68 	bl	8006dda <ld_dword>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <find_volume+0x4fc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d11e      	bne.n	8008f50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	3338      	adds	r3, #56	; 0x38
 8008f16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fd ff5d 	bl	8006dda <ld_dword>
 8008f20:	4603      	mov	r3, r0
 8008f22:	4a19      	ldr	r2, [pc, #100]	; (8008f88 <find_volume+0x500>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d113      	bne.n	8008f50 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	3338      	adds	r3, #56	; 0x38
 8008f2c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fd ff52 	bl	8006dda <ld_dword>
 8008f36:	4602      	mov	r2, r0
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	3338      	adds	r3, #56	; 0x38
 8008f40:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd ff48 	bl	8006dda <ld_dword>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008f56:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <find_volume+0x504>)
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <find_volume+0x504>)
 8008f62:	801a      	strh	r2, [r3, #0]
 8008f64:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <find_volume+0x504>)
 8008f66:	881a      	ldrh	r2, [r3, #0]
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	4a08      	ldr	r2, [pc, #32]	; (8008f90 <find_volume+0x508>)
 8008f70:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008f72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f74:	f7fe f954 	bl	8007220 <clear_lock>
#endif
	return FR_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3758      	adds	r7, #88	; 0x58
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	41615252 	.word	0x41615252
 8008f88:	61417272 	.word	0x61417272
 8008f8c:	2000084c 	.word	0x2000084c
 8008f90:	20000870 	.word	0x20000870

08008f94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008f9e:	2309      	movs	r3, #9
 8008fa0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01c      	beq.n	8008fe2 <validate+0x4e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d018      	beq.n	8008fe2 <validate+0x4e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <validate+0x4e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	889a      	ldrh	r2, [r3, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d10c      	bne.n	8008fe2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fd fe4e 	bl	8006c70 <disk_status>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <validate+0x4e>
			res = FR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d102      	bne.n	8008fee <validate+0x5a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	e000      	b.n	8008ff0 <validate+0x5c>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	6013      	str	r3, [r2, #0]
	return res;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009012:	f107 0310 	add.w	r3, r7, #16
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fc9c 	bl	8008954 <get_ldnumber>
 800901c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da01      	bge.n	8009028 <f_mount+0x28>
 8009024:	230b      	movs	r3, #11
 8009026:	e02b      	b.n	8009080 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009028:	4a17      	ldr	r2, [pc, #92]	; (8009088 <f_mount+0x88>)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009030:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009038:	69b8      	ldr	r0, [r7, #24]
 800903a:	f7fe f8f1 	bl	8007220 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	490d      	ldr	r1, [pc, #52]	; (8009088 <f_mount+0x88>)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <f_mount+0x66>
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d001      	beq.n	800906a <f_mount+0x6a>
 8009066:	2300      	movs	r3, #0
 8009068:	e00a      	b.n	8009080 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800906a:	f107 010c 	add.w	r1, r7, #12
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	2200      	movs	r2, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fd07 	bl	8008a88 <find_volume>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800907e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3720      	adds	r7, #32
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20000848 	.word	0x20000848

0800908c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b09a      	sub	sp, #104	; 0x68
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <f_open+0x18>
 80090a0:	2309      	movs	r3, #9
 80090a2:	e1bb      	b.n	800941c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80090ac:	79fa      	ldrb	r2, [r7, #7]
 80090ae:	f107 0114 	add.w	r1, r7, #20
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff fce6 	bl	8008a88 <find_volume>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80090c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f040 819f 	bne.w	800940a <f_open+0x37e>
		dj.obj.fs = fs;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fbc5 	bl	8008868 <follow_path>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11a      	bne.n	8009122 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80090ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090f0:	b25b      	sxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da03      	bge.n	80090fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80090f6:	2306      	movs	r3, #6
 80090f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80090fc:	e011      	b.n	8009122 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	f107 0318 	add.w	r3, r7, #24
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd ff40 	bl	8006f9c <chk_lock>
 800911c:	4603      	mov	r3, r0
 800911e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	f003 031c 	and.w	r3, r3, #28
 8009128:	2b00      	cmp	r3, #0
 800912a:	d07f      	beq.n	800922c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800912c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009130:	2b00      	cmp	r3, #0
 8009132:	d017      	beq.n	8009164 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009138:	2b04      	cmp	r3, #4
 800913a:	d10e      	bne.n	800915a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800913c:	f7fd ff88 	bl	8007050 <enq_lock>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d006      	beq.n	8009154 <f_open+0xc8>
 8009146:	f107 0318 	add.w	r3, r7, #24
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff f8dc 	bl	8008308 <dir_register>
 8009150:	4603      	mov	r3, r0
 8009152:	e000      	b.n	8009156 <f_open+0xca>
 8009154:	2312      	movs	r3, #18
 8009156:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	71fb      	strb	r3, [r7, #7]
 8009162:	e010      	b.n	8009186 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009164:	7fbb      	ldrb	r3, [r7, #30]
 8009166:	f003 0311 	and.w	r3, r3, #17
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <f_open+0xea>
					res = FR_DENIED;
 800916e:	2307      	movs	r3, #7
 8009170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009174:	e007      	b.n	8009186 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <f_open+0xfa>
 8009180:	2308      	movs	r3, #8
 8009182:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800918a:	2b00      	cmp	r3, #0
 800918c:	d168      	bne.n	8009260 <f_open+0x1d4>
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d063      	beq.n	8009260 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009198:	f7fd fd0e 	bl	8006bb8 <get_fattime>
 800919c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	330e      	adds	r3, #14
 80091a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fe54 	bl	8006e52 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	3316      	adds	r3, #22
 80091ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fe4e 	bl	8006e52 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	330b      	adds	r3, #11
 80091ba:	2220      	movs	r2, #32
 80091bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe fe19 	bl	8007dfc <ld_clust>
 80091ca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091d0:	2200      	movs	r2, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fe31 	bl	8007e3a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	331c      	adds	r3, #28
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fd fe37 	bl	8006e52 <st_dword>
					fs->wflag = 1;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2201      	movs	r2, #1
 80091e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80091ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d037      	beq.n	8009260 <f_open+0x1d4>
						dw = fs->winsect;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80091f6:	f107 0318 	add.w	r3, r7, #24
 80091fa:	2200      	movs	r2, #0
 80091fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fb22 	bl	8007848 <remove_chain>
 8009204:	4603      	mov	r3, r0
 8009206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800920a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800920e:	2b00      	cmp	r3, #0
 8009210:	d126      	bne.n	8009260 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe f86a 	bl	80072f0 <move_window>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009226:	3a01      	subs	r2, #1
 8009228:	615a      	str	r2, [r3, #20]
 800922a:	e019      	b.n	8009260 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800922c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009230:	2b00      	cmp	r3, #0
 8009232:	d115      	bne.n	8009260 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009234:	7fbb      	ldrb	r3, [r7, #30]
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <f_open+0x1ba>
					res = FR_NO_FILE;
 800923e:	2304      	movs	r3, #4
 8009240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009244:	e00c      	b.n	8009260 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <f_open+0x1d4>
 8009250:	7fbb      	ldrb	r3, [r7, #30]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <f_open+0x1d4>
						res = FR_DENIED;
 800925a:	2307      	movs	r3, #7
 800925c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009260:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009264:	2b00      	cmp	r3, #0
 8009266:	d128      	bne.n	80092ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009278:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf14      	ite	ne
 8009292:	2301      	movne	r3, #1
 8009294:	2300      	moveq	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	461a      	mov	r2, r3
 800929a:	f107 0318 	add.w	r3, r7, #24
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fd fef5 	bl	8007090 <inc_lock>
 80092a6:	4602      	mov	r2, r0
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <f_open+0x22e>
 80092b4:	2302      	movs	r3, #2
 80092b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80092ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f040 80a3 	bne.w	800940a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092c8:	4611      	mov	r1, r2
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fd96 	bl	8007dfc <ld_clust>
 80092d0:	4602      	mov	r2, r0
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	331c      	adds	r3, #28
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fd fd7d 	bl	8006dda <ld_dword>
 80092e0:	4602      	mov	r2, r0
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	88da      	ldrh	r2, [r3, #6]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	79fa      	ldrb	r2, [r7, #7]
 80092fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3330      	adds	r3, #48	; 0x30
 8009316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f7fd fde3 	bl	8006ee8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d06e      	beq.n	800940a <f_open+0x37e>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d06a      	beq.n	800940a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	895b      	ldrh	r3, [r3, #10]
 8009340:	461a      	mov	r2, r3
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009358:	e016      	b.n	8009388 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe f882 	bl	8007468 <get_fat>
 8009364:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009368:	2b01      	cmp	r3, #1
 800936a:	d802      	bhi.n	8009372 <f_open+0x2e6>
 800936c:	2302      	movs	r3, #2
 800936e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d102      	bne.n	8009380 <f_open+0x2f4>
 800937a:	2301      	movs	r3, #1
 800937c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <f_open+0x30c>
 8009390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009394:	429a      	cmp	r2, r3
 8009396:	d8e0      	bhi.n	800935a <f_open+0x2ce>
				}
				fp->clust = clst;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800939c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800939e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d131      	bne.n	800940a <f_open+0x37e>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	899b      	ldrh	r3, [r3, #12]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b2:	fb01 f202 	mul.w	r2, r1, r2
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d026      	beq.n	800940a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe f833 	bl	800742c <clust2sect>
 80093c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d103      	bne.n	80093d6 <f_open+0x34a>
						res = FR_INT_ERR;
 80093ce:	2302      	movs	r3, #2
 80093d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80093d4:	e019      	b.n	800940a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093de:	fbb3 f2f2 	udiv	r2, r3, r2
 80093e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e4:	441a      	add	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	7858      	ldrb	r0, [r3, #1]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	2301      	movs	r3, #1
 80093fa:	f7fd fc79 	bl	8006cf0 <disk_read>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <f_open+0x37e>
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800940a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <f_open+0x38c>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800941c:	4618      	mov	r0, r3
 800941e:	3768      	adds	r7, #104	; 0x68
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08c      	sub	sp, #48	; 0x30
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f107 0210 	add.w	r2, r7, #16
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fda5 	bl	8008f94 <validate>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009454:	2b00      	cmp	r3, #0
 8009456:	d107      	bne.n	8009468 <f_write+0x44>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	7d5b      	ldrb	r3, [r3, #21]
 800945c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <f_write+0x4a>
 8009468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800946c:	e16a      	b.n	8009744 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7d1b      	ldrb	r3, [r3, #20]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <f_write+0x5a>
 800947a:	2307      	movs	r3, #7
 800947c:	e162      	b.n	8009744 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	441a      	add	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	429a      	cmp	r2, r3
 800948c:	f080 814c 	bcs.w	8009728 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	43db      	mvns	r3, r3
 8009496:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009498:	e146      	b.n	8009728 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	8992      	ldrh	r2, [r2, #12]
 80094a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a6:	fb01 f202 	mul.w	r2, r1, r2
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f040 80f1 	bne.w	8009694 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	8992      	ldrh	r2, [r2, #12]
 80094ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	8952      	ldrh	r2, [r2, #10]
 80094c2:	3a01      	subs	r2, #1
 80094c4:	4013      	ands	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d143      	bne.n	8009556 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10c      	bne.n	80094f0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d11a      	bne.n	8009518 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fa13 	bl	8007912 <create_chain>
 80094ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80094ee:	e013      	b.n	8009518 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	4619      	mov	r1, r3
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7fe fa9f 	bl	8007a42 <clmt_clust>
 8009504:	62b8      	str	r0, [r7, #40]	; 0x28
 8009506:	e007      	b.n	8009518 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7fe f9fe 	bl	8007912 <create_chain>
 8009516:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8109 	beq.w	8009732 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	2b01      	cmp	r3, #1
 8009524:	d104      	bne.n	8009530 <f_write+0x10c>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2202      	movs	r2, #2
 800952a:	755a      	strb	r2, [r3, #21]
 800952c:	2302      	movs	r3, #2
 800952e:	e109      	b.n	8009744 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d104      	bne.n	8009542 <f_write+0x11e>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	755a      	strb	r2, [r3, #21]
 800953e:	2301      	movs	r3, #1
 8009540:	e100      	b.n	8009744 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009546:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d102      	bne.n	8009556 <f_write+0x132>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009554:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	7d1b      	ldrb	r3, [r3, #20]
 800955a:	b25b      	sxtb	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	da18      	bge.n	8009592 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	7858      	ldrb	r0, [r3, #1]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1a      	ldr	r2, [r3, #32]
 800956e:	2301      	movs	r3, #1
 8009570:	f7fd fbde 	bl	8006d30 <disk_write>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <f_write+0x160>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	755a      	strb	r2, [r3, #21]
 8009580:	2301      	movs	r3, #1
 8009582:	e0df      	b.n	8009744 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	7d1b      	ldrb	r3, [r3, #20]
 8009588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958c:	b2da      	uxtb	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f7fd ff46 	bl	800742c <clust2sect>
 80095a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <f_write+0x18e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2202      	movs	r2, #2
 80095ac:	755a      	strb	r2, [r3, #21]
 80095ae:	2302      	movs	r3, #2
 80095b0:	e0c8      	b.n	8009744 <f_write+0x320>
			sect += csect;
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	4413      	add	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d043      	beq.n	8009656 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	4413      	add	r3, r2
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	8952      	ldrh	r2, [r2, #10]
 80095d8:	4293      	cmp	r3, r2
 80095da:	d905      	bls.n	80095e8 <f_write+0x1c4>
					cc = fs->csize - csect;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	461a      	mov	r2, r3
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	7858      	ldrb	r0, [r3, #1]
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	69f9      	ldr	r1, [r7, #28]
 80095f2:	f7fd fb9d 	bl	8006d30 <disk_write>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <f_write+0x1e2>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	755a      	strb	r2, [r3, #21]
 8009602:	2301      	movs	r3, #1
 8009604:	e09e      	b.n	8009744 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a1a      	ldr	r2, [r3, #32]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	6a3a      	ldr	r2, [r7, #32]
 8009610:	429a      	cmp	r2, r3
 8009612:	d918      	bls.n	8009646 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1a      	ldr	r2, [r3, #32]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	8992      	ldrh	r2, [r2, #12]
 8009626:	fb02 f303 	mul.w	r3, r2, r3
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	18d1      	adds	r1, r2, r3
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	899b      	ldrh	r3, [r3, #12]
 8009632:	461a      	mov	r2, r3
 8009634:	f7fd fc38 	bl	8006ea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	461a      	mov	r2, r3
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009654:	e04b      	b.n	80096ee <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d016      	beq.n	800968e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009668:	429a      	cmp	r2, r3
 800966a:	d210      	bcs.n	800968e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	7858      	ldrb	r0, [r3, #1]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009676:	2301      	movs	r3, #1
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	f7fd fb39 	bl	8006cf0 <disk_read>
 800967e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2201      	movs	r2, #1
 8009688:	755a      	strb	r2, [r3, #21]
 800968a:	2301      	movs	r3, #1
 800968c:	e05a      	b.n	8009744 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	899b      	ldrh	r3, [r3, #12]
 8009698:	4618      	mov	r0, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	8992      	ldrh	r2, [r2, #12]
 80096a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096a6:	fb01 f202 	mul.w	r2, r1, r2
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	1ac3      	subs	r3, r0, r3
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d901      	bls.n	80096bc <f_write+0x298>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	8992      	ldrh	r2, [r2, #12]
 80096ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80096ce:	fb00 f202 	mul.w	r2, r0, r2
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	440b      	add	r3, r1
 80096d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d8:	69f9      	ldr	r1, [r7, #28]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fd fbe4 	bl	8006ea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	7d1b      	ldrb	r3, [r3, #20]
 80096e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	4413      	add	r3, r2
 80096f4:	61fb      	str	r3, [r7, #28]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	441a      	add	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	619a      	str	r2, [r3, #24]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	429a      	cmp	r2, r3
 800970c:	bf38      	it	cc
 800970e:	461a      	movcc	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	60da      	str	r2, [r3, #12]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	441a      	add	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f47f aeb5 	bne.w	800949a <f_write+0x76>
 8009730:	e000      	b.n	8009734 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009732:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973c:	b2da      	uxtb	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3730      	adds	r7, #48	; 0x30
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f107 0208 	add.w	r2, r7, #8
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff fc19 	bl	8008f94 <validate>
 8009762:	4603      	mov	r3, r0
 8009764:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d168      	bne.n	800983e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7d1b      	ldrb	r3, [r3, #20]
 8009770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009774:	2b00      	cmp	r3, #0
 8009776:	d062      	beq.n	800983e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	b25b      	sxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	da15      	bge.n	80097ae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	7858      	ldrb	r0, [r3, #1]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1a      	ldr	r2, [r3, #32]
 8009790:	2301      	movs	r3, #1
 8009792:	f7fd facd 	bl	8006d30 <disk_write>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <f_sync+0x54>
 800979c:	2301      	movs	r3, #1
 800979e:	e04f      	b.n	8009840 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	7d1b      	ldrb	r3, [r3, #20]
 80097a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097ae:	f7fd fa03 	bl	8006bb8 <get_fattime>
 80097b2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fd fd97 	bl	80072f0 <move_window>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d138      	bne.n	800983e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	330b      	adds	r3, #11
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	330b      	adds	r3, #11
 80097dc:	f042 0220 	orr.w	r2, r2, #32
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	461a      	mov	r2, r3
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	f7fe fb23 	bl	8007e3a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f103 021c 	add.w	r2, r3, #28
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f7fd fb26 	bl	8006e52 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3316      	adds	r3, #22
 800980a:	6939      	ldr	r1, [r7, #16]
 800980c:	4618      	mov	r0, r3
 800980e:	f7fd fb20 	bl	8006e52 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3312      	adds	r3, #18
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f7fd fb00 	bl	8006e1e <st_word>
					fs->wflag = 1;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2201      	movs	r2, #1
 8009822:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f7fd fd90 	bl	800734c <sync_fs>
 800982c:	4603      	mov	r3, r0
 800982e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009838:	b2da      	uxtb	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800983e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ff7b 	bl	800974c <f_sync>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d118      	bne.n	8009892 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f107 0208 	add.w	r2, r7, #8
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fb93 	bl	8008f94 <validate>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10c      	bne.n	8009892 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	4618      	mov	r0, r3
 800987e:	f7fd fc95 	bl	80071ac <dec_lock>
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b092      	sub	sp, #72	; 0x48
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80098a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	2200      	movs	r2, #0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f8e8 	bl	8008a88 <find_volume>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80098be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f040 8099 	bne.w	80099fa <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80098c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	699a      	ldr	r2, [r3, #24]
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	3b02      	subs	r3, #2
 80098d8:	429a      	cmp	r2, r3
 80098da:	d804      	bhi.n	80098e6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e089      	b.n	80099fa <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d128      	bne.n	8009944 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80098f2:	2302      	movs	r3, #2
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80098fa:	f107 0314 	add.w	r3, r7, #20
 80098fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009900:	4618      	mov	r0, r3
 8009902:	f7fd fdb1 	bl	8007468 <get_fat>
 8009906:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d103      	bne.n	8009918 <f_getfree+0x7c>
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009916:	e063      	b.n	80099e0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d103      	bne.n	8009926 <f_getfree+0x8a>
 800991e:	2302      	movs	r3, #2
 8009920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009924:	e05c      	b.n	80099e0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <f_getfree+0x96>
 800992c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992e:	3301      	adds	r3, #1
 8009930:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009934:	3301      	adds	r3, #1
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800993e:	429a      	cmp	r2, r3
 8009940:	d3db      	bcc.n	80098fa <f_getfree+0x5e>
 8009942:	e04d      	b.n	80099e0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
 8009954:	2300      	movs	r3, #0
 8009956:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800995e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	63ba      	str	r2, [r7, #56]	; 0x38
 8009966:	4619      	mov	r1, r3
 8009968:	f7fd fcc2 	bl	80072f0 <move_window>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009976:	2b00      	cmp	r3, #0
 8009978:	d131      	bne.n	80099de <f_getfree+0x142>
							p = fs->win;
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	3338      	adds	r3, #56	; 0x38
 800997e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	899b      	ldrh	r3, [r3, #12]
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d10f      	bne.n	80099ae <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800998e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009990:	f7fd fa0c 	bl	8006dac <ld_word>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <f_getfree+0x104>
 800999a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800999c:	3301      	adds	r3, #1
 800999e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	3302      	adds	r3, #2
 80099a4:	633b      	str	r3, [r7, #48]	; 0x30
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	3b02      	subs	r3, #2
 80099aa:	637b      	str	r3, [r7, #52]	; 0x34
 80099ac:	e010      	b.n	80099d0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80099ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099b0:	f7fd fa13 	bl	8006dda <ld_dword>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <f_getfree+0x128>
 80099be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c0:	3301      	adds	r3, #1
 80099c2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	3304      	adds	r3, #4
 80099c8:	633b      	str	r3, [r7, #48]	; 0x30
 80099ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099cc:	3b04      	subs	r3, #4
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	3b01      	subs	r3, #1
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1bd      	bne.n	8009958 <f_getfree+0xbc>
 80099dc:	e000      	b.n	80099e0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80099de:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099e4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	791a      	ldrb	r2, [r3, #4]
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80099fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3748      	adds	r7, #72	; 0x48
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b098      	sub	sp, #96	; 0x60
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009a0e:	f107 010c 	add.w	r1, r7, #12
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	2202      	movs	r2, #2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff f836 	bl	8008a88 <find_volume>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8009a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f040 80f2 	bne.w	8009c14 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	f107 0310 	add.w	r3, r7, #16
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe ff15 	bl	8008868 <follow_path>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <f_mkdir+0x4c>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	f040 80dc 	bne.w	8009c14 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009a5c:	f107 0310 	add.w	r3, r7, #16
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd ff55 	bl	8007912 <create_chain>
 8009a68:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	895b      	ldrh	r3, [r3, #10]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	899b      	ldrh	r3, [r3, #12]
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <f_mkdir+0x86>
 8009a86:	2307      	movs	r3, #7
 8009a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8009a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d102      	bne.n	8009a98 <f_mkdir+0x92>
 8009a92:	2302      	movs	r3, #2
 8009a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d102      	bne.n	8009aa6 <f_mkdir+0xa0>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <f_mkdir+0xb6>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fd fbd9 	bl	8007268 <sync_window>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8009abc:	f7fd f87c 	bl	8006bb8 <get_fattime>
 8009ac0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d16c      	bne.n	8009ba4 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd fcac 	bl	800742c <clust2sect>
 8009ad4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3338      	adds	r3, #56	; 0x38
 8009ada:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	899b      	ldrh	r3, [r3, #12]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ae6:	f7fd f9ff 	bl	8006ee8 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009aea:	220b      	movs	r2, #11
 8009aec:	2120      	movs	r1, #32
 8009aee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009af0:	f7fd f9fa 	bl	8006ee8 <mem_set>
					dir[DIR_Name] = '.';
 8009af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af6:	222e      	movs	r2, #46	; 0x2e
 8009af8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8009afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afc:	330b      	adds	r3, #11
 8009afe:	2210      	movs	r2, #16
 8009b00:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b04:	3316      	adds	r3, #22
 8009b06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fd f9a2 	bl	8006e52 <st_dword>
					st_clust(fs, dir, dcl);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe f990 	bl	8007e3a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1c:	3320      	adds	r3, #32
 8009b1e:	2220      	movs	r2, #32
 8009b20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd f9c0 	bl	8006ea8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b2a:	3321      	adds	r3, #33	; 0x21
 8009b2c:	222e      	movs	r2, #46	; 0x2e
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d106      	bne.n	8009b4a <f_mkdir+0x144>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d101      	bne.n	8009b4a <f_mkdir+0x144>
 8009b46:	2300      	movs	r3, #0
 8009b48:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4e:	3320      	adds	r3, #32
 8009b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b52:	4619      	mov	r1, r3
 8009b54:	f7fe f971 	bl	8007e3a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	895b      	ldrh	r3, [r3, #10]
 8009b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b5e:	e01c      	b.n	8009b9a <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	657a      	str	r2, [r7, #84]	; 0x54
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fd fb78 	bl	8007268 <sync_window>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8009b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	899b      	ldrh	r3, [r3, #12]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b90:	f7fd f9aa 	bl	8006ee8 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b96:	3b01      	subs	r3, #1
 8009b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1df      	bne.n	8009b60 <f_mkdir+0x15a>
 8009ba0:	e000      	b.n	8009ba4 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009ba2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d107      	bne.n	8009bbc <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009bac:	f107 0310 	add.w	r3, r7, #16
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fba9 	bl	8008308 <dir_register>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8009bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d120      	bne.n	8009c06 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bca:	3316      	adds	r3, #22
 8009bcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd f93f 	bl	8006e52 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe f92d 	bl	8007e3a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be2:	330b      	adds	r3, #11
 8009be4:	2210      	movs	r2, #16
 8009be6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10e      	bne.n	8009c14 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fd fba7 	bl	800734c <sync_fs>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c04:	e006      	b.n	8009c14 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009c06:	f107 0310 	add.w	r3, r7, #16
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fd fe1a 	bl	8007848 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3760      	adds	r7, #96	; 0x60
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	2b0a      	cmp	r3, #10
 8009c30:	d103      	bne.n	8009c3a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009c32:	210d      	movs	r1, #13
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff fff3 	bl	8009c20 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db25      	blt.n	8009c92 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	60fa      	str	r2, [r7, #12]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	4413      	add	r3, r2
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b3c      	cmp	r3, #60	; 0x3c
 8009c58:	dd12      	ble.n	8009c80 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f103 010c 	add.w	r1, r3, #12
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	f7ff fbdb 	bl	8009424 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d101      	bne.n	8009c7a <putc_bfd+0x5a>
 8009c76:	2300      	movs	r3, #0
 8009c78:	e001      	b.n	8009c7e <putc_bfd+0x5e>
 8009c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
 8009c90:	e000      	b.n	8009c94 <putc_bfd+0x74>
	if (i < 0) return;
 8009c92:	bf00      	nop
}
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	db16      	blt.n	8009cd8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 010c 	add.w	r1, r3, #12
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f107 030c 	add.w	r3, r7, #12
 8009cbe:	f7ff fbb1 	bl	8009424 <f_write>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d107      	bne.n	8009cd8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d102      	bne.n	8009cd8 <putc_flush+0x3e>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	e001      	b.n	8009cdc <putc_flush+0x42>
	return EOF;
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	609a      	str	r2, [r3, #8]
}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr

08009d0c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009d0c:	b40e      	push	{r1, r2, r3}
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b0a7      	sub	sp, #156	; 0x9c
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8009d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ffe1 	bl	8009ce4 <putc_init>

	va_start(arp, fmt);
 8009d22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009d26:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8009d28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8009d38:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 81f2 	beq.w	800a126 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8009d42:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d46:	2b25      	cmp	r3, #37	; 0x25
 8009d48:	d008      	beq.n	8009d5c <f_printf+0x50>
			putc_bfd(&pb, c);
 8009d4a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff ff63 	bl	8009c20 <putc_bfd>
			continue;
 8009d5a:	e1e3      	b.n	800a124 <f_printf+0x418>
		}
		w = f = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009d68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009d78:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d7c:	2b30      	cmp	r3, #48	; 0x30
 8009d7e:	d10b      	bne.n	8009d98 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009d96:	e024      	b.n	8009de2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009d98:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d9c:	2b2d      	cmp	r3, #45	; 0x2d
 8009d9e:	d120      	bne.n	8009de2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009da0:	2302      	movs	r3, #2
 8009da2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009db6:	e014      	b.n	8009de2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009db8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dca:	4413      	add	r3, r2
 8009dcc:	3b30      	subs	r3, #48	; 0x30
 8009dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8009dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8009de2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009de6:	2b2f      	cmp	r3, #47	; 0x2f
 8009de8:	d903      	bls.n	8009df2 <f_printf+0xe6>
 8009dea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dee:	2b39      	cmp	r3, #57	; 0x39
 8009df0:	d9e2      	bls.n	8009db8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009df2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009df6:	2b6c      	cmp	r3, #108	; 0x6c
 8009df8:	d003      	beq.n	8009e02 <f_printf+0xf6>
 8009dfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dfe:	2b4c      	cmp	r3, #76	; 0x4c
 8009e00:	d10d      	bne.n	8009e1e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009e02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e06:	f043 0304 	orr.w	r3, r3, #4
 8009e0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009e1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 8181 	beq.w	800a12a <f_printf+0x41e>
		d = c;
 8009e28:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e2c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009e30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e34:	2b60      	cmp	r3, #96	; 0x60
 8009e36:	d908      	bls.n	8009e4a <f_printf+0x13e>
 8009e38:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e3c:	2b7a      	cmp	r3, #122	; 0x7a
 8009e3e:	d804      	bhi.n	8009e4a <f_printf+0x13e>
 8009e40:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e44:	3b20      	subs	r3, #32
 8009e46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8009e4a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e4e:	3b42      	subs	r3, #66	; 0x42
 8009e50:	2b16      	cmp	r3, #22
 8009e52:	f200 8098 	bhi.w	8009f86 <f_printf+0x27a>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <f_printf+0x150>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009f67 	.word	0x08009f67
 8009e60:	08009f4f 	.word	0x08009f4f
 8009e64:	08009f77 	.word	0x08009f77
 8009e68:	08009f87 	.word	0x08009f87
 8009e6c:	08009f87 	.word	0x08009f87
 8009e70:	08009f87 	.word	0x08009f87
 8009e74:	08009f87 	.word	0x08009f87
 8009e78:	08009f87 	.word	0x08009f87
 8009e7c:	08009f87 	.word	0x08009f87
 8009e80:	08009f87 	.word	0x08009f87
 8009e84:	08009f87 	.word	0x08009f87
 8009e88:	08009f87 	.word	0x08009f87
 8009e8c:	08009f87 	.word	0x08009f87
 8009e90:	08009f6f 	.word	0x08009f6f
 8009e94:	08009f87 	.word	0x08009f87
 8009e98:	08009f87 	.word	0x08009f87
 8009e9c:	08009f87 	.word	0x08009f87
 8009ea0:	08009eb9 	.word	0x08009eb9
 8009ea4:	08009f87 	.word	0x08009f87
 8009ea8:	08009f77 	.word	0x08009f77
 8009eac:	08009f87 	.word	0x08009f87
 8009eb0:	08009f87 	.word	0x08009f87
 8009eb4:	08009f7f 	.word	0x08009f7f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eba:	1d1a      	adds	r2, r3, #4
 8009ebc:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ec8:	e004      	b.n	8009ed4 <f_printf+0x1c8>
 8009eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ece:	3301      	adds	r3, #1
 8009ed0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ed4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eda:	4413      	add	r3, r2
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1f3      	bne.n	8009eca <f_printf+0x1be>
			if (!(f & 2)) {
 8009ee2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d11a      	bne.n	8009f24 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8009eee:	e005      	b.n	8009efc <f_printf+0x1f0>
 8009ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ef4:	2120      	movs	r1, #32
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff fe92 	bl	8009c20 <putc_bfd>
 8009efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d8f0      	bhi.n	8009ef0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009f0e:	e009      	b.n	8009f24 <f_printf+0x218>
 8009f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f16:	781a      	ldrb	r2, [r3, #0]
 8009f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fe7e 	bl	8009c20 <putc_bfd>
 8009f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f1      	bne.n	8009f10 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009f2c:	e005      	b.n	8009f3a <f_printf+0x22e>
 8009f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f32:	2120      	movs	r1, #32
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fe73 	bl	8009c20 <putc_bfd>
 8009f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d8f0      	bhi.n	8009f2e <f_printf+0x222>
			continue;
 8009f4c:	e0ea      	b.n	800a124 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff fe5e 	bl	8009c20 <putc_bfd>
 8009f64:	e0de      	b.n	800a124 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8009f66:	2302      	movs	r3, #2
 8009f68:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f6c:	e014      	b.n	8009f98 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009f6e:	2308      	movs	r3, #8
 8009f70:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f74:	e010      	b.n	8009f98 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009f76:	230a      	movs	r3, #10
 8009f78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f7c:	e00c      	b.n	8009f98 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009f7e:	2310      	movs	r3, #16
 8009f80:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f84:	e008      	b.n	8009f98 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009f86:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f8e:	4611      	mov	r1, r2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff fe45 	bl	8009c20 <putc_bfd>
 8009f96:	e0c5      	b.n	800a124 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009f98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d004      	beq.n	8009fae <f_printf+0x2a2>
 8009fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa6:	1d1a      	adds	r2, r3, #4
 8009fa8:	67ba      	str	r2, [r7, #120]	; 0x78
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	e00c      	b.n	8009fc8 <f_printf+0x2bc>
 8009fae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009fb2:	2b44      	cmp	r3, #68	; 0x44
 8009fb4:	d104      	bne.n	8009fc0 <f_printf+0x2b4>
 8009fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	67ba      	str	r2, [r7, #120]	; 0x78
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	e003      	b.n	8009fc8 <f_printf+0x2bc>
 8009fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc2:	1d1a      	adds	r2, r3, #4
 8009fc4:	67ba      	str	r2, [r7, #120]	; 0x78
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009fcc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009fd0:	2b44      	cmp	r3, #68	; 0x44
 8009fd2:	d10e      	bne.n	8009ff2 <f_printf+0x2e6>
 8009fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da0a      	bge.n	8009ff2 <f_printf+0x2e6>
			v = 0 - v;
 8009fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fe0:	425b      	negs	r3, r3
 8009fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009fe6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009fea:	f043 0308 	orr.w	r3, r3, #8
 8009fee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009ff8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a000:	fbb3 f1f2 	udiv	r1, r3, r2
 800a004:	fb01 f202 	mul.w	r2, r1, r2
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a00e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a012:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a016:	fbb2 f3f3 	udiv	r3, r2, r3
 800a01a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a01e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a022:	2b09      	cmp	r3, #9
 800a024:	d90b      	bls.n	800a03e <f_printf+0x332>
 800a026:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a02a:	2b78      	cmp	r3, #120	; 0x78
 800a02c:	d101      	bne.n	800a032 <f_printf+0x326>
 800a02e:	2227      	movs	r2, #39	; 0x27
 800a030:	e000      	b.n	800a034 <f_printf+0x328>
 800a032:	2207      	movs	r2, #7
 800a034:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a038:	4413      	add	r3, r2
 800a03a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a03e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a048:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a04c:	3230      	adds	r2, #48	; 0x30
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	3398      	adds	r3, #152	; 0x98
 800a052:	443b      	add	r3, r7
 800a054:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <f_printf+0x35c>
 800a060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a064:	2b1f      	cmp	r3, #31
 800a066:	d9c7      	bls.n	8009ff8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a068:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <f_printf+0x37c>
 800a074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a07e:	3398      	adds	r3, #152	; 0x98
 800a080:	443b      	add	r3, r7
 800a082:	222d      	movs	r2, #45	; 0x2d
 800a084:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a08c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a090:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <f_printf+0x394>
 800a09c:	2330      	movs	r3, #48	; 0x30
 800a09e:	e000      	b.n	800a0a2 <f_printf+0x396>
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a0a6:	e007      	b.n	800a0b8 <f_printf+0x3ac>
 800a0a8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a0ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fdb4 	bl	8009c20 <putc_bfd>
 800a0b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a0bc:	f003 0302 	and.w	r3, r3, #2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d108      	bne.n	800a0d6 <f_printf+0x3ca>
 800a0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d8e8      	bhi.n	800a0a8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800a0d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0e0:	f107 020c 	add.w	r2, r7, #12
 800a0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0e8:	4413      	add	r3, r2
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fd94 	bl	8009c20 <putc_bfd>
		} while (i);
 800a0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1ea      	bne.n	800a0d6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800a100:	e007      	b.n	800a112 <f_printf+0x406>
 800a102:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fd87 	bl	8009c20 <putc_bfd>
 800a112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a11c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a120:	429a      	cmp	r2, r3
 800a122:	d8ee      	bhi.n	800a102 <f_printf+0x3f6>
		c = *fmt++;
 800a124:	e600      	b.n	8009d28 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <f_printf+0x420>
		if (!c) break;
 800a12a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a12c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fdb2 	bl	8009c9a <putc_flush>
 800a136:	4603      	mov	r3, r0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	379c      	adds	r7, #156	; 0x9c
 800a13c:	46bd      	mov	sp, r7
 800a13e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a142:	b003      	add	sp, #12
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop

0800a148 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a148:	b480      	push	{r7}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a156:	2301      	movs	r3, #1
 800a158:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a160:	7a5b      	ldrb	r3, [r3, #9]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d131      	bne.n	800a1cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a168:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a16a:	7a5b      	ldrb	r3, [r3, #9]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	4b19      	ldr	r3, [pc, #100]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a172:	2100      	movs	r1, #0
 800a174:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a176:	4b18      	ldr	r3, [pc, #96]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a178:	7a5b      	ldrb	r3, [r3, #9]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	4a16      	ldr	r2, [pc, #88]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a188:	7a5b      	ldrb	r3, [r3, #9]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	461a      	mov	r2, r3
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a190:	4413      	add	r3, r2
 800a192:	79fa      	ldrb	r2, [r7, #7]
 800a194:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a198:	7a5b      	ldrb	r3, [r3, #9]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	b2d1      	uxtb	r1, r2
 800a1a0:	4a0d      	ldr	r2, [pc, #52]	; (800a1d8 <FATFS_LinkDriverEx+0x90>)
 800a1a2:	7251      	strb	r1, [r2, #9]
 800a1a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a1a6:	7dbb      	ldrb	r3, [r7, #22]
 800a1a8:	3330      	adds	r3, #48	; 0x30
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	223a      	movs	r2, #58	; 0x3a
 800a1b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	3302      	adds	r3, #2
 800a1bc:	222f      	movs	r2, #47	; 0x2f
 800a1be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	3303      	adds	r3, #3
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr
 800a1d8:	20000a70 	.word	0x20000a70

0800a1dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff ffac 	bl	800a148 <FATFS_LinkDriverEx>
 800a1f0:	4603      	mov	r3, r0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a208:	88fb      	ldrh	r3, [r7, #6]
 800a20a:	2b7f      	cmp	r3, #127	; 0x7f
 800a20c:	d802      	bhi.n	800a214 <ff_convert+0x18>
		c = chr;
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	81fb      	strh	r3, [r7, #14]
 800a212:	e025      	b.n	800a260 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00b      	beq.n	800a232 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a21a:	88fb      	ldrh	r3, [r7, #6]
 800a21c:	2bff      	cmp	r3, #255	; 0xff
 800a21e:	d805      	bhi.n	800a22c <ff_convert+0x30>
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	3b80      	subs	r3, #128	; 0x80
 800a224:	4a11      	ldr	r2, [pc, #68]	; (800a26c <ff_convert+0x70>)
 800a226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a22a:	e000      	b.n	800a22e <ff_convert+0x32>
 800a22c:	2300      	movs	r3, #0
 800a22e:	81fb      	strh	r3, [r7, #14]
 800a230:	e016      	b.n	800a260 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a232:	2300      	movs	r3, #0
 800a234:	81fb      	strh	r3, [r7, #14]
 800a236:	e009      	b.n	800a24c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a238:	89fb      	ldrh	r3, [r7, #14]
 800a23a:	4a0c      	ldr	r2, [pc, #48]	; (800a26c <ff_convert+0x70>)
 800a23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a240:	88fa      	ldrh	r2, [r7, #6]
 800a242:	429a      	cmp	r2, r3
 800a244:	d006      	beq.n	800a254 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a246:	89fb      	ldrh	r3, [r7, #14]
 800a248:	3301      	adds	r3, #1
 800a24a:	81fb      	strh	r3, [r7, #14]
 800a24c:	89fb      	ldrh	r3, [r7, #14]
 800a24e:	2b7f      	cmp	r3, #127	; 0x7f
 800a250:	d9f2      	bls.n	800a238 <ff_convert+0x3c>
 800a252:	e000      	b.n	800a256 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a254:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a256:	89fb      	ldrh	r3, [r7, #14]
 800a258:	3380      	adds	r3, #128	; 0x80
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a260:	89fb      	ldrh	r3, [r7, #14]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr
 800a26c:	080119e4 	.word	0x080119e4

0800a270 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a280:	d201      	bcs.n	800a286 <ff_wtoupper+0x16>
 800a282:	4b3d      	ldr	r3, [pc, #244]	; (800a378 <ff_wtoupper+0x108>)
 800a284:	e000      	b.n	800a288 <ff_wtoupper+0x18>
 800a286:	4b3d      	ldr	r3, [pc, #244]	; (800a37c <ff_wtoupper+0x10c>)
 800a288:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	1c9a      	adds	r2, r3, #2
 800a28e:	617a      	str	r2, [r7, #20]
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a294:	8a7b      	ldrh	r3, [r7, #18]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d068      	beq.n	800a36c <ff_wtoupper+0xfc>
 800a29a:	88fa      	ldrh	r2, [r7, #6]
 800a29c:	8a7b      	ldrh	r3, [r7, #18]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d364      	bcc.n	800a36c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	1c9a      	adds	r2, r3, #2
 800a2a6:	617a      	str	r2, [r7, #20]
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	823b      	strh	r3, [r7, #16]
 800a2ac:	8a3b      	ldrh	r3, [r7, #16]
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	81fb      	strh	r3, [r7, #14]
 800a2b2:	8a3b      	ldrh	r3, [r7, #16]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a2b8:	88fa      	ldrh	r2, [r7, #6]
 800a2ba:	8a79      	ldrh	r1, [r7, #18]
 800a2bc:	8a3b      	ldrh	r3, [r7, #16]
 800a2be:	440b      	add	r3, r1
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	da49      	bge.n	800a358 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	2b08      	cmp	r3, #8
 800a2c8:	d84f      	bhi.n	800a36a <ff_wtoupper+0xfa>
 800a2ca:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <ff_wtoupper+0x60>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a2f5 	.word	0x0800a2f5
 800a2d4:	0800a307 	.word	0x0800a307
 800a2d8:	0800a31d 	.word	0x0800a31d
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a32d 	.word	0x0800a32d
 800a2e4:	0800a335 	.word	0x0800a335
 800a2e8:	0800a33d 	.word	0x0800a33d
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a34d 	.word	0x0800a34d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a2f4:	88fa      	ldrh	r2, [r7, #6]
 800a2f6:	8a7b      	ldrh	r3, [r7, #18]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4413      	add	r3, r2
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	80fb      	strh	r3, [r7, #6]
 800a304:	e027      	b.n	800a356 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	8a7b      	ldrh	r3, [r7, #18]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	b29b      	uxth	r3, r3
 800a314:	88fa      	ldrh	r2, [r7, #6]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	80fb      	strh	r3, [r7, #6]
 800a31a:	e01c      	b.n	800a356 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	3b10      	subs	r3, #16
 800a320:	80fb      	strh	r3, [r7, #6]
 800a322:	e018      	b.n	800a356 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	3b20      	subs	r3, #32
 800a328:	80fb      	strh	r3, [r7, #6]
 800a32a:	e014      	b.n	800a356 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a32c:	88fb      	ldrh	r3, [r7, #6]
 800a32e:	3b30      	subs	r3, #48	; 0x30
 800a330:	80fb      	strh	r3, [r7, #6]
 800a332:	e010      	b.n	800a356 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a334:	88fb      	ldrh	r3, [r7, #6]
 800a336:	3b1a      	subs	r3, #26
 800a338:	80fb      	strh	r3, [r7, #6]
 800a33a:	e00c      	b.n	800a356 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a33c:	88fb      	ldrh	r3, [r7, #6]
 800a33e:	3308      	adds	r3, #8
 800a340:	80fb      	strh	r3, [r7, #6]
 800a342:	e008      	b.n	800a356 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a344:	88fb      	ldrh	r3, [r7, #6]
 800a346:	3b50      	subs	r3, #80	; 0x50
 800a348:	80fb      	strh	r3, [r7, #6]
 800a34a:	e004      	b.n	800a356 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a352:	80fb      	strh	r3, [r7, #6]
 800a354:	bf00      	nop
			}
			break;
 800a356:	e008      	b.n	800a36a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a358:	89fb      	ldrh	r3, [r7, #14]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d195      	bne.n	800a28a <ff_wtoupper+0x1a>
 800a35e:	8a3b      	ldrh	r3, [r7, #16]
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4413      	add	r3, r2
 800a366:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a368:	e78f      	b.n	800a28a <ff_wtoupper+0x1a>
			break;
 800a36a:	bf00      	nop
	}

	return chr;
 800a36c:	88fb      	ldrh	r3, [r7, #6]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr
 800a378:	08011ae4 	.word	0x08011ae4
 800a37c:	08011cd8 	.word	0x08011cd8

0800a380 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	4603      	mov	r3, r0
 800a390:	817b      	strh	r3, [r7, #10]
 800a392:	460b      	mov	r3, r1
 800a394:	813b      	strh	r3, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800a39a:	4b22      	ldr	r3, [pc, #136]	; (800a424 <Paint_NewImage+0xa4>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800a3a0:	4a20      	ldr	r2, [pc, #128]	; (800a424 <Paint_NewImage+0xa4>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800a3a6:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <Paint_NewImage+0xa4>)
 800a3a8:	897b      	ldrh	r3, [r7, #10]
 800a3aa:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <Paint_NewImage+0xa4>)
 800a3ae:	893b      	ldrh	r3, [r7, #8]
 800a3b0:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <Paint_NewImage+0xa4>)
 800a3b4:	8b3b      	ldrh	r3, [r7, #24]
 800a3b6:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <Paint_NewImage+0xa4>)
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800a3be:	897b      	ldrh	r3, [r7, #10]
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d103      	bne.n	800a3d2 <Paint_NewImage+0x52>
 800a3ca:	897b      	ldrh	r3, [r7, #10]
 800a3cc:	08db      	lsrs	r3, r3, #3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	e004      	b.n	800a3dc <Paint_NewImage+0x5c>
 800a3d2:	897b      	ldrh	r3, [r7, #10]
 800a3d4:	08db      	lsrs	r3, r3, #3
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	3301      	adds	r3, #1
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4a11      	ldr	r2, [pc, #68]	; (800a424 <Paint_NewImage+0xa4>)
 800a3de:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800a3e0:	4a10      	ldr	r2, [pc, #64]	; (800a424 <Paint_NewImage+0xa4>)
 800a3e2:	893b      	ldrh	r3, [r7, #8]
 800a3e4:	8293      	strh	r3, [r2, #20]
    //    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 800a3e6:	4a0f      	ldr	r2, [pc, #60]	; (800a424 <Paint_NewImage+0xa4>)
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <Paint_NewImage+0xa4>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	821a      	strh	r2, [r3, #16]

    if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <Paint_NewImage+0x7e>
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	2bb4      	cmp	r3, #180	; 0xb4
 800a3fc:	d106      	bne.n	800a40c <Paint_NewImage+0x8c>
    {
        Paint.Width = Width;
 800a3fe:	4a09      	ldr	r2, [pc, #36]	; (800a424 <Paint_NewImage+0xa4>)
 800a400:	897b      	ldrh	r3, [r7, #10]
 800a402:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800a404:	4a07      	ldr	r2, [pc, #28]	; (800a424 <Paint_NewImage+0xa4>)
 800a406:	893b      	ldrh	r3, [r7, #8]
 800a408:	80d3      	strh	r3, [r2, #6]
 800a40a:	e006      	b.n	800a41a <Paint_NewImage+0x9a>
    }
    else
    {
        Paint.Width = Height;
 800a40c:	4a05      	ldr	r2, [pc, #20]	; (800a424 <Paint_NewImage+0xa4>)
 800a40e:	893b      	ldrh	r3, [r7, #8]
 800a410:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800a412:	4a04      	ldr	r2, [pc, #16]	; (800a424 <Paint_NewImage+0xa4>)
 800a414:	897b      	ldrh	r3, [r7, #10]
 800a416:	80d3      	strh	r3, [r2, #6]
    }
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	bc80      	pop	{r7}
 800a422:	4770      	bx	lr
 800a424:	20000a7c 	.word	0x20000a7c

0800a428 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800a430:	4a03      	ldr	r2, [pc, #12]	; (800a440 <Paint_SelectImage+0x18>)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6013      	str	r3, [r2, #0]
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	20000a7c 	.word	0x20000a7c

0800a444 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800a444:	b480      	push	{r7}
 800a446:	b08b      	sub	sp, #44	; 0x2c
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	80fb      	strh	r3, [r7, #6]
 800a44e:	460b      	mov	r3, r1
 800a450:	80bb      	strh	r3, [r7, #4]
 800a452:	4613      	mov	r3, r2
 800a454:	807b      	strh	r3, [r7, #2]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800a456:	4ba0      	ldr	r3, [pc, #640]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a458:	889b      	ldrh	r3, [r3, #4]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	f200 812f 	bhi.w	800a6c0 <Paint_SetPixel+0x27c>
 800a462:	4b9d      	ldr	r3, [pc, #628]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	88ba      	ldrh	r2, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	f200 8129 	bhi.w	800a6c0 <Paint_SetPixel+0x27c>
        // Debug("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800a46e:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a470:	89db      	ldrh	r3, [r3, #14]
 800a472:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a476:	d02b      	beq.n	800a4d0 <Paint_SetPixel+0x8c>
 800a478:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a47c:	f300 8122 	bgt.w	800a6c4 <Paint_SetPixel+0x280>
 800a480:	2bb4      	cmp	r3, #180	; 0xb4
 800a482:	d016      	beq.n	800a4b2 <Paint_SetPixel+0x6e>
 800a484:	2bb4      	cmp	r3, #180	; 0xb4
 800a486:	f300 811d 	bgt.w	800a6c4 <Paint_SetPixel+0x280>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <Paint_SetPixel+0x50>
 800a48e:	2b5a      	cmp	r3, #90	; 0x5a
 800a490:	d005      	beq.n	800a49e <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800a492:	e117      	b.n	800a6c4 <Paint_SetPixel+0x280>
        X = Xpoint;
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 800a498:	88bb      	ldrh	r3, [r7, #4]
 800a49a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a49c:	e022      	b.n	800a4e4 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 800a49e:	4b8e      	ldr	r3, [pc, #568]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a4a0:	891a      	ldrh	r2, [r3, #8]
 800a4a2:	88bb      	ldrh	r3, [r7, #4]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a4b0:	e018      	b.n	800a4e4 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 800a4b2:	4b89      	ldr	r3, [pc, #548]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a4b4:	891a      	ldrh	r2, [r3, #8]
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800a4c0:	4b85      	ldr	r3, [pc, #532]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a4c2:	895a      	ldrh	r2, [r3, #10]
 800a4c4:	88bb      	ldrh	r3, [r7, #4]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a4ce:	e009      	b.n	800a4e4 <Paint_SetPixel+0xa0>
        X = Ypoint;
 800a4d0:	88bb      	ldrh	r3, [r7, #4]
 800a4d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800a4d4:	4b80      	ldr	r3, [pc, #512]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a4d6:	895a      	ldrh	r2, [r3, #10]
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a4e2:	bf00      	nop
    }

    switch (Paint.Mirror)
 800a4e4:	4b7c      	ldr	r3, [pc, #496]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a4e6:	8a1b      	ldrh	r3, [r3, #16]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	f200 80ed 	bhi.w	800a6c8 <Paint_SetPixel+0x284>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <Paint_SetPixel+0xb0>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a543 	.word	0x0800a543
 800a4f8:	0800a505 	.word	0x0800a505
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a525 	.word	0x0800a525
    {
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800a504:	4b74      	ldr	r3, [pc, #464]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a506:	891a      	ldrh	r2, [r3, #8]
 800a508:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800a512:	e017      	b.n	800a544 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800a514:	4b70      	ldr	r3, [pc, #448]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a516:	895a      	ldrh	r2, [r3, #10]
 800a518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a522:	e00f      	b.n	800a544 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800a524:	4b6c      	ldr	r3, [pc, #432]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a526:	891a      	ldrh	r2, [r3, #8]
 800a528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800a532:	4b69      	ldr	r3, [pc, #420]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a534:	895a      	ldrh	r2, [r3, #10]
 800a536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	3b01      	subs	r3, #1
 800a53e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a540:	e000      	b.n	800a544 <Paint_SetPixel+0x100>
        break;
 800a542:	bf00      	nop
    default:
        return;
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800a544:	4b64      	ldr	r3, [pc, #400]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a546:	891b      	ldrh	r3, [r3, #8]
 800a548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a54a:	429a      	cmp	r2, r3
 800a54c:	f200 80be 	bhi.w	800a6cc <Paint_SetPixel+0x288>
 800a550:	4b61      	ldr	r3, [pc, #388]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a552:	895b      	ldrh	r3, [r3, #10]
 800a554:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a556:	429a      	cmp	r2, r3
 800a558:	f200 80b8 	bhi.w	800a6cc <Paint_SetPixel+0x288>
    {
        // Debug("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800a55c:	4b5e      	ldr	r3, [pc, #376]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a55e:	8adb      	ldrh	r3, [r3, #22]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d139      	bne.n	800a5d8 <Paint_SetPixel+0x194>
    {
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800a564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a566:	08db      	lsrs	r3, r3, #3
 800a568:	b29b      	uxth	r3, r3
 800a56a:	4619      	mov	r1, r3
 800a56c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a56e:	4a5a      	ldr	r2, [pc, #360]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a570:	8a52      	ldrh	r2, [r2, #18]
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	440b      	add	r3, r1
 800a578:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800a57a:	4b57      	ldr	r3, [pc, #348]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	4413      	add	r3, r2
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	73fb      	strb	r3, [r7, #15]
        if (Color == BLACK)
 800a586:	887b      	ldrh	r3, [r7, #2]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d113      	bne.n	800a5b4 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800a58c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a58e:	f003 0307 	and.w	r3, r3, #7
 800a592:	2280      	movs	r2, #128	; 0x80
 800a594:	fa42 f303 	asr.w	r3, r2, r3
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	43db      	mvns	r3, r3
 800a59c:	b25a      	sxtb	r2, r3
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	b259      	sxtb	r1, r3
 800a5a6:	4b4c      	ldr	r3, [pc, #304]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	b2ca      	uxtb	r2, r1
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e08c      	b.n	800a6ce <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800a5b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2280      	movs	r2, #128	; 0x80
 800a5bc:	fa42 f303 	asr.w	r3, r2, r3
 800a5c0:	b25a      	sxtb	r2, r3
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	b259      	sxtb	r1, r3
 800a5ca:	4b43      	ldr	r3, [pc, #268]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	b2ca      	uxtb	r2, r1
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e07a      	b.n	800a6ce <Paint_SetPixel+0x28a>
    }
    else if (Paint.Scale == 4)
 800a5d8:	4b3f      	ldr	r3, [pc, #252]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a5da:	8adb      	ldrh	r3, [r3, #22]
 800a5dc:	2b04      	cmp	r3, #4
 800a5de:	d137      	bne.n	800a650 <Paint_SetPixel+0x20c>
    {
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800a5e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5e2:	089b      	lsrs	r3, r3, #2
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ea:	4a3b      	ldr	r2, [pc, #236]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a5ec:	8a52      	ldrh	r2, [r2, #18]
 800a5ee:	fb02 f303 	mul.w	r3, r2, r3
 800a5f2:	440b      	add	r3, r1
 800a5f4:	61bb      	str	r3, [r7, #24]
        Color = Color % 4; // Guaranteed color scale is 4  --- 0~3
 800a5f6:	887b      	ldrh	r3, [r7, #2]
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800a5fe:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	4413      	add	r3, r2
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800a60a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	22c0      	movs	r2, #192	; 0xc0
 800a614:	fa42 f303 	asr.w	r3, r2, r3
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	43db      	mvns	r3, r3
 800a61c:	b25a      	sxtb	r2, r3
 800a61e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a622:	4013      	ands	r3, r2
 800a624:	b25b      	sxtb	r3, r3
 800a626:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800a628:	887b      	ldrh	r3, [r7, #2]
 800a62a:	019a      	lsls	r2, r3, #6
 800a62c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	fa42 f303 	asr.w	r3, r2, r3
 800a638:	b25a      	sxtb	r2, r3
 800a63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a63e:	4313      	orrs	r3, r2
 800a640:	b259      	sxtb	r1, r3
 800a642:	4b25      	ldr	r3, [pc, #148]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	4413      	add	r3, r2
 800a64a:	b2ca      	uxtb	r2, r1
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e03e      	b.n	800a6ce <Paint_SetPixel+0x28a>
    }
    else if (Paint.Scale == 7)
 800a650:	4b21      	ldr	r3, [pc, #132]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a652:	8adb      	ldrh	r3, [r3, #22]
 800a654:	2b07      	cmp	r3, #7
 800a656:	d13a      	bne.n	800a6ce <Paint_SetPixel+0x28a>
    {
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800a658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65a:	085b      	lsrs	r3, r3, #1
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4619      	mov	r1, r3
 800a660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a662:	4a1d      	ldr	r2, [pc, #116]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a664:	8a52      	ldrh	r2, [r2, #18]
 800a666:	fb02 f303 	mul.w	r3, r2, r3
 800a66a:	440b      	add	r3, r1
 800a66c:	623b      	str	r3, [r7, #32]
        UBYTE Rdata = Paint.Image[Addr];
 800a66e:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	4413      	add	r3, r2
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	77fb      	strb	r3, [r7, #31]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800a67a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	22f0      	movs	r2, #240	; 0xf0
 800a684:	fa42 f303 	asr.w	r3, r2, r3
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	43db      	mvns	r3, r3
 800a68c:	b25a      	sxtb	r2, r3
 800a68e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a692:	4013      	ands	r3, r2
 800a694:	b25b      	sxtb	r3, r3
 800a696:	77fb      	strb	r3, [r7, #31]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800a698:	887b      	ldrh	r3, [r7, #2]
 800a69a:	011a      	lsls	r2, r3, #4
 800a69c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	fa42 f303 	asr.w	r3, r2, r3
 800a6a8:	b25a      	sxtb	r2, r3
 800a6aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	b259      	sxtb	r1, r3
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <Paint_SetPixel+0x294>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	b2ca      	uxtb	r2, r1
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	e006      	b.n	800a6ce <Paint_SetPixel+0x28a>
        return;
 800a6c0:	bf00      	nop
 800a6c2:	e004      	b.n	800a6ce <Paint_SetPixel+0x28a>
        return;
 800a6c4:	bf00      	nop
 800a6c6:	e002      	b.n	800a6ce <Paint_SetPixel+0x28a>
        return;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <Paint_SetPixel+0x28a>
        return;
 800a6cc:	bf00      	nop
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800a6ce:	372c      	adds	r7, #44	; 0x2c
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bc80      	pop	{r7}
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20000a7c 	.word	0x20000a7c

0800a6dc <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b089      	sub	sp, #36	; 0x24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	80fb      	strh	r3, [r7, #6]
    if (Paint.Scale == 2)
 800a6e6:	4b4c      	ldr	r3, [pc, #304]	; (800a818 <Paint_Clear+0x13c>)
 800a6e8:	8adb      	ldrh	r3, [r3, #22]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d125      	bne.n	800a73a <Paint_Clear+0x5e>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	83fb      	strh	r3, [r7, #30]
 800a6f2:	e01c      	b.n	800a72e <Paint_Clear+0x52>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	83bb      	strh	r3, [r7, #28]
 800a6f8:	e011      	b.n	800a71e <Paint_Clear+0x42>
            { // 8 pixel =  1 byte
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a6fa:	8bba      	ldrh	r2, [r7, #28]
 800a6fc:	8bfb      	ldrh	r3, [r7, #30]
 800a6fe:	4946      	ldr	r1, [pc, #280]	; (800a818 <Paint_Clear+0x13c>)
 800a700:	8a49      	ldrh	r1, [r1, #18]
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	4413      	add	r3, r2
 800a708:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800a70a:	4b43      	ldr	r3, [pc, #268]	; (800a818 <Paint_Clear+0x13c>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a718:	8bbb      	ldrh	r3, [r7, #28]
 800a71a:	3301      	adds	r3, #1
 800a71c:	83bb      	strh	r3, [r7, #28]
 800a71e:	4b3e      	ldr	r3, [pc, #248]	; (800a818 <Paint_Clear+0x13c>)
 800a720:	8a5b      	ldrh	r3, [r3, #18]
 800a722:	8bba      	ldrh	r2, [r7, #28]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3e8      	bcc.n	800a6fa <Paint_Clear+0x1e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a728:	8bfb      	ldrh	r3, [r7, #30]
 800a72a:	3301      	adds	r3, #1
 800a72c:	83fb      	strh	r3, [r7, #30]
 800a72e:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <Paint_Clear+0x13c>)
 800a730:	8a9b      	ldrh	r3, [r3, #20]
 800a732:	8bfa      	ldrh	r2, [r7, #30]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3dd      	bcc.n	800a6f4 <Paint_Clear+0x18>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
                Paint.Image[Addr] = (Color << 4) | Color;
            }
        }
    }
}
 800a738:	e068      	b.n	800a80c <Paint_Clear+0x130>
    else if (Paint.Scale == 4)
 800a73a:	4b37      	ldr	r3, [pc, #220]	; (800a818 <Paint_Clear+0x13c>)
 800a73c:	8adb      	ldrh	r3, [r3, #22]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d135      	bne.n	800a7ae <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a742:	2300      	movs	r3, #0
 800a744:	837b      	strh	r3, [r7, #26]
 800a746:	e02c      	b.n	800a7a2 <Paint_Clear+0xc6>
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a748:	2300      	movs	r3, #0
 800a74a:	833b      	strh	r3, [r7, #24]
 800a74c:	e021      	b.n	800a792 <Paint_Clear+0xb6>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a74e:	8b3a      	ldrh	r2, [r7, #24]
 800a750:	8b7b      	ldrh	r3, [r7, #26]
 800a752:	4931      	ldr	r1, [pc, #196]	; (800a818 <Paint_Clear+0x13c>)
 800a754:	8a49      	ldrh	r1, [r1, #18]
 800a756:	fb01 f303 	mul.w	r3, r1, r3
 800a75a:	4413      	add	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
                Paint.Image[Addr] = (Color << 6) | (Color << 4) | (Color << 2) | Color;
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	019b      	lsls	r3, r3, #6
 800a762:	b25a      	sxtb	r2, r3
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	4313      	orrs	r3, r2
 800a76c:	b25a      	sxtb	r2, r3
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	b25b      	sxtb	r3, r3
 800a774:	4313      	orrs	r3, r2
 800a776:	b25a      	sxtb	r2, r3
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	b25b      	sxtb	r3, r3
 800a77c:	4313      	orrs	r3, r2
 800a77e:	b259      	sxtb	r1, r3
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <Paint_Clear+0x13c>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	b2ca      	uxtb	r2, r1
 800a78a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a78c:	8b3b      	ldrh	r3, [r7, #24]
 800a78e:	3301      	adds	r3, #1
 800a790:	833b      	strh	r3, [r7, #24]
 800a792:	4b21      	ldr	r3, [pc, #132]	; (800a818 <Paint_Clear+0x13c>)
 800a794:	8a5b      	ldrh	r3, [r3, #18]
 800a796:	8b3a      	ldrh	r2, [r7, #24]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d3d8      	bcc.n	800a74e <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a79c:	8b7b      	ldrh	r3, [r7, #26]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	837b      	strh	r3, [r7, #26]
 800a7a2:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <Paint_Clear+0x13c>)
 800a7a4:	8a9b      	ldrh	r3, [r3, #20]
 800a7a6:	8b7a      	ldrh	r2, [r7, #26]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d3cd      	bcc.n	800a748 <Paint_Clear+0x6c>
}
 800a7ac:	e02e      	b.n	800a80c <Paint_Clear+0x130>
    else if (Paint.Scale == 7)
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	; (800a818 <Paint_Clear+0x13c>)
 800a7b0:	8adb      	ldrh	r3, [r3, #22]
 800a7b2:	2b07      	cmp	r3, #7
 800a7b4:	d12a      	bne.n	800a80c <Paint_Clear+0x130>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	82fb      	strh	r3, [r7, #22]
 800a7ba:	e022      	b.n	800a802 <Paint_Clear+0x126>
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	82bb      	strh	r3, [r7, #20]
 800a7c0:	e017      	b.n	800a7f2 <Paint_Clear+0x116>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a7c2:	8aba      	ldrh	r2, [r7, #20]
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	4914      	ldr	r1, [pc, #80]	; (800a818 <Paint_Clear+0x13c>)
 800a7c8:	8a49      	ldrh	r1, [r1, #18]
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = (Color << 4) | Color;
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	b25a      	sxtb	r2, r3
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	b259      	sxtb	r1, r3
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <Paint_Clear+0x13c>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	b2ca      	uxtb	r2, r1
 800a7ea:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a7ec:	8abb      	ldrh	r3, [r7, #20]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	82bb      	strh	r3, [r7, #20]
 800a7f2:	4b09      	ldr	r3, [pc, #36]	; (800a818 <Paint_Clear+0x13c>)
 800a7f4:	8a5b      	ldrh	r3, [r3, #18]
 800a7f6:	8aba      	ldrh	r2, [r7, #20]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d3e2      	bcc.n	800a7c2 <Paint_Clear+0xe6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a7fc:	8afb      	ldrh	r3, [r7, #22]
 800a7fe:	3301      	adds	r3, #1
 800a800:	82fb      	strh	r3, [r7, #22]
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <Paint_Clear+0x13c>)
 800a804:	8a9b      	ldrh	r3, [r3, #20]
 800a806:	8afa      	ldrh	r2, [r7, #22]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d3d7      	bcc.n	800a7bc <Paint_Clear+0xe0>
}
 800a80c:	bf00      	nop
 800a80e:	3724      	adds	r7, #36	; 0x24
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	20000a7c 	.word	0x20000a7c

0800a81c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	607b      	str	r3, [r7, #4]
 800a824:	4603      	mov	r3, r0
 800a826:	81fb      	strh	r3, [r7, #14]
 800a828:	460b      	mov	r3, r1
 800a82a:	81bb      	strh	r3, [r7, #12]
 800a82c:	4613      	mov	r3, r2
 800a82e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800a830:	4b4c      	ldr	r3, [pc, #304]	; (800a964 <Paint_DrawChar+0x148>)
 800a832:	889b      	ldrh	r3, [r3, #4]
 800a834:	89fa      	ldrh	r2, [r7, #14]
 800a836:	429a      	cmp	r2, r3
 800a838:	d804      	bhi.n	800a844 <Paint_DrawChar+0x28>
 800a83a:	4b4a      	ldr	r3, [pc, #296]	; (800a964 <Paint_DrawChar+0x148>)
 800a83c:	88db      	ldrh	r3, [r3, #6]
 800a83e:	89ba      	ldrh	r2, [r7, #12]
 800a840:	429a      	cmp	r2, r3
 800a842:	d903      	bls.n	800a84c <Paint_DrawChar+0x30>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800a844:	4848      	ldr	r0, [pc, #288]	; (800a968 <Paint_DrawChar+0x14c>)
 800a846:	f003 f8ed 	bl	800da24 <puts>
        return;
 800a84a:	e087      	b.n	800a95c <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	3b20      	subs	r3, #32
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	88d2      	ldrh	r2, [r2, #6]
 800a854:	fb02 f303 	mul.w	r3, r2, r3
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	8892      	ldrh	r2, [r2, #4]
 800a85c:	08d2      	lsrs	r2, r2, #3
 800a85e:	b292      	uxth	r2, r2
 800a860:	4611      	mov	r1, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	8892      	ldrh	r2, [r2, #4]
 800a866:	f002 0207 	and.w	r2, r2, #7
 800a86a:	b292      	uxth	r2, r2
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	bf14      	ite	ne
 800a870:	2201      	movne	r2, #1
 800a872:	2200      	moveq	r2, #0
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	440a      	add	r2, r1
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	4413      	add	r3, r2
 800a886:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page++)
 800a888:	2300      	movs	r3, #0
 800a88a:	83fb      	strh	r3, [r7, #30]
 800a88c:	e061      	b.n	800a952 <Paint_DrawChar+0x136>
    {
        for (Column = 0; Column < Font->Width; Column++)
 800a88e:	2300      	movs	r3, #0
 800a890:	83bb      	strh	r3, [r7, #28]
 800a892:	e04c      	b.n	800a92e <Paint_DrawChar+0x112>
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
 800a894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a896:	2bff      	cmp	r3, #255	; 0xff
 800a898:	d118      	bne.n	800a8cc <Paint_DrawChar+0xb0>
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	8bbb      	ldrh	r3, [r7, #28]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	2280      	movs	r2, #128	; 0x80
 800a8a8:	fa42 f303 	asr.w	r3, r2, r3
 800a8ac:	400b      	ands	r3, r1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d031      	beq.n	800a916 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a8b2:	89fa      	ldrh	r2, [r7, #14]
 800a8b4:	8bbb      	ldrh	r3, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	b298      	uxth	r0, r3
 800a8ba:	89ba      	ldrh	r2, [r7, #12]
 800a8bc:	8bfb      	ldrh	r3, [r7, #30]
 800a8be:	4413      	add	r3, r2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7ff fdbd 	bl	800a444 <Paint_SetPixel>
 800a8ca:	e024      	b.n	800a916 <Paint_DrawChar+0xfa>
                // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	8bbb      	ldrh	r3, [r7, #28]
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	2280      	movs	r2, #128	; 0x80
 800a8da:	fa42 f303 	asr.w	r3, r2, r3
 800a8de:	400b      	ands	r3, r1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00c      	beq.n	800a8fe <Paint_DrawChar+0xe2>
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a8e4:	89fa      	ldrh	r2, [r7, #14]
 800a8e6:	8bbb      	ldrh	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b298      	uxth	r0, r3
 800a8ec:	89ba      	ldrh	r2, [r7, #12]
 800a8ee:	8bfb      	ldrh	r3, [r7, #30]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f7ff fda4 	bl	800a444 <Paint_SetPixel>
 800a8fc:	e00b      	b.n	800a916 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
                else
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800a8fe:	89fa      	ldrh	r2, [r7, #14]
 800a900:	8bbb      	ldrh	r3, [r7, #28]
 800a902:	4413      	add	r3, r2
 800a904:	b298      	uxth	r0, r3
 800a906:	89ba      	ldrh	r2, [r7, #12]
 800a908:	8bfb      	ldrh	r3, [r7, #30]
 800a90a:	4413      	add	r3, r2
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a910:	4619      	mov	r1, r3
 800a912:	f7ff fd97 	bl	800a444 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
 800a916:	8bbb      	ldrh	r3, [r7, #28]
 800a918:	f003 0307 	and.w	r3, r3, #7
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	2b07      	cmp	r3, #7
 800a920:	d102      	bne.n	800a928 <Paint_DrawChar+0x10c>
                ptr++;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	3301      	adds	r3, #1
 800a926:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column++)
 800a928:	8bbb      	ldrh	r3, [r7, #28]
 800a92a:	3301      	adds	r3, #1
 800a92c:	83bb      	strh	r3, [r7, #28]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	889b      	ldrh	r3, [r3, #4]
 800a932:	8bba      	ldrh	r2, [r7, #28]
 800a934:	429a      	cmp	r2, r3
 800a936:	d3ad      	bcc.n	800a894 <Paint_DrawChar+0x78>
        } // Write a line
        if (Font->Width % 8 != 0)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	889b      	ldrh	r3, [r3, #4]
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <Paint_DrawChar+0x130>
            ptr++;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	3301      	adds	r3, #1
 800a94a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page++)
 800a94c:	8bfb      	ldrh	r3, [r7, #30]
 800a94e:	3301      	adds	r3, #1
 800a950:	83fb      	strh	r3, [r7, #30]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	8bfa      	ldrh	r2, [r7, #30]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d398      	bcc.n	800a88e <Paint_DrawChar+0x72>
    } // Write all
}
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000a7c 	.word	0x20000a7c
 800a968:	080115a0 	.word	0x080115a0

0800a96c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         sFONT *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
 800a972:	60ba      	str	r2, [r7, #8]
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	4603      	mov	r3, r0
 800a978:	81fb      	strh	r3, [r7, #14]
 800a97a:	460b      	mov	r3, r1
 800a97c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800a97e:	89fb      	ldrh	r3, [r7, #14]
 800a980:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800a982:	89bb      	ldrh	r3, [r7, #12]
 800a984:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800a986:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <Paint_DrawString_EN+0xa0>)
 800a988:	889b      	ldrh	r3, [r3, #4]
 800a98a:	89fa      	ldrh	r2, [r7, #14]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d804      	bhi.n	800a99a <Paint_DrawString_EN+0x2e>
 800a990:	4b1e      	ldr	r3, [pc, #120]	; (800aa0c <Paint_DrawString_EN+0xa0>)
 800a992:	88db      	ldrh	r3, [r3, #6]
 800a994:	89ba      	ldrh	r2, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d931      	bls.n	800a9fe <Paint_DrawString_EN+0x92>
    {
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800a99a:	481d      	ldr	r0, [pc, #116]	; (800aa10 <Paint_DrawString_EN+0xa4>)
 800a99c:	f003 f842 	bl	800da24 <puts>
        return;
 800a9a0:	e031      	b.n	800aa06 <Paint_DrawString_EN+0x9a>
    }

    while (*pString != '\0')
    {
        // if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width) > Paint.Width)
 800a9a2:	8afb      	ldrh	r3, [r7, #22]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	8892      	ldrh	r2, [r2, #4]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	4a18      	ldr	r2, [pc, #96]	; (800aa0c <Paint_DrawString_EN+0xa0>)
 800a9ac:	8892      	ldrh	r2, [r2, #4]
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	dd06      	ble.n	800a9c0 <Paint_DrawString_EN+0x54>
        {
            Xpoint = Xstart;
 800a9b2:	89fb      	ldrh	r3, [r7, #14]
 800a9b4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	88da      	ldrh	r2, [r3, #6]
 800a9ba:	8abb      	ldrh	r3, [r7, #20]
 800a9bc:	4413      	add	r3, r2
 800a9be:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint + Font->Height) > Paint.Height)
 800a9c0:	8abb      	ldrh	r3, [r7, #20]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	88d2      	ldrh	r2, [r2, #6]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	4a10      	ldr	r2, [pc, #64]	; (800aa0c <Paint_DrawString_EN+0xa0>)
 800a9ca:	88d2      	ldrh	r2, [r2, #6]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	dd03      	ble.n	800a9d8 <Paint_DrawString_EN+0x6c>
        {
            Xpoint = Xstart;
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800a9d4:	89bb      	ldrh	r3, [r7, #12]
 800a9d6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	8ab9      	ldrh	r1, [r7, #20]
 800a9de:	8af8      	ldrh	r0, [r7, #22]
 800a9e0:	8c3b      	ldrh	r3, [r7, #32]
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f7ff ff17 	bl	800a81c <Paint_DrawChar>

        // The next character of the address
        pString++;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60bb      	str	r3, [r7, #8]

        // The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	889a      	ldrh	r2, [r3, #4]
 800a9f8:	8afb      	ldrh	r3, [r7, #22]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	82fb      	strh	r3, [r7, #22]
    while (*pString != '\0')
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1cd      	bne.n	800a9a2 <Paint_DrawString_EN+0x36>
    }
}
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	20000a7c 	.word	0x20000a7c
 800aa10:	080115e0 	.word	0x080115e0

0800aa14 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800aa1a:	af02      	add	r7, sp, #8
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	4608      	mov	r0, r1
 800aa20:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800aa24:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800aa28:	600a      	str	r2, [r1, #0]
 800aa2a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800aa2e:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aa38:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aa44:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800aa48:	4602      	mov	r2, r0
 800aa4a:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800aa52:	2300      	movs	r3, #0
 800aa54:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 800aa58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aa5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	3304      	adds	r3, #4
 800aa66:	22fb      	movs	r2, #251	; 0xfb
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f002 f81a 	bl	800caa4 <memset>
 800aa70:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aa74:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	22fb      	movs	r2, #251	; 0xfb
 800aa80:	2100      	movs	r1, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f002 f80e 	bl	800caa4 <memset>
    uint8_t *pStr = Str_Array;
 800aa88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa8c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800aa90:	4b46      	ldr	r3, [pc, #280]	; (800abac <Paint_DrawNum+0x198>)
 800aa92:	889b      	ldrh	r3, [r3, #4]
 800aa94:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800aa98:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 800aa9c:	8812      	ldrh	r2, [r2, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d808      	bhi.n	800aab4 <Paint_DrawNum+0xa0>
 800aaa2:	4b42      	ldr	r3, [pc, #264]	; (800abac <Paint_DrawNum+0x198>)
 800aaa4:	88db      	ldrh	r3, [r3, #6]
 800aaa6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800aaaa:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800aaae:	8812      	ldrh	r2, [r2, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d903      	bls.n	800aabc <Paint_DrawNum+0xa8>
    {
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800aab4:	483e      	ldr	r0, [pc, #248]	; (800abb0 <Paint_DrawNum+0x19c>)
 800aab6:	f002 ffb5 	bl	800da24 <puts>
 800aaba:	e072      	b.n	800aba2 <Paint_DrawNum+0x18e>
    }

    // Converts a number to a string
    do
    {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 800aabc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800aac0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4b3b      	ldr	r3, [pc, #236]	; (800abb4 <Paint_DrawNum+0x1a0>)
 800aac8:	fb83 1302 	smull	r1, r3, r3, r2
 800aacc:	1099      	asrs	r1, r3, #2
 800aace:	17d3      	asrs	r3, r2, #31
 800aad0:	1ac9      	subs	r1, r1, r3
 800aad2:	460b      	mov	r3, r1
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	1ad1      	subs	r1, r2, r3
 800aadc:	b2ca      	uxtb	r2, r1
 800aade:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800aae2:	3230      	adds	r2, #48	; 0x30
 800aae4:	b2d1      	uxtb	r1, r2
 800aae6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800aaea:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800aaee:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 800aaf0:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 800aafe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab02:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800ab06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab0a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4928      	ldr	r1, [pc, #160]	; (800abb4 <Paint_DrawNum+0x1a0>)
 800ab12:	fb81 0103 	smull	r0, r1, r1, r3
 800ab16:	1089      	asrs	r1, r1, #2
 800ab18:	17db      	asrs	r3, r3, #31
 800ab1a:	1acb      	subs	r3, r1, r3
 800ab1c:	6013      	str	r3, [r2, #0]
    } while (Nummber);
 800ab1e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab22:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1c7      	bne.n	800aabc <Paint_DrawNum+0xa8>

    // The string is inverted
    while (Num_Bit > 0)
 800ab2c:	e01c      	b.n	800ab68 <Paint_DrawNum+0x154>
    {
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800ab2e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800ab38:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800ab3c:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 800ab40:	5c89      	ldrb	r1, [r1, r2]
 800ab42:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800ab46:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ab4a:	54d1      	strb	r1, [r2, r3]
        Str_Bit++;
 800ab4c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3301      	adds	r3, #1
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit--;
 800ab5a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0)
 800ab68:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dcde      	bgt.n	800ab2e <Paint_DrawNum+0x11a>
    }

    // show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char *)pStr, Font, Color_Background, Color_Foreground);
 800ab70:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ab74:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ab78:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800ab7c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800ab80:	8811      	ldrh	r1, [r2, #0]
 800ab82:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800ab86:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 800ab8a:	8810      	ldrh	r0, [r2, #0]
 800ab8c:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 800ab90:	9201      	str	r2, [sp, #4]
 800ab92:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 800ab96:	9200      	str	r2, [sp, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800ab9e:	f7ff fee5 	bl	800a96c <Paint_DrawString_EN>
}
 800aba2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd90      	pop	{r4, r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000a7c 	.word	0x20000a7c
 800abb0:	08011624 	.word	0x08011624
 800abb4:	66666667 	.word	0x66666667

0800abb8 <DEV_SPI_WriteByte>:
 * The function writes a single byte of data to a SPI device using the HAL_SPI_Transmit function.
 *
 * @param value The byte value to be transmitted over SPI.
 */
void DEV_SPI_WriteByte(UBYTE value)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 100);
 800abc2:	1df9      	adds	r1, r7, #7
 800abc4:	2364      	movs	r3, #100	; 0x64
 800abc6:	2201      	movs	r2, #1
 800abc8:	4803      	ldr	r0, [pc, #12]	; (800abd8 <DEV_SPI_WriteByte+0x20>)
 800abca:	f7f9 fdb1 	bl	8004730 <HAL_SPI_Transmit>
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000250 	.word	0x20000250

0800abdc <DEV_Module_Init>:
 * The function initializes a module by setting the values of three pins.
 *
 * @return an integer value of 0.
 */
int DEV_Module_Init(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800abe0:	2200      	movs	r2, #0
 800abe2:	2108      	movs	r1, #8
 800abe4:	4805      	ldr	r0, [pc, #20]	; (800abfc <DEV_Module_Init+0x20>)
 800abe6:	f7f8 fb5d 	bl	80032a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800abea:	2201      	movs	r2, #1
 800abec:	2110      	movs	r1, #16
 800abee:	4803      	ldr	r0, [pc, #12]	; (800abfc <DEV_Module_Init+0x20>)
 800abf0:	f7f8 fb58 	bl	80032a4 <HAL_GPIO_WritePin>
    return 0;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	40020400 	.word	0x40020400

0800ac00 <DISPLAY_SendData>:
 *
 * @param Data Data is a variable of type UBYTE (unsigned byte) that represents the data to be sent
 * over SPI (Serial Peripheral Interface) communication.
 */
void DISPLAY_SendData(UBYTE Data)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	2108      	movs	r1, #8
 800ac0e:	480a      	ldr	r0, [pc, #40]	; (800ac38 <DISPLAY_SendData+0x38>)
 800ac10:	f7f8 fb48 	bl	80032a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800ac14:	2200      	movs	r2, #0
 800ac16:	2180      	movs	r1, #128	; 0x80
 800ac18:	4807      	ldr	r0, [pc, #28]	; (800ac38 <DISPLAY_SendData+0x38>)
 800ac1a:	f7f8 fb43 	bl	80032a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ffc9 	bl	800abb8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800ac26:	2201      	movs	r2, #1
 800ac28:	2180      	movs	r1, #128	; 0x80
 800ac2a:	4803      	ldr	r0, [pc, #12]	; (800ac38 <DISPLAY_SendData+0x38>)
 800ac2c:	f7f8 fb3a 	bl	80032a4 <HAL_GPIO_WritePin>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	40020400 	.word	0x40020400

0800ac3c <DISPLAY_SendCommand>:
 * be sent to the display. This function sends the command to the display using SPI communication
 * protocol. The EPD_DC_PIN and EPD_CS_PIN are digital pins used for data/command selection and chip
 * select respectively
 */
void DISPLAY_SendCommand(UBYTE Reg)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	71fb      	strb	r3, [r7, #7]

    DEV_Digital_Write(EPD_DC_PIN, 0);
 800ac46:	2200      	movs	r2, #0
 800ac48:	2108      	movs	r1, #8
 800ac4a:	480a      	ldr	r0, [pc, #40]	; (800ac74 <DISPLAY_SendCommand+0x38>)
 800ac4c:	f7f8 fb2a 	bl	80032a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800ac50:	2200      	movs	r2, #0
 800ac52:	2180      	movs	r1, #128	; 0x80
 800ac54:	4807      	ldr	r0, [pc, #28]	; (800ac74 <DISPLAY_SendCommand+0x38>)
 800ac56:	f7f8 fb25 	bl	80032a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff ffab 	bl	800abb8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800ac62:	2201      	movs	r2, #1
 800ac64:	2180      	movs	r1, #128	; 0x80
 800ac66:	4803      	ldr	r0, [pc, #12]	; (800ac74 <DISPLAY_SendCommand+0x38>)
 800ac68:	f7f8 fb1c 	bl	80032a4 <HAL_GPIO_WritePin>
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	40020400 	.word	0x40020400

0800ac78 <DISPLAY_ReadBusy>:
/**
 * This function checks if the e-Paper display is busy and waits until it is not busy before
 * continuing.
 */
void DISPLAY_ReadBusy(void)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
    //     DISPLAY_SendCommand(0x71);
    //     busy = DEV_Digital_Read(EPD_BUSY_PIN);
    //     busy = !(busy);
    // } while (busy);
    //displayDelay(200);
}
 800ac7c:	bf00      	nop
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr

0800ac84 <DISPLAY_Display>:
 * displayed on the e-paper display.
 * @param ryimage The parameter "ryimage" is a pointer to an array of unsigned bytes that represents
 * the red and yellow image data to be displayed on the screen.
 */
void DISPLAY_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (DISPLAY_WIDTH % 8 == 0) ? (DISPLAY_WIDTH / 8) : (DISPLAY_WIDTH / 8 + 1);
 800ac8e:	2310      	movs	r3, #16
 800ac90:	81fb      	strh	r3, [r7, #14]
    Height = DISPLAY_HEIGHT;
 800ac92:	f44f 7394 	mov.w	r3, #296	; 0x128
 800ac96:	81bb      	strh	r3, [r7, #12]
    DISPLAY_SendCommand(0x10);
 800ac98:	2010      	movs	r0, #16
 800ac9a:	f7ff ffcf 	bl	800ac3c <DISPLAY_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800ac9e:	2300      	movs	r3, #0
 800aca0:	82fb      	strh	r3, [r7, #22]
 800aca2:	e019      	b.n	800acd8 <DISPLAY_Display+0x54>
    {
        for (UWORD i = 0; i < Width; i++)
 800aca4:	2300      	movs	r3, #0
 800aca6:	82bb      	strh	r3, [r7, #20]
 800aca8:	e00f      	b.n	800acca <DISPLAY_Display+0x46>
        {
            DISPLAY_SendData(blackimage[i + j * Width]);
 800acaa:	8aba      	ldrh	r2, [r7, #20]
 800acac:	8afb      	ldrh	r3, [r7, #22]
 800acae:	89f9      	ldrh	r1, [r7, #14]
 800acb0:	fb01 f303 	mul.w	r3, r1, r3
 800acb4:	4413      	add	r3, r2
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4413      	add	r3, r2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff ff9e 	bl	800ac00 <DISPLAY_SendData>
        for (UWORD i = 0; i < Width; i++)
 800acc4:	8abb      	ldrh	r3, [r7, #20]
 800acc6:	3301      	adds	r3, #1
 800acc8:	82bb      	strh	r3, [r7, #20]
 800acca:	8aba      	ldrh	r2, [r7, #20]
 800accc:	89fb      	ldrh	r3, [r7, #14]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d3eb      	bcc.n	800acaa <DISPLAY_Display+0x26>
    for (UWORD j = 0; j < Height; j++)
 800acd2:	8afb      	ldrh	r3, [r7, #22]
 800acd4:	3301      	adds	r3, #1
 800acd6:	82fb      	strh	r3, [r7, #22]
 800acd8:	8afa      	ldrh	r2, [r7, #22]
 800acda:	89bb      	ldrh	r3, [r7, #12]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d3e1      	bcc.n	800aca4 <DISPLAY_Display+0x20>
        }
    }
    //DISPLAY_SendCommand(0x92);

    DISPLAY_SendCommand(0x13);
 800ace0:	2013      	movs	r0, #19
 800ace2:	f7ff ffab 	bl	800ac3c <DISPLAY_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800ace6:	2300      	movs	r3, #0
 800ace8:	827b      	strh	r3, [r7, #18]
 800acea:	e019      	b.n	800ad20 <DISPLAY_Display+0x9c>
    {
        for (UWORD i = 0; i < Width; i++)
 800acec:	2300      	movs	r3, #0
 800acee:	823b      	strh	r3, [r7, #16]
 800acf0:	e00f      	b.n	800ad12 <DISPLAY_Display+0x8e>
        {
            DISPLAY_SendData(ryimage[i + j * Width]);
 800acf2:	8a3a      	ldrh	r2, [r7, #16]
 800acf4:	8a7b      	ldrh	r3, [r7, #18]
 800acf6:	89f9      	ldrh	r1, [r7, #14]
 800acf8:	fb01 f303 	mul.w	r3, r1, r3
 800acfc:	4413      	add	r3, r2
 800acfe:	461a      	mov	r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	4413      	add	r3, r2
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff ff7a 	bl	800ac00 <DISPLAY_SendData>
        for (UWORD i = 0; i < Width; i++)
 800ad0c:	8a3b      	ldrh	r3, [r7, #16]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	823b      	strh	r3, [r7, #16]
 800ad12:	8a3a      	ldrh	r2, [r7, #16]
 800ad14:	89fb      	ldrh	r3, [r7, #14]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d3eb      	bcc.n	800acf2 <DISPLAY_Display+0x6e>
    for (UWORD j = 0; j < Height; j++)
 800ad1a:	8a7b      	ldrh	r3, [r7, #18]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	827b      	strh	r3, [r7, #18]
 800ad20:	8a7a      	ldrh	r2, [r7, #18]
 800ad22:	89bb      	ldrh	r3, [r7, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d3e1      	bcc.n	800acec <DISPLAY_Display+0x68>
        }
    }
    //DISPLAY_SendCommand(0x92);
    DISPLAY_SendCommand(0x12);
 800ad28:	2012      	movs	r0, #18
 800ad2a:	f7ff ff87 	bl	800ac3c <DISPLAY_SendCommand>
    DISPLAY_ReadBusy();
 800ad2e:	f7ff ffa3 	bl	800ac78 <DISPLAY_ReadBusy>
}
 800ad32:	bf00      	nop
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <DISPLAY_Init>:
    DISPLAY_SendCommand(0X07); // deep sleep
    DISPLAY_SendData(0xA5);
}

void DISPLAY_Init(void)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	af00      	add	r7, sp, #0
    DISPLAY_Reset();
 800ad3e:	f000 f823 	bl	800ad88 <DISPLAY_Reset>

    DISPLAY_SendCommand(0x04);
 800ad42:	2004      	movs	r0, #4
 800ad44:	f7ff ff7a 	bl	800ac3c <DISPLAY_SendCommand>
    DISPLAY_ReadBusy(); // waiting for the electronic paper IC to release the idle signal
 800ad48:	f7ff ff96 	bl	800ac78 <DISPLAY_ReadBusy>

    DISPLAY_SendCommand(0x00); // panel setting
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7ff ff75 	bl	800ac3c <DISPLAY_SendCommand>
    // DISPLAY_SendData(0x0f);
    DISPLAY_SendData(0x8f);
 800ad52:	208f      	movs	r0, #143	; 0x8f
 800ad54:	f7ff ff54 	bl	800ac00 <DISPLAY_SendData>
    DISPLAY_ReadBusy();
 800ad58:	f7ff ff8e 	bl	800ac78 <DISPLAY_ReadBusy>

    DISPLAY_SendCommand(0x61); // resolution setting
 800ad5c:	2061      	movs	r0, #97	; 0x61
 800ad5e:	f7ff ff6d 	bl	800ac3c <DISPLAY_SendCommand>
    DISPLAY_SendData(0x80);
 800ad62:	2080      	movs	r0, #128	; 0x80
 800ad64:	f7ff ff4c 	bl	800ac00 <DISPLAY_SendData>
    DISPLAY_SendData(0x01);
 800ad68:	2001      	movs	r0, #1
 800ad6a:	f7ff ff49 	bl	800ac00 <DISPLAY_SendData>
    DISPLAY_SendData(0x28);
 800ad6e:	2028      	movs	r0, #40	; 0x28
 800ad70:	f7ff ff46 	bl	800ac00 <DISPLAY_SendData>
    DISPLAY_ReadBusy();
 800ad74:	f7ff ff80 	bl	800ac78 <DISPLAY_ReadBusy>

    DISPLAY_SendCommand(0X50); // VCOM AND DATA INTERVAL SETTING
 800ad78:	2050      	movs	r0, #80	; 0x50
 800ad7a:	f7ff ff5f 	bl	800ac3c <DISPLAY_SendCommand>
    DISPLAY_SendData(0x77);    // WBmode:VBDF 17|D7 VBDW 97 VBDB 57
 800ad7e:	2077      	movs	r0, #119	; 0x77
 800ad80:	f7ff ff3e 	bl	800ac00 <DISPLAY_SendData>
                               // WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B
}
 800ad84:	bf00      	nop
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <DISPLAY_Reset>:

void DISPLAY_Reset(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	2110      	movs	r1, #16
 800ad90:	480b      	ldr	r0, [pc, #44]	; (800adc0 <DISPLAY_Reset+0x38>)
 800ad92:	f7f8 fa87 	bl	80032a4 <HAL_GPIO_WritePin>
    displayDelay(200);
 800ad96:	20c8      	movs	r0, #200	; 0xc8
 800ad98:	f000 f814 	bl	800adc4 <displayDelay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2110      	movs	r1, #16
 800ada0:	4807      	ldr	r0, [pc, #28]	; (800adc0 <DISPLAY_Reset+0x38>)
 800ada2:	f7f8 fa7f 	bl	80032a4 <HAL_GPIO_WritePin>
    displayDelay(5);
 800ada6:	2005      	movs	r0, #5
 800ada8:	f000 f80c 	bl	800adc4 <displayDelay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800adac:	2201      	movs	r2, #1
 800adae:	2110      	movs	r1, #16
 800adb0:	4803      	ldr	r0, [pc, #12]	; (800adc0 <DISPLAY_Reset+0x38>)
 800adb2:	f7f8 fa77 	bl	80032a4 <HAL_GPIO_WritePin>
    displayDelay(200);
 800adb6:	20c8      	movs	r0, #200	; 0xc8
 800adb8:	f000 f804 	bl	800adc4 <displayDelay>
}
 800adbc:	bf00      	nop
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40020400 	.word	0x40020400

0800adc4 <displayDelay>:
 *
 * @return a value of type TIME, which is an enum type. The possible values that can be returned are
 * BUSY and OK.
 */
TIME displayDelay(uint8_t time)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
    TIME status = BUSY;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
    //     {
    //         TIME status = OK;
    //         exit;
    //     }
    // }
    HAL_Delay(time);
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	4618      	mov	r0, r3
 800add6:	f7f7 fc09 	bl	80025ec <HAL_Delay>
    return status;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
};
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ade8:	2200      	movs	r2, #0
 800adea:	2104      	movs	r1, #4
 800adec:	4803      	ldr	r0, [pc, #12]	; (800adfc <SELECT+0x18>)
 800adee:	f7f8 fa59 	bl	80032a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800adf2:	2001      	movs	r0, #1
 800adf4:	f7f7 fbfa 	bl	80025ec <HAL_Delay>
}
 800adf8:	bf00      	nop
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	40020c00 	.word	0x40020c00

0800ae00 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ae04:	2201      	movs	r2, #1
 800ae06:	2104      	movs	r1, #4
 800ae08:	4803      	ldr	r0, [pc, #12]	; (800ae18 <DESELECT+0x18>)
 800ae0a:	f7f8 fa4b 	bl	80032a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f7f7 fbec 	bl	80025ec <HAL_Delay>
}
 800ae14:	bf00      	nop
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	40020c00 	.word	0x40020c00

0800ae1c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800ae26:	bf00      	nop
 800ae28:	4b08      	ldr	r3, [pc, #32]	; (800ae4c <SPI_TxByte+0x30>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d1f8      	bne.n	800ae28 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ae36:	1df9      	adds	r1, r7, #7
 800ae38:	2364      	movs	r3, #100	; 0x64
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	4803      	ldr	r0, [pc, #12]	; (800ae4c <SPI_TxByte+0x30>)
 800ae3e:	f7f9 fc77 	bl	8004730 <HAL_SPI_Transmit>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200002a8 	.word	0x200002a8

0800ae50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	807b      	strh	r3, [r7, #2]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800ae5c:	bf00      	nop
 800ae5e:	4b08      	ldr	r3, [pc, #32]	; (800ae80 <SPI_TxBuffer+0x30>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d1f8      	bne.n	800ae5e <SPI_TxBuffer+0xe>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ae6c:	887a      	ldrh	r2, [r7, #2]
 800ae6e:	2364      	movs	r3, #100	; 0x64
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4803      	ldr	r0, [pc, #12]	; (800ae80 <SPI_TxBuffer+0x30>)
 800ae74:	f7f9 fc5c 	bl	8004730 <HAL_SPI_Transmit>
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200002a8 	.word	0x200002a8

0800ae84 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800ae8a:	23ff      	movs	r3, #255	; 0xff
 800ae8c:	71fb      	strb	r3, [r7, #7]

	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800ae8e:	bf00      	nop
 800ae90:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <SPI_RxByte+0x34>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d1f8      	bne.n	800ae90 <SPI_RxByte+0xc>
		;
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ae9e:	1dba      	adds	r2, r7, #6
 800aea0:	1df9      	adds	r1, r7, #7
 800aea2:	2364      	movs	r3, #100	; 0x64
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4803      	ldr	r0, [pc, #12]	; (800aeb8 <SPI_RxByte+0x34>)
 800aeaa:	f7f9 fd84 	bl	80049b6 <HAL_SPI_TransmitReceive>

	return data;
 800aeae:	79bb      	ldrb	r3, [r7, #6]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	200002a8 	.word	0x200002a8

0800aebc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800aec4:	f7ff ffde 	bl	800ae84 <SPI_RxByte>
 800aec8:	4603      	mov	r3, r0
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	701a      	strb	r2, [r3, #0]
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800aede:	4b0a      	ldr	r3, [pc, #40]	; (800af08 <SD_ReadyWait+0x30>)
 800aee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aee4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do
	{
		res = SPI_RxByte();
 800aee6:	f7ff ffcd 	bl	800ae84 <SPI_RxByte>
 800aeea:	4603      	mov	r3, r0
 800aeec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	2bff      	cmp	r3, #255	; 0xff
 800aef2:	d004      	beq.n	800aefe <SD_ReadyWait+0x26>
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <SD_ReadyWait+0x30>)
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1f3      	bne.n	800aee6 <SD_ReadyWait+0xe>

	return res;
 800aefe:	79fb      	ldrb	r3, [r7, #7]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	2000081d 	.word	0x2000081d

0800af0c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800af12:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800af16:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800af18:	f7ff ff72 	bl	800ae00 <DESELECT>
	for (int i = 0; i < 10; i++)
 800af1c:	2300      	movs	r3, #0
 800af1e:	60bb      	str	r3, [r7, #8]
 800af20:	e005      	b.n	800af2e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800af22:	20ff      	movs	r0, #255	; 0xff
 800af24:	f7ff ff7a 	bl	800ae1c <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b09      	cmp	r3, #9
 800af32:	ddf6      	ble.n	800af22 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800af34:	f7ff ff56 	bl	800ade4 <SELECT>

	/* make idle state */
	args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 800af38:	2340      	movs	r3, #64	; 0x40
 800af3a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95; /* CRC */
 800af4c:	2395      	movs	r3, #149	; 0x95
 800af4e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800af50:	463b      	mov	r3, r7
 800af52:	2106      	movs	r1, #6
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff ff7b 	bl	800ae50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800af5a:	e002      	b.n	800af62 <SD_PowerOn+0x56>
	{
		cnt--;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3b01      	subs	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800af62:	f7ff ff8f 	bl	800ae84 <SPI_RxByte>
 800af66:	4603      	mov	r3, r0
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d002      	beq.n	800af72 <SD_PowerOn+0x66>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f4      	bne.n	800af5c <SD_PowerOn+0x50>
	}

	DESELECT();
 800af72:	f7ff ff45 	bl	800ae00 <DESELECT>
	SPI_TxByte(0XFF);
 800af76:	20ff      	movs	r0, #255	; 0xff
 800af78:	f7ff ff50 	bl	800ae1c <SPI_TxByte>

	PowerFlag = 1;
 800af7c:	4b03      	ldr	r3, [pc, #12]	; (800af8c <SD_PowerOn+0x80>)
 800af7e:	2201      	movs	r2, #1
 800af80:	701a      	strb	r2, [r3, #0]
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000a95 	.word	0x20000a95

0800af90 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800af94:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <SD_PowerOff+0x14>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
}
 800af9a:	bf00      	nop
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000a95 	.word	0x20000a95

0800afa8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
	return PowerFlag;
 800afac:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <SD_CheckPower+0x10>)
 800afae:	781b      	ldrb	r3, [r3, #0]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr
 800afb8:	20000a95 	.word	0x20000a95

0800afbc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800afc6:	4b14      	ldr	r3, [pc, #80]	; (800b018 <SD_RxDataBlock+0x5c>)
 800afc8:	22c8      	movs	r2, #200	; 0xc8
 800afca:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do
	{
		token = SPI_RxByte();
 800afcc:	f7ff ff5a 	bl	800ae84 <SPI_RxByte>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	2bff      	cmp	r3, #255	; 0xff
 800afd8:	d104      	bne.n	800afe4 <SD_RxDataBlock+0x28>
 800afda:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <SD_RxDataBlock+0x5c>)
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1f3      	bne.n	800afcc <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE)
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2bfe      	cmp	r3, #254	; 0xfe
 800afe8:	d001      	beq.n	800afee <SD_RxDataBlock+0x32>
		return FALSE;
 800afea:	2300      	movs	r3, #0
 800afec:	e00f      	b.n	800b00e <SD_RxDataBlock+0x52>

	/* receive data */
	do
	{
		SPI_RxBytePtr(buff++);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ff61 	bl	800aebc <SPI_RxBytePtr>
	} while (len--);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	603a      	str	r2, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1f4      	bne.n	800afee <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800b004:	f7ff ff3e 	bl	800ae84 <SPI_RxByte>
	SPI_RxByte();
 800b008:	f7ff ff3c 	bl	800ae84 <SPI_RxByte>

	return TRUE;
 800b00c:	2301      	movs	r3, #1
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	2000081c 	.word	0x2000081c

0800b01c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800b02c:	f7ff ff54 	bl	800aed8 <SD_ReadyWait>
 800b030:	4603      	mov	r3, r0
 800b032:	2bff      	cmp	r3, #255	; 0xff
 800b034:	d001      	beq.n	800b03a <SD_TxDataBlock+0x1e>
		return FALSE;
 800b036:	2300      	movs	r3, #0
 800b038:	e02f      	b.n	800b09a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff feed 	bl	800ae1c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800b042:	78fb      	ldrb	r3, [r7, #3]
 800b044:	2bfd      	cmp	r3, #253	; 0xfd
 800b046:	d020      	beq.n	800b08a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t *)buff, 512);
 800b048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff feff 	bl	800ae50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800b052:	f7ff ff17 	bl	800ae84 <SPI_RxByte>
		SPI_RxByte();
 800b056:	f7ff ff15 	bl	800ae84 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800b05a:	e00b      	b.n	800b074 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800b05c:	f7ff ff12 	bl	800ae84 <SPI_RxByte>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05)
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	f003 031f 	and.w	r3, r3, #31
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	d006      	beq.n	800b07c <SD_TxDataBlock+0x60>
				break;
			i++;
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	3301      	adds	r3, #1
 800b072:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	d9f0      	bls.n	800b05c <SD_TxDataBlock+0x40>
 800b07a:	e000      	b.n	800b07e <SD_TxDataBlock+0x62>
				break;
 800b07c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0)
 800b07e:	bf00      	nop
 800b080:	f7ff ff00 	bl	800ae84 <SPI_RxByte>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0fa      	beq.n	800b080 <SD_TxDataBlock+0x64>
			;
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05)
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	f003 031f 	and.w	r3, r3, #31
 800b090:	2b05      	cmp	r3, #5
 800b092:	d101      	bne.n	800b098 <SD_TxDataBlock+0x7c>
		return TRUE;
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <SD_TxDataBlock+0x7e>

	return FALSE;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	6039      	str	r1, [r7, #0]
 800b0ac:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800b0ae:	f7ff ff13 	bl	800aed8 <SD_ReadyWait>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2bff      	cmp	r3, #255	; 0xff
 800b0b6:	d001      	beq.n	800b0bc <SD_SendCmd+0x1a>
		return 0xFF;
 800b0b8:	23ff      	movs	r3, #255	; 0xff
 800b0ba:	e042      	b.n	800b142 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd);				  /* Command */
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff feac 	bl	800ae1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); /* Argument[31..24] */
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	0e1b      	lsrs	r3, r3, #24
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff fea6 	bl	800ae1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); /* Argument[23..16] */
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	0c1b      	lsrs	r3, r3, #16
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fea0 	bl	800ae1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	0a1b      	lsrs	r3, r3, #8
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fe9a 	bl	800ae1c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg);		  /* Argument[7..0] */
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff fe95 	bl	800ae1c <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d102      	bne.n	800b0fe <SD_SendCmd+0x5c>
		crc = 0x95; /* CRC for CMD0(0) */
 800b0f8:	2395      	movs	r3, #149	; 0x95
 800b0fa:	73fb      	strb	r3, [r7, #15]
 800b0fc:	e007      	b.n	800b10e <SD_SendCmd+0x6c>
	else if (cmd == CMD8)
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	2b48      	cmp	r3, #72	; 0x48
 800b102:	d102      	bne.n	800b10a <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 800b104:	2387      	movs	r3, #135	; 0x87
 800b106:	73fb      	strb	r3, [r7, #15]
 800b108:	e001      	b.n	800b10e <SD_SendCmd+0x6c>
	else
		crc = 1;
 800b10a:	2301      	movs	r3, #1
 800b10c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff fe83 	bl	800ae1c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	2b4c      	cmp	r3, #76	; 0x4c
 800b11a:	d101      	bne.n	800b120 <SD_SendCmd+0x7e>
		SPI_RxByte();
 800b11c:	f7ff feb2 	bl	800ae84 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800b120:	230a      	movs	r3, #10
 800b122:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 800b124:	f7ff feae 	bl	800ae84 <SPI_RxByte>
 800b128:	4603      	mov	r3, r0
 800b12a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800b12c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b130:	2b00      	cmp	r3, #0
 800b132:	da05      	bge.n	800b140 <SD_SendCmd+0x9e>
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	3b01      	subs	r3, #1
 800b138:	73bb      	strb	r3, [r7, #14]
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1f1      	bne.n	800b124 <SD_SendCmd+0x82>

	return res;
 800b140:	7b7b      	ldrb	r3, [r7, #13]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800b14c:	b590      	push	{r4, r7, lr}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv)
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e0d6      	b.n	800b30e <SD_disk_initialize+0x1c2>

	/* no disk */
	if (Stat & STA_NODISK)
 800b160:	4b6d      	ldr	r3, [pc, #436]	; (800b318 <SD_disk_initialize+0x1cc>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <SD_disk_initialize+0x2a>
		return Stat;
 800b16e:	4b6a      	ldr	r3, [pc, #424]	; (800b318 <SD_disk_initialize+0x1cc>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	e0cb      	b.n	800b30e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800b176:	f7ff fec9 	bl	800af0c <SD_PowerOn>

	/* slave select */
	SELECT();
 800b17a:	f7ff fe33 	bl	800ade4 <SELECT>

	/* check disk type */
	type = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800b182:	2100      	movs	r1, #0
 800b184:	2040      	movs	r0, #64	; 0x40
 800b186:	f7ff ff8c 	bl	800b0a2 <SD_SendCmd>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	f040 80a6 	bne.w	800b2de <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800b192:	4b62      	ldr	r3, [pc, #392]	; (800b31c <SD_disk_initialize+0x1d0>)
 800b194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b198:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b19a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b19e:	2048      	movs	r0, #72	; 0x48
 800b1a0:	f7ff ff7f 	bl	800b0a2 <SD_SendCmd>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d158      	bne.n	800b25c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
 800b1ae:	e00c      	b.n	800b1ca <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800b1b0:	7bfc      	ldrb	r4, [r7, #15]
 800b1b2:	f7ff fe67 	bl	800ae84 <SPI_RxByte>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f104 0310 	add.w	r3, r4, #16
 800b1be:	443b      	add	r3, r7
 800b1c0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	73fb      	strb	r3, [r7, #15]
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d9ef      	bls.n	800b1b0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b1d0:	7abb      	ldrb	r3, [r7, #10]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	f040 8083 	bne.w	800b2de <SD_disk_initialize+0x192>
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	2baa      	cmp	r3, #170	; 0xaa
 800b1dc:	d17f      	bne.n	800b2de <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800b1de:	2100      	movs	r1, #0
 800b1e0:	2077      	movs	r0, #119	; 0x77
 800b1e2:	f7ff ff5e 	bl	800b0a2 <SD_SendCmd>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d807      	bhi.n	800b1fc <SD_disk_initialize+0xb0>
 800b1ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b1f0:	2069      	movs	r0, #105	; 0x69
 800b1f2:	f7ff ff56 	bl	800b0a2 <SD_SendCmd>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <SD_disk_initialize+0xbc>
						break;
				} while (Timer1);
 800b1fc:	4b47      	ldr	r3, [pc, #284]	; (800b31c <SD_disk_initialize+0x1d0>)
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1eb      	bne.n	800b1de <SD_disk_initialize+0x92>
 800b206:	e000      	b.n	800b20a <SD_disk_initialize+0xbe>
						break;
 800b208:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b20a:	4b44      	ldr	r3, [pc, #272]	; (800b31c <SD_disk_initialize+0x1d0>)
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d064      	beq.n	800b2de <SD_disk_initialize+0x192>
 800b214:	2100      	movs	r1, #0
 800b216:	207a      	movs	r0, #122	; 0x7a
 800b218:	f7ff ff43 	bl	800b0a2 <SD_SendCmd>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d15d      	bne.n	800b2de <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800b222:	2300      	movs	r3, #0
 800b224:	73fb      	strb	r3, [r7, #15]
 800b226:	e00c      	b.n	800b242 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800b228:	7bfc      	ldrb	r4, [r7, #15]
 800b22a:	f7ff fe2b 	bl	800ae84 <SPI_RxByte>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	f104 0310 	add.w	r3, r4, #16
 800b236:	443b      	add	r3, r7
 800b238:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	3301      	adds	r3, #1
 800b240:	73fb      	strb	r3, [r7, #15]
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b03      	cmp	r3, #3
 800b246:	d9ef      	bls.n	800b228 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b248:	7a3b      	ldrb	r3, [r7, #8]
 800b24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <SD_disk_initialize+0x10a>
 800b252:	230c      	movs	r3, #12
 800b254:	e000      	b.n	800b258 <SD_disk_initialize+0x10c>
 800b256:	2304      	movs	r3, #4
 800b258:	73bb      	strb	r3, [r7, #14]
 800b25a:	e040      	b.n	800b2de <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b25c:	2100      	movs	r1, #0
 800b25e:	2077      	movs	r0, #119	; 0x77
 800b260:	f7ff ff1f 	bl	800b0a2 <SD_SendCmd>
 800b264:	4603      	mov	r3, r0
 800b266:	2b01      	cmp	r3, #1
 800b268:	d808      	bhi.n	800b27c <SD_disk_initialize+0x130>
 800b26a:	2100      	movs	r1, #0
 800b26c:	2069      	movs	r0, #105	; 0x69
 800b26e:	f7ff ff18 	bl	800b0a2 <SD_SendCmd>
 800b272:	4603      	mov	r3, r0
 800b274:	2b01      	cmp	r3, #1
 800b276:	d801      	bhi.n	800b27c <SD_disk_initialize+0x130>
 800b278:	2302      	movs	r3, #2
 800b27a:	e000      	b.n	800b27e <SD_disk_initialize+0x132>
 800b27c:	2301      	movs	r3, #1
 800b27e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d10e      	bne.n	800b2a4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800b286:	2100      	movs	r1, #0
 800b288:	2077      	movs	r0, #119	; 0x77
 800b28a:	f7ff ff0a 	bl	800b0a2 <SD_SendCmd>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b01      	cmp	r3, #1
 800b292:	d80e      	bhi.n	800b2b2 <SD_disk_initialize+0x166>
 800b294:	2100      	movs	r1, #0
 800b296:	2069      	movs	r0, #105	; 0x69
 800b298:	f7ff ff03 	bl	800b0a2 <SD_SendCmd>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d107      	bne.n	800b2b2 <SD_disk_initialize+0x166>
						break; /* ACMD41 */
 800b2a2:	e00d      	b.n	800b2c0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	2041      	movs	r0, #65	; 0x41
 800b2a8:	f7ff fefb 	bl	800b0a2 <SD_SendCmd>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d005      	beq.n	800b2be <SD_disk_initialize+0x172>
						break; /* CMD1 */
				}

			} while (Timer1);
 800b2b2:	4b1a      	ldr	r3, [pc, #104]	; (800b31c <SD_disk_initialize+0x1d0>)
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e1      	bne.n	800b280 <SD_disk_initialize+0x134>
 800b2bc:	e000      	b.n	800b2c0 <SD_disk_initialize+0x174>
						break; /* CMD1 */
 800b2be:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800b2c0:	4b16      	ldr	r3, [pc, #88]	; (800b31c <SD_disk_initialize+0x1d0>)
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d007      	beq.n	800b2da <SD_disk_initialize+0x18e>
 800b2ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2ce:	2050      	movs	r0, #80	; 0x50
 800b2d0:	f7ff fee7 	bl	800b0a2 <SD_SendCmd>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <SD_disk_initialize+0x192>
				type = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800b2de:	4a10      	ldr	r2, [pc, #64]	; (800b320 <SD_disk_initialize+0x1d4>)
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800b2e4:	f7ff fd8c 	bl	800ae00 <DESELECT>
	SPI_RxByte();
 800b2e8:	f7ff fdcc 	bl	800ae84 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d008      	beq.n	800b304 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800b2f2:	4b09      	ldr	r3, [pc, #36]	; (800b318 <SD_disk_initialize+0x1cc>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <SD_disk_initialize+0x1cc>)
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	e001      	b.n	800b308 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800b304:	f7ff fe44 	bl	800af90 <SD_PowerOff>
	}

	return Stat;
 800b308:	4b03      	ldr	r3, [pc, #12]	; (800b318 <SD_disk_initialize+0x1cc>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	b2db      	uxtb	r3, r3
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	bd90      	pop	{r4, r7, pc}
 800b316:	bf00      	nop
 800b318:	20000034 	.word	0x20000034
 800b31c:	2000081c 	.word	0x2000081c
 800b320:	20000a94 	.word	0x20000a94

0800b324 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <SD_disk_status+0x14>
		return STA_NOINIT;
 800b334:	2301      	movs	r3, #1
 800b336:	e002      	b.n	800b33e <SD_disk_status+0x1a>
	return Stat;
 800b338:	4b03      	ldr	r3, [pc, #12]	; (800b348 <SD_disk_status+0x24>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	b2db      	uxtb	r3, r3
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr
 800b348:	20000034 	.word	0x20000034

0800b34c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <SD_disk_read+0x1c>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <SD_disk_read+0x20>
		return RES_PARERR;
 800b368:	2304      	movs	r3, #4
 800b36a:	e051      	b.n	800b410 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT)
 800b36c:	4b2a      	ldr	r3, [pc, #168]	; (800b418 <SD_disk_read+0xcc>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <SD_disk_read+0x32>
		return RES_NOTRDY;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e048      	b.n	800b410 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800b37e:	4b27      	ldr	r3, [pc, #156]	; (800b41c <SD_disk_read+0xd0>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <SD_disk_read+0x44>
		sector *= 512;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	025b      	lsls	r3, r3, #9
 800b38e:	607b      	str	r3, [r7, #4]

	SELECT();
 800b390:	f7ff fd28 	bl	800ade4 <SELECT>

	if (count == 1)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d111      	bne.n	800b3be <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	2051      	movs	r0, #81	; 0x51
 800b39e:	f7ff fe80 	bl	800b0a2 <SD_SendCmd>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d129      	bne.n	800b3fc <SD_disk_read+0xb0>
 800b3a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3ac:	68b8      	ldr	r0, [r7, #8]
 800b3ae:	f7ff fe05 	bl	800afbc <SD_RxDataBlock>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d021      	beq.n	800b3fc <SD_disk_read+0xb0>
			count = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	e01e      	b.n	800b3fc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	2052      	movs	r0, #82	; 0x52
 800b3c2:	f7ff fe6e 	bl	800b0a2 <SD_SendCmd>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d117      	bne.n	800b3fc <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 800b3cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f7ff fdf3 	bl	800afbc <SD_RxDataBlock>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00a      	beq.n	800b3f2 <SD_disk_read+0xa6>
					break;
				buff += 512;
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b3e2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1ed      	bne.n	800b3cc <SD_disk_read+0x80>
 800b3f0:	e000      	b.n	800b3f4 <SD_disk_read+0xa8>
					break;
 800b3f2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	204c      	movs	r0, #76	; 0x4c
 800b3f8:	f7ff fe53 	bl	800b0a2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800b3fc:	f7ff fd00 	bl	800ae00 <DESELECT>
	SPI_RxByte();
 800b400:	f7ff fd40 	bl	800ae84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bf14      	ite	ne
 800b40a:	2301      	movne	r3, #1
 800b40c:	2300      	moveq	r3, #0
 800b40e:	b2db      	uxtb	r3, r3
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000034 	.word	0x20000034
 800b41c:	20000a94 	.word	0x20000a94

0800b420 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	60b9      	str	r1, [r7, #8]
 800b428:	607a      	str	r2, [r7, #4]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <SD_disk_write+0x1c>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <SD_disk_write+0x20>
		return RES_PARERR;
 800b43c:	2304      	movs	r3, #4
 800b43e:	e06b      	b.n	800b518 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT)
 800b440:	4b37      	ldr	r3, [pc, #220]	; (800b520 <SD_disk_write+0x100>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <SD_disk_write+0x32>
		return RES_NOTRDY;
 800b44e:	2303      	movs	r3, #3
 800b450:	e062      	b.n	800b518 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT)
 800b452:	4b33      	ldr	r3, [pc, #204]	; (800b520 <SD_disk_write+0x100>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <SD_disk_write+0x44>
		return RES_WRPRT;
 800b460:	2302      	movs	r3, #2
 800b462:	e059      	b.n	800b518 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800b464:	4b2f      	ldr	r3, [pc, #188]	; (800b524 <SD_disk_write+0x104>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <SD_disk_write+0x56>
		sector *= 512;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	025b      	lsls	r3, r3, #9
 800b474:	607b      	str	r3, [r7, #4]

	SELECT();
 800b476:	f7ff fcb5 	bl	800ade4 <SELECT>

	if (count == 1)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d110      	bne.n	800b4a2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	2058      	movs	r0, #88	; 0x58
 800b484:	f7ff fe0d 	bl	800b0a2 <SD_SendCmd>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d13a      	bne.n	800b504 <SD_disk_write+0xe4>
 800b48e:	21fe      	movs	r1, #254	; 0xfe
 800b490:	68b8      	ldr	r0, [r7, #8]
 800b492:	f7ff fdc3 	bl	800b01c <SD_TxDataBlock>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d033      	beq.n	800b504 <SD_disk_write+0xe4>
			count = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	603b      	str	r3, [r7, #0]
 800b4a0:	e030      	b.n	800b504 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800b4a2:	4b20      	ldr	r3, [pc, #128]	; (800b524 <SD_disk_write+0x104>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	2077      	movs	r0, #119	; 0x77
 800b4b2:	f7ff fdf6 	bl	800b0a2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	2057      	movs	r0, #87	; 0x57
 800b4ba:	f7ff fdf2 	bl	800b0a2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	2059      	movs	r0, #89	; 0x59
 800b4c2:	f7ff fdee 	bl	800b0a2 <SD_SendCmd>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d11b      	bne.n	800b504 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 800b4cc:	21fc      	movs	r1, #252	; 0xfc
 800b4ce:	68b8      	ldr	r0, [r7, #8]
 800b4d0:	f7ff fda4 	bl	800b01c <SD_TxDataBlock>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <SD_disk_write+0xd0>
					break;
				buff += 512;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b4e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1ee      	bne.n	800b4cc <SD_disk_write+0xac>
 800b4ee:	e000      	b.n	800b4f2 <SD_disk_write+0xd2>
					break;
 800b4f0:	bf00      	nop

			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD))
 800b4f2:	21fd      	movs	r1, #253	; 0xfd
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f7ff fd91 	bl	800b01c <SD_TxDataBlock>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <SD_disk_write+0xe4>
			{
				count = 1;
 800b500:	2301      	movs	r3, #1
 800b502:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800b504:	f7ff fc7c 	bl	800ae00 <DESELECT>
	SPI_RxByte();
 800b508:	f7ff fcbc 	bl	800ae84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bf14      	ite	ne
 800b512:	2301      	movne	r3, #1
 800b514:	2300      	moveq	r3, #0
 800b516:	b2db      	uxtb	r3, r3
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20000034 	.word	0x20000034
 800b524:	20000a94 	.word	0x20000a94

0800b528 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b08b      	sub	sp, #44	; 0x2c
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	603a      	str	r2, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
 800b534:	460b      	mov	r3, r1
 800b536:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv)
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 800b542:	2304      	movs	r3, #4
 800b544:	e115      	b.n	800b772 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800b54c:	79bb      	ldrb	r3, [r7, #6]
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d124      	bne.n	800b59c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d012      	beq.n	800b580 <SD_disk_ioctl+0x58>
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	dc1a      	bgt.n	800b594 <SD_disk_ioctl+0x6c>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <SD_disk_ioctl+0x40>
 800b562:	2b01      	cmp	r3, #1
 800b564:	d006      	beq.n	800b574 <SD_disk_ioctl+0x4c>
 800b566:	e015      	b.n	800b594 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff(); /* Power Off */
 800b568:	f7ff fd12 	bl	800af90 <SD_PowerOff>
			res = RES_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b572:	e0fc      	b.n	800b76e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn(); /* Power On */
 800b574:	f7ff fcca 	bl	800af0c <SD_PowerOn>
			res = RES_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b57e:	e0f6      	b.n	800b76e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	1c5c      	adds	r4, r3, #1
 800b584:	f7ff fd10 	bl	800afa8 <SD_CheckPower>
 800b588:	4603      	mov	r3, r0
 800b58a:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b592:	e0ec      	b.n	800b76e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800b594:	2304      	movs	r3, #4
 800b596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b59a:	e0e8      	b.n	800b76e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT)
 800b59c:	4b77      	ldr	r3, [pc, #476]	; (800b77c <SD_disk_ioctl+0x254>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <SD_disk_ioctl+0x86>
			return RES_NOTRDY;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e0e1      	b.n	800b772 <SD_disk_ioctl+0x24a>

		SELECT();
 800b5ae:	f7ff fc19 	bl	800ade4 <SELECT>

		switch (ctrl)
 800b5b2:	79bb      	ldrb	r3, [r7, #6]
 800b5b4:	2b0d      	cmp	r3, #13
 800b5b6:	f200 80cb 	bhi.w	800b750 <SD_disk_ioctl+0x228>
 800b5ba:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <SD_disk_ioctl+0x98>)
 800b5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c0:	0800b6bb 	.word	0x0800b6bb
 800b5c4:	0800b5f9 	.word	0x0800b5f9
 800b5c8:	0800b6ab 	.word	0x0800b6ab
 800b5cc:	0800b751 	.word	0x0800b751
 800b5d0:	0800b751 	.word	0x0800b751
 800b5d4:	0800b751 	.word	0x0800b751
 800b5d8:	0800b751 	.word	0x0800b751
 800b5dc:	0800b751 	.word	0x0800b751
 800b5e0:	0800b751 	.word	0x0800b751
 800b5e4:	0800b751 	.word	0x0800b751
 800b5e8:	0800b751 	.word	0x0800b751
 800b5ec:	0800b6cd 	.word	0x0800b6cd
 800b5f0:	0800b6f1 	.word	0x0800b6f1
 800b5f4:	0800b715 	.word	0x0800b715
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2049      	movs	r0, #73	; 0x49
 800b5fc:	f7ff fd51 	bl	800b0a2 <SD_SendCmd>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 80a8 	bne.w	800b758 <SD_disk_ioctl+0x230>
 800b608:	f107 030c 	add.w	r3, r7, #12
 800b60c:	2110      	movs	r1, #16
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fcd4 	bl	800afbc <SD_RxDataBlock>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 809e 	beq.w	800b758 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800b61c:	7b3b      	ldrb	r3, [r7, #12]
 800b61e:	099b      	lsrs	r3, r3, #6
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b01      	cmp	r3, #1
 800b624:	d10e      	bne.n	800b644 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 800b626:	7d7b      	ldrb	r3, [r7, #21]
 800b628:	b29a      	uxth	r2, r3
 800b62a:	7d3b      	ldrb	r3, [r7, #20]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	b29b      	uxth	r3, r3
 800b632:	4413      	add	r3, r2
 800b634:	b29b      	uxth	r3, r3
 800b636:	3301      	adds	r3, #1
 800b638:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << 10;
 800b63a:	8bfb      	ldrh	r3, [r7, #30]
 800b63c:	029a      	lsls	r2, r3, #10
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e02e      	b.n	800b6a2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b644:	7c7b      	ldrb	r3, [r7, #17]
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	7dbb      	ldrb	r3, [r7, #22]
 800b64e:	09db      	lsrs	r3, r3, #7
 800b650:	b2db      	uxtb	r3, r3
 800b652:	4413      	add	r3, r2
 800b654:	b2da      	uxtb	r2, r3
 800b656:	7d7b      	ldrb	r3, [r7, #21]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	f003 0306 	and.w	r3, r3, #6
 800b660:	b2db      	uxtb	r3, r3
 800b662:	4413      	add	r3, r2
 800b664:	b2db      	uxtb	r3, r3
 800b666:	3302      	adds	r3, #2
 800b668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b66c:	7d3b      	ldrb	r3, [r7, #20]
 800b66e:	099b      	lsrs	r3, r3, #6
 800b670:	b2db      	uxtb	r3, r3
 800b672:	b29a      	uxth	r2, r3
 800b674:	7cfb      	ldrb	r3, [r7, #19]
 800b676:	b29b      	uxth	r3, r3
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	4413      	add	r3, r2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	7cbb      	ldrb	r3, [r7, #18]
 800b682:	029b      	lsls	r3, r3, #10
 800b684:	b29b      	uxth	r3, r3
 800b686:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	4413      	add	r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	3301      	adds	r3, #1
 800b692:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << (n - 9);
 800b694:	8bfa      	ldrh	r2, [r7, #30]
 800b696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b69a:	3b09      	subs	r3, #9
 800b69c:	409a      	lsls	r2, r3
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800b6a8:	e056      	b.n	800b758 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD *)buff = 512;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6b0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b6b8:	e055      	b.n	800b766 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF)
 800b6ba:	f7ff fc0d 	bl	800aed8 <SD_ReadyWait>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2bff      	cmp	r3, #255	; 0xff
 800b6c2:	d14b      	bne.n	800b75c <SD_disk_ioctl+0x234>
				res = RES_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b6ca:	e047      	b.n	800b75c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	2049      	movs	r0, #73	; 0x49
 800b6d0:	f7ff fce7 	bl	800b0a2 <SD_SendCmd>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d142      	bne.n	800b760 <SD_disk_ioctl+0x238>
 800b6da:	2110      	movs	r1, #16
 800b6dc:	6a38      	ldr	r0, [r7, #32]
 800b6de:	f7ff fc6d 	bl	800afbc <SD_RxDataBlock>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d03b      	beq.n	800b760 <SD_disk_ioctl+0x238>
				res = RES_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b6ee:	e037      	b.n	800b760 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	204a      	movs	r0, #74	; 0x4a
 800b6f4:	f7ff fcd5 	bl	800b0a2 <SD_SendCmd>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d132      	bne.n	800b764 <SD_disk_ioctl+0x23c>
 800b6fe:	2110      	movs	r1, #16
 800b700:	6a38      	ldr	r0, [r7, #32]
 800b702:	f7ff fc5b 	bl	800afbc <SD_RxDataBlock>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d02b      	beq.n	800b764 <SD_disk_ioctl+0x23c>
				res = RES_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b712:	e027      	b.n	800b764 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800b714:	2100      	movs	r1, #0
 800b716:	207a      	movs	r0, #122	; 0x7a
 800b718:	f7ff fcc3 	bl	800b0a2 <SD_SendCmd>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d116      	bne.n	800b750 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800b722:	2300      	movs	r3, #0
 800b724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b728:	e00b      	b.n	800b742 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800b72a:	6a3c      	ldr	r4, [r7, #32]
 800b72c:	1c63      	adds	r3, r4, #1
 800b72e:	623b      	str	r3, [r7, #32]
 800b730:	f7ff fba8 	bl	800ae84 <SPI_RxByte>
 800b734:	4603      	mov	r3, r0
 800b736:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800b738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b73c:	3301      	adds	r3, #1
 800b73e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b746:	2b03      	cmp	r3, #3
 800b748:	d9ef      	bls.n	800b72a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800b750:	2304      	movs	r3, #4
 800b752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b756:	e006      	b.n	800b766 <SD_disk_ioctl+0x23e>
			break;
 800b758:	bf00      	nop
 800b75a:	e004      	b.n	800b766 <SD_disk_ioctl+0x23e>
			break;
 800b75c:	bf00      	nop
 800b75e:	e002      	b.n	800b766 <SD_disk_ioctl+0x23e>
			break;
 800b760:	bf00      	nop
 800b762:	e000      	b.n	800b766 <SD_disk_ioctl+0x23e>
			break;
 800b764:	bf00      	nop
		}

		DESELECT();
 800b766:	f7ff fb4b 	bl	800ae00 <DESELECT>
		SPI_RxByte();
 800b76a:	f7ff fb8b 	bl	800ae84 <SPI_RxByte>
	}

	return res;
 800b76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b772:	4618      	mov	r0, r3
 800b774:	372c      	adds	r7, #44	; 0x2c
 800b776:	46bd      	mov	sp, r7
 800b778:	bd90      	pop	{r4, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20000034 	.word	0x20000034

0800b780 <clear_buffer>:
        i++;
    return i;
}

void clear_buffer(void)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE; i++)
 800b786:	2300      	movs	r3, #0
 800b788:	607b      	str	r3, [r7, #4]
 800b78a:	e007      	b.n	800b79c <clear_buffer+0x1c>
        buffer[i] = '\0';
 800b78c:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <clear_buffer+0x30>)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4413      	add	r3, r2
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3301      	adds	r3, #1
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b7f      	cmp	r3, #127	; 0x7f
 800b7a0:	ddf4      	ble.n	800b78c <clear_buffer+0xc>
}
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc80      	pop	{r7}
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	20001314 	.word	0x20001314

0800b7b4 <sd_mount>:

SD_CARD sd_mount()
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
    SD_CARD status = SD_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	71fb      	strb	r3, [r7, #7]
    fresult = f_mount(&fs, "", 1);
 800b7be:	2201      	movs	r2, #1
 800b7c0:	490a      	ldr	r1, [pc, #40]	; (800b7ec <sd_mount+0x38>)
 800b7c2:	480b      	ldr	r0, [pc, #44]	; (800b7f0 <sd_mount+0x3c>)
 800b7c4:	f7fd fc1c 	bl	8009000 <f_mount>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <sd_mount+0x40>)
 800b7ce:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 800b7d0:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <sd_mount+0x40>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <sd_mount+0x2a>
        status = SD_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	71fb      	strb	r3, [r7, #7]
 800b7dc:	e001      	b.n	800b7e2 <sd_mount+0x2e>
    else
        status = SD_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	71fb      	strb	r3, [r7, #7]
    return status;
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	0801166c 	.word	0x0801166c
 800b7f0:	20000a98 	.word	0x20000a98
 800b7f4:	20001300 	.word	0x20001300

0800b7f8 <sd_check_space>:

char sd_check_space()
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
    clear_buffer();
 800b7fc:	f7ff ffc0 	bl	800b780 <clear_buffer>
    f_getfree("", &fre_clust, &pfs);
 800b800:	4a25      	ldr	r2, [pc, #148]	; (800b898 <sd_check_space+0xa0>)
 800b802:	4926      	ldr	r1, [pc, #152]	; (800b89c <sd_check_space+0xa4>)
 800b804:	4826      	ldr	r0, [pc, #152]	; (800b8a0 <sd_check_space+0xa8>)
 800b806:	f7fe f849 	bl	800989c <f_getfree>
    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800b80a:	4b23      	ldr	r3, [pc, #140]	; (800b898 <sd_check_space+0xa0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	3b02      	subs	r3, #2
 800b812:	4a21      	ldr	r2, [pc, #132]	; (800b898 <sd_check_space+0xa0>)
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	8952      	ldrh	r2, [r2, #10]
 800b818:	fb02 f303 	mul.w	r3, r2, r3
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f4 fdf9 	bl	8000414 <__aeabi_ui2d>
 800b822:	f04f 0200 	mov.w	r2, #0
 800b826:	4b1f      	ldr	r3, [pc, #124]	; (800b8a4 <sd_check_space+0xac>)
 800b828:	f7f4 fe6e 	bl	8000508 <__aeabi_dmul>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4610      	mov	r0, r2
 800b832:	4619      	mov	r1, r3
 800b834:	f7f5 f940 	bl	8000ab8 <__aeabi_d2uiz>
 800b838:	4603      	mov	r3, r0
 800b83a:	4a1b      	ldr	r2, [pc, #108]	; (800b8a8 <sd_check_space+0xb0>)
 800b83c:	6013      	str	r3, [r2, #0]
    sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 800b83e:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <sd_check_space+0xb0>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	4919      	ldr	r1, [pc, #100]	; (800b8ac <sd_check_space+0xb4>)
 800b846:	481a      	ldr	r0, [pc, #104]	; (800b8b0 <sd_check_space+0xb8>)
 800b848:	f002 f908 	bl	800da5c <siprintf>
    //send_uart(buffer);
    clear_buffer();
 800b84c:	f7ff ff98 	bl	800b780 <clear_buffer>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <sd_check_space+0xa0>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	895b      	ldrh	r3, [r3, #10]
 800b856:	461a      	mov	r2, r3
 800b858:	4b10      	ldr	r3, [pc, #64]	; (800b89c <sd_check_space+0xa4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	4618      	mov	r0, r3
 800b862:	f7f4 fdd7 	bl	8000414 <__aeabi_ui2d>
 800b866:	f04f 0200 	mov.w	r2, #0
 800b86a:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <sd_check_space+0xac>)
 800b86c:	f7f4 fe4c 	bl	8000508 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4610      	mov	r0, r2
 800b876:	4619      	mov	r1, r3
 800b878:	f7f5 f91e 	bl	8000ab8 <__aeabi_d2uiz>
 800b87c:	4603      	mov	r3, r0
 800b87e:	4a0d      	ldr	r2, [pc, #52]	; (800b8b4 <sd_check_space+0xbc>)
 800b880:	6013      	str	r3, [r2, #0]
    sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 800b882:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <sd_check_space+0xbc>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	490b      	ldr	r1, [pc, #44]	; (800b8b8 <sd_check_space+0xc0>)
 800b88a:	4809      	ldr	r0, [pc, #36]	; (800b8b0 <sd_check_space+0xb8>)
 800b88c:	f002 f8e6 	bl	800da5c <siprintf>
    //send_uart(buffer);
    return buffer;
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <sd_check_space+0xb8>)
 800b892:	b2db      	uxtb	r3, r3
}
 800b894:	4618      	mov	r0, r3
 800b896:	bd80      	pop	{r7, pc}
 800b898:	20001304 	.word	0x20001304
 800b89c:	20001308 	.word	0x20001308
 800b8a0:	0801166c 	.word	0x0801166c
 800b8a4:	3fe00000 	.word	0x3fe00000
 800b8a8:	2000130c 	.word	0x2000130c
 800b8ac:	08011670 	.word	0x08011670
 800b8b0:	20001314 	.word	0x20001314
 800b8b4:	20001310 	.word	0x20001310
 800b8b8:	0801168c 	.word	0x0801168c

0800b8bc <SD_creat_file>:

SD_CARD SD_creat_file(char *fileName)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
    SD_CARD status = SD_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	73fb      	strb	r3, [r7, #15]
    fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 800b8c8:	2212      	movs	r2, #18
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	480c      	ldr	r0, [pc, #48]	; (800b900 <SD_creat_file+0x44>)
 800b8ce:	f7fd fbdd 	bl	800908c <f_open>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <SD_creat_file+0x48>)
 800b8d8:	701a      	strb	r2, [r3, #0]

    fresult = f_close(&fil);
 800b8da:	4809      	ldr	r0, [pc, #36]	; (800b900 <SD_creat_file+0x44>)
 800b8dc:	f7fd ffb4 	bl	8009848 <f_close>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4b07      	ldr	r3, [pc, #28]	; (800b904 <SD_creat_file+0x48>)
 800b8e6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800b8e8:	4b06      	ldr	r3, [pc, #24]	; (800b904 <SD_creat_file+0x48>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <SD_creat_file+0x38>
        status = SD_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
    return status;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
};
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000ed0 	.word	0x20000ed0
 800b904:	20001300 	.word	0x20001300

0800b908 <SD_sendData>:
    }

    return status;
};

SD_CARD SD_sendData(char *fileName, char *data){
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
    clear_buffer();
 800b912:	f7ff ff35 	bl	800b780 <clear_buffer>
    SD_CARD status = SD_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	73fb      	strb	r3, [r7, #15]
    fresult = f_open(&fil, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 800b91a:	220a      	movs	r2, #10
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	4809      	ldr	r0, [pc, #36]	; (800b944 <SD_sendData+0x3c>)
 800b920:	f7fd fbb4 	bl	800908c <f_open>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	4b07      	ldr	r3, [pc, #28]	; (800b948 <SD_sendData+0x40>)
 800b92a:	701a      	strb	r2, [r3, #0]
    f_printf(&fil, data);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	4805      	ldr	r0, [pc, #20]	; (800b944 <SD_sendData+0x3c>)
 800b930:	f7fe f9ec 	bl	8009d0c <f_printf>
    f_close(&fil);
 800b934:	4803      	ldr	r0, [pc, #12]	; (800b944 <SD_sendData+0x3c>)
 800b936:	f7fd ff87 	bl	8009848 <f_close>
    return status;
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
};
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20000ed0 	.word	0x20000ed0
 800b948:	20001300 	.word	0x20001300

0800b94c <SIM7600_init>:
 *
 * @param sim a pointer to a SIM7600 struct, which likely contains information about the SIM7600 module
 * being used.
 */
void SIM7600_init(SIM7600 *sim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
    sim->UART = &huart1;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a06      	ldr	r2, [pc, #24]	; (800b970 <SIM7600_init+0x24>)
 800b958:	605a      	str	r2, [r3, #4]
    sim->HDMA = &hdma_usart1_rx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a05      	ldr	r2, [pc, #20]	; (800b974 <SIM7600_init+0x28>)
 800b95e:	609a      	str	r2, [r3, #8]
    sim->rxFlag = SIMFALSE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	701a      	strb	r2, [r3, #0]
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bc80      	pop	{r7}
 800b96e:	4770      	bx	lr
 800b970:	20000340 	.word	0x20000340
 800b974:	20000388 	.word	0x20000388

0800b978 <sendATcommand>:
 *
 * @return a value of type SIM_StatusTypeDef.
 */
SIM_StatusTypeDef sendATcommand(SIM7600 *sim, const char *ATCommand,
                                const char *Response, const char *unexpect, uint32_t Timeout)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
 800b984:	603b      	str	r3, [r7, #0]
    SIM_StatusTypeDef status = SIM_BUSY;
 800b986:	2303      	movs	r3, #3
 800b988:	75fb      	strb	r3, [r7, #23]
    HAL_UARTEx_ReceiveToIdle_DMA(sim->UART, sim->rxBuffer, SIM_BUFFER_SIZE);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6858      	ldr	r0, [r3, #4]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	330c      	adds	r3, #12
 800b992:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b996:	4619      	mov	r1, r3
 800b998:	f7fa f93d 	bl	8005c16 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(sim->HDMA, DMA_IT_HT);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f022 0204 	bic.w	r2, r2, #4
 800b9ae:	601a      	str	r2, [r3, #0]
    //-----------------------------------------------------------------------
    memset((char *)sim->rxBuffer, 0, SIM_BUFFER_SIZE);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f001 f872 	bl	800caa4 <memset>
    memset((char *)sim->txBuffer, 0, SIM_TX_BUFFER_SIZE);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b9c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f869 	bl	800caa4 <memset>
    sprintf((char *)sim->txBuffer, "%s\r\n", ATCommand);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	4926      	ldr	r1, [pc, #152]	; (800ba74 <sendATcommand+0xfc>)
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f002 f83d 	bl	800da5c <siprintf>
    uint16_t len = strlen((char *)sim->txBuffer);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f4 fbc9 	bl	8000180 <strlen>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	82bb      	strh	r3, [r7, #20]
    HAL_UART_Transmit(sim->UART, (uint8_t *)sim->txBuffer, len, HAL_MAX_DELAY);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6858      	ldr	r0, [r3, #4]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f503 7100 	add.w	r1, r3, #512	; 0x200
 800b9fc:	8aba      	ldrh	r2, [r7, #20]
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ba02:	f7fa f885 	bl	8005b10 <HAL_UART_Transmit>
    //-----------------------------------------------------------------------
    uint32_t tickStart = HAL_GetTick();
 800ba06:	f7f6 fde7 	bl	80025d8 <HAL_GetTick>
 800ba0a:	6138      	str	r0, [r7, #16]
    while (status == SIM_BUSY)
 800ba0c:	e026      	b.n	800ba5c <sendATcommand+0xe4>
    {
        if ((HAL_GetTick() - tickStart >= Timeout))
 800ba0e:	f7f6 fde3 	bl	80025d8 <HAL_GetTick>
 800ba12:	4602      	mov	r2, r0
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	6a3a      	ldr	r2, [r7, #32]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d802      	bhi.n	800ba24 <sendATcommand+0xac>
        {
            status = SIM_TIMEOUT;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	75fb      	strb	r3, [r7, #23]
            break;
 800ba22:	e01e      	b.n	800ba62 <sendATcommand+0xea>
        }
        if (sim->rxFlag == SIMTRUE)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d117      	bne.n	800ba5c <sendATcommand+0xe4>
        {
            if (strstr((char *)sim->rxBuffer, Response) != NULL)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	330c      	adds	r3, #12
 800ba30:	6879      	ldr	r1, [r7, #4]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 f832 	bl	800da9c <strstr>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <sendATcommand+0xcc>
            {
                status = SIM_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	75fb      	strb	r3, [r7, #23]
                break;
 800ba42:	e00e      	b.n	800ba62 <sendATcommand+0xea>
            }
            else if (strstr((char *)sim->rxBuffer, unexpect) != NULL)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	330c      	adds	r3, #12
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f002 f826 	bl	800da9c <strstr>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <sendATcommand+0xe4>
            {
                status = SIM_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]
                break;
 800ba5a:	e002      	b.n	800ba62 <sendATcommand+0xea>
    while (status == SIM_BUSY)
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d0d5      	beq.n	800ba0e <sendATcommand+0x96>
            }
        }
    }
    sim->rxFlag = SIMFALSE;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	701a      	strb	r2, [r3, #0]
    return status;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	080116a8 	.word	0x080116a8

0800ba78 <SIM7600_Start>:
 * type that represents the status of the SIM7600 module. The actual value being returned depends on
 * the result of the `sendATcommand` function, which is called with the parameters `sim`, `"AT"`,
 * `"OK"`, `"ERROR"`, and `1200`.
 */
SIM_StatusTypeDef SIM7600_Start(SIM7600 *sim)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af02      	add	r7, sp, #8
 800ba7e:	6078      	str	r0, [r7, #4]
    SIM_StatusTypeDef status = SIM_BUSY;
 800ba80:	2303      	movs	r3, #3
 800ba82:	73fb      	strb	r3, [r7, #15]
    if (sendATcommand(sim, "AT", "OK", "ERROR", 1200) == SIM_OK)
 800ba84:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	4b20      	ldr	r3, [pc, #128]	; (800bb0c <SIM7600_Start+0x94>)
 800ba8c:	4a20      	ldr	r2, [pc, #128]	; (800bb10 <SIM7600_Start+0x98>)
 800ba8e:	4921      	ldr	r1, [pc, #132]	; (800bb14 <SIM7600_Start+0x9c>)
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff71 	bl	800b978 <sendATcommand>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d131      	bne.n	800bb00 <SIM7600_Start+0x88>
        if (sendATcommand(sim, "AT+CPIN?", "OK", "ERROR", 1200) == SIM_OK)
 800ba9c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	4b1a      	ldr	r3, [pc, #104]	; (800bb0c <SIM7600_Start+0x94>)
 800baa4:	4a1a      	ldr	r2, [pc, #104]	; (800bb10 <SIM7600_Start+0x98>)
 800baa6:	491c      	ldr	r1, [pc, #112]	; (800bb18 <SIM7600_Start+0xa0>)
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff ff65 	bl	800b978 <sendATcommand>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d125      	bne.n	800bb00 <SIM7600_Start+0x88>
            if (sendATcommand(sim, "AT+CSQ", "OK", "ERROR", 1200) == SIM_OK)
 800bab4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	4b14      	ldr	r3, [pc, #80]	; (800bb0c <SIM7600_Start+0x94>)
 800babc:	4a14      	ldr	r2, [pc, #80]	; (800bb10 <SIM7600_Start+0x98>)
 800babe:	4917      	ldr	r1, [pc, #92]	; (800bb1c <SIM7600_Start+0xa4>)
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff ff59 	bl	800b978 <sendATcommand>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d119      	bne.n	800bb00 <SIM7600_Start+0x88>
                if (sendATcommand(sim, "AT+CGMR", "OK", "ERROR", 1200) == SIM_OK)
 800bacc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	4b0e      	ldr	r3, [pc, #56]	; (800bb0c <SIM7600_Start+0x94>)
 800bad4:	4a0e      	ldr	r2, [pc, #56]	; (800bb10 <SIM7600_Start+0x98>)
 800bad6:	4912      	ldr	r1, [pc, #72]	; (800bb20 <SIM7600_Start+0xa8>)
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff ff4d 	bl	800b978 <sendATcommand>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10d      	bne.n	800bb00 <SIM7600_Start+0x88>
                    if (sendATcommand(sim, "AT+CTZU=1", "OK", "ERROR", 1200) == SIM_OK)
 800bae4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <SIM7600_Start+0x94>)
 800baec:	4a08      	ldr	r2, [pc, #32]	; (800bb10 <SIM7600_Start+0x98>)
 800baee:	490d      	ldr	r1, [pc, #52]	; (800bb24 <SIM7600_Start+0xac>)
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff41 	bl	800b978 <sendATcommand>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <SIM7600_Start+0x88>
                        status = SIM_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
    return status;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
};
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	080116b0 	.word	0x080116b0
 800bb10:	080116b8 	.word	0x080116b8
 800bb14:	080116bc 	.word	0x080116bc
 800bb18:	080116c0 	.word	0x080116c0
 800bb1c:	080116cc 	.word	0x080116cc
 800bb20:	080116d4 	.word	0x080116d4
 800bb24:	080116dc 	.word	0x080116dc

0800bb28 <SIM7600_httpStart>:
 * @return The function `SIM7600_httpStart` is returning a `SIM_StatusTypeDef` which is the result of
 * calling the `sendATcommand` function with the parameters `sim`, `"AT+HTTPINIT"`, `"OK"`, `"ERROR"`,
 * and `1200`.
 */
SIM_StatusTypeDef SIM7600_httpStart(SIM7600 *sim)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	6078      	str	r0, [r7, #4]
    SIM7600_httpStop(sim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f815 	bl	800bb60 <SIM7600_httpStop>
    return sendATcommand(sim, "AT+HTTPINIT", "OK", "ERROR", 1200);
 800bb36:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <SIM7600_httpStart+0x2c>)
 800bb3e:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <SIM7600_httpStart+0x30>)
 800bb40:	4906      	ldr	r1, [pc, #24]	; (800bb5c <SIM7600_httpStart+0x34>)
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff ff18 	bl	800b978 <sendATcommand>
 800bb48:	4603      	mov	r3, r0
};
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	080116b0 	.word	0x080116b0
 800bb58:	080116b8 	.word	0x080116b8
 800bb5c:	080116e8 	.word	0x080116e8

0800bb60 <SIM7600_httpStop>:
 * data type that represents the status of the SIM7600 module. The return value depends on the success
 * or failure of the `sendATcommand` function which sends an AT command to the module and waits for a
 * response. If the response contains "OK", the function returns `SIM_SUCCESS`
 */
SIM_StatusTypeDef SIM7600_httpStop(SIM7600 *sim)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	6078      	str	r0, [r7, #4]
    return sendATcommand(sim, "AT+HTTPTERM", "OK", "ERROR", 500);
 800bb68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <SIM7600_httpStop+0x24>)
 800bb70:	4a05      	ldr	r2, [pc, #20]	; (800bb88 <SIM7600_httpStop+0x28>)
 800bb72:	4906      	ldr	r1, [pc, #24]	; (800bb8c <SIM7600_httpStop+0x2c>)
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff feff 	bl	800b978 <sendATcommand>
 800bb7a:	4603      	mov	r3, r0
};
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	080116b0 	.word	0x080116b0
 800bb88:	080116b8 	.word	0x080116b8
 800bb8c:	080116f4 	.word	0x080116f4

0800bb90 <SIM7600_setUrl>:
 *
 * @return a SIM_StatusTypeDef, which is likely an enumerated type indicating the success or failure of
 * the operation.
 */
SIM_StatusTypeDef SIM7600_setUrl(SIM7600 *sim, const char *url)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b09e      	sub	sp, #120	; 0x78
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
    if (SIM7600_httpStart(sim) == SIM_OK)
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff ffc4 	bl	800bb28 <SIM7600_httpStart>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d11b      	bne.n	800bbde <SIM7600_setUrl+0x4e>
    {
        uint8_t cmd[100] = {0};
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	f107 0310 	add.w	r3, r7, #16
 800bbae:	2260      	movs	r2, #96	; 0x60
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 ff76 	bl	800caa4 <memset>
        sprintf((char *)cmd, "AT+HTTPPARA=\"URL\",\"%s\"", url);
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	490a      	ldr	r1, [pc, #40]	; (800bbe8 <SIM7600_setUrl+0x58>)
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f001 ff4b 	bl	800da5c <siprintf>
        return sendATcommand(sim, (char *)cmd, "OK", "ERROR", 12000);
 800bbc6:	f107 010c 	add.w	r1, r7, #12
 800bbca:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <SIM7600_setUrl+0x5c>)
 800bbd2:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <SIM7600_setUrl+0x60>)
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fecf 	bl	800b978 <sendATcommand>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	e7ff      	b.n	800bbde <SIM7600_setUrl+0x4e>
    }
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3770      	adds	r7, #112	; 0x70
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	08011700 	.word	0x08011700
 800bbec:	080116b0 	.word	0x080116b0
 800bbf0:	080116b8 	.word	0x080116b8

0800bbf4 <SIM7600_httpPost>:
 *
 * @return a SIM_StatusTypeDef, which is likely an enumerated type indicating the status of the HTTP
 * POST request.
 */
SIM_StatusTypeDef SIM7600_httpPost(SIM7600 *sim, const char *data)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08c      	sub	sp, #48	; 0x30
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
    // sendATcommand(sim, "AT+HTTPPARA=\"CONTENT\",\"application/json\"", "OK", "ERROR", 12000);
    uint8_t cmd[30] = {0};
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60bb      	str	r3, [r7, #8]
 800bc02:	f107 030c 	add.w	r3, r7, #12
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	605a      	str	r2, [r3, #4]
 800bc0c:	609a      	str	r2, [r3, #8]
 800bc0e:	60da      	str	r2, [r3, #12]
 800bc10:	611a      	str	r2, [r3, #16]
 800bc12:	615a      	str	r2, [r3, #20]
 800bc14:	831a      	strh	r2, [r3, #24]
    uint8_t len = strlen(data);
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f7f4 fab2 	bl	8000180 <strlen>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    sprintf((char *)cmd, "AT+HTTPDATA=%d,%d", len, 12000);
 800bc22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc26:	f107 0008 	add.w	r0, r7, #8
 800bc2a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc2e:	491f      	ldr	r1, [pc, #124]	; (800bcac <SIM7600_httpPost+0xb8>)
 800bc30:	f001 ff14 	bl	800da5c <siprintf>
    if (sendATcommand(sim, "AT+HTTPACTION=1", "+HTTPACTION: 1,400", "ERROR", 12000) == SIM_OK)
 800bc34:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <SIM7600_httpPost+0xbc>)
 800bc3c:	4a1d      	ldr	r2, [pc, #116]	; (800bcb4 <SIM7600_httpPost+0xc0>)
 800bc3e:	491e      	ldr	r1, [pc, #120]	; (800bcb8 <SIM7600_httpPost+0xc4>)
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff fe99 	bl	800b978 <sendATcommand>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d121      	bne.n	800bc90 <SIM7600_httpPost+0x9c>
    {
        if (sendATcommand(sim, (char *)cmd, "DOWNLOAD", "ERROR", 12000) != SIM_OK)
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <SIM7600_httpPost+0xbc>)
 800bc58:	4a18      	ldr	r2, [pc, #96]	; (800bcbc <SIM7600_httpPost+0xc8>)
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fe8c 	bl	800b978 <sendATcommand>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <SIM7600_httpPost+0x8a>
        {
            return sendATcommand(sim, (char *)cmd, "DOWNLOAD", "ERROR", 12000);
 800bc66:	f107 0108 	add.w	r1, r7, #8
 800bc6a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <SIM7600_httpPost+0xbc>)
 800bc72:	4a12      	ldr	r2, [pc, #72]	; (800bcbc <SIM7600_httpPost+0xc8>)
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff fe7f 	bl	800b978 <sendATcommand>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	e012      	b.n	800bca4 <SIM7600_httpPost+0xb0>
        }
        else
        {
            sendATcommand(sim, data, "OK", "ERROR", 12000);
 800bc7e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4b0a      	ldr	r3, [pc, #40]	; (800bcb0 <SIM7600_httpPost+0xbc>)
 800bc86:	4a0e      	ldr	r2, [pc, #56]	; (800bcc0 <SIM7600_httpPost+0xcc>)
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff fe74 	bl	800b978 <sendATcommand>
        }
    }
    return sendATcommand(sim, "AT+HTTPACTION=1", "+HTTPACTION: 1,200", "ERROR", 12000);
 800bc90:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	4b06      	ldr	r3, [pc, #24]	; (800bcb0 <SIM7600_httpPost+0xbc>)
 800bc98:	4a0a      	ldr	r2, [pc, #40]	; (800bcc4 <SIM7600_httpPost+0xd0>)
 800bc9a:	4907      	ldr	r1, [pc, #28]	; (800bcb8 <SIM7600_httpPost+0xc4>)
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7ff fe6b 	bl	800b978 <sendATcommand>
 800bca2:	4603      	mov	r3, r0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3728      	adds	r7, #40	; 0x28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	08011738 	.word	0x08011738
 800bcb0:	080116b0 	.word	0x080116b0
 800bcb4:	0801174c 	.word	0x0801174c
 800bcb8:	08011760 	.word	0x08011760
 800bcbc:	08011770 	.word	0x08011770
 800bcc0:	080116b8 	.word	0x080116b8
 800bcc4:	0801177c 	.word	0x0801177c

0800bcc8 <SIM7600_getTime>:
 * @param sim A pointer to the SIM7600 object, which contains information about the SIM7600 module.
 *
 * @return a SIM_StatusTypeDef, which is an enumerated type. It can either return SIM_OK or SIM_ERROR.
 */
SIM_StatusTypeDef SIM7600_getTime(SIM7600 *sim)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	6078      	str	r0, [r7, #4]
    if (sendATcommand(sim, "AT+CCLK=?", "OK", "ERROR", 12000) == SIM_OK)
 800bcd0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	4b0e      	ldr	r3, [pc, #56]	; (800bd10 <SIM7600_getTime+0x48>)
 800bcd8:	4a0e      	ldr	r2, [pc, #56]	; (800bd14 <SIM7600_getTime+0x4c>)
 800bcda:	490f      	ldr	r1, [pc, #60]	; (800bd18 <SIM7600_getTime+0x50>)
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fe4b 	bl	800b978 <sendATcommand>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10d      	bne.n	800bd04 <SIM7600_getTime+0x3c>
        if (sendATcommand(sim, "AT+CCLK?", "OK", "ERROR", 12000) == SIM_OK)
 800bce8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <SIM7600_getTime+0x48>)
 800bcf0:	4a08      	ldr	r2, [pc, #32]	; (800bd14 <SIM7600_getTime+0x4c>)
 800bcf2:	490a      	ldr	r1, [pc, #40]	; (800bd1c <SIM7600_getTime+0x54>)
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff fe3f 	bl	800b978 <sendATcommand>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <SIM7600_getTime+0x3c>
            return SIM_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	e000      	b.n	800bd06 <SIM7600_getTime+0x3e>
    return SIM_ERROR;
 800bd04:	2301      	movs	r3, #1
};
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	080116b0 	.word	0x080116b0
 800bd14:	080116b8 	.word	0x080116b8
 800bd18:	08011790 	.word	0x08011790
 800bd1c:	0801179c 	.word	0x0801179c

0800bd20 <initCounter>:
/**
 * The function initializes the values of a struct called DATA to zero.
 *
 * @param data a pointer to a struct of type DATA.
 */
void initCounter(){
 800bd20:	b480      	push	{r7}
 800bd22:	af00      	add	r7, sp, #0
	data.Distance_high = 10.00;
 800bd24:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <initCounter+0x18>)
 800bd26:	4a05      	ldr	r2, [pc, #20]	; (800bd3c <initCounter+0x1c>)
 800bd28:	61da      	str	r2, [r3, #28]
	data.Distance = 0.2;
 800bd2a:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <initCounter+0x18>)
 800bd2c:	4a04      	ldr	r2, [pc, #16]	; (800bd40 <initCounter+0x20>)
 800bd2e:	621a      	str	r2, [r3, #32]
}
 800bd30:	bf00      	nop
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bc80      	pop	{r7}
 800bd36:	4770      	bx	lr
 800bd38:	200003d0 	.word	0x200003d0
 800bd3c:	41200000 	.word	0x41200000
 800bd40:	3e4ccccd 	.word	0x3e4ccccd

0800bd44 <dataInit>:
void dataInit()
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
	data.count = 0;
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <dataInit+0x24>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
	data.hour = 0;
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <dataInit+0x24>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	605a      	str	r2, [r3, #4]
	data.minute = 0;
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <dataInit+0x24>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	609a      	str	r2, [r3, #8]
	data.second = 0;
 800bd5a:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <dataInit+0x24>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	60da      	str	r2, [r3, #12]
};
 800bd60:	bf00      	nop
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bc80      	pop	{r7}
 800bd66:	4770      	bx	lr
 800bd68:	200003d0 	.word	0x200003d0

0800bd6c <evenMode>:
 * @param status The TIM_STATUS variable that is being passed as a parameter to the function.
 *
 * @return the TIM_STATUS variable named "status".
 */
TIM_STATUS evenMode(DATA *data, TIM_STATUS status)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
	return status;
 800bd78:	78fb      	ldrb	r3, [r7, #3]
};
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bc80      	pop	{r7}
 800bd82:	4770      	bx	lr

0800bd84 <countTime>:
 * @param status The status of a timer, which is of type TIM_STATUS.
 *
 * @return the TIM_STATUS variable named "status".
 */
TIM_STATUS countTime(DATA *data, TIM_STATUS status)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
	return status;
 800bd90:	78fb      	ldrb	r3, [r7, #3]
};
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bc80      	pop	{r7}
 800bd9a:	4770      	bx	lr

0800bd9c <dataGetTime>:
 * @param data A pointer to a structure of type DATA, which contains various data fields and variables.
 *
 * @return a variable of type DATA_STATUS.
 */
DATA_STATUS dataGetTime(DATA *data)
{
 800bd9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
	DATA_STATUS status = DATA_WAITE;
 800bda6:	2302      	movs	r3, #2
 800bda8:	73fb      	strb	r3, [r7, #15]
	while (data->countTime == RUN_TIME)
 800bdaa:	e098      	b.n	800bede <dataGetTime+0x142>
	{
		if (data->count == 0)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d112      	bne.n	800bdda <dataGetTime+0x3e>
		{
			HAL_RTC_Init(&hrtc);
 800bdb4:	4850      	ldr	r0, [pc, #320]	; (800bef8 <dataGetTime+0x15c>)
 800bdb6:	f7f8 f929 	bl	800400c <HAL_RTC_Init>
			HTime.Hours = 0;
 800bdba:	4b50      	ldr	r3, [pc, #320]	; (800befc <dataGetTime+0x160>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	701a      	strb	r2, [r3, #0]
			HTime.Minutes = 0;
 800bdc0:	4b4e      	ldr	r3, [pc, #312]	; (800befc <dataGetTime+0x160>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	705a      	strb	r2, [r3, #1]
			HTime.Seconds = 0;
 800bdc6:	4b4d      	ldr	r3, [pc, #308]	; (800befc <dataGetTime+0x160>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 800bdcc:	2200      	movs	r2, #0
 800bdce:	494b      	ldr	r1, [pc, #300]	; (800befc <dataGetTime+0x160>)
 800bdd0:	4849      	ldr	r0, [pc, #292]	; (800bef8 <dataGetTime+0x15c>)
 800bdd2:	f7f8 f99e 	bl	8004112 <HAL_RTC_SetTime>
			status = DATA_RUN;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
		}

		HAL_RTC_GetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 800bdda:	2200      	movs	r2, #0
 800bddc:	4947      	ldr	r1, [pc, #284]	; (800befc <dataGetTime+0x160>)
 800bdde:	4846      	ldr	r0, [pc, #280]	; (800bef8 <dataGetTime+0x15c>)
 800bde0:	f7f8 fa31 	bl	8004246 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &HDate, RTC_FORMAT_BIN);
 800bde4:	2200      	movs	r2, #0
 800bde6:	4946      	ldr	r1, [pc, #280]	; (800bf00 <dataGetTime+0x164>)
 800bde8:	4843      	ldr	r0, [pc, #268]	; (800bef8 <dataGetTime+0x15c>)
 800bdea:	f7f8 fb0e 	bl	800440a <HAL_RTC_GetDate>
		if (data->evenMode == RUN_COUNT)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d135      	bne.n	800be64 <dataGetTime+0xc8>
		{
			gettick_count = HAL_GetTick();
 800bdf8:	f7f6 fbee 	bl	80025d8 <HAL_GetTick>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2200      	movs	r2, #0
 800be00:	4698      	mov	r8, r3
 800be02:	4691      	mov	r9, r2
 800be04:	4b3f      	ldr	r3, [pc, #252]	; (800bf04 <dataGetTime+0x168>)
 800be06:	e9c3 8900 	strd	r8, r9, [r3]
			if (gettick_count - timCutCount > 50)
 800be0a:	4b3e      	ldr	r3, [pc, #248]	; (800bf04 <dataGetTime+0x168>)
 800be0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be10:	4b3d      	ldr	r3, [pc, #244]	; (800bf08 <dataGetTime+0x16c>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	1a84      	subs	r4, r0, r2
 800be18:	eb61 0503 	sbc.w	r5, r1, r3
 800be1c:	2c33      	cmp	r4, #51	; 0x33
 800be1e:	f175 0300 	sbcs.w	r3, r5, #0
 800be22:	d31f      	bcc.n	800be64 <dataGetTime+0xc8>
			{
				data->count++;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	601a      	str	r2, [r3, #0]
				data->hour = HTime.Hours;
 800be2e:	4b33      	ldr	r3, [pc, #204]	; (800befc <dataGetTime+0x160>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	605a      	str	r2, [r3, #4]
				data->minute = HTime.Minutes;
 800be38:	4b30      	ldr	r3, [pc, #192]	; (800befc <dataGetTime+0x160>)
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	461a      	mov	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	609a      	str	r2, [r3, #8]
				data->second = HTime.Seconds;
 800be42:	4b2e      	ldr	r3, [pc, #184]	; (800befc <dataGetTime+0x160>)
 800be44:	789b      	ldrb	r3, [r3, #2]
 800be46:	461a      	mov	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	60da      	str	r2, [r3, #12]
				timCutCount = HAL_GetTick();
 800be4c:	f7f6 fbc4 	bl	80025d8 <HAL_GetTick>
 800be50:	4603      	mov	r3, r0
 800be52:	2200      	movs	r2, #0
 800be54:	469a      	mov	sl, r3
 800be56:	4693      	mov	fp, r2
 800be58:	4b2b      	ldr	r3, [pc, #172]	; (800bf08 <dataGetTime+0x16c>)
 800be5a:	e9c3 ab00 	strd	sl, fp, [r3]
				count_moniter(data);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f9ea 	bl	800c238 <count_moniter>
			}
		}
		data->evenMode = STOP_COUNT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		data->time_count_second = data->hour * 3600 + data->minute * 60 + data->second;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	b2db      	uxtb	r3, r3
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	b2da      	uxtb	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	4619      	mov	r1, r3
 800be7e:	0109      	lsls	r1, r1, #4
 800be80:	1acb      	subs	r3, r1, r3
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	b2db      	uxtb	r3, r3
 800be86:	4413      	add	r3, r2
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	4413      	add	r3, r2
 800be92:	b2da      	uxtb	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	769a      	strb	r2, [r3, #26]
		data->real_time = HTime.Hours * 3600 + HTime.Minutes * 60 + HTime.Seconds;
 800be98:	4b18      	ldr	r3, [pc, #96]	; (800befc <dataGetTime+0x160>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	4b16      	ldr	r3, [pc, #88]	; (800befc <dataGetTime+0x160>)
 800bea2:	785b      	ldrb	r3, [r3, #1]
 800bea4:	4619      	mov	r1, r3
 800bea6:	0109      	lsls	r1, r1, #4
 800bea8:	1acb      	subs	r3, r1, r3
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	b2db      	uxtb	r3, r3
 800beae:	4413      	add	r3, r2
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	4b12      	ldr	r3, [pc, #72]	; (800befc <dataGetTime+0x160>)
 800beb4:	789b      	ldrb	r3, [r3, #2]
 800beb6:	4413      	add	r3, r2
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	76da      	strb	r2, [r3, #27]
		if ((data->real_time - data->time_count_second > 40))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7edb      	ldrb	r3, [r3, #27]
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7e9b      	ldrb	r3, [r3, #26]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2b28      	cmp	r3, #40	; 0x28
 800becc:	dd07      	ble.n	800bede <dataGetTime+0x142>
		{
			data->countTime = STOP_TIME;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2203      	movs	r2, #3
 800bed2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			status = DATA_STOP;
 800bed6:	2301      	movs	r3, #1
 800bed8:	73fb      	strb	r3, [r7, #15]
			return status;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	e006      	b.n	800beec <dataGetTime+0x150>
	while (data->countTime == RUN_TIME)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	f43f af61 	beq.w	800bdac <dataGetTime+0x10>
		}
	}
	return status;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bef6:	bf00      	nop
 800bef8:	20000230 	.word	0x20000230
 800befc:	200013a8 	.word	0x200013a8
 800bf00:	200013bc 	.word	0x200013bc
 800bf04:	20001398 	.word	0x20001398
 800bf08:	200013a0 	.word	0x200013a0

0800bf0c <handleData>:
 * The function "handleData" calculates the flow water and percentage based on the given data.
 *
 * @param data A pointer to a structure of type DATA.
 */
void handleData()
{
 800bf0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bf10:	af00      	add	r7, sp, #0
	data.Flow_warter = data.Distance_high / ((data.hour * 60.0) + (data.minute * 1.0) + (data.second / 60.0))	;
 800bf12:	4b31      	ldr	r3, [pc, #196]	; (800bfd8 <handleData+0xcc>)
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f4 fa9e 	bl	8000458 <__aeabi_f2d>
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	4b2d      	ldr	r3, [pc, #180]	; (800bfd8 <handleData+0xcc>)
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f4 fa75 	bl	8000414 <__aeabi_ui2d>
 800bf2a:	f04f 0200 	mov.w	r2, #0
 800bf2e:	4b2b      	ldr	r3, [pc, #172]	; (800bfdc <handleData+0xd0>)
 800bf30:	f7f4 faea 	bl	8000508 <__aeabi_dmul>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4690      	mov	r8, r2
 800bf3a:	4699      	mov	r9, r3
 800bf3c:	4b26      	ldr	r3, [pc, #152]	; (800bfd8 <handleData+0xcc>)
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f4 fa67 	bl	8000414 <__aeabi_ui2d>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f925 	bl	800019c <__adddf3>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4690      	mov	r8, r2
 800bf58:	4699      	mov	r9, r3
 800bf5a:	4b1f      	ldr	r3, [pc, #124]	; (800bfd8 <handleData+0xcc>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7f4 fa58 	bl	8000414 <__aeabi_ui2d>
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <handleData+0xd0>)
 800bf6a:	f7f4 fbf7 	bl	800075c <__aeabi_ddiv>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4640      	mov	r0, r8
 800bf74:	4649      	mov	r1, r9
 800bf76:	f7f4 f911 	bl	800019c <__adddf3>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 fbeb 	bl	800075c <__aeabi_ddiv>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f7f4 fdb3 	bl	8000af8 <__aeabi_d2f>
 800bf92:	4603      	mov	r3, r0
 800bf94:	4a10      	ldr	r2, [pc, #64]	; (800bfd8 <handleData+0xcc>)
 800bf96:	6253      	str	r3, [r2, #36]	; 0x24
	data.percent = ((data.Distance * data.count) / data.Distance_high) * 100;
 800bf98:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <handleData+0xcc>)
 800bf9a:	6a1c      	ldr	r4, [r3, #32]
 800bf9c:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <handleData+0xcc>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f4 feaf 	bl	8000d04 <__aeabi_ui2f>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f7f4 ff02 	bl	8000db4 <__aeabi_fmul>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <handleData+0xcc>)
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4610      	mov	r0, r2
 800bfbc:	f7f4 ffae 	bl	8000f1c <__aeabi_fdiv>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	4907      	ldr	r1, [pc, #28]	; (800bfe0 <handleData+0xd4>)
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7f4 fef5 	bl	8000db4 <__aeabi_fmul>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	461a      	mov	r2, r3
 800bfce:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <handleData+0xcc>)
 800bfd0:	629a      	str	r2, [r3, #40]	; 0x28
	// if (data->percent > 100)
	// {
	// 	data->percent = 100 - data->percent;
	// 	data->percent = 0 - data->percent;
	// }
 800bfd2:	bf00      	nop
 800bfd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bfd8:	200003d0 	.word	0x200003d0
 800bfdc:	404e0000 	.word	0x404e0000
 800bfe0:	42c80000 	.word	0x42c80000

0800bfe4 <setup_moniter>:
#include <stdio.h>

UBYTE *BlackImage, *RYImage; // Red or Yellow

void setup_moniter()
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af02      	add	r7, sp, #8
    DEV_Module_Init();
 800bfea:	f7fe fdf7 	bl	800abdc <DEV_Module_Init>
    DISPLAY_Init();
 800bfee:	f7fe fea4 	bl	800ad3a <DISPLAY_Init>

    UWORD Imagesize = ((DISPLAY_WIDTH % 8 == 0) ? (DISPLAY_WIDTH / 8) : (DISPLAY_WIDTH / 8 + 1)) * DISPLAY_HEIGHT;
 800bff2:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 800bff6:	80fb      	strh	r3, [r7, #6]
    if ((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL)
 800bff8:	88fb      	ldrh	r3, [r7, #6]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fd3c 	bl	800ca78 <malloc>
 800c000:	4603      	mov	r3, r0
 800c002:	461a      	mov	r2, r3
 800c004:	4b17      	ldr	r3, [pc, #92]	; (800c064 <setup_moniter+0x80>)
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	4b16      	ldr	r3, [pc, #88]	; (800c064 <setup_moniter+0x80>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d022      	beq.n	800c056 <setup_moniter+0x72>
    {
        return -1;
    }
    if ((RYImage = (UBYTE *)malloc(Imagesize)) == NULL)
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fd30 	bl	800ca78 <malloc>
 800c018:	4603      	mov	r3, r0
 800c01a:	461a      	mov	r2, r3
 800c01c:	4b12      	ldr	r3, [pc, #72]	; (800c068 <setup_moniter+0x84>)
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	4b11      	ldr	r3, [pc, #68]	; (800c068 <setup_moniter+0x84>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d018      	beq.n	800c05a <setup_moniter+0x76>
    {
        return -1;
    }

    Paint_NewImage(BlackImage, DISPLAY_WIDTH, DISPLAY_HEIGHT, 270, WHITE);
 800c028:	4b0e      	ldr	r3, [pc, #56]	; (800c064 <setup_moniter+0x80>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	23ff      	movs	r3, #255	; 0xff
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800c034:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c038:	2180      	movs	r1, #128	; 0x80
 800c03a:	f7fe f9a1 	bl	800a380 <Paint_NewImage>
    Paint_NewImage(RYImage, DISPLAY_WIDTH, DISPLAY_HEIGHT, 270, WHITE);
 800c03e:	4b0a      	ldr	r3, [pc, #40]	; (800c068 <setup_moniter+0x84>)
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	23ff      	movs	r3, #255	; 0xff
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800c04a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c04e:	2180      	movs	r1, #128	; 0x80
 800c050:	f7fe f996 	bl	800a380 <Paint_NewImage>
 800c054:	e002      	b.n	800c05c <setup_moniter+0x78>
        return -1;
 800c056:	bf00      	nop
 800c058:	e000      	b.n	800c05c <setup_moniter+0x78>
        return -1;
 800c05a:	bf00      	nop
}
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	200013c0 	.word	0x200013c0
 800c068:	200013c4 	.word	0x200013c4

0800c06c <home_moniter>:

    DISPLAY_Display(BlackImage, RYImage);
}

void home_moniter(SIM simStatus, SD_CARD_STATUS sdStatus, DATA *data)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af02      	add	r7, sp, #8
 800c072:	4603      	mov	r3, r0
 800c074:	603a      	str	r2, [r7, #0]
 800c076:	71fb      	strb	r3, [r7, #7]
 800c078:	460b      	mov	r3, r1
 800c07a:	71bb      	strb	r3, [r7, #6]
    Paint_SelectImage(BlackImage);
 800c07c:	4b60      	ldr	r3, [pc, #384]	; (800c200 <home_moniter+0x194>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe f9d1 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c086:	20ff      	movs	r0, #255	; 0xff
 800c088:	f7fe fb28 	bl	800a6dc <Paint_Clear>
    if (simStatus == SIM_STATUS_OK)
 800c08c:	79fb      	ldrb	r3, [r7, #7]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10a      	bne.n	800c0a8 <home_moniter+0x3c>
    {
        Paint_DrawString_EN(160, 0, "SIM CONNECT", &Font16, WHITE, BLACK);
 800c092:	2300      	movs	r3, #0
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	23ff      	movs	r3, #255	; 0xff
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	4b5a      	ldr	r3, [pc, #360]	; (800c204 <home_moniter+0x198>)
 800c09c:	4a5a      	ldr	r2, [pc, #360]	; (800c208 <home_moniter+0x19c>)
 800c09e:	2100      	movs	r1, #0
 800c0a0:	20a0      	movs	r0, #160	; 0xa0
 800c0a2:	f7fe fc63 	bl	800a96c <Paint_DrawString_EN>
 800c0a6:	e009      	b.n	800c0bc <home_moniter+0x50>
    }
    else
    {
        Paint_DrawString_EN(120, 0, "SIM NOT CONNECT", &Font16, WHITE, BLACK);
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	23ff      	movs	r3, #255	; 0xff
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4b54      	ldr	r3, [pc, #336]	; (800c204 <home_moniter+0x198>)
 800c0b2:	4a56      	ldr	r2, [pc, #344]	; (800c20c <home_moniter+0x1a0>)
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	2078      	movs	r0, #120	; 0x78
 800c0b8:	f7fe fc58 	bl	800a96c <Paint_DrawString_EN>
    }

    if (sdStatus == SD_CARD_OK)
 800c0bc:	79bb      	ldrb	r3, [r7, #6]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <home_moniter+0x6c>
    {
        Paint_DrawString_EN(170, 20, "SD CONNECT", &Font16, WHITE, BLACK);
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	23ff      	movs	r3, #255	; 0xff
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4b4e      	ldr	r3, [pc, #312]	; (800c204 <home_moniter+0x198>)
 800c0cc:	4a50      	ldr	r2, [pc, #320]	; (800c210 <home_moniter+0x1a4>)
 800c0ce:	2114      	movs	r1, #20
 800c0d0:	20aa      	movs	r0, #170	; 0xaa
 800c0d2:	f7fe fc4b 	bl	800a96c <Paint_DrawString_EN>
 800c0d6:	e009      	b.n	800c0ec <home_moniter+0x80>
    }
    else
    {
        Paint_DrawString_EN(130, 20, "SD NOT CONNECT", &Font16, WHITE, BLACK);
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	23ff      	movs	r3, #255	; 0xff
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	4b48      	ldr	r3, [pc, #288]	; (800c204 <home_moniter+0x198>)
 800c0e2:	4a4c      	ldr	r2, [pc, #304]	; (800c214 <home_moniter+0x1a8>)
 800c0e4:	2114      	movs	r1, #20
 800c0e6:	2082      	movs	r0, #130	; 0x82
 800c0e8:	f7fe fc40 	bl	800a96c <Paint_DrawString_EN>
    }
    Paint_DrawString_EN(60, 40, "READLY TO COUNT", &Font16, WHITE, BLACK);
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	23ff      	movs	r3, #255	; 0xff
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	4b43      	ldr	r3, [pc, #268]	; (800c204 <home_moniter+0x198>)
 800c0f6:	4a48      	ldr	r2, [pc, #288]	; (800c218 <home_moniter+0x1ac>)
 800c0f8:	2128      	movs	r1, #40	; 0x28
 800c0fa:	203c      	movs	r0, #60	; 0x3c
 800c0fc:	f7fe fc36 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(20, 60, "COUNT:", &Font16, WHITE, BLACK);
 800c100:	2300      	movs	r3, #0
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	23ff      	movs	r3, #255	; 0xff
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4b3e      	ldr	r3, [pc, #248]	; (800c204 <home_moniter+0x198>)
 800c10a:	4a44      	ldr	r2, [pc, #272]	; (800c21c <home_moniter+0x1b0>)
 800c10c:	213c      	movs	r1, #60	; 0x3c
 800c10e:	2014      	movs	r0, #20
 800c110:	f7fe fc2c 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(85, 60, data->count, &Font16, BLACK, WHITE);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	23ff      	movs	r3, #255	; 0xff
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	2300      	movs	r3, #0
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	4b38      	ldr	r3, [pc, #224]	; (800c204 <home_moniter+0x198>)
 800c124:	213c      	movs	r1, #60	; 0x3c
 800c126:	2055      	movs	r0, #85	; 0x55
 800c128:	f7fe fc74 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(20, 80, "time:", &Font16, WHITE, BLACK);
 800c12c:	2300      	movs	r3, #0
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	23ff      	movs	r3, #255	; 0xff
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4b33      	ldr	r3, [pc, #204]	; (800c204 <home_moniter+0x198>)
 800c136:	4a3a      	ldr	r2, [pc, #232]	; (800c220 <home_moniter+0x1b4>)
 800c138:	2150      	movs	r1, #80	; 0x50
 800c13a:	2014      	movs	r0, #20
 800c13c:	f7fe fc16 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(75, 80, data->hour, &Font16, BLACK, WHITE);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	461a      	mov	r2, r3
 800c146:	23ff      	movs	r3, #255	; 0xff
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	2300      	movs	r3, #0
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	4b2d      	ldr	r3, [pc, #180]	; (800c204 <home_moniter+0x198>)
 800c150:	2150      	movs	r1, #80	; 0x50
 800c152:	204b      	movs	r0, #75	; 0x4b
 800c154:	f7fe fc5e 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(95, 80, "/", &Font16, WHITE, BLACK);
 800c158:	2300      	movs	r3, #0
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	23ff      	movs	r3, #255	; 0xff
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	4b28      	ldr	r3, [pc, #160]	; (800c204 <home_moniter+0x198>)
 800c162:	4a30      	ldr	r2, [pc, #192]	; (800c224 <home_moniter+0x1b8>)
 800c164:	2150      	movs	r1, #80	; 0x50
 800c166:	205f      	movs	r0, #95	; 0x5f
 800c168:	f7fe fc00 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(105, 80, data->minute, &Font16, BLACK, WHITE);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	461a      	mov	r2, r3
 800c172:	23ff      	movs	r3, #255	; 0xff
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	2300      	movs	r3, #0
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	4b22      	ldr	r3, [pc, #136]	; (800c204 <home_moniter+0x198>)
 800c17c:	2150      	movs	r1, #80	; 0x50
 800c17e:	2069      	movs	r0, #105	; 0x69
 800c180:	f7fe fc48 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(125, 80, "/", &Font16, WHITE, BLACK);
 800c184:	2300      	movs	r3, #0
 800c186:	9301      	str	r3, [sp, #4]
 800c188:	23ff      	movs	r3, #255	; 0xff
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	4b1d      	ldr	r3, [pc, #116]	; (800c204 <home_moniter+0x198>)
 800c18e:	4a25      	ldr	r2, [pc, #148]	; (800c224 <home_moniter+0x1b8>)
 800c190:	2150      	movs	r1, #80	; 0x50
 800c192:	207d      	movs	r0, #125	; 0x7d
 800c194:	f7fe fbea 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(135, 80, data->second, &Font16, BLACK, WHITE);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	461a      	mov	r2, r3
 800c19e:	23ff      	movs	r3, #255	; 0xff
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	4b17      	ldr	r3, [pc, #92]	; (800c204 <home_moniter+0x198>)
 800c1a8:	2150      	movs	r1, #80	; 0x50
 800c1aa:	2087      	movs	r0, #135	; 0x87
 800c1ac:	f7fe fc32 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(20, 100, "FLOW WARTER: --/-- mm", &Font16, WHITE, BLACK);
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9301      	str	r3, [sp, #4]
 800c1b4:	23ff      	movs	r3, #255	; 0xff
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	4b12      	ldr	r3, [pc, #72]	; (800c204 <home_moniter+0x198>)
 800c1ba:	4a1b      	ldr	r2, [pc, #108]	; (800c228 <home_moniter+0x1bc>)
 800c1bc:	2164      	movs	r1, #100	; 0x64
 800c1be:	2014      	movs	r0, #20
 800c1c0:	f7fe fbd4 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(200, 120, "DESIGN BY THTECH", &Font8, WHITE, BLACK);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	23ff      	movs	r3, #255	; 0xff
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	4b17      	ldr	r3, [pc, #92]	; (800c22c <home_moniter+0x1c0>)
 800c1ce:	4a18      	ldr	r2, [pc, #96]	; (800c230 <home_moniter+0x1c4>)
 800c1d0:	2178      	movs	r1, #120	; 0x78
 800c1d2:	20c8      	movs	r0, #200	; 0xc8
 800c1d4:	f7fe fbca 	bl	800a96c <Paint_DrawString_EN>

    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800c1d8:	4b16      	ldr	r3, [pc, #88]	; (800c234 <home_moniter+0x1c8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe f923 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c1e2:	20ff      	movs	r0, #255	; 0xff
 800c1e4:	f7fe fa7a 	bl	800a6dc <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800c1e8:	4b05      	ldr	r3, [pc, #20]	; (800c200 <home_moniter+0x194>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a11      	ldr	r2, [pc, #68]	; (800c234 <home_moniter+0x1c8>)
 800c1ee:	6812      	ldr	r2, [r2, #0]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe fd46 	bl	800ac84 <DISPLAY_Display>
};
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	200013c0 	.word	0x200013c0
 800c204:	20000024 	.word	0x20000024
 800c208:	080117dc 	.word	0x080117dc
 800c20c:	080117e8 	.word	0x080117e8
 800c210:	080117f8 	.word	0x080117f8
 800c214:	08011804 	.word	0x08011804
 800c218:	08011814 	.word	0x08011814
 800c21c:	08011824 	.word	0x08011824
 800c220:	0801182c 	.word	0x0801182c
 800c224:	08011834 	.word	0x08011834
 800c228:	08011838 	.word	0x08011838
 800c22c:	2000002c 	.word	0x2000002c
 800c230:	080117c8 	.word	0x080117c8
 800c234:	200013c4 	.word	0x200013c4

0800c238 <count_moniter>:

void count_moniter(DATA *data)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	6078      	str	r0, [r7, #4]
    Paint_SelectImage(BlackImage);
 800c240:	4b48      	ldr	r3, [pc, #288]	; (800c364 <count_moniter+0x12c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe f8ef 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c24a:	20ff      	movs	r0, #255	; 0xff
 800c24c:	f7fe fa46 	bl	800a6dc <Paint_Clear>

    Paint_DrawString_EN(60, 40, "COUNTING START ...", &Font16, WHITE, BLACK);
 800c250:	2300      	movs	r3, #0
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	23ff      	movs	r3, #255	; 0xff
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	4b43      	ldr	r3, [pc, #268]	; (800c368 <count_moniter+0x130>)
 800c25a:	4a44      	ldr	r2, [pc, #272]	; (800c36c <count_moniter+0x134>)
 800c25c:	2128      	movs	r1, #40	; 0x28
 800c25e:	203c      	movs	r0, #60	; 0x3c
 800c260:	f7fe fb84 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(20, 60, "COUNT:", &Font16, WHITE, BLACK);
 800c264:	2300      	movs	r3, #0
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	23ff      	movs	r3, #255	; 0xff
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	4b3e      	ldr	r3, [pc, #248]	; (800c368 <count_moniter+0x130>)
 800c26e:	4a40      	ldr	r2, [pc, #256]	; (800c370 <count_moniter+0x138>)
 800c270:	213c      	movs	r1, #60	; 0x3c
 800c272:	2014      	movs	r0, #20
 800c274:	f7fe fb7a 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(85, 60, data->count, &Font16, BLACK, WHITE);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	23ff      	movs	r3, #255	; 0xff
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	2300      	movs	r3, #0
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	4b38      	ldr	r3, [pc, #224]	; (800c368 <count_moniter+0x130>)
 800c288:	213c      	movs	r1, #60	; 0x3c
 800c28a:	2055      	movs	r0, #85	; 0x55
 800c28c:	f7fe fbc2 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(20, 80, "time:", &Font16, WHITE, BLACK);
 800c290:	2300      	movs	r3, #0
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	23ff      	movs	r3, #255	; 0xff
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	4b33      	ldr	r3, [pc, #204]	; (800c368 <count_moniter+0x130>)
 800c29a:	4a36      	ldr	r2, [pc, #216]	; (800c374 <count_moniter+0x13c>)
 800c29c:	2150      	movs	r1, #80	; 0x50
 800c29e:	2014      	movs	r0, #20
 800c2a0:	f7fe fb64 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(75, 80, data->hour, &Font16, BLACK, WHITE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	23ff      	movs	r3, #255	; 0xff
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4b2d      	ldr	r3, [pc, #180]	; (800c368 <count_moniter+0x130>)
 800c2b4:	2150      	movs	r1, #80	; 0x50
 800c2b6:	204b      	movs	r0, #75	; 0x4b
 800c2b8:	f7fe fbac 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(95, 80, "/", &Font16, WHITE, BLACK);
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	23ff      	movs	r3, #255	; 0xff
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	4b28      	ldr	r3, [pc, #160]	; (800c368 <count_moniter+0x130>)
 800c2c6:	4a2c      	ldr	r2, [pc, #176]	; (800c378 <count_moniter+0x140>)
 800c2c8:	2150      	movs	r1, #80	; 0x50
 800c2ca:	205f      	movs	r0, #95	; 0x5f
 800c2cc:	f7fe fb4e 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(105, 80, data->minute, &Font16, BLACK, WHITE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	23ff      	movs	r3, #255	; 0xff
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	4b22      	ldr	r3, [pc, #136]	; (800c368 <count_moniter+0x130>)
 800c2e0:	2150      	movs	r1, #80	; 0x50
 800c2e2:	2069      	movs	r0, #105	; 0x69
 800c2e4:	f7fe fb96 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(125, 80, "/", &Font16, WHITE, BLACK);
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	23ff      	movs	r3, #255	; 0xff
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	4b1d      	ldr	r3, [pc, #116]	; (800c368 <count_moniter+0x130>)
 800c2f2:	4a21      	ldr	r2, [pc, #132]	; (800c378 <count_moniter+0x140>)
 800c2f4:	2150      	movs	r1, #80	; 0x50
 800c2f6:	207d      	movs	r0, #125	; 0x7d
 800c2f8:	f7fe fb38 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(135, 80, data->second, &Font16, BLACK, WHITE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	461a      	mov	r2, r3
 800c302:	23ff      	movs	r3, #255	; 0xff
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	2300      	movs	r3, #0
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	4b17      	ldr	r3, [pc, #92]	; (800c368 <count_moniter+0x130>)
 800c30c:	2150      	movs	r1, #80	; 0x50
 800c30e:	2087      	movs	r0, #135	; 0x87
 800c310:	f7fe fb80 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(20, 100, "FLOW WARTER: --/-- mm", &Font16, WHITE, BLACK);
 800c314:	2300      	movs	r3, #0
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	23ff      	movs	r3, #255	; 0xff
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	4b12      	ldr	r3, [pc, #72]	; (800c368 <count_moniter+0x130>)
 800c31e:	4a17      	ldr	r2, [pc, #92]	; (800c37c <count_moniter+0x144>)
 800c320:	2164      	movs	r1, #100	; 0x64
 800c322:	2014      	movs	r0, #20
 800c324:	f7fe fb22 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(200, 120, "DESIGN BY THTECH", &Font8, WHITE, BLACK);
 800c328:	2300      	movs	r3, #0
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	23ff      	movs	r3, #255	; 0xff
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	4b13      	ldr	r3, [pc, #76]	; (800c380 <count_moniter+0x148>)
 800c332:	4a14      	ldr	r2, [pc, #80]	; (800c384 <count_moniter+0x14c>)
 800c334:	2178      	movs	r1, #120	; 0x78
 800c336:	20c8      	movs	r0, #200	; 0xc8
 800c338:	f7fe fb18 	bl	800a96c <Paint_DrawString_EN>

    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800c33c:	4b12      	ldr	r3, [pc, #72]	; (800c388 <count_moniter+0x150>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe f871 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c346:	20ff      	movs	r0, #255	; 0xff
 800c348:	f7fe f9c8 	bl	800a6dc <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <count_moniter+0x12c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0d      	ldr	r2, [pc, #52]	; (800c388 <count_moniter+0x150>)
 800c352:	6812      	ldr	r2, [r2, #0]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe fc94 	bl	800ac84 <DISPLAY_Display>
};
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200013c0 	.word	0x200013c0
 800c368:	20000024 	.word	0x20000024
 800c36c:	08011850 	.word	0x08011850
 800c370:	08011824 	.word	0x08011824
 800c374:	0801182c 	.word	0x0801182c
 800c378:	08011834 	.word	0x08011834
 800c37c:	08011838 	.word	0x08011838
 800c380:	2000002c 	.word	0x2000002c
 800c384:	080117c8 	.word	0x080117c8
 800c388:	200013c4 	.word	0x200013c4

0800c38c <finish_moniter>:

void finish_moniter(DATA *data, SIM checkSimStatus, SD_CARD_STATUS checkSdStatus)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b09e      	sub	sp, #120	; 0x78
 800c390:	af02      	add	r7, sp, #8
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
 800c398:	4613      	mov	r3, r2
 800c39a:	70bb      	strb	r3, [r7, #2]
    char flWarter[50];
    memset(flWarter, 0, 50);
 800c39c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3a0:	2232      	movs	r2, #50	; 0x32
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fb7d 	bl	800caa4 <memset>
    sprintf(flWarter, "%.2f", data->Flow_warter);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 f852 	bl	8000458 <__aeabi_f2d>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800c3bc:	4986      	ldr	r1, [pc, #536]	; (800c5d8 <finish_moniter+0x24c>)
 800c3be:	f001 fb4d 	bl	800da5c <siprintf>
    char perCent[50];
    memset(perCent, 0, 50);
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	2232      	movs	r2, #50	; 0x32
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fb6a 	bl	800caa4 <memset>
    sprintf(perCent, "%.2f", data->percent);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f4 f83f 	bl	8000458 <__aeabi_f2d>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	f107 0008 	add.w	r0, r7, #8
 800c3e2:	497d      	ldr	r1, [pc, #500]	; (800c5d8 <finish_moniter+0x24c>)
 800c3e4:	f001 fb3a 	bl	800da5c <siprintf>

    Paint_SelectImage(BlackImage);
 800c3e8:	4b7c      	ldr	r3, [pc, #496]	; (800c5dc <finish_moniter+0x250>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe f81b 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c3f2:	20ff      	movs	r0, #255	; 0xff
 800c3f4:	f7fe f972 	bl	800a6dc <Paint_Clear>

    if (checkSimStatus == SIM_STATUS_OK)
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <finish_moniter+0x88>
    {
        Paint_DrawString_EN(20, 0, "SIM SEND OKE", &Font16, WHITE, BLACK);
 800c3fe:	2300      	movs	r3, #0
 800c400:	9301      	str	r3, [sp, #4]
 800c402:	23ff      	movs	r3, #255	; 0xff
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	4b76      	ldr	r3, [pc, #472]	; (800c5e0 <finish_moniter+0x254>)
 800c408:	4a76      	ldr	r2, [pc, #472]	; (800c5e4 <finish_moniter+0x258>)
 800c40a:	2100      	movs	r1, #0
 800c40c:	2014      	movs	r0, #20
 800c40e:	f7fe faad 	bl	800a96c <Paint_DrawString_EN>
 800c412:	e009      	b.n	800c428 <finish_moniter+0x9c>
    }
    else
    {
        Paint_DrawString_EN(20, 0, "SIM SEND ERROR", &Font16, WHITE, BLACK);
 800c414:	2300      	movs	r3, #0
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	23ff      	movs	r3, #255	; 0xff
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	4b70      	ldr	r3, [pc, #448]	; (800c5e0 <finish_moniter+0x254>)
 800c41e:	4a72      	ldr	r2, [pc, #456]	; (800c5e8 <finish_moniter+0x25c>)
 800c420:	2100      	movs	r1, #0
 800c422:	2014      	movs	r0, #20
 800c424:	f7fe faa2 	bl	800a96c <Paint_DrawString_EN>
    }

    if (checkSdStatus == SD_CARD_OK)
 800c428:	78bb      	ldrb	r3, [r7, #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <finish_moniter+0xb8>
    {
        Paint_DrawString_EN(20, 20, "SD SEND 0K", &Font16, WHITE, BLACK);
 800c42e:	2300      	movs	r3, #0
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	23ff      	movs	r3, #255	; 0xff
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	4b6a      	ldr	r3, [pc, #424]	; (800c5e0 <finish_moniter+0x254>)
 800c438:	4a6c      	ldr	r2, [pc, #432]	; (800c5ec <finish_moniter+0x260>)
 800c43a:	2114      	movs	r1, #20
 800c43c:	2014      	movs	r0, #20
 800c43e:	f7fe fa95 	bl	800a96c <Paint_DrawString_EN>
 800c442:	e009      	b.n	800c458 <finish_moniter+0xcc>
    }
    else
    {
        Paint_DrawString_EN(20, 20, "SD SEND ERROR", &Font16, WHITE, BLACK);
 800c444:	2300      	movs	r3, #0
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	23ff      	movs	r3, #255	; 0xff
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	4b64      	ldr	r3, [pc, #400]	; (800c5e0 <finish_moniter+0x254>)
 800c44e:	4a68      	ldr	r2, [pc, #416]	; (800c5f0 <finish_moniter+0x264>)
 800c450:	2114      	movs	r1, #20
 800c452:	2014      	movs	r0, #20
 800c454:	f7fe fa8a 	bl	800a96c <Paint_DrawString_EN>
    }

    Paint_DrawString_EN(60, 40, "FINISH COUNT", &Font16, WHITE, BLACK);
 800c458:	2300      	movs	r3, #0
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	23ff      	movs	r3, #255	; 0xff
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	4b5f      	ldr	r3, [pc, #380]	; (800c5e0 <finish_moniter+0x254>)
 800c462:	4a64      	ldr	r2, [pc, #400]	; (800c5f4 <finish_moniter+0x268>)
 800c464:	2128      	movs	r1, #40	; 0x28
 800c466:	203c      	movs	r0, #60	; 0x3c
 800c468:	f7fe fa80 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(20, 60, "COUNT:", &Font16, WHITE, BLACK);
 800c46c:	2300      	movs	r3, #0
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	23ff      	movs	r3, #255	; 0xff
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	4b5a      	ldr	r3, [pc, #360]	; (800c5e0 <finish_moniter+0x254>)
 800c476:	4a60      	ldr	r2, [pc, #384]	; (800c5f8 <finish_moniter+0x26c>)
 800c478:	213c      	movs	r1, #60	; 0x3c
 800c47a:	2014      	movs	r0, #20
 800c47c:	f7fe fa76 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(85, 60, data->count, &Font16, BLACK, WHITE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	23ff      	movs	r3, #255	; 0xff
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	2300      	movs	r3, #0
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	4b54      	ldr	r3, [pc, #336]	; (800c5e0 <finish_moniter+0x254>)
 800c490:	213c      	movs	r1, #60	; 0x3c
 800c492:	2055      	movs	r0, #85	; 0x55
 800c494:	f7fe fabe 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(120, 60, "time:", &Font16, WHITE, BLACK);
 800c498:	2300      	movs	r3, #0
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	23ff      	movs	r3, #255	; 0xff
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	4b4f      	ldr	r3, [pc, #316]	; (800c5e0 <finish_moniter+0x254>)
 800c4a2:	4a56      	ldr	r2, [pc, #344]	; (800c5fc <finish_moniter+0x270>)
 800c4a4:	213c      	movs	r1, #60	; 0x3c
 800c4a6:	2078      	movs	r0, #120	; 0x78
 800c4a8:	f7fe fa60 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(170, 60, data->hour, &Font16, BLACK, WHITE);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	23ff      	movs	r3, #255	; 0xff
 800c4b4:	9301      	str	r3, [sp, #4]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4b49      	ldr	r3, [pc, #292]	; (800c5e0 <finish_moniter+0x254>)
 800c4bc:	213c      	movs	r1, #60	; 0x3c
 800c4be:	20aa      	movs	r0, #170	; 0xaa
 800c4c0:	f7fe faa8 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(200, 60, "/", &Font16, WHITE, BLACK);
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	23ff      	movs	r3, #255	; 0xff
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	4b44      	ldr	r3, [pc, #272]	; (800c5e0 <finish_moniter+0x254>)
 800c4ce:	4a4c      	ldr	r2, [pc, #304]	; (800c600 <finish_moniter+0x274>)
 800c4d0:	213c      	movs	r1, #60	; 0x3c
 800c4d2:	20c8      	movs	r0, #200	; 0xc8
 800c4d4:	f7fe fa4a 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(215, 60, data->minute, &Font16, BLACK, WHITE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	23ff      	movs	r3, #255	; 0xff
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	4b3e      	ldr	r3, [pc, #248]	; (800c5e0 <finish_moniter+0x254>)
 800c4e8:	213c      	movs	r1, #60	; 0x3c
 800c4ea:	20d7      	movs	r0, #215	; 0xd7
 800c4ec:	f7fe fa92 	bl	800aa14 <Paint_DrawNum>
    Paint_DrawString_EN(245, 60, "/", &Font16, WHITE, BLACK);
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	23ff      	movs	r3, #255	; 0xff
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <finish_moniter+0x254>)
 800c4fa:	4a41      	ldr	r2, [pc, #260]	; (800c600 <finish_moniter+0x274>)
 800c4fc:	213c      	movs	r1, #60	; 0x3c
 800c4fe:	20f5      	movs	r0, #245	; 0xf5
 800c500:	f7fe fa34 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawNum(260, 60, data->second, &Font16, BLACK, WHITE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	461a      	mov	r2, r3
 800c50a:	23ff      	movs	r3, #255	; 0xff
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	2300      	movs	r3, #0
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	4b33      	ldr	r3, [pc, #204]	; (800c5e0 <finish_moniter+0x254>)
 800c514:	213c      	movs	r1, #60	; 0x3c
 800c516:	f44f 7082 	mov.w	r0, #260	; 0x104
 800c51a:	f7fe fa7b 	bl	800aa14 <Paint_DrawNum>

    Paint_DrawString_EN(20, 80, "FLOW WARTER:", &Font16, WHITE, BLACK);
 800c51e:	2300      	movs	r3, #0
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	23ff      	movs	r3, #255	; 0xff
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	4b2e      	ldr	r3, [pc, #184]	; (800c5e0 <finish_moniter+0x254>)
 800c528:	4a36      	ldr	r2, [pc, #216]	; (800c604 <finish_moniter+0x278>)
 800c52a:	2150      	movs	r1, #80	; 0x50
 800c52c:	2014      	movs	r0, #20
 800c52e:	f7fe fa1d 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(150, 80, flWarter, &Font16, WHITE, BLACK);
 800c532:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c536:	2300      	movs	r3, #0
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	23ff      	movs	r3, #255	; 0xff
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	4b28      	ldr	r3, [pc, #160]	; (800c5e0 <finish_moniter+0x254>)
 800c540:	2150      	movs	r1, #80	; 0x50
 800c542:	2096      	movs	r0, #150	; 0x96
 800c544:	f7fe fa12 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(220, 80, "mm", &Font16, WHITE, BLACK);
 800c548:	2300      	movs	r3, #0
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	23ff      	movs	r3, #255	; 0xff
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	4b23      	ldr	r3, [pc, #140]	; (800c5e0 <finish_moniter+0x254>)
 800c552:	4a2d      	ldr	r2, [pc, #180]	; (800c608 <finish_moniter+0x27c>)
 800c554:	2150      	movs	r1, #80	; 0x50
 800c556:	20dc      	movs	r0, #220	; 0xdc
 800c558:	f7fe fa08 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(20, 100, "PERCENT WARTER:", &Font16, WHITE, BLACK);
 800c55c:	2300      	movs	r3, #0
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	23ff      	movs	r3, #255	; 0xff
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4b1e      	ldr	r3, [pc, #120]	; (800c5e0 <finish_moniter+0x254>)
 800c566:	4a29      	ldr	r2, [pc, #164]	; (800c60c <finish_moniter+0x280>)
 800c568:	2164      	movs	r1, #100	; 0x64
 800c56a:	2014      	movs	r0, #20
 800c56c:	f7fe f9fe 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(190, 100, perCent, &Font16, WHITE, BLACK);
 800c570:	f107 0208 	add.w	r2, r7, #8
 800c574:	2300      	movs	r3, #0
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	23ff      	movs	r3, #255	; 0xff
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	4b18      	ldr	r3, [pc, #96]	; (800c5e0 <finish_moniter+0x254>)
 800c57e:	2164      	movs	r1, #100	; 0x64
 800c580:	20be      	movs	r0, #190	; 0xbe
 800c582:	f7fe f9f3 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(250, 100, "%", &Font16, WHITE, BLACK);
 800c586:	2300      	movs	r3, #0
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	23ff      	movs	r3, #255	; 0xff
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <finish_moniter+0x254>)
 800c590:	4a1f      	ldr	r2, [pc, #124]	; (800c610 <finish_moniter+0x284>)
 800c592:	2164      	movs	r1, #100	; 0x64
 800c594:	20fa      	movs	r0, #250	; 0xfa
 800c596:	f7fe f9e9 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(220, 120, "DESIGN BY THTECH", &Font8, WHITE, BLACK);
 800c59a:	2300      	movs	r3, #0
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	23ff      	movs	r3, #255	; 0xff
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	; (800c614 <finish_moniter+0x288>)
 800c5a4:	4a1c      	ldr	r2, [pc, #112]	; (800c618 <finish_moniter+0x28c>)
 800c5a6:	2178      	movs	r1, #120	; 0x78
 800c5a8:	20dc      	movs	r0, #220	; 0xdc
 800c5aa:	f7fe f9df 	bl	800a96c <Paint_DrawString_EN>

    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <finish_moniter+0x290>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fd ff38 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c5b8:	20ff      	movs	r0, #255	; 0xff
 800c5ba:	f7fe f88f 	bl	800a6dc <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800c5be:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <finish_moniter+0x250>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a16      	ldr	r2, [pc, #88]	; (800c61c <finish_moniter+0x290>)
 800c5c4:	6812      	ldr	r2, [r2, #0]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fb5b 	bl	800ac84 <DISPLAY_Display>
};
 800c5ce:	bf00      	nop
 800c5d0:	3770      	adds	r7, #112	; 0x70
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	08011864 	.word	0x08011864
 800c5dc:	200013c0 	.word	0x200013c0
 800c5e0:	20000024 	.word	0x20000024
 800c5e4:	0801186c 	.word	0x0801186c
 800c5e8:	0801187c 	.word	0x0801187c
 800c5ec:	0801188c 	.word	0x0801188c
 800c5f0:	08011898 	.word	0x08011898
 800c5f4:	080118a8 	.word	0x080118a8
 800c5f8:	08011824 	.word	0x08011824
 800c5fc:	0801182c 	.word	0x0801182c
 800c600:	08011834 	.word	0x08011834
 800c604:	080118b8 	.word	0x080118b8
 800c608:	080118c8 	.word	0x080118c8
 800c60c:	080118cc 	.word	0x080118cc
 800c610:	080118dc 	.word	0x080118dc
 800c614:	2000002c 	.word	0x2000002c
 800c618:	080117c8 	.word	0x080117c8
 800c61c:	200013c4 	.word	0x200013c4

0800c620 <deviceInformatio>:


void deviceInformatio(DEVICE *device)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
    Paint_SelectImage(BlackImage);
 800c628:	4b22      	ldr	r3, [pc, #136]	; (800c6b4 <deviceInformatio+0x94>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7fd fefb 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c632:	20ff      	movs	r0, #255	; 0xff
 800c634:	f7fe f852 	bl	800a6dc <Paint_Clear>

    Paint_DrawString_EN(20, 20, "DEVICE ID: ", &Font16, WHITE, BLACK);
 800c638:	2300      	movs	r3, #0
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	23ff      	movs	r3, #255	; 0xff
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	4b1d      	ldr	r3, [pc, #116]	; (800c6b8 <deviceInformatio+0x98>)
 800c642:	4a1e      	ldr	r2, [pc, #120]	; (800c6bc <deviceInformatio+0x9c>)
 800c644:	2114      	movs	r1, #20
 800c646:	2014      	movs	r0, #20
 800c648:	f7fe f990 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(140, 20, (char *)&device->id, &Font16, WHITE, BLACK);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	2300      	movs	r3, #0
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	23ff      	movs	r3, #255	; 0xff
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	4b18      	ldr	r3, [pc, #96]	; (800c6b8 <deviceInformatio+0x98>)
 800c658:	2114      	movs	r1, #20
 800c65a:	208c      	movs	r0, #140	; 0x8c
 800c65c:	f7fe f986 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(20, 40, "URL DATA: ", &Font16, WHITE, BLACK);
 800c660:	2300      	movs	r3, #0
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	23ff      	movs	r3, #255	; 0xff
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	4b13      	ldr	r3, [pc, #76]	; (800c6b8 <deviceInformatio+0x98>)
 800c66a:	4a15      	ldr	r2, [pc, #84]	; (800c6c0 <deviceInformatio+0xa0>)
 800c66c:	2128      	movs	r1, #40	; 0x28
 800c66e:	2014      	movs	r0, #20
 800c670:	f7fe f97c 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(120, 40, (char *)&device->url, &Font16, WHITE, BLACK);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f103 020f 	add.w	r2, r3, #15
 800c67a:	2300      	movs	r3, #0
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	23ff      	movs	r3, #255	; 0xff
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	4b0d      	ldr	r3, [pc, #52]	; (800c6b8 <deviceInformatio+0x98>)
 800c684:	2128      	movs	r1, #40	; 0x28
 800c686:	2078      	movs	r0, #120	; 0x78
 800c688:	f7fe f970 	bl	800a96c <Paint_DrawString_EN>

    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800c68c:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <deviceInformatio+0xa4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f7fd fec9 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c696:	20ff      	movs	r0, #255	; 0xff
 800c698:	f7fe f820 	bl	800a6dc <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800c69c:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <deviceInformatio+0x94>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a08      	ldr	r2, [pc, #32]	; (800c6c4 <deviceInformatio+0xa4>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe faec 	bl	800ac84 <DISPLAY_Display>
};
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	200013c0 	.word	0x200013c0
 800c6b8:	20000024 	.word	0x20000024
 800c6bc:	080118e0 	.word	0x080118e0
 800c6c0:	080118ec 	.word	0x080118ec
 800c6c4:	200013c4 	.word	0x200013c4

0800c6c8 <dataConfigure>:


void dataConfigure(DATA *data)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b09e      	sub	sp, #120	; 0x78
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	6078      	str	r0, [r7, #4]
    char distanceHight[50];
    memset(distanceHight, 0, 50);
 800c6d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c6d4:	2232      	movs	r2, #50	; 0x32
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f000 f9e3 	bl	800caa4 <memset>
    sprintf(distanceHight, "%.2f", data->Distance_high);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7f3 feb8 	bl	8000458 <__aeabi_f2d>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800c6f0:	492d      	ldr	r1, [pc, #180]	; (800c7a8 <dataConfigure+0xe0>)
 800c6f2:	f001 f9b3 	bl	800da5c <siprintf>
    char distance[50];
    memset(distance, 0, 50);
 800c6f6:	f107 0308 	add.w	r3, r7, #8
 800c6fa:	2232      	movs	r2, #50	; 0x32
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f9d0 	bl	800caa4 <memset>
    sprintf(distance, "%.2f", data->Distance);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7f3 fea5 	bl	8000458 <__aeabi_f2d>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	f107 0008 	add.w	r0, r7, #8
 800c716:	4924      	ldr	r1, [pc, #144]	; (800c7a8 <dataConfigure+0xe0>)
 800c718:	f001 f9a0 	bl	800da5c <siprintf>


    Paint_SelectImage(BlackImage);
 800c71c:	4b23      	ldr	r3, [pc, #140]	; (800c7ac <dataConfigure+0xe4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd fe81 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c726:	20ff      	movs	r0, #255	; 0xff
 800c728:	f7fd ffd8 	bl	800a6dc <Paint_Clear>

    Paint_DrawString_EN(20, 20, "DISTANCE HIGH: ", &Font16, WHITE, BLACK);
 800c72c:	2300      	movs	r3, #0
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	23ff      	movs	r3, #255	; 0xff
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	4b1e      	ldr	r3, [pc, #120]	; (800c7b0 <dataConfigure+0xe8>)
 800c736:	4a1f      	ldr	r2, [pc, #124]	; (800c7b4 <dataConfigure+0xec>)
 800c738:	2114      	movs	r1, #20
 800c73a:	2014      	movs	r0, #20
 800c73c:	f7fe f916 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(185, 20, distanceHight, &Font16, WHITE, BLACK);
 800c740:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c744:	2300      	movs	r3, #0
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	23ff      	movs	r3, #255	; 0xff
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	4b18      	ldr	r3, [pc, #96]	; (800c7b0 <dataConfigure+0xe8>)
 800c74e:	2114      	movs	r1, #20
 800c750:	20b9      	movs	r0, #185	; 0xb9
 800c752:	f7fe f90b 	bl	800a96c <Paint_DrawString_EN>

    Paint_DrawString_EN(20, 40, "DISTANCE: ", &Font16, WHITE, BLACK);
 800c756:	2300      	movs	r3, #0
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	23ff      	movs	r3, #255	; 0xff
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	4b14      	ldr	r3, [pc, #80]	; (800c7b0 <dataConfigure+0xe8>)
 800c760:	4a15      	ldr	r2, [pc, #84]	; (800c7b8 <dataConfigure+0xf0>)
 800c762:	2128      	movs	r1, #40	; 0x28
 800c764:	2014      	movs	r0, #20
 800c766:	f7fe f901 	bl	800a96c <Paint_DrawString_EN>
    Paint_DrawString_EN(120, 40, distance, &Font16, WHITE, BLACK);
 800c76a:	f107 0208 	add.w	r2, r7, #8
 800c76e:	2300      	movs	r3, #0
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	23ff      	movs	r3, #255	; 0xff
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <dataConfigure+0xe8>)
 800c778:	2128      	movs	r1, #40	; 0x28
 800c77a:	2078      	movs	r0, #120	; 0x78
 800c77c:	f7fe f8f6 	bl	800a96c <Paint_DrawString_EN>


    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800c780:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <dataConfigure+0xf4>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4618      	mov	r0, r3
 800c786:	f7fd fe4f 	bl	800a428 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c78a:	20ff      	movs	r0, #255	; 0xff
 800c78c:	f7fd ffa6 	bl	800a6dc <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800c790:	4b06      	ldr	r3, [pc, #24]	; (800c7ac <dataConfigure+0xe4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a09      	ldr	r2, [pc, #36]	; (800c7bc <dataConfigure+0xf4>)
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	4611      	mov	r1, r2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fa72 	bl	800ac84 <DISPLAY_Display>
 800c7a0:	bf00      	nop
 800c7a2:	3770      	adds	r7, #112	; 0x70
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	08011864 	.word	0x08011864
 800c7ac:	200013c0 	.word	0x200013c0
 800c7b0:	20000024 	.word	0x20000024
 800c7b4:	080118f8 	.word	0x080118f8
 800c7b8:	08011908 	.word	0x08011908
 800c7bc:	200013c4 	.word	0x200013c4

0800c7c0 <SD_Init>:

#include "sd.h"
#include <stdio.h>

SD_CARD_STATUS SD_Init()
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
    SD_CARD_STATUS status = SD_CARD_BUSY;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	71fb      	strb	r3, [r7, #7]
    if (sd_mount() == SD_OK)
 800c7ca:	f7fe fff3 	bl	800b7b4 <sd_mount>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d101      	bne.n	800c7d8 <SD_Init+0x18>
    {
        return SD_CARD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e000      	b.n	800c7da <SD_Init+0x1a>
    }
    else
    {
        return SD_CARD_ERROR;
 800c7d8:	2301      	movs	r3, #1
    }
    return status;
};
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <SD_CreatFile>:

SD_CARD_STATUS SD_CreatFile(char *newForder, char *newFile, char *data)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b09e      	sub	sp, #120	; 0x78
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
    char forderPath[50];
    char filePath[50];
    memset(forderPath, 0, 50);
 800c7f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c7f4:	2232      	movs	r2, #50	; 0x32
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 f953 	bl	800caa4 <memset>
    sprintf(forderPath, "%s", newForder);
 800c7fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	491a      	ldr	r1, [pc, #104]	; (800c870 <SD_CreatFile+0x8c>)
 800c806:	4618      	mov	r0, r3
 800c808:	f001 f928 	bl	800da5c <siprintf>
    memset(filePath, 0, 50);
 800c80c:	f107 0310 	add.w	r3, r7, #16
 800c810:	2232      	movs	r2, #50	; 0x32
 800c812:	2100      	movs	r1, #0
 800c814:	4618      	mov	r0, r3
 800c816:	f000 f945 	bl	800caa4 <memset>
    sprintf(filePath, "%s\\%s.txt", newForder, newFile);
 800c81a:	f107 0010 	add.w	r0, r7, #16
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	4914      	ldr	r1, [pc, #80]	; (800c874 <SD_CreatFile+0x90>)
 800c824:	f001 f91a 	bl	800da5c <siprintf>

    if (sd_mount() == SD_OK)
 800c828:	f7fe ffc4 	bl	800b7b4 <sd_mount>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d118      	bne.n	800c864 <SD_CreatFile+0x80>
    {
        f_mkdir(forderPath);
 800c832:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c836:	4618      	mov	r0, r3
 800c838:	f7fd f8e5 	bl	8009a06 <f_mkdir>
        sd_check_space();
 800c83c:	f7fe ffdc 	bl	800b7f8 <sd_check_space>
        if (SD_creat_file(filePath) != SD_OK)
 800c840:	f107 0310 	add.w	r3, r7, #16
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff f839 	bl	800b8bc <SD_creat_file>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <SD_CreatFile+0x70>
        {
            return SD_CARD_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	e008      	b.n	800c866 <SD_CreatFile+0x82>
        }
        SD_sendData(filePath, data);
 800c854:	f107 0310 	add.w	r3, r7, #16
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff f854 	bl	800b908 <SD_sendData>
        return SD_CARD_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	e000      	b.n	800c866 <SD_CreatFile+0x82>
    }
    return SD_CARD_ERROR;
 800c864:	2301      	movs	r3, #1
};
 800c866:	4618      	mov	r0, r3
 800c868:	3778      	adds	r7, #120	; 0x78
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	08011914 	.word	0x08011914
 800c874:	08011918 	.word	0x08011918

0800c878 <startSIM>:
extern SIM7600 sim;
extern REALTIME realtimedata;
extern DEVICE device;

SIM startSIM()
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FLIGHTMODE, SET);
 800c87c:	2201      	movs	r2, #1
 800c87e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c882:	4806      	ldr	r0, [pc, #24]	; (800c89c <startSIM+0x24>)
 800c884:	f7f6 fd0e 	bl	80032a4 <HAL_GPIO_WritePin>
    // HAL_GPIO_WritePin(RESETSIM, SET);
    // HAL_Delay(1500);
    // HAL_GPIO_WritePin(RESETSIM, RESET);
    // HAL_Delay(1500);
    HAL_GPIO_WritePin(PWRKEY, SET);
 800c888:	2201      	movs	r2, #1
 800c88a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c88e:	4803      	ldr	r0, [pc, #12]	; (800c89c <startSIM+0x24>)
 800c890:	f7f6 fd08 	bl	80032a4 <HAL_GPIO_WritePin>
    // HAL_Delay(15000);
};
 800c894:	bf00      	nop
 800c896:	4618      	mov	r0, r3
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	40020400 	.word	0x40020400

0800c8a0 <simInit>:

SIM simInit(){
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
    SIM status = SIM_STATUS_BUSY;
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	71fb      	strb	r3, [r7, #7]
    SIM7600_init(&sim);
 800c8aa:	480b      	ldr	r0, [pc, #44]	; (800c8d8 <simInit+0x38>)
 800c8ac:	f7ff f84e 	bl	800b94c <SIM7600_init>
    if (SIM7600_Start(&sim) == SIM_OK)
 800c8b0:	4809      	ldr	r0, [pc, #36]	; (800c8d8 <simInit+0x38>)
 800c8b2:	f7ff f8e1 	bl	800ba78 <SIM7600_Start>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <simInit+0x20>

        status = SIM_STATUS_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	71fb      	strb	r3, [r7, #7]
    SIM7600_httpStart(&sim);
 800c8c0:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <simInit+0x38>)
 800c8c2:	f7ff f931 	bl	800bb28 <SIM7600_httpStart>

    SIM7600_setUrl(&sim, device.url);
 800c8c6:	4905      	ldr	r1, [pc, #20]	; (800c8dc <simInit+0x3c>)
 800c8c8:	4803      	ldr	r0, [pc, #12]	; (800c8d8 <simInit+0x38>)
 800c8ca:	f7ff f961 	bl	800bb90 <SIM7600_setUrl>

    return status;
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20000400 	.word	0x20000400
 800c8dc:	2000073b 	.word	0x2000073b

0800c8e0 <getDateTime>:

char getDateTime(REALTIME *realtimedata)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b08e      	sub	sp, #56	; 0x38
 800c8e4:	af02      	add	r7, sp, #8
 800c8e6:	6078      	str	r0, [r7, #4]
    memset((char *)realtimedata->dateTime, 0, 500);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 f8d7 	bl	800caa4 <memset>
    SIM7600_getTime(&sim);
 800c8f6:	481b      	ldr	r0, [pc, #108]	; (800c964 <getDateTime+0x84>)
 800c8f8:	f7ff f9e6 	bl	800bcc8 <SIM7600_getTime>
    char year[10];
    char month[10];
    char day[10];
    memset(year, 0, 10);
 800c8fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c900:	220a      	movs	r2, #10
 800c902:	2100      	movs	r1, #0
 800c904:	4618      	mov	r0, r3
 800c906:	f000 f8cd 	bl	800caa4 <memset>
    memset(month, 0, 10);
 800c90a:	f107 0318 	add.w	r3, r7, #24
 800c90e:	220a      	movs	r2, #10
 800c910:	2100      	movs	r1, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f000 f8c6 	bl	800caa4 <memset>
    memset(day, 0, 10);
 800c918:	f107 030c 	add.w	r3, r7, #12
 800c91c:	220a      	movs	r2, #10
 800c91e:	2100      	movs	r1, #0
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f8bf 	bl	800caa4 <memset>
 800c926:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <getDateTime+0x84>)
 800c928:	f8b3 301f 	ldrh.w	r3, [r3, #31]
 800c92c:	b29b      	uxth	r3, r3
    memcpy(year, (char *)&sim.rxBuffer[19], 2);
 800c92e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c930:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <getDateTime+0x84>)
 800c932:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    memcpy(month, (char *)&sim.rxBuffer[22], 2);
 800c934:	833b      	strh	r3, [r7, #24]
 800c936:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <getDateTime+0x84>)
 800c938:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 800c93c:	b29b      	uxth	r3, r3
    memcpy(day, (char *)&sim.rxBuffer[25], 2);
 800c93e:	81bb      	strh	r3, [r7, #12]
    sprintf((char *)realtimedata->dateTime, "%s %s %s", year, month, day);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f107 0118 	add.w	r1, r7, #24
 800c946:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c94a:	f107 030c 	add.w	r3, r7, #12
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	460b      	mov	r3, r1
 800c952:	4905      	ldr	r1, [pc, #20]	; (800c968 <getDateTime+0x88>)
 800c954:	f001 f882 	bl	800da5c <siprintf>
    return (char *)realtimedata->dateTime;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	b2db      	uxtb	r3, r3
};
 800c95c:	4618      	mov	r0, r3
 800c95e:	3730      	adds	r7, #48	; 0x30
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20000400 	.word	0x20000400
 800c968:	08011924 	.word	0x08011924

0800c96c <getRealTime>:
 * character array.
 *
 * @return a character array (string) containing the real-time value.
 */
char getRealTime(REALTIME *realtimedata)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08e      	sub	sp, #56	; 0x38
 800c970:	af02      	add	r7, sp, #8
 800c972:	6078      	str	r0, [r7, #4]
    memset((char *)realtimedata->realTime, 0, 500);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	330a      	adds	r3, #10
 800c978:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c97c:	2100      	movs	r1, #0
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 f890 	bl	800caa4 <memset>
    SIM7600_getTime(&sim);
 800c984:	481b      	ldr	r0, [pc, #108]	; (800c9f4 <getRealTime+0x88>)
 800c986:	f7ff f99f 	bl	800bcc8 <SIM7600_getTime>
    char hour[10];
    char minute[10];
    char second[10];
    memset(hour, 0, 10);
 800c98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c98e:	220a      	movs	r2, #10
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f886 	bl	800caa4 <memset>
    memset(minute, 0, 10);
 800c998:	f107 0318 	add.w	r3, r7, #24
 800c99c:	220a      	movs	r2, #10
 800c99e:	2100      	movs	r1, #0
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 f87f 	bl	800caa4 <memset>
    memset(second, 0, 10);
 800c9a6:	f107 030c 	add.w	r3, r7, #12
 800c9aa:	220a      	movs	r2, #10
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 f878 	bl	800caa4 <memset>
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <getRealTime+0x88>)
 800c9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    memcpy(hour, (char *)&sim.rxBuffer[28], 2);
 800c9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <getRealTime+0x88>)
 800c9bc:	f8b3 302b 	ldrh.w	r3, [r3, #43]	; 0x2b
 800c9c0:	b29b      	uxth	r3, r3
    memcpy(minute, (char *)&sim.rxBuffer[31], 2);
 800c9c2:	833b      	strh	r3, [r7, #24]
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <getRealTime+0x88>)
 800c9c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    memcpy(second, (char *)&sim.rxBuffer[34], 2);
 800c9c8:	81bb      	strh	r3, [r7, #12]
    sprintf((char *)realtimedata->realTime, "%s %s %s", hour, minute, second);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f103 000a 	add.w	r0, r3, #10
 800c9d0:	f107 0118 	add.w	r1, r7, #24
 800c9d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c9d8:	f107 030c 	add.w	r3, r7, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4905      	ldr	r1, [pc, #20]	; (800c9f8 <getRealTime+0x8c>)
 800c9e2:	f001 f83b 	bl	800da5c <siprintf>
    return (char *)realtimedata->realTime;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	330a      	adds	r3, #10
 800c9ea:	b2db      	uxtb	r3, r3
};
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3730      	adds	r7, #48	; 0x30
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20000400 	.word	0x20000400
 800c9f8:	08011924 	.word	0x08011924

0800c9fc <sendDataFirebase>:
 * Firebase.
 *
 * @return a SIM status, which can be either SIM_STATUS_OK or SIM_STATUS_ERROR.
 */
SIM sendDataFirebase(char *data)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
    if (SIM7600_httpPost(&sim, data) == SIM_OK)
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	4806      	ldr	r0, [pc, #24]	; (800ca20 <sendDataFirebase+0x24>)
 800ca08:	f7ff f8f4 	bl	800bbf4 <SIM7600_httpPost>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <sendDataFirebase+0x1a>
        return SIM_STATUS_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	e000      	b.n	800ca18 <sendDataFirebase+0x1c>
    return SIM_STATUS_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20000400 	.word	0x20000400

0800ca24 <__errno>:
 800ca24:	4b01      	ldr	r3, [pc, #4]	; (800ca2c <__errno+0x8>)
 800ca26:	6818      	ldr	r0, [r3, #0]
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	20000038 	.word	0x20000038

0800ca30 <__libc_init_array>:
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	2600      	movs	r6, #0
 800ca34:	4d0c      	ldr	r5, [pc, #48]	; (800ca68 <__libc_init_array+0x38>)
 800ca36:	4c0d      	ldr	r4, [pc, #52]	; (800ca6c <__libc_init_array+0x3c>)
 800ca38:	1b64      	subs	r4, r4, r5
 800ca3a:	10a4      	asrs	r4, r4, #2
 800ca3c:	42a6      	cmp	r6, r4
 800ca3e:	d109      	bne.n	800ca54 <__libc_init_array+0x24>
 800ca40:	f004 fcdc 	bl	80113fc <_init>
 800ca44:	2600      	movs	r6, #0
 800ca46:	4d0a      	ldr	r5, [pc, #40]	; (800ca70 <__libc_init_array+0x40>)
 800ca48:	4c0a      	ldr	r4, [pc, #40]	; (800ca74 <__libc_init_array+0x44>)
 800ca4a:	1b64      	subs	r4, r4, r5
 800ca4c:	10a4      	asrs	r4, r4, #2
 800ca4e:	42a6      	cmp	r6, r4
 800ca50:	d105      	bne.n	800ca5e <__libc_init_array+0x2e>
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca58:	4798      	blx	r3
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	e7ee      	b.n	800ca3c <__libc_init_array+0xc>
 800ca5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca62:	4798      	blx	r3
 800ca64:	3601      	adds	r6, #1
 800ca66:	e7f2      	b.n	800ca4e <__libc_init_array+0x1e>
 800ca68:	08013124 	.word	0x08013124
 800ca6c:	08013124 	.word	0x08013124
 800ca70:	08013124 	.word	0x08013124
 800ca74:	08013128 	.word	0x08013128

0800ca78 <malloc>:
 800ca78:	4b02      	ldr	r3, [pc, #8]	; (800ca84 <malloc+0xc>)
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	f000 b881 	b.w	800cb84 <_malloc_r>
 800ca82:	bf00      	nop
 800ca84:	20000038 	.word	0x20000038

0800ca88 <memcpy>:
 800ca88:	440a      	add	r2, r1
 800ca8a:	4291      	cmp	r1, r2
 800ca8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca90:	d100      	bne.n	800ca94 <memcpy+0xc>
 800ca92:	4770      	bx	lr
 800ca94:	b510      	push	{r4, lr}
 800ca96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca9a:	4291      	cmp	r1, r2
 800ca9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caa0:	d1f9      	bne.n	800ca96 <memcpy+0xe>
 800caa2:	bd10      	pop	{r4, pc}

0800caa4 <memset>:
 800caa4:	4603      	mov	r3, r0
 800caa6:	4402      	add	r2, r0
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d100      	bne.n	800caae <memset+0xa>
 800caac:	4770      	bx	lr
 800caae:	f803 1b01 	strb.w	r1, [r3], #1
 800cab2:	e7f9      	b.n	800caa8 <memset+0x4>

0800cab4 <_free_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4605      	mov	r5, r0
 800cab8:	2900      	cmp	r1, #0
 800caba:	d040      	beq.n	800cb3e <_free_r+0x8a>
 800cabc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac0:	1f0c      	subs	r4, r1, #4
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	bfb8      	it	lt
 800cac6:	18e4      	addlt	r4, r4, r3
 800cac8:	f003 fb6e 	bl	80101a8 <__malloc_lock>
 800cacc:	4a1c      	ldr	r2, [pc, #112]	; (800cb40 <_free_r+0x8c>)
 800cace:	6813      	ldr	r3, [r2, #0]
 800cad0:	b933      	cbnz	r3, 800cae0 <_free_r+0x2c>
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	6014      	str	r4, [r2, #0]
 800cad6:	4628      	mov	r0, r5
 800cad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cadc:	f003 bb6a 	b.w	80101b4 <__malloc_unlock>
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	d908      	bls.n	800caf6 <_free_r+0x42>
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	1821      	adds	r1, r4, r0
 800cae8:	428b      	cmp	r3, r1
 800caea:	bf01      	itttt	eq
 800caec:	6819      	ldreq	r1, [r3, #0]
 800caee:	685b      	ldreq	r3, [r3, #4]
 800caf0:	1809      	addeq	r1, r1, r0
 800caf2:	6021      	streq	r1, [r4, #0]
 800caf4:	e7ed      	b.n	800cad2 <_free_r+0x1e>
 800caf6:	461a      	mov	r2, r3
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	b10b      	cbz	r3, 800cb00 <_free_r+0x4c>
 800cafc:	42a3      	cmp	r3, r4
 800cafe:	d9fa      	bls.n	800caf6 <_free_r+0x42>
 800cb00:	6811      	ldr	r1, [r2, #0]
 800cb02:	1850      	adds	r0, r2, r1
 800cb04:	42a0      	cmp	r0, r4
 800cb06:	d10b      	bne.n	800cb20 <_free_r+0x6c>
 800cb08:	6820      	ldr	r0, [r4, #0]
 800cb0a:	4401      	add	r1, r0
 800cb0c:	1850      	adds	r0, r2, r1
 800cb0e:	4283      	cmp	r3, r0
 800cb10:	6011      	str	r1, [r2, #0]
 800cb12:	d1e0      	bne.n	800cad6 <_free_r+0x22>
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4401      	add	r1, r0
 800cb1a:	6011      	str	r1, [r2, #0]
 800cb1c:	6053      	str	r3, [r2, #4]
 800cb1e:	e7da      	b.n	800cad6 <_free_r+0x22>
 800cb20:	d902      	bls.n	800cb28 <_free_r+0x74>
 800cb22:	230c      	movs	r3, #12
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	e7d6      	b.n	800cad6 <_free_r+0x22>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	1821      	adds	r1, r4, r0
 800cb2c:	428b      	cmp	r3, r1
 800cb2e:	bf01      	itttt	eq
 800cb30:	6819      	ldreq	r1, [r3, #0]
 800cb32:	685b      	ldreq	r3, [r3, #4]
 800cb34:	1809      	addeq	r1, r1, r0
 800cb36:	6021      	streq	r1, [r4, #0]
 800cb38:	6063      	str	r3, [r4, #4]
 800cb3a:	6054      	str	r4, [r2, #4]
 800cb3c:	e7cb      	b.n	800cad6 <_free_r+0x22>
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	200013c8 	.word	0x200013c8

0800cb44 <sbrk_aligned>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	4e0e      	ldr	r6, [pc, #56]	; (800cb80 <sbrk_aligned+0x3c>)
 800cb48:	460c      	mov	r4, r1
 800cb4a:	6831      	ldr	r1, [r6, #0]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	b911      	cbnz	r1, 800cb56 <sbrk_aligned+0x12>
 800cb50:	f000 ff70 	bl	800da34 <_sbrk_r>
 800cb54:	6030      	str	r0, [r6, #0]
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 ff6b 	bl	800da34 <_sbrk_r>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d00a      	beq.n	800cb78 <sbrk_aligned+0x34>
 800cb62:	1cc4      	adds	r4, r0, #3
 800cb64:	f024 0403 	bic.w	r4, r4, #3
 800cb68:	42a0      	cmp	r0, r4
 800cb6a:	d007      	beq.n	800cb7c <sbrk_aligned+0x38>
 800cb6c:	1a21      	subs	r1, r4, r0
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 ff60 	bl	800da34 <_sbrk_r>
 800cb74:	3001      	adds	r0, #1
 800cb76:	d101      	bne.n	800cb7c <sbrk_aligned+0x38>
 800cb78:	f04f 34ff 	mov.w	r4, #4294967295
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	200013cc 	.word	0x200013cc

0800cb84 <_malloc_r>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	1ccd      	adds	r5, r1, #3
 800cb8a:	f025 0503 	bic.w	r5, r5, #3
 800cb8e:	3508      	adds	r5, #8
 800cb90:	2d0c      	cmp	r5, #12
 800cb92:	bf38      	it	cc
 800cb94:	250c      	movcc	r5, #12
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	4607      	mov	r7, r0
 800cb9a:	db01      	blt.n	800cba0 <_malloc_r+0x1c>
 800cb9c:	42a9      	cmp	r1, r5
 800cb9e:	d905      	bls.n	800cbac <_malloc_r+0x28>
 800cba0:	230c      	movs	r3, #12
 800cba2:	2600      	movs	r6, #0
 800cba4:	603b      	str	r3, [r7, #0]
 800cba6:	4630      	mov	r0, r6
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbac:	4e2e      	ldr	r6, [pc, #184]	; (800cc68 <_malloc_r+0xe4>)
 800cbae:	f003 fafb 	bl	80101a8 <__malloc_lock>
 800cbb2:	6833      	ldr	r3, [r6, #0]
 800cbb4:	461c      	mov	r4, r3
 800cbb6:	bb34      	cbnz	r4, 800cc06 <_malloc_r+0x82>
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f7ff ffc2 	bl	800cb44 <sbrk_aligned>
 800cbc0:	1c43      	adds	r3, r0, #1
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	d14d      	bne.n	800cc62 <_malloc_r+0xde>
 800cbc6:	6834      	ldr	r4, [r6, #0]
 800cbc8:	4626      	mov	r6, r4
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	d140      	bne.n	800cc50 <_malloc_r+0xcc>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	eb04 0803 	add.w	r8, r4, r3
 800cbd8:	f000 ff2c 	bl	800da34 <_sbrk_r>
 800cbdc:	4580      	cmp	r8, r0
 800cbde:	d13a      	bne.n	800cc56 <_malloc_r+0xd2>
 800cbe0:	6821      	ldr	r1, [r4, #0]
 800cbe2:	3503      	adds	r5, #3
 800cbe4:	1a6d      	subs	r5, r5, r1
 800cbe6:	f025 0503 	bic.w	r5, r5, #3
 800cbea:	3508      	adds	r5, #8
 800cbec:	2d0c      	cmp	r5, #12
 800cbee:	bf38      	it	cc
 800cbf0:	250c      	movcc	r5, #12
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	f7ff ffa5 	bl	800cb44 <sbrk_aligned>
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d02b      	beq.n	800cc56 <_malloc_r+0xd2>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	442b      	add	r3, r5
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	e00e      	b.n	800cc24 <_malloc_r+0xa0>
 800cc06:	6822      	ldr	r2, [r4, #0]
 800cc08:	1b52      	subs	r2, r2, r5
 800cc0a:	d41e      	bmi.n	800cc4a <_malloc_r+0xc6>
 800cc0c:	2a0b      	cmp	r2, #11
 800cc0e:	d916      	bls.n	800cc3e <_malloc_r+0xba>
 800cc10:	1961      	adds	r1, r4, r5
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	6025      	str	r5, [r4, #0]
 800cc16:	bf18      	it	ne
 800cc18:	6059      	strne	r1, [r3, #4]
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	bf08      	it	eq
 800cc1e:	6031      	streq	r1, [r6, #0]
 800cc20:	5162      	str	r2, [r4, r5]
 800cc22:	604b      	str	r3, [r1, #4]
 800cc24:	4638      	mov	r0, r7
 800cc26:	f104 060b 	add.w	r6, r4, #11
 800cc2a:	f003 fac3 	bl	80101b4 <__malloc_unlock>
 800cc2e:	f026 0607 	bic.w	r6, r6, #7
 800cc32:	1d23      	adds	r3, r4, #4
 800cc34:	1af2      	subs	r2, r6, r3
 800cc36:	d0b6      	beq.n	800cba6 <_malloc_r+0x22>
 800cc38:	1b9b      	subs	r3, r3, r6
 800cc3a:	50a3      	str	r3, [r4, r2]
 800cc3c:	e7b3      	b.n	800cba6 <_malloc_r+0x22>
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	bf0c      	ite	eq
 800cc44:	6032      	streq	r2, [r6, #0]
 800cc46:	605a      	strne	r2, [r3, #4]
 800cc48:	e7ec      	b.n	800cc24 <_malloc_r+0xa0>
 800cc4a:	4623      	mov	r3, r4
 800cc4c:	6864      	ldr	r4, [r4, #4]
 800cc4e:	e7b2      	b.n	800cbb6 <_malloc_r+0x32>
 800cc50:	4634      	mov	r4, r6
 800cc52:	6876      	ldr	r6, [r6, #4]
 800cc54:	e7b9      	b.n	800cbca <_malloc_r+0x46>
 800cc56:	230c      	movs	r3, #12
 800cc58:	4638      	mov	r0, r7
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	f003 faaa 	bl	80101b4 <__malloc_unlock>
 800cc60:	e7a1      	b.n	800cba6 <_malloc_r+0x22>
 800cc62:	6025      	str	r5, [r4, #0]
 800cc64:	e7de      	b.n	800cc24 <_malloc_r+0xa0>
 800cc66:	bf00      	nop
 800cc68:	200013c8 	.word	0x200013c8

0800cc6c <__cvt>:
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc72:	461f      	mov	r7, r3
 800cc74:	bfbb      	ittet	lt
 800cc76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cc7a:	461f      	movlt	r7, r3
 800cc7c:	2300      	movge	r3, #0
 800cc7e:	232d      	movlt	r3, #45	; 0x2d
 800cc80:	b088      	sub	sp, #32
 800cc82:	4614      	mov	r4, r2
 800cc84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800cc88:	7013      	strb	r3, [r2, #0]
 800cc8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800cc90:	f023 0820 	bic.w	r8, r3, #32
 800cc94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc98:	d005      	beq.n	800cca6 <__cvt+0x3a>
 800cc9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cc9e:	d100      	bne.n	800cca2 <__cvt+0x36>
 800cca0:	3501      	adds	r5, #1
 800cca2:	2302      	movs	r3, #2
 800cca4:	e000      	b.n	800cca8 <__cvt+0x3c>
 800cca6:	2303      	movs	r3, #3
 800cca8:	aa07      	add	r2, sp, #28
 800ccaa:	9204      	str	r2, [sp, #16]
 800ccac:	aa06      	add	r2, sp, #24
 800ccae:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ccb2:	e9cd 3500 	strd	r3, r5, [sp]
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	463b      	mov	r3, r7
 800ccba:	f001 fee1 	bl	800ea80 <_dtoa_r>
 800ccbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	d102      	bne.n	800cccc <__cvt+0x60>
 800ccc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccc8:	07db      	lsls	r3, r3, #31
 800ccca:	d522      	bpl.n	800cd12 <__cvt+0xa6>
 800cccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ccd0:	eb06 0905 	add.w	r9, r6, r5
 800ccd4:	d110      	bne.n	800ccf8 <__cvt+0x8c>
 800ccd6:	7833      	ldrb	r3, [r6, #0]
 800ccd8:	2b30      	cmp	r3, #48	; 0x30
 800ccda:	d10a      	bne.n	800ccf2 <__cvt+0x86>
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2300      	movs	r3, #0
 800cce0:	4620      	mov	r0, r4
 800cce2:	4639      	mov	r1, r7
 800cce4:	f7f3 fe78 	bl	80009d8 <__aeabi_dcmpeq>
 800cce8:	b918      	cbnz	r0, 800ccf2 <__cvt+0x86>
 800ccea:	f1c5 0501 	rsb	r5, r5, #1
 800ccee:	f8ca 5000 	str.w	r5, [sl]
 800ccf2:	f8da 3000 	ldr.w	r3, [sl]
 800ccf6:	4499      	add	r9, r3
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f7f3 fe6a 	bl	80009d8 <__aeabi_dcmpeq>
 800cd04:	b108      	cbz	r0, 800cd0a <__cvt+0x9e>
 800cd06:	f8cd 901c 	str.w	r9, [sp, #28]
 800cd0a:	2230      	movs	r2, #48	; 0x30
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	454b      	cmp	r3, r9
 800cd10:	d307      	bcc.n	800cd22 <__cvt+0xb6>
 800cd12:	4630      	mov	r0, r6
 800cd14:	9b07      	ldr	r3, [sp, #28]
 800cd16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cd18:	1b9b      	subs	r3, r3, r6
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	b008      	add	sp, #32
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	1c59      	adds	r1, r3, #1
 800cd24:	9107      	str	r1, [sp, #28]
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	e7f0      	b.n	800cd0c <__cvt+0xa0>

0800cd2a <__exponent>:
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	f803 2b02 	strb.w	r2, [r3], #2
 800cd34:	bfb6      	itet	lt
 800cd36:	222d      	movlt	r2, #45	; 0x2d
 800cd38:	222b      	movge	r2, #43	; 0x2b
 800cd3a:	4249      	neglt	r1, r1
 800cd3c:	2909      	cmp	r1, #9
 800cd3e:	7042      	strb	r2, [r0, #1]
 800cd40:	dd2b      	ble.n	800cd9a <__exponent+0x70>
 800cd42:	f10d 0407 	add.w	r4, sp, #7
 800cd46:	46a4      	mov	ip, r4
 800cd48:	270a      	movs	r7, #10
 800cd4a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cd4e:	460a      	mov	r2, r1
 800cd50:	46a6      	mov	lr, r4
 800cd52:	fb07 1516 	mls	r5, r7, r6, r1
 800cd56:	2a63      	cmp	r2, #99	; 0x63
 800cd58:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cd66:	dcf0      	bgt.n	800cd4a <__exponent+0x20>
 800cd68:	3130      	adds	r1, #48	; 0x30
 800cd6a:	f1ae 0502 	sub.w	r5, lr, #2
 800cd6e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cd72:	4629      	mov	r1, r5
 800cd74:	1c44      	adds	r4, r0, #1
 800cd76:	4561      	cmp	r1, ip
 800cd78:	d30a      	bcc.n	800cd90 <__exponent+0x66>
 800cd7a:	f10d 0209 	add.w	r2, sp, #9
 800cd7e:	eba2 020e 	sub.w	r2, r2, lr
 800cd82:	4565      	cmp	r5, ip
 800cd84:	bf88      	it	hi
 800cd86:	2200      	movhi	r2, #0
 800cd88:	4413      	add	r3, r2
 800cd8a:	1a18      	subs	r0, r3, r0
 800cd8c:	b003      	add	sp, #12
 800cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd90:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd94:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd98:	e7ed      	b.n	800cd76 <__exponent+0x4c>
 800cd9a:	2330      	movs	r3, #48	; 0x30
 800cd9c:	3130      	adds	r1, #48	; 0x30
 800cd9e:	7083      	strb	r3, [r0, #2]
 800cda0:	70c1      	strb	r1, [r0, #3]
 800cda2:	1d03      	adds	r3, r0, #4
 800cda4:	e7f1      	b.n	800cd8a <__exponent+0x60>
	...

0800cda8 <_printf_float>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	b091      	sub	sp, #68	; 0x44
 800cdae:	460c      	mov	r4, r1
 800cdb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cdb4:	4616      	mov	r6, r2
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	4605      	mov	r5, r0
 800cdba:	f003 f969 	bl	8010090 <_localeconv_r>
 800cdbe:	6803      	ldr	r3, [r0, #0]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc4:	f7f3 f9dc 	bl	8000180 <strlen>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	930e      	str	r3, [sp, #56]	; 0x38
 800cdcc:	f8d8 3000 	ldr.w	r3, [r8]
 800cdd0:	900a      	str	r0, [sp, #40]	; 0x28
 800cdd2:	3307      	adds	r3, #7
 800cdd4:	f023 0307 	bic.w	r3, r3, #7
 800cdd8:	f103 0208 	add.w	r2, r3, #8
 800cddc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cde0:	f8d4 b000 	ldr.w	fp, [r4]
 800cde4:	f8c8 2000 	str.w	r2, [r8]
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cdf0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800cdf4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800cdf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfe:	4640      	mov	r0, r8
 800ce00:	4b9c      	ldr	r3, [pc, #624]	; (800d074 <_printf_float+0x2cc>)
 800ce02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce04:	f7f3 fe1a 	bl	8000a3c <__aeabi_dcmpun>
 800ce08:	bb70      	cbnz	r0, 800ce68 <_printf_float+0xc0>
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0e:	4640      	mov	r0, r8
 800ce10:	4b98      	ldr	r3, [pc, #608]	; (800d074 <_printf_float+0x2cc>)
 800ce12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce14:	f7f3 fdf4 	bl	8000a00 <__aeabi_dcmple>
 800ce18:	bb30      	cbnz	r0, 800ce68 <_printf_float+0xc0>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4640      	mov	r0, r8
 800ce20:	4651      	mov	r1, sl
 800ce22:	f7f3 fde3 	bl	80009ec <__aeabi_dcmplt>
 800ce26:	b110      	cbz	r0, 800ce2e <_printf_float+0x86>
 800ce28:	232d      	movs	r3, #45	; 0x2d
 800ce2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce2e:	4b92      	ldr	r3, [pc, #584]	; (800d078 <_printf_float+0x2d0>)
 800ce30:	4892      	ldr	r0, [pc, #584]	; (800d07c <_printf_float+0x2d4>)
 800ce32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ce36:	bf94      	ite	ls
 800ce38:	4698      	movls	r8, r3
 800ce3a:	4680      	movhi	r8, r0
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	f04f 0a00 	mov.w	sl, #0
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	f02b 0304 	bic.w	r3, fp, #4
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	4633      	mov	r3, r6
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	9700      	str	r7, [sp, #0]
 800ce52:	aa0f      	add	r2, sp, #60	; 0x3c
 800ce54:	f000 f9d4 	bl	800d200 <_printf_common>
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f040 8090 	bne.w	800cf7e <_printf_float+0x1d6>
 800ce5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce62:	b011      	add	sp, #68	; 0x44
 800ce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce68:	4642      	mov	r2, r8
 800ce6a:	4653      	mov	r3, sl
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	4651      	mov	r1, sl
 800ce70:	f7f3 fde4 	bl	8000a3c <__aeabi_dcmpun>
 800ce74:	b148      	cbz	r0, 800ce8a <_printf_float+0xe2>
 800ce76:	f1ba 0f00 	cmp.w	sl, #0
 800ce7a:	bfb8      	it	lt
 800ce7c:	232d      	movlt	r3, #45	; 0x2d
 800ce7e:	4880      	ldr	r0, [pc, #512]	; (800d080 <_printf_float+0x2d8>)
 800ce80:	bfb8      	it	lt
 800ce82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce86:	4b7f      	ldr	r3, [pc, #508]	; (800d084 <_printf_float+0x2dc>)
 800ce88:	e7d3      	b.n	800ce32 <_printf_float+0x8a>
 800ce8a:	6863      	ldr	r3, [r4, #4]
 800ce8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	d142      	bne.n	800cf1a <_printf_float+0x172>
 800ce94:	2306      	movs	r3, #6
 800ce96:	6063      	str	r3, [r4, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	9206      	str	r2, [sp, #24]
 800ce9c:	aa0e      	add	r2, sp, #56	; 0x38
 800ce9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800cea2:	aa0d      	add	r2, sp, #52	; 0x34
 800cea4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800cea8:	9203      	str	r2, [sp, #12]
 800ceaa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ceae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	6863      	ldr	r3, [r4, #4]
 800ceb6:	4642      	mov	r2, r8
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	4628      	mov	r0, r5
 800cebc:	4653      	mov	r3, sl
 800cebe:	910b      	str	r1, [sp, #44]	; 0x2c
 800cec0:	f7ff fed4 	bl	800cc6c <__cvt>
 800cec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cec6:	4680      	mov	r8, r0
 800cec8:	2947      	cmp	r1, #71	; 0x47
 800ceca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cecc:	d108      	bne.n	800cee0 <_printf_float+0x138>
 800cece:	1cc8      	adds	r0, r1, #3
 800ced0:	db02      	blt.n	800ced8 <_printf_float+0x130>
 800ced2:	6863      	ldr	r3, [r4, #4]
 800ced4:	4299      	cmp	r1, r3
 800ced6:	dd40      	ble.n	800cf5a <_printf_float+0x1b2>
 800ced8:	f1a9 0902 	sub.w	r9, r9, #2
 800cedc:	fa5f f989 	uxtb.w	r9, r9
 800cee0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cee4:	d81f      	bhi.n	800cf26 <_printf_float+0x17e>
 800cee6:	464a      	mov	r2, r9
 800cee8:	3901      	subs	r1, #1
 800ceea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ceee:	910d      	str	r1, [sp, #52]	; 0x34
 800cef0:	f7ff ff1b 	bl	800cd2a <__exponent>
 800cef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cef6:	4682      	mov	sl, r0
 800cef8:	1813      	adds	r3, r2, r0
 800cefa:	2a01      	cmp	r2, #1
 800cefc:	6123      	str	r3, [r4, #16]
 800cefe:	dc02      	bgt.n	800cf06 <_printf_float+0x15e>
 800cf00:	6822      	ldr	r2, [r4, #0]
 800cf02:	07d2      	lsls	r2, r2, #31
 800cf04:	d501      	bpl.n	800cf0a <_printf_float+0x162>
 800cf06:	3301      	adds	r3, #1
 800cf08:	6123      	str	r3, [r4, #16]
 800cf0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d09b      	beq.n	800ce4a <_printf_float+0xa2>
 800cf12:	232d      	movs	r3, #45	; 0x2d
 800cf14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf18:	e797      	b.n	800ce4a <_printf_float+0xa2>
 800cf1a:	2947      	cmp	r1, #71	; 0x47
 800cf1c:	d1bc      	bne.n	800ce98 <_printf_float+0xf0>
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1ba      	bne.n	800ce98 <_printf_float+0xf0>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e7b7      	b.n	800ce96 <_printf_float+0xee>
 800cf26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cf2a:	d118      	bne.n	800cf5e <_printf_float+0x1b6>
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	6863      	ldr	r3, [r4, #4]
 800cf30:	dd0b      	ble.n	800cf4a <_printf_float+0x1a2>
 800cf32:	6121      	str	r1, [r4, #16]
 800cf34:	b913      	cbnz	r3, 800cf3c <_printf_float+0x194>
 800cf36:	6822      	ldr	r2, [r4, #0]
 800cf38:	07d0      	lsls	r0, r2, #31
 800cf3a:	d502      	bpl.n	800cf42 <_printf_float+0x19a>
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	440b      	add	r3, r1
 800cf40:	6123      	str	r3, [r4, #16]
 800cf42:	f04f 0a00 	mov.w	sl, #0
 800cf46:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf48:	e7df      	b.n	800cf0a <_printf_float+0x162>
 800cf4a:	b913      	cbnz	r3, 800cf52 <_printf_float+0x1aa>
 800cf4c:	6822      	ldr	r2, [r4, #0]
 800cf4e:	07d2      	lsls	r2, r2, #31
 800cf50:	d501      	bpl.n	800cf56 <_printf_float+0x1ae>
 800cf52:	3302      	adds	r3, #2
 800cf54:	e7f4      	b.n	800cf40 <_printf_float+0x198>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e7f2      	b.n	800cf40 <_printf_float+0x198>
 800cf5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf60:	4299      	cmp	r1, r3
 800cf62:	db05      	blt.n	800cf70 <_printf_float+0x1c8>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	6121      	str	r1, [r4, #16]
 800cf68:	07d8      	lsls	r0, r3, #31
 800cf6a:	d5ea      	bpl.n	800cf42 <_printf_float+0x19a>
 800cf6c:	1c4b      	adds	r3, r1, #1
 800cf6e:	e7e7      	b.n	800cf40 <_printf_float+0x198>
 800cf70:	2900      	cmp	r1, #0
 800cf72:	bfcc      	ite	gt
 800cf74:	2201      	movgt	r2, #1
 800cf76:	f1c1 0202 	rsble	r2, r1, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	e7e0      	b.n	800cf40 <_printf_float+0x198>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	055a      	lsls	r2, r3, #21
 800cf82:	d407      	bmi.n	800cf94 <_printf_float+0x1ec>
 800cf84:	6923      	ldr	r3, [r4, #16]
 800cf86:	4642      	mov	r2, r8
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	d12b      	bne.n	800cfea <_printf_float+0x242>
 800cf92:	e764      	b.n	800ce5e <_printf_float+0xb6>
 800cf94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf98:	f240 80dd 	bls.w	800d156 <_printf_float+0x3ae>
 800cf9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f7f3 fd18 	bl	80009d8 <__aeabi_dcmpeq>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d033      	beq.n	800d014 <_printf_float+0x26c>
 800cfac:	2301      	movs	r3, #1
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	4a35      	ldr	r2, [pc, #212]	; (800d088 <_printf_float+0x2e0>)
 800cfb4:	47b8      	blx	r7
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	f43f af51 	beq.w	800ce5e <_printf_float+0xb6>
 800cfbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	db02      	blt.n	800cfca <_printf_float+0x222>
 800cfc4:	6823      	ldr	r3, [r4, #0]
 800cfc6:	07d8      	lsls	r0, r3, #31
 800cfc8:	d50f      	bpl.n	800cfea <_printf_float+0x242>
 800cfca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	47b8      	blx	r7
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	f43f af42 	beq.w	800ce5e <_printf_float+0xb6>
 800cfda:	f04f 0800 	mov.w	r8, #0
 800cfde:	f104 091a 	add.w	r9, r4, #26
 800cfe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	4543      	cmp	r3, r8
 800cfe8:	dc09      	bgt.n	800cffe <_printf_float+0x256>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	079b      	lsls	r3, r3, #30
 800cfee:	f100 8102 	bmi.w	800d1f6 <_printf_float+0x44e>
 800cff2:	68e0      	ldr	r0, [r4, #12]
 800cff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cff6:	4298      	cmp	r0, r3
 800cff8:	bfb8      	it	lt
 800cffa:	4618      	movlt	r0, r3
 800cffc:	e731      	b.n	800ce62 <_printf_float+0xba>
 800cffe:	2301      	movs	r3, #1
 800d000:	464a      	mov	r2, r9
 800d002:	4631      	mov	r1, r6
 800d004:	4628      	mov	r0, r5
 800d006:	47b8      	blx	r7
 800d008:	3001      	adds	r0, #1
 800d00a:	f43f af28 	beq.w	800ce5e <_printf_float+0xb6>
 800d00e:	f108 0801 	add.w	r8, r8, #1
 800d012:	e7e6      	b.n	800cfe2 <_printf_float+0x23a>
 800d014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d016:	2b00      	cmp	r3, #0
 800d018:	dc38      	bgt.n	800d08c <_printf_float+0x2e4>
 800d01a:	2301      	movs	r3, #1
 800d01c:	4631      	mov	r1, r6
 800d01e:	4628      	mov	r0, r5
 800d020:	4a19      	ldr	r2, [pc, #100]	; (800d088 <_printf_float+0x2e0>)
 800d022:	47b8      	blx	r7
 800d024:	3001      	adds	r0, #1
 800d026:	f43f af1a 	beq.w	800ce5e <_printf_float+0xb6>
 800d02a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d02e:	4313      	orrs	r3, r2
 800d030:	d102      	bne.n	800d038 <_printf_float+0x290>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	07d9      	lsls	r1, r3, #31
 800d036:	d5d8      	bpl.n	800cfea <_printf_float+0x242>
 800d038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d03c:	4631      	mov	r1, r6
 800d03e:	4628      	mov	r0, r5
 800d040:	47b8      	blx	r7
 800d042:	3001      	adds	r0, #1
 800d044:	f43f af0b 	beq.w	800ce5e <_printf_float+0xb6>
 800d048:	f04f 0900 	mov.w	r9, #0
 800d04c:	f104 0a1a 	add.w	sl, r4, #26
 800d050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d052:	425b      	negs	r3, r3
 800d054:	454b      	cmp	r3, r9
 800d056:	dc01      	bgt.n	800d05c <_printf_float+0x2b4>
 800d058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d05a:	e794      	b.n	800cf86 <_printf_float+0x1de>
 800d05c:	2301      	movs	r3, #1
 800d05e:	4652      	mov	r2, sl
 800d060:	4631      	mov	r1, r6
 800d062:	4628      	mov	r0, r5
 800d064:	47b8      	blx	r7
 800d066:	3001      	adds	r0, #1
 800d068:	f43f aef9 	beq.w	800ce5e <_printf_float+0xb6>
 800d06c:	f109 0901 	add.w	r9, r9, #1
 800d070:	e7ee      	b.n	800d050 <_printf_float+0x2a8>
 800d072:	bf00      	nop
 800d074:	7fefffff 	.word	0x7fefffff
 800d078:	08012c70 	.word	0x08012c70
 800d07c:	08012c74 	.word	0x08012c74
 800d080:	08012c7c 	.word	0x08012c7c
 800d084:	08012c78 	.word	0x08012c78
 800d088:	08012c80 	.word	0x08012c80
 800d08c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d08e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d090:	429a      	cmp	r2, r3
 800d092:	bfa8      	it	ge
 800d094:	461a      	movge	r2, r3
 800d096:	2a00      	cmp	r2, #0
 800d098:	4691      	mov	r9, r2
 800d09a:	dc37      	bgt.n	800d10c <_printf_float+0x364>
 800d09c:	f04f 0b00 	mov.w	fp, #0
 800d0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0a4:	f104 021a 	add.w	r2, r4, #26
 800d0a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d0ac:	ebaa 0309 	sub.w	r3, sl, r9
 800d0b0:	455b      	cmp	r3, fp
 800d0b2:	dc33      	bgt.n	800d11c <_printf_float+0x374>
 800d0b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	db3b      	blt.n	800d134 <_printf_float+0x38c>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	07da      	lsls	r2, r3, #31
 800d0c0:	d438      	bmi.n	800d134 <_printf_float+0x38c>
 800d0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0c6:	eba3 020a 	sub.w	r2, r3, sl
 800d0ca:	eba3 0901 	sub.w	r9, r3, r1
 800d0ce:	4591      	cmp	r9, r2
 800d0d0:	bfa8      	it	ge
 800d0d2:	4691      	movge	r9, r2
 800d0d4:	f1b9 0f00 	cmp.w	r9, #0
 800d0d8:	dc34      	bgt.n	800d144 <_printf_float+0x39c>
 800d0da:	f04f 0800 	mov.w	r8, #0
 800d0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0e2:	f104 0a1a 	add.w	sl, r4, #26
 800d0e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d0ea:	1a9b      	subs	r3, r3, r2
 800d0ec:	eba3 0309 	sub.w	r3, r3, r9
 800d0f0:	4543      	cmp	r3, r8
 800d0f2:	f77f af7a 	ble.w	800cfea <_printf_float+0x242>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	4652      	mov	r2, sl
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	47b8      	blx	r7
 800d100:	3001      	adds	r0, #1
 800d102:	f43f aeac 	beq.w	800ce5e <_printf_float+0xb6>
 800d106:	f108 0801 	add.w	r8, r8, #1
 800d10a:	e7ec      	b.n	800d0e6 <_printf_float+0x33e>
 800d10c:	4613      	mov	r3, r2
 800d10e:	4631      	mov	r1, r6
 800d110:	4642      	mov	r2, r8
 800d112:	4628      	mov	r0, r5
 800d114:	47b8      	blx	r7
 800d116:	3001      	adds	r0, #1
 800d118:	d1c0      	bne.n	800d09c <_printf_float+0x2f4>
 800d11a:	e6a0      	b.n	800ce5e <_printf_float+0xb6>
 800d11c:	2301      	movs	r3, #1
 800d11e:	4631      	mov	r1, r6
 800d120:	4628      	mov	r0, r5
 800d122:	920b      	str	r2, [sp, #44]	; 0x2c
 800d124:	47b8      	blx	r7
 800d126:	3001      	adds	r0, #1
 800d128:	f43f ae99 	beq.w	800ce5e <_printf_float+0xb6>
 800d12c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d12e:	f10b 0b01 	add.w	fp, fp, #1
 800d132:	e7b9      	b.n	800d0a8 <_printf_float+0x300>
 800d134:	4631      	mov	r1, r6
 800d136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d13a:	4628      	mov	r0, r5
 800d13c:	47b8      	blx	r7
 800d13e:	3001      	adds	r0, #1
 800d140:	d1bf      	bne.n	800d0c2 <_printf_float+0x31a>
 800d142:	e68c      	b.n	800ce5e <_printf_float+0xb6>
 800d144:	464b      	mov	r3, r9
 800d146:	4631      	mov	r1, r6
 800d148:	4628      	mov	r0, r5
 800d14a:	eb08 020a 	add.w	r2, r8, sl
 800d14e:	47b8      	blx	r7
 800d150:	3001      	adds	r0, #1
 800d152:	d1c2      	bne.n	800d0da <_printf_float+0x332>
 800d154:	e683      	b.n	800ce5e <_printf_float+0xb6>
 800d156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d158:	2a01      	cmp	r2, #1
 800d15a:	dc01      	bgt.n	800d160 <_printf_float+0x3b8>
 800d15c:	07db      	lsls	r3, r3, #31
 800d15e:	d537      	bpl.n	800d1d0 <_printf_float+0x428>
 800d160:	2301      	movs	r3, #1
 800d162:	4642      	mov	r2, r8
 800d164:	4631      	mov	r1, r6
 800d166:	4628      	mov	r0, r5
 800d168:	47b8      	blx	r7
 800d16a:	3001      	adds	r0, #1
 800d16c:	f43f ae77 	beq.w	800ce5e <_printf_float+0xb6>
 800d170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d174:	4631      	mov	r1, r6
 800d176:	4628      	mov	r0, r5
 800d178:	47b8      	blx	r7
 800d17a:	3001      	adds	r0, #1
 800d17c:	f43f ae6f 	beq.w	800ce5e <_printf_float+0xb6>
 800d180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d184:	2200      	movs	r2, #0
 800d186:	2300      	movs	r3, #0
 800d188:	f7f3 fc26 	bl	80009d8 <__aeabi_dcmpeq>
 800d18c:	b9d8      	cbnz	r0, 800d1c6 <_printf_float+0x41e>
 800d18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d190:	f108 0201 	add.w	r2, r8, #1
 800d194:	3b01      	subs	r3, #1
 800d196:	4631      	mov	r1, r6
 800d198:	4628      	mov	r0, r5
 800d19a:	47b8      	blx	r7
 800d19c:	3001      	adds	r0, #1
 800d19e:	d10e      	bne.n	800d1be <_printf_float+0x416>
 800d1a0:	e65d      	b.n	800ce5e <_printf_float+0xb6>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	464a      	mov	r2, r9
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	47b8      	blx	r7
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	f43f ae56 	beq.w	800ce5e <_printf_float+0xb6>
 800d1b2:	f108 0801 	add.w	r8, r8, #1
 800d1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	4543      	cmp	r3, r8
 800d1bc:	dcf1      	bgt.n	800d1a2 <_printf_float+0x3fa>
 800d1be:	4653      	mov	r3, sl
 800d1c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d1c4:	e6e0      	b.n	800cf88 <_printf_float+0x1e0>
 800d1c6:	f04f 0800 	mov.w	r8, #0
 800d1ca:	f104 091a 	add.w	r9, r4, #26
 800d1ce:	e7f2      	b.n	800d1b6 <_printf_float+0x40e>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	4642      	mov	r2, r8
 800d1d4:	e7df      	b.n	800d196 <_printf_float+0x3ee>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	464a      	mov	r2, r9
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b8      	blx	r7
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	f43f ae3c 	beq.w	800ce5e <_printf_float+0xb6>
 800d1e6:	f108 0801 	add.w	r8, r8, #1
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1ee:	1a5b      	subs	r3, r3, r1
 800d1f0:	4543      	cmp	r3, r8
 800d1f2:	dcf0      	bgt.n	800d1d6 <_printf_float+0x42e>
 800d1f4:	e6fd      	b.n	800cff2 <_printf_float+0x24a>
 800d1f6:	f04f 0800 	mov.w	r8, #0
 800d1fa:	f104 0919 	add.w	r9, r4, #25
 800d1fe:	e7f4      	b.n	800d1ea <_printf_float+0x442>

0800d200 <_printf_common>:
 800d200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d204:	4616      	mov	r6, r2
 800d206:	4699      	mov	r9, r3
 800d208:	688a      	ldr	r2, [r1, #8]
 800d20a:	690b      	ldr	r3, [r1, #16]
 800d20c:	4607      	mov	r7, r0
 800d20e:	4293      	cmp	r3, r2
 800d210:	bfb8      	it	lt
 800d212:	4613      	movlt	r3, r2
 800d214:	6033      	str	r3, [r6, #0]
 800d216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d21a:	460c      	mov	r4, r1
 800d21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d220:	b10a      	cbz	r2, 800d226 <_printf_common+0x26>
 800d222:	3301      	adds	r3, #1
 800d224:	6033      	str	r3, [r6, #0]
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	0699      	lsls	r1, r3, #26
 800d22a:	bf42      	ittt	mi
 800d22c:	6833      	ldrmi	r3, [r6, #0]
 800d22e:	3302      	addmi	r3, #2
 800d230:	6033      	strmi	r3, [r6, #0]
 800d232:	6825      	ldr	r5, [r4, #0]
 800d234:	f015 0506 	ands.w	r5, r5, #6
 800d238:	d106      	bne.n	800d248 <_printf_common+0x48>
 800d23a:	f104 0a19 	add.w	sl, r4, #25
 800d23e:	68e3      	ldr	r3, [r4, #12]
 800d240:	6832      	ldr	r2, [r6, #0]
 800d242:	1a9b      	subs	r3, r3, r2
 800d244:	42ab      	cmp	r3, r5
 800d246:	dc28      	bgt.n	800d29a <_printf_common+0x9a>
 800d248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d24c:	1e13      	subs	r3, r2, #0
 800d24e:	6822      	ldr	r2, [r4, #0]
 800d250:	bf18      	it	ne
 800d252:	2301      	movne	r3, #1
 800d254:	0692      	lsls	r2, r2, #26
 800d256:	d42d      	bmi.n	800d2b4 <_printf_common+0xb4>
 800d258:	4649      	mov	r1, r9
 800d25a:	4638      	mov	r0, r7
 800d25c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d260:	47c0      	blx	r8
 800d262:	3001      	adds	r0, #1
 800d264:	d020      	beq.n	800d2a8 <_printf_common+0xa8>
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	68e5      	ldr	r5, [r4, #12]
 800d26a:	f003 0306 	and.w	r3, r3, #6
 800d26e:	2b04      	cmp	r3, #4
 800d270:	bf18      	it	ne
 800d272:	2500      	movne	r5, #0
 800d274:	6832      	ldr	r2, [r6, #0]
 800d276:	f04f 0600 	mov.w	r6, #0
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	bf08      	it	eq
 800d27e:	1aad      	subeq	r5, r5, r2
 800d280:	6922      	ldr	r2, [r4, #16]
 800d282:	bf08      	it	eq
 800d284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d288:	4293      	cmp	r3, r2
 800d28a:	bfc4      	itt	gt
 800d28c:	1a9b      	subgt	r3, r3, r2
 800d28e:	18ed      	addgt	r5, r5, r3
 800d290:	341a      	adds	r4, #26
 800d292:	42b5      	cmp	r5, r6
 800d294:	d11a      	bne.n	800d2cc <_printf_common+0xcc>
 800d296:	2000      	movs	r0, #0
 800d298:	e008      	b.n	800d2ac <_printf_common+0xac>
 800d29a:	2301      	movs	r3, #1
 800d29c:	4652      	mov	r2, sl
 800d29e:	4649      	mov	r1, r9
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	47c0      	blx	r8
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d103      	bne.n	800d2b0 <_printf_common+0xb0>
 800d2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b0:	3501      	adds	r5, #1
 800d2b2:	e7c4      	b.n	800d23e <_printf_common+0x3e>
 800d2b4:	2030      	movs	r0, #48	; 0x30
 800d2b6:	18e1      	adds	r1, r4, r3
 800d2b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2bc:	1c5a      	adds	r2, r3, #1
 800d2be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2c2:	4422      	add	r2, r4
 800d2c4:	3302      	adds	r3, #2
 800d2c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2ca:	e7c5      	b.n	800d258 <_printf_common+0x58>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	47c0      	blx	r8
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	d0e6      	beq.n	800d2a8 <_printf_common+0xa8>
 800d2da:	3601      	adds	r6, #1
 800d2dc:	e7d9      	b.n	800d292 <_printf_common+0x92>
	...

0800d2e0 <_printf_i>:
 800d2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e4:	7e0f      	ldrb	r7, [r1, #24]
 800d2e6:	4691      	mov	r9, r2
 800d2e8:	2f78      	cmp	r7, #120	; 0x78
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	469a      	mov	sl, r3
 800d2f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2f6:	d807      	bhi.n	800d308 <_printf_i+0x28>
 800d2f8:	2f62      	cmp	r7, #98	; 0x62
 800d2fa:	d80a      	bhi.n	800d312 <_printf_i+0x32>
 800d2fc:	2f00      	cmp	r7, #0
 800d2fe:	f000 80d9 	beq.w	800d4b4 <_printf_i+0x1d4>
 800d302:	2f58      	cmp	r7, #88	; 0x58
 800d304:	f000 80a4 	beq.w	800d450 <_printf_i+0x170>
 800d308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d30c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d310:	e03a      	b.n	800d388 <_printf_i+0xa8>
 800d312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d316:	2b15      	cmp	r3, #21
 800d318:	d8f6      	bhi.n	800d308 <_printf_i+0x28>
 800d31a:	a101      	add	r1, pc, #4	; (adr r1, 800d320 <_printf_i+0x40>)
 800d31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d320:	0800d379 	.word	0x0800d379
 800d324:	0800d38d 	.word	0x0800d38d
 800d328:	0800d309 	.word	0x0800d309
 800d32c:	0800d309 	.word	0x0800d309
 800d330:	0800d309 	.word	0x0800d309
 800d334:	0800d309 	.word	0x0800d309
 800d338:	0800d38d 	.word	0x0800d38d
 800d33c:	0800d309 	.word	0x0800d309
 800d340:	0800d309 	.word	0x0800d309
 800d344:	0800d309 	.word	0x0800d309
 800d348:	0800d309 	.word	0x0800d309
 800d34c:	0800d49b 	.word	0x0800d49b
 800d350:	0800d3bd 	.word	0x0800d3bd
 800d354:	0800d47d 	.word	0x0800d47d
 800d358:	0800d309 	.word	0x0800d309
 800d35c:	0800d309 	.word	0x0800d309
 800d360:	0800d4bd 	.word	0x0800d4bd
 800d364:	0800d309 	.word	0x0800d309
 800d368:	0800d3bd 	.word	0x0800d3bd
 800d36c:	0800d309 	.word	0x0800d309
 800d370:	0800d309 	.word	0x0800d309
 800d374:	0800d485 	.word	0x0800d485
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	1d1a      	adds	r2, r3, #4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	602a      	str	r2, [r5, #0]
 800d380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d388:	2301      	movs	r3, #1
 800d38a:	e0a4      	b.n	800d4d6 <_printf_i+0x1f6>
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	6829      	ldr	r1, [r5, #0]
 800d390:	0606      	lsls	r6, r0, #24
 800d392:	f101 0304 	add.w	r3, r1, #4
 800d396:	d50a      	bpl.n	800d3ae <_printf_i+0xce>
 800d398:	680e      	ldr	r6, [r1, #0]
 800d39a:	602b      	str	r3, [r5, #0]
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	da03      	bge.n	800d3a8 <_printf_i+0xc8>
 800d3a0:	232d      	movs	r3, #45	; 0x2d
 800d3a2:	4276      	negs	r6, r6
 800d3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3a8:	230a      	movs	r3, #10
 800d3aa:	485e      	ldr	r0, [pc, #376]	; (800d524 <_printf_i+0x244>)
 800d3ac:	e019      	b.n	800d3e2 <_printf_i+0x102>
 800d3ae:	680e      	ldr	r6, [r1, #0]
 800d3b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3b4:	602b      	str	r3, [r5, #0]
 800d3b6:	bf18      	it	ne
 800d3b8:	b236      	sxthne	r6, r6
 800d3ba:	e7ef      	b.n	800d39c <_printf_i+0xbc>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	6820      	ldr	r0, [r4, #0]
 800d3c0:	1d19      	adds	r1, r3, #4
 800d3c2:	6029      	str	r1, [r5, #0]
 800d3c4:	0601      	lsls	r1, r0, #24
 800d3c6:	d501      	bpl.n	800d3cc <_printf_i+0xec>
 800d3c8:	681e      	ldr	r6, [r3, #0]
 800d3ca:	e002      	b.n	800d3d2 <_printf_i+0xf2>
 800d3cc:	0646      	lsls	r6, r0, #25
 800d3ce:	d5fb      	bpl.n	800d3c8 <_printf_i+0xe8>
 800d3d0:	881e      	ldrh	r6, [r3, #0]
 800d3d2:	2f6f      	cmp	r7, #111	; 0x6f
 800d3d4:	bf0c      	ite	eq
 800d3d6:	2308      	moveq	r3, #8
 800d3d8:	230a      	movne	r3, #10
 800d3da:	4852      	ldr	r0, [pc, #328]	; (800d524 <_printf_i+0x244>)
 800d3dc:	2100      	movs	r1, #0
 800d3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3e2:	6865      	ldr	r5, [r4, #4]
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	bfa8      	it	ge
 800d3e8:	6821      	ldrge	r1, [r4, #0]
 800d3ea:	60a5      	str	r5, [r4, #8]
 800d3ec:	bfa4      	itt	ge
 800d3ee:	f021 0104 	bicge.w	r1, r1, #4
 800d3f2:	6021      	strge	r1, [r4, #0]
 800d3f4:	b90e      	cbnz	r6, 800d3fa <_printf_i+0x11a>
 800d3f6:	2d00      	cmp	r5, #0
 800d3f8:	d04d      	beq.n	800d496 <_printf_i+0x1b6>
 800d3fa:	4615      	mov	r5, r2
 800d3fc:	fbb6 f1f3 	udiv	r1, r6, r3
 800d400:	fb03 6711 	mls	r7, r3, r1, r6
 800d404:	5dc7      	ldrb	r7, [r0, r7]
 800d406:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d40a:	4637      	mov	r7, r6
 800d40c:	42bb      	cmp	r3, r7
 800d40e:	460e      	mov	r6, r1
 800d410:	d9f4      	bls.n	800d3fc <_printf_i+0x11c>
 800d412:	2b08      	cmp	r3, #8
 800d414:	d10b      	bne.n	800d42e <_printf_i+0x14e>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	07de      	lsls	r6, r3, #31
 800d41a:	d508      	bpl.n	800d42e <_printf_i+0x14e>
 800d41c:	6923      	ldr	r3, [r4, #16]
 800d41e:	6861      	ldr	r1, [r4, #4]
 800d420:	4299      	cmp	r1, r3
 800d422:	bfde      	ittt	le
 800d424:	2330      	movle	r3, #48	; 0x30
 800d426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d42a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d42e:	1b52      	subs	r2, r2, r5
 800d430:	6122      	str	r2, [r4, #16]
 800d432:	464b      	mov	r3, r9
 800d434:	4621      	mov	r1, r4
 800d436:	4640      	mov	r0, r8
 800d438:	f8cd a000 	str.w	sl, [sp]
 800d43c:	aa03      	add	r2, sp, #12
 800d43e:	f7ff fedf 	bl	800d200 <_printf_common>
 800d442:	3001      	adds	r0, #1
 800d444:	d14c      	bne.n	800d4e0 <_printf_i+0x200>
 800d446:	f04f 30ff 	mov.w	r0, #4294967295
 800d44a:	b004      	add	sp, #16
 800d44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d450:	4834      	ldr	r0, [pc, #208]	; (800d524 <_printf_i+0x244>)
 800d452:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d456:	6829      	ldr	r1, [r5, #0]
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	f851 6b04 	ldr.w	r6, [r1], #4
 800d45e:	6029      	str	r1, [r5, #0]
 800d460:	061d      	lsls	r5, r3, #24
 800d462:	d514      	bpl.n	800d48e <_printf_i+0x1ae>
 800d464:	07df      	lsls	r7, r3, #31
 800d466:	bf44      	itt	mi
 800d468:	f043 0320 	orrmi.w	r3, r3, #32
 800d46c:	6023      	strmi	r3, [r4, #0]
 800d46e:	b91e      	cbnz	r6, 800d478 <_printf_i+0x198>
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	f023 0320 	bic.w	r3, r3, #32
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	2310      	movs	r3, #16
 800d47a:	e7af      	b.n	800d3dc <_printf_i+0xfc>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	f043 0320 	orr.w	r3, r3, #32
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	2378      	movs	r3, #120	; 0x78
 800d486:	4828      	ldr	r0, [pc, #160]	; (800d528 <_printf_i+0x248>)
 800d488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d48c:	e7e3      	b.n	800d456 <_printf_i+0x176>
 800d48e:	0659      	lsls	r1, r3, #25
 800d490:	bf48      	it	mi
 800d492:	b2b6      	uxthmi	r6, r6
 800d494:	e7e6      	b.n	800d464 <_printf_i+0x184>
 800d496:	4615      	mov	r5, r2
 800d498:	e7bb      	b.n	800d412 <_printf_i+0x132>
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	6826      	ldr	r6, [r4, #0]
 800d49e:	1d18      	adds	r0, r3, #4
 800d4a0:	6961      	ldr	r1, [r4, #20]
 800d4a2:	6028      	str	r0, [r5, #0]
 800d4a4:	0635      	lsls	r5, r6, #24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	d501      	bpl.n	800d4ae <_printf_i+0x1ce>
 800d4aa:	6019      	str	r1, [r3, #0]
 800d4ac:	e002      	b.n	800d4b4 <_printf_i+0x1d4>
 800d4ae:	0670      	lsls	r0, r6, #25
 800d4b0:	d5fb      	bpl.n	800d4aa <_printf_i+0x1ca>
 800d4b2:	8019      	strh	r1, [r3, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4615      	mov	r5, r2
 800d4b8:	6123      	str	r3, [r4, #16]
 800d4ba:	e7ba      	b.n	800d432 <_printf_i+0x152>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	2100      	movs	r1, #0
 800d4c0:	1d1a      	adds	r2, r3, #4
 800d4c2:	602a      	str	r2, [r5, #0]
 800d4c4:	681d      	ldr	r5, [r3, #0]
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f002 fe5f 	bl	801018c <memchr>
 800d4ce:	b108      	cbz	r0, 800d4d4 <_printf_i+0x1f4>
 800d4d0:	1b40      	subs	r0, r0, r5
 800d4d2:	6060      	str	r0, [r4, #4]
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4de:	e7a8      	b.n	800d432 <_printf_i+0x152>
 800d4e0:	462a      	mov	r2, r5
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	47d0      	blx	sl
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	d0ab      	beq.n	800d446 <_printf_i+0x166>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	079b      	lsls	r3, r3, #30
 800d4f2:	d413      	bmi.n	800d51c <_printf_i+0x23c>
 800d4f4:	68e0      	ldr	r0, [r4, #12]
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	bfb8      	it	lt
 800d4fc:	4618      	movlt	r0, r3
 800d4fe:	e7a4      	b.n	800d44a <_printf_i+0x16a>
 800d500:	2301      	movs	r3, #1
 800d502:	4632      	mov	r2, r6
 800d504:	4649      	mov	r1, r9
 800d506:	4640      	mov	r0, r8
 800d508:	47d0      	blx	sl
 800d50a:	3001      	adds	r0, #1
 800d50c:	d09b      	beq.n	800d446 <_printf_i+0x166>
 800d50e:	3501      	adds	r5, #1
 800d510:	68e3      	ldr	r3, [r4, #12]
 800d512:	9903      	ldr	r1, [sp, #12]
 800d514:	1a5b      	subs	r3, r3, r1
 800d516:	42ab      	cmp	r3, r5
 800d518:	dcf2      	bgt.n	800d500 <_printf_i+0x220>
 800d51a:	e7eb      	b.n	800d4f4 <_printf_i+0x214>
 800d51c:	2500      	movs	r5, #0
 800d51e:	f104 0619 	add.w	r6, r4, #25
 800d522:	e7f5      	b.n	800d510 <_printf_i+0x230>
 800d524:	08012c82 	.word	0x08012c82
 800d528:	08012c93 	.word	0x08012c93

0800d52c <_scanf_float>:
 800d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	b087      	sub	sp, #28
 800d532:	9303      	str	r3, [sp, #12]
 800d534:	688b      	ldr	r3, [r1, #8]
 800d536:	4617      	mov	r7, r2
 800d538:	1e5a      	subs	r2, r3, #1
 800d53a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d53e:	bf85      	ittet	hi
 800d540:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d544:	195b      	addhi	r3, r3, r5
 800d546:	2300      	movls	r3, #0
 800d548:	9302      	strhi	r3, [sp, #8]
 800d54a:	bf88      	it	hi
 800d54c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d550:	468b      	mov	fp, r1
 800d552:	f04f 0500 	mov.w	r5, #0
 800d556:	bf8c      	ite	hi
 800d558:	608b      	strhi	r3, [r1, #8]
 800d55a:	9302      	strls	r3, [sp, #8]
 800d55c:	680b      	ldr	r3, [r1, #0]
 800d55e:	4680      	mov	r8, r0
 800d560:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d564:	f84b 3b1c 	str.w	r3, [fp], #28
 800d568:	460c      	mov	r4, r1
 800d56a:	465e      	mov	r6, fp
 800d56c:	46aa      	mov	sl, r5
 800d56e:	46a9      	mov	r9, r5
 800d570:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d574:	9501      	str	r5, [sp, #4]
 800d576:	68a2      	ldr	r2, [r4, #8]
 800d578:	b152      	cbz	r2, 800d590 <_scanf_float+0x64>
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b4e      	cmp	r3, #78	; 0x4e
 800d580:	d864      	bhi.n	800d64c <_scanf_float+0x120>
 800d582:	2b40      	cmp	r3, #64	; 0x40
 800d584:	d83c      	bhi.n	800d600 <_scanf_float+0xd4>
 800d586:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d58a:	b2c8      	uxtb	r0, r1
 800d58c:	280e      	cmp	r0, #14
 800d58e:	d93a      	bls.n	800d606 <_scanf_float+0xda>
 800d590:	f1b9 0f00 	cmp.w	r9, #0
 800d594:	d003      	beq.n	800d59e <_scanf_float+0x72>
 800d596:	6823      	ldr	r3, [r4, #0]
 800d598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5a2:	f1ba 0f01 	cmp.w	sl, #1
 800d5a6:	f200 8113 	bhi.w	800d7d0 <_scanf_float+0x2a4>
 800d5aa:	455e      	cmp	r6, fp
 800d5ac:	f200 8105 	bhi.w	800d7ba <_scanf_float+0x28e>
 800d5b0:	2501      	movs	r5, #1
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	b007      	add	sp, #28
 800d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d5be:	2a0d      	cmp	r2, #13
 800d5c0:	d8e6      	bhi.n	800d590 <_scanf_float+0x64>
 800d5c2:	a101      	add	r1, pc, #4	; (adr r1, 800d5c8 <_scanf_float+0x9c>)
 800d5c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5c8:	0800d707 	.word	0x0800d707
 800d5cc:	0800d591 	.word	0x0800d591
 800d5d0:	0800d591 	.word	0x0800d591
 800d5d4:	0800d591 	.word	0x0800d591
 800d5d8:	0800d767 	.word	0x0800d767
 800d5dc:	0800d73f 	.word	0x0800d73f
 800d5e0:	0800d591 	.word	0x0800d591
 800d5e4:	0800d591 	.word	0x0800d591
 800d5e8:	0800d715 	.word	0x0800d715
 800d5ec:	0800d591 	.word	0x0800d591
 800d5f0:	0800d591 	.word	0x0800d591
 800d5f4:	0800d591 	.word	0x0800d591
 800d5f8:	0800d591 	.word	0x0800d591
 800d5fc:	0800d6cd 	.word	0x0800d6cd
 800d600:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d604:	e7db      	b.n	800d5be <_scanf_float+0x92>
 800d606:	290e      	cmp	r1, #14
 800d608:	d8c2      	bhi.n	800d590 <_scanf_float+0x64>
 800d60a:	a001      	add	r0, pc, #4	; (adr r0, 800d610 <_scanf_float+0xe4>)
 800d60c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d610:	0800d6bf 	.word	0x0800d6bf
 800d614:	0800d591 	.word	0x0800d591
 800d618:	0800d6bf 	.word	0x0800d6bf
 800d61c:	0800d753 	.word	0x0800d753
 800d620:	0800d591 	.word	0x0800d591
 800d624:	0800d66d 	.word	0x0800d66d
 800d628:	0800d6a9 	.word	0x0800d6a9
 800d62c:	0800d6a9 	.word	0x0800d6a9
 800d630:	0800d6a9 	.word	0x0800d6a9
 800d634:	0800d6a9 	.word	0x0800d6a9
 800d638:	0800d6a9 	.word	0x0800d6a9
 800d63c:	0800d6a9 	.word	0x0800d6a9
 800d640:	0800d6a9 	.word	0x0800d6a9
 800d644:	0800d6a9 	.word	0x0800d6a9
 800d648:	0800d6a9 	.word	0x0800d6a9
 800d64c:	2b6e      	cmp	r3, #110	; 0x6e
 800d64e:	d809      	bhi.n	800d664 <_scanf_float+0x138>
 800d650:	2b60      	cmp	r3, #96	; 0x60
 800d652:	d8b2      	bhi.n	800d5ba <_scanf_float+0x8e>
 800d654:	2b54      	cmp	r3, #84	; 0x54
 800d656:	d077      	beq.n	800d748 <_scanf_float+0x21c>
 800d658:	2b59      	cmp	r3, #89	; 0x59
 800d65a:	d199      	bne.n	800d590 <_scanf_float+0x64>
 800d65c:	2d07      	cmp	r5, #7
 800d65e:	d197      	bne.n	800d590 <_scanf_float+0x64>
 800d660:	2508      	movs	r5, #8
 800d662:	e029      	b.n	800d6b8 <_scanf_float+0x18c>
 800d664:	2b74      	cmp	r3, #116	; 0x74
 800d666:	d06f      	beq.n	800d748 <_scanf_float+0x21c>
 800d668:	2b79      	cmp	r3, #121	; 0x79
 800d66a:	e7f6      	b.n	800d65a <_scanf_float+0x12e>
 800d66c:	6821      	ldr	r1, [r4, #0]
 800d66e:	05c8      	lsls	r0, r1, #23
 800d670:	d51a      	bpl.n	800d6a8 <_scanf_float+0x17c>
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d678:	6021      	str	r1, [r4, #0]
 800d67a:	f109 0901 	add.w	r9, r9, #1
 800d67e:	b11b      	cbz	r3, 800d688 <_scanf_float+0x15c>
 800d680:	3b01      	subs	r3, #1
 800d682:	3201      	adds	r2, #1
 800d684:	9302      	str	r3, [sp, #8]
 800d686:	60a2      	str	r2, [r4, #8]
 800d688:	68a3      	ldr	r3, [r4, #8]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	3301      	adds	r3, #1
 800d692:	6123      	str	r3, [r4, #16]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3b01      	subs	r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	607b      	str	r3, [r7, #4]
 800d69c:	f340 8084 	ble.w	800d7a8 <_scanf_float+0x27c>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	603b      	str	r3, [r7, #0]
 800d6a6:	e766      	b.n	800d576 <_scanf_float+0x4a>
 800d6a8:	eb1a 0f05 	cmn.w	sl, r5
 800d6ac:	f47f af70 	bne.w	800d590 <_scanf_float+0x64>
 800d6b0:	6822      	ldr	r2, [r4, #0]
 800d6b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d6b6:	6022      	str	r2, [r4, #0]
 800d6b8:	f806 3b01 	strb.w	r3, [r6], #1
 800d6bc:	e7e4      	b.n	800d688 <_scanf_float+0x15c>
 800d6be:	6822      	ldr	r2, [r4, #0]
 800d6c0:	0610      	lsls	r0, r2, #24
 800d6c2:	f57f af65 	bpl.w	800d590 <_scanf_float+0x64>
 800d6c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6ca:	e7f4      	b.n	800d6b6 <_scanf_float+0x18a>
 800d6cc:	f1ba 0f00 	cmp.w	sl, #0
 800d6d0:	d10e      	bne.n	800d6f0 <_scanf_float+0x1c4>
 800d6d2:	f1b9 0f00 	cmp.w	r9, #0
 800d6d6:	d10e      	bne.n	800d6f6 <_scanf_float+0x1ca>
 800d6d8:	6822      	ldr	r2, [r4, #0]
 800d6da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d6de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d6e2:	d108      	bne.n	800d6f6 <_scanf_float+0x1ca>
 800d6e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d6e8:	f04f 0a01 	mov.w	sl, #1
 800d6ec:	6022      	str	r2, [r4, #0]
 800d6ee:	e7e3      	b.n	800d6b8 <_scanf_float+0x18c>
 800d6f0:	f1ba 0f02 	cmp.w	sl, #2
 800d6f4:	d055      	beq.n	800d7a2 <_scanf_float+0x276>
 800d6f6:	2d01      	cmp	r5, #1
 800d6f8:	d002      	beq.n	800d700 <_scanf_float+0x1d4>
 800d6fa:	2d04      	cmp	r5, #4
 800d6fc:	f47f af48 	bne.w	800d590 <_scanf_float+0x64>
 800d700:	3501      	adds	r5, #1
 800d702:	b2ed      	uxtb	r5, r5
 800d704:	e7d8      	b.n	800d6b8 <_scanf_float+0x18c>
 800d706:	f1ba 0f01 	cmp.w	sl, #1
 800d70a:	f47f af41 	bne.w	800d590 <_scanf_float+0x64>
 800d70e:	f04f 0a02 	mov.w	sl, #2
 800d712:	e7d1      	b.n	800d6b8 <_scanf_float+0x18c>
 800d714:	b97d      	cbnz	r5, 800d736 <_scanf_float+0x20a>
 800d716:	f1b9 0f00 	cmp.w	r9, #0
 800d71a:	f47f af3c 	bne.w	800d596 <_scanf_float+0x6a>
 800d71e:	6822      	ldr	r2, [r4, #0]
 800d720:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d724:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d728:	f47f af39 	bne.w	800d59e <_scanf_float+0x72>
 800d72c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d730:	2501      	movs	r5, #1
 800d732:	6022      	str	r2, [r4, #0]
 800d734:	e7c0      	b.n	800d6b8 <_scanf_float+0x18c>
 800d736:	2d03      	cmp	r5, #3
 800d738:	d0e2      	beq.n	800d700 <_scanf_float+0x1d4>
 800d73a:	2d05      	cmp	r5, #5
 800d73c:	e7de      	b.n	800d6fc <_scanf_float+0x1d0>
 800d73e:	2d02      	cmp	r5, #2
 800d740:	f47f af26 	bne.w	800d590 <_scanf_float+0x64>
 800d744:	2503      	movs	r5, #3
 800d746:	e7b7      	b.n	800d6b8 <_scanf_float+0x18c>
 800d748:	2d06      	cmp	r5, #6
 800d74a:	f47f af21 	bne.w	800d590 <_scanf_float+0x64>
 800d74e:	2507      	movs	r5, #7
 800d750:	e7b2      	b.n	800d6b8 <_scanf_float+0x18c>
 800d752:	6822      	ldr	r2, [r4, #0]
 800d754:	0591      	lsls	r1, r2, #22
 800d756:	f57f af1b 	bpl.w	800d590 <_scanf_float+0x64>
 800d75a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d75e:	6022      	str	r2, [r4, #0]
 800d760:	f8cd 9004 	str.w	r9, [sp, #4]
 800d764:	e7a8      	b.n	800d6b8 <_scanf_float+0x18c>
 800d766:	6822      	ldr	r2, [r4, #0]
 800d768:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d76c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d770:	d006      	beq.n	800d780 <_scanf_float+0x254>
 800d772:	0550      	lsls	r0, r2, #21
 800d774:	f57f af0c 	bpl.w	800d590 <_scanf_float+0x64>
 800d778:	f1b9 0f00 	cmp.w	r9, #0
 800d77c:	f43f af0f 	beq.w	800d59e <_scanf_float+0x72>
 800d780:	0591      	lsls	r1, r2, #22
 800d782:	bf58      	it	pl
 800d784:	9901      	ldrpl	r1, [sp, #4]
 800d786:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d78a:	bf58      	it	pl
 800d78c:	eba9 0101 	subpl.w	r1, r9, r1
 800d790:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d794:	f04f 0900 	mov.w	r9, #0
 800d798:	bf58      	it	pl
 800d79a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d79e:	6022      	str	r2, [r4, #0]
 800d7a0:	e78a      	b.n	800d6b8 <_scanf_float+0x18c>
 800d7a2:	f04f 0a03 	mov.w	sl, #3
 800d7a6:	e787      	b.n	800d6b8 <_scanf_float+0x18c>
 800d7a8:	4639      	mov	r1, r7
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d7b0:	4798      	blx	r3
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f43f aedf 	beq.w	800d576 <_scanf_float+0x4a>
 800d7b8:	e6ea      	b.n	800d590 <_scanf_float+0x64>
 800d7ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7be:	463a      	mov	r2, r7
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7c6:	4798      	blx	r3
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	6123      	str	r3, [r4, #16]
 800d7ce:	e6ec      	b.n	800d5aa <_scanf_float+0x7e>
 800d7d0:	1e6b      	subs	r3, r5, #1
 800d7d2:	2b06      	cmp	r3, #6
 800d7d4:	d825      	bhi.n	800d822 <_scanf_float+0x2f6>
 800d7d6:	2d02      	cmp	r5, #2
 800d7d8:	d836      	bhi.n	800d848 <_scanf_float+0x31c>
 800d7da:	455e      	cmp	r6, fp
 800d7dc:	f67f aee8 	bls.w	800d5b0 <_scanf_float+0x84>
 800d7e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7e4:	463a      	mov	r2, r7
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7ec:	4798      	blx	r3
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	6123      	str	r3, [r4, #16]
 800d7f4:	e7f1      	b.n	800d7da <_scanf_float+0x2ae>
 800d7f6:	9802      	ldr	r0, [sp, #8]
 800d7f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d800:	463a      	mov	r2, r7
 800d802:	9002      	str	r0, [sp, #8]
 800d804:	4640      	mov	r0, r8
 800d806:	4798      	blx	r3
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	6123      	str	r3, [r4, #16]
 800d80e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d812:	fa5f fa8a 	uxtb.w	sl, sl
 800d816:	f1ba 0f02 	cmp.w	sl, #2
 800d81a:	d1ec      	bne.n	800d7f6 <_scanf_float+0x2ca>
 800d81c:	3d03      	subs	r5, #3
 800d81e:	b2ed      	uxtb	r5, r5
 800d820:	1b76      	subs	r6, r6, r5
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	05da      	lsls	r2, r3, #23
 800d826:	d52f      	bpl.n	800d888 <_scanf_float+0x35c>
 800d828:	055b      	lsls	r3, r3, #21
 800d82a:	d510      	bpl.n	800d84e <_scanf_float+0x322>
 800d82c:	455e      	cmp	r6, fp
 800d82e:	f67f aebf 	bls.w	800d5b0 <_scanf_float+0x84>
 800d832:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d836:	463a      	mov	r2, r7
 800d838:	4640      	mov	r0, r8
 800d83a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d83e:	4798      	blx	r3
 800d840:	6923      	ldr	r3, [r4, #16]
 800d842:	3b01      	subs	r3, #1
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	e7f1      	b.n	800d82c <_scanf_float+0x300>
 800d848:	46aa      	mov	sl, r5
 800d84a:	9602      	str	r6, [sp, #8]
 800d84c:	e7df      	b.n	800d80e <_scanf_float+0x2e2>
 800d84e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	2965      	cmp	r1, #101	; 0x65
 800d856:	f103 33ff 	add.w	r3, r3, #4294967295
 800d85a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	d00c      	beq.n	800d87c <_scanf_float+0x350>
 800d862:	2945      	cmp	r1, #69	; 0x45
 800d864:	d00a      	beq.n	800d87c <_scanf_float+0x350>
 800d866:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d86a:	463a      	mov	r2, r7
 800d86c:	4640      	mov	r0, r8
 800d86e:	4798      	blx	r3
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d876:	3b01      	subs	r3, #1
 800d878:	1eb5      	subs	r5, r6, #2
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	463a      	mov	r2, r7
 800d87e:	4640      	mov	r0, r8
 800d880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d884:	4798      	blx	r3
 800d886:	462e      	mov	r6, r5
 800d888:	6825      	ldr	r5, [r4, #0]
 800d88a:	f015 0510 	ands.w	r5, r5, #16
 800d88e:	d155      	bne.n	800d93c <_scanf_float+0x410>
 800d890:	7035      	strb	r5, [r6, #0]
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d89c:	d11b      	bne.n	800d8d6 <_scanf_float+0x3aa>
 800d89e:	9b01      	ldr	r3, [sp, #4]
 800d8a0:	454b      	cmp	r3, r9
 800d8a2:	eba3 0209 	sub.w	r2, r3, r9
 800d8a6:	d123      	bne.n	800d8f0 <_scanf_float+0x3c4>
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	4659      	mov	r1, fp
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	f000 ff17 	bl	800e6e0 <_strtod_r>
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	f012 0f02 	tst.w	r2, #2
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	460f      	mov	r7, r1
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	d021      	beq.n	800d906 <_scanf_float+0x3da>
 800d8c2:	1d1a      	adds	r2, r3, #4
 800d8c4:	9903      	ldr	r1, [sp, #12]
 800d8c6:	600a      	str	r2, [r1, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	e9c3 6700 	strd	r6, r7, [r3]
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	60e3      	str	r3, [r4, #12]
 800d8d4:	e66d      	b.n	800d5b2 <_scanf_float+0x86>
 800d8d6:	9b04      	ldr	r3, [sp, #16]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d0e5      	beq.n	800d8a8 <_scanf_float+0x37c>
 800d8dc:	9905      	ldr	r1, [sp, #20]
 800d8de:	230a      	movs	r3, #10
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	3101      	adds	r1, #1
 800d8e6:	f000 ff7d 	bl	800e7e4 <_strtol_r>
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	9e05      	ldr	r6, [sp, #20]
 800d8ee:	1ac2      	subs	r2, r0, r3
 800d8f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d8f4:	429e      	cmp	r6, r3
 800d8f6:	bf28      	it	cs
 800d8f8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4910      	ldr	r1, [pc, #64]	; (800d940 <_scanf_float+0x414>)
 800d900:	f000 f8ac 	bl	800da5c <siprintf>
 800d904:	e7d0      	b.n	800d8a8 <_scanf_float+0x37c>
 800d906:	f012 0f04 	tst.w	r2, #4
 800d90a:	f103 0204 	add.w	r2, r3, #4
 800d90e:	d1d9      	bne.n	800d8c4 <_scanf_float+0x398>
 800d910:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d914:	f8cc 2000 	str.w	r2, [ip]
 800d918:	f8d3 8000 	ldr.w	r8, [r3]
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	f7f3 f88c 	bl	8000a3c <__aeabi_dcmpun>
 800d924:	b128      	cbz	r0, 800d932 <_scanf_float+0x406>
 800d926:	4807      	ldr	r0, [pc, #28]	; (800d944 <_scanf_float+0x418>)
 800d928:	f000 f894 	bl	800da54 <nanf>
 800d92c:	f8c8 0000 	str.w	r0, [r8]
 800d930:	e7cd      	b.n	800d8ce <_scanf_float+0x3a2>
 800d932:	4630      	mov	r0, r6
 800d934:	4639      	mov	r1, r7
 800d936:	f7f3 f8df 	bl	8000af8 <__aeabi_d2f>
 800d93a:	e7f7      	b.n	800d92c <_scanf_float+0x400>
 800d93c:	2500      	movs	r5, #0
 800d93e:	e638      	b.n	800d5b2 <_scanf_float+0x86>
 800d940:	08012ca4 	.word	0x08012ca4
 800d944:	08013118 	.word	0x08013118

0800d948 <_puts_r>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	460e      	mov	r6, r1
 800d94c:	4605      	mov	r5, r0
 800d94e:	b118      	cbz	r0, 800d958 <_puts_r+0x10>
 800d950:	6983      	ldr	r3, [r0, #24]
 800d952:	b90b      	cbnz	r3, 800d958 <_puts_r+0x10>
 800d954:	f001 ff98 	bl	800f888 <__sinit>
 800d958:	69ab      	ldr	r3, [r5, #24]
 800d95a:	68ac      	ldr	r4, [r5, #8]
 800d95c:	b913      	cbnz	r3, 800d964 <_puts_r+0x1c>
 800d95e:	4628      	mov	r0, r5
 800d960:	f001 ff92 	bl	800f888 <__sinit>
 800d964:	4b2c      	ldr	r3, [pc, #176]	; (800da18 <_puts_r+0xd0>)
 800d966:	429c      	cmp	r4, r3
 800d968:	d120      	bne.n	800d9ac <_puts_r+0x64>
 800d96a:	686c      	ldr	r4, [r5, #4]
 800d96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d96e:	07db      	lsls	r3, r3, #31
 800d970:	d405      	bmi.n	800d97e <_puts_r+0x36>
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	0598      	lsls	r0, r3, #22
 800d976:	d402      	bmi.n	800d97e <_puts_r+0x36>
 800d978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d97a:	f002 fb8e 	bl	801009a <__retarget_lock_acquire_recursive>
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	0719      	lsls	r1, r3, #28
 800d982:	d51d      	bpl.n	800d9c0 <_puts_r+0x78>
 800d984:	6923      	ldr	r3, [r4, #16]
 800d986:	b1db      	cbz	r3, 800d9c0 <_puts_r+0x78>
 800d988:	3e01      	subs	r6, #1
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d990:	3b01      	subs	r3, #1
 800d992:	60a3      	str	r3, [r4, #8]
 800d994:	bb39      	cbnz	r1, 800d9e6 <_puts_r+0x9e>
 800d996:	2b00      	cmp	r3, #0
 800d998:	da38      	bge.n	800da0c <_puts_r+0xc4>
 800d99a:	4622      	mov	r2, r4
 800d99c:	210a      	movs	r1, #10
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f000 ff22 	bl	800e7e8 <__swbuf_r>
 800d9a4:	3001      	adds	r0, #1
 800d9a6:	d011      	beq.n	800d9cc <_puts_r+0x84>
 800d9a8:	250a      	movs	r5, #10
 800d9aa:	e011      	b.n	800d9d0 <_puts_r+0x88>
 800d9ac:	4b1b      	ldr	r3, [pc, #108]	; (800da1c <_puts_r+0xd4>)
 800d9ae:	429c      	cmp	r4, r3
 800d9b0:	d101      	bne.n	800d9b6 <_puts_r+0x6e>
 800d9b2:	68ac      	ldr	r4, [r5, #8]
 800d9b4:	e7da      	b.n	800d96c <_puts_r+0x24>
 800d9b6:	4b1a      	ldr	r3, [pc, #104]	; (800da20 <_puts_r+0xd8>)
 800d9b8:	429c      	cmp	r4, r3
 800d9ba:	bf08      	it	eq
 800d9bc:	68ec      	ldreq	r4, [r5, #12]
 800d9be:	e7d5      	b.n	800d96c <_puts_r+0x24>
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f000 ff62 	bl	800e88c <__swsetup_r>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d0dd      	beq.n	800d988 <_puts_r+0x40>
 800d9cc:	f04f 35ff 	mov.w	r5, #4294967295
 800d9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9d2:	07da      	lsls	r2, r3, #31
 800d9d4:	d405      	bmi.n	800d9e2 <_puts_r+0x9a>
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	059b      	lsls	r3, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_puts_r+0x9a>
 800d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9de:	f002 fb5d 	bl	801009c <__retarget_lock_release_recursive>
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	bd70      	pop	{r4, r5, r6, pc}
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da04      	bge.n	800d9f4 <_puts_r+0xac>
 800d9ea:	69a2      	ldr	r2, [r4, #24]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	dc06      	bgt.n	800d9fe <_puts_r+0xb6>
 800d9f0:	290a      	cmp	r1, #10
 800d9f2:	d004      	beq.n	800d9fe <_puts_r+0xb6>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	6022      	str	r2, [r4, #0]
 800d9fa:	7019      	strb	r1, [r3, #0]
 800d9fc:	e7c5      	b.n	800d98a <_puts_r+0x42>
 800d9fe:	4622      	mov	r2, r4
 800da00:	4628      	mov	r0, r5
 800da02:	f000 fef1 	bl	800e7e8 <__swbuf_r>
 800da06:	3001      	adds	r0, #1
 800da08:	d1bf      	bne.n	800d98a <_puts_r+0x42>
 800da0a:	e7df      	b.n	800d9cc <_puts_r+0x84>
 800da0c:	250a      	movs	r5, #10
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	6022      	str	r2, [r4, #0]
 800da14:	701d      	strb	r5, [r3, #0]
 800da16:	e7db      	b.n	800d9d0 <_puts_r+0x88>
 800da18:	08012eb4 	.word	0x08012eb4
 800da1c:	08012ed4 	.word	0x08012ed4
 800da20:	08012e94 	.word	0x08012e94

0800da24 <puts>:
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <puts+0xc>)
 800da26:	4601      	mov	r1, r0
 800da28:	6818      	ldr	r0, [r3, #0]
 800da2a:	f7ff bf8d 	b.w	800d948 <_puts_r>
 800da2e:	bf00      	nop
 800da30:	20000038 	.word	0x20000038

0800da34 <_sbrk_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	2300      	movs	r3, #0
 800da38:	4d05      	ldr	r5, [pc, #20]	; (800da50 <_sbrk_r+0x1c>)
 800da3a:	4604      	mov	r4, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	602b      	str	r3, [r5, #0]
 800da40:	f7f4 fcf6 	bl	8002430 <_sbrk>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_sbrk_r+0x1a>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_sbrk_r+0x1a>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	200013d4 	.word	0x200013d4

0800da54 <nanf>:
 800da54:	4800      	ldr	r0, [pc, #0]	; (800da58 <nanf+0x4>)
 800da56:	4770      	bx	lr
 800da58:	7fc00000 	.word	0x7fc00000

0800da5c <siprintf>:
 800da5c:	b40e      	push	{r1, r2, r3}
 800da5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da62:	b500      	push	{lr}
 800da64:	b09c      	sub	sp, #112	; 0x70
 800da66:	ab1d      	add	r3, sp, #116	; 0x74
 800da68:	9002      	str	r0, [sp, #8]
 800da6a:	9006      	str	r0, [sp, #24]
 800da6c:	9107      	str	r1, [sp, #28]
 800da6e:	9104      	str	r1, [sp, #16]
 800da70:	4808      	ldr	r0, [pc, #32]	; (800da94 <siprintf+0x38>)
 800da72:	4909      	ldr	r1, [pc, #36]	; (800da98 <siprintf+0x3c>)
 800da74:	f853 2b04 	ldr.w	r2, [r3], #4
 800da78:	9105      	str	r1, [sp, #20]
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	a902      	add	r1, sp, #8
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	f003 f8c6 	bl	8010c10 <_svfiprintf_r>
 800da84:	2200      	movs	r2, #0
 800da86:	9b02      	ldr	r3, [sp, #8]
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	b01c      	add	sp, #112	; 0x70
 800da8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da90:	b003      	add	sp, #12
 800da92:	4770      	bx	lr
 800da94:	20000038 	.word	0x20000038
 800da98:	ffff0208 	.word	0xffff0208

0800da9c <strstr>:
 800da9c:	780a      	ldrb	r2, [r1, #0]
 800da9e:	b570      	push	{r4, r5, r6, lr}
 800daa0:	b96a      	cbnz	r2, 800dabe <strstr+0x22>
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d109      	bne.n	800dabc <strstr+0x20>
 800daa8:	460c      	mov	r4, r1
 800daaa:	4605      	mov	r5, r0
 800daac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d0f6      	beq.n	800daa2 <strstr+0x6>
 800dab4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dab8:	429e      	cmp	r6, r3
 800daba:	d0f7      	beq.n	800daac <strstr+0x10>
 800dabc:	3001      	adds	r0, #1
 800dabe:	7803      	ldrb	r3, [r0, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1ef      	bne.n	800daa4 <strstr+0x8>
 800dac4:	4618      	mov	r0, r3
 800dac6:	e7ec      	b.n	800daa2 <strstr+0x6>

0800dac8 <sulp>:
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	460f      	mov	r7, r1
 800dace:	4690      	mov	r8, r2
 800dad0:	f002 fee6 	bl	80108a0 <__ulp>
 800dad4:	4604      	mov	r4, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	f1b8 0f00 	cmp.w	r8, #0
 800dadc:	d011      	beq.n	800db02 <sulp+0x3a>
 800dade:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dd0b      	ble.n	800db02 <sulp+0x3a>
 800daea:	2400      	movs	r4, #0
 800daec:	051b      	lsls	r3, r3, #20
 800daee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800daf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800daf6:	4622      	mov	r2, r4
 800daf8:	462b      	mov	r3, r5
 800dafa:	f7f2 fd05 	bl	8000508 <__aeabi_dmul>
 800dafe:	4604      	mov	r4, r0
 800db00:	460d      	mov	r5, r1
 800db02:	4620      	mov	r0, r4
 800db04:	4629      	mov	r1, r5
 800db06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0a:	0000      	movs	r0, r0
 800db0c:	0000      	movs	r0, r0
	...

0800db10 <_strtod_l>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	469b      	mov	fp, r3
 800db16:	2300      	movs	r3, #0
 800db18:	b09f      	sub	sp, #124	; 0x7c
 800db1a:	931a      	str	r3, [sp, #104]	; 0x68
 800db1c:	4b9e      	ldr	r3, [pc, #632]	; (800dd98 <_strtod_l+0x288>)
 800db1e:	4682      	mov	sl, r0
 800db20:	681f      	ldr	r7, [r3, #0]
 800db22:	460e      	mov	r6, r1
 800db24:	4638      	mov	r0, r7
 800db26:	9215      	str	r2, [sp, #84]	; 0x54
 800db28:	f7f2 fb2a 	bl	8000180 <strlen>
 800db2c:	f04f 0800 	mov.w	r8, #0
 800db30:	4604      	mov	r4, r0
 800db32:	f04f 0900 	mov.w	r9, #0
 800db36:	9619      	str	r6, [sp, #100]	; 0x64
 800db38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db3a:	781a      	ldrb	r2, [r3, #0]
 800db3c:	2a2b      	cmp	r2, #43	; 0x2b
 800db3e:	d04c      	beq.n	800dbda <_strtod_l+0xca>
 800db40:	d83a      	bhi.n	800dbb8 <_strtod_l+0xa8>
 800db42:	2a0d      	cmp	r2, #13
 800db44:	d833      	bhi.n	800dbae <_strtod_l+0x9e>
 800db46:	2a08      	cmp	r2, #8
 800db48:	d833      	bhi.n	800dbb2 <_strtod_l+0xa2>
 800db4a:	2a00      	cmp	r2, #0
 800db4c:	d03d      	beq.n	800dbca <_strtod_l+0xba>
 800db4e:	2300      	movs	r3, #0
 800db50:	930a      	str	r3, [sp, #40]	; 0x28
 800db52:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800db54:	782b      	ldrb	r3, [r5, #0]
 800db56:	2b30      	cmp	r3, #48	; 0x30
 800db58:	f040 80aa 	bne.w	800dcb0 <_strtod_l+0x1a0>
 800db5c:	786b      	ldrb	r3, [r5, #1]
 800db5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db62:	2b58      	cmp	r3, #88	; 0x58
 800db64:	d166      	bne.n	800dc34 <_strtod_l+0x124>
 800db66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db68:	4650      	mov	r0, sl
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	ab1a      	add	r3, sp, #104	; 0x68
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4a8a      	ldr	r2, [pc, #552]	; (800dd9c <_strtod_l+0x28c>)
 800db72:	f8cd b008 	str.w	fp, [sp, #8]
 800db76:	ab1b      	add	r3, sp, #108	; 0x6c
 800db78:	a919      	add	r1, sp, #100	; 0x64
 800db7a:	f001 ff8b 	bl	800fa94 <__gethex>
 800db7e:	f010 0607 	ands.w	r6, r0, #7
 800db82:	4604      	mov	r4, r0
 800db84:	d005      	beq.n	800db92 <_strtod_l+0x82>
 800db86:	2e06      	cmp	r6, #6
 800db88:	d129      	bne.n	800dbde <_strtod_l+0xce>
 800db8a:	2300      	movs	r3, #0
 800db8c:	3501      	adds	r5, #1
 800db8e:	9519      	str	r5, [sp, #100]	; 0x64
 800db90:	930a      	str	r3, [sp, #40]	; 0x28
 800db92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db94:	2b00      	cmp	r3, #0
 800db96:	f040 858a 	bne.w	800e6ae <_strtod_l+0xb9e>
 800db9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db9c:	b1d3      	cbz	r3, 800dbd4 <_strtod_l+0xc4>
 800db9e:	4642      	mov	r2, r8
 800dba0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dba4:	4610      	mov	r0, r2
 800dba6:	4619      	mov	r1, r3
 800dba8:	b01f      	add	sp, #124	; 0x7c
 800dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbae:	2a20      	cmp	r2, #32
 800dbb0:	d1cd      	bne.n	800db4e <_strtod_l+0x3e>
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	9319      	str	r3, [sp, #100]	; 0x64
 800dbb6:	e7bf      	b.n	800db38 <_strtod_l+0x28>
 800dbb8:	2a2d      	cmp	r2, #45	; 0x2d
 800dbba:	d1c8      	bne.n	800db4e <_strtod_l+0x3e>
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	920a      	str	r2, [sp, #40]	; 0x28
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	9219      	str	r2, [sp, #100]	; 0x64
 800dbc4:	785b      	ldrb	r3, [r3, #1]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1c3      	bne.n	800db52 <_strtod_l+0x42>
 800dbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbcc:	9619      	str	r6, [sp, #100]	; 0x64
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f040 856b 	bne.w	800e6aa <_strtod_l+0xb9a>
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	464b      	mov	r3, r9
 800dbd8:	e7e4      	b.n	800dba4 <_strtod_l+0x94>
 800dbda:	2200      	movs	r2, #0
 800dbdc:	e7ef      	b.n	800dbbe <_strtod_l+0xae>
 800dbde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dbe0:	b13a      	cbz	r2, 800dbf2 <_strtod_l+0xe2>
 800dbe2:	2135      	movs	r1, #53	; 0x35
 800dbe4:	a81c      	add	r0, sp, #112	; 0x70
 800dbe6:	f002 ff5f 	bl	8010aa8 <__copybits>
 800dbea:	4650      	mov	r0, sl
 800dbec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dbee:	f002 fb27 	bl	8010240 <_Bfree>
 800dbf2:	3e01      	subs	r6, #1
 800dbf4:	2e04      	cmp	r6, #4
 800dbf6:	d806      	bhi.n	800dc06 <_strtod_l+0xf6>
 800dbf8:	e8df f006 	tbb	[pc, r6]
 800dbfc:	1714030a 	.word	0x1714030a
 800dc00:	0a          	.byte	0x0a
 800dc01:	00          	.byte	0x00
 800dc02:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800dc06:	0721      	lsls	r1, r4, #28
 800dc08:	d5c3      	bpl.n	800db92 <_strtod_l+0x82>
 800dc0a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800dc0e:	e7c0      	b.n	800db92 <_strtod_l+0x82>
 800dc10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dc12:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800dc16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dc22:	e7f0      	b.n	800dc06 <_strtod_l+0xf6>
 800dc24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dda0 <_strtod_l+0x290>
 800dc28:	e7ed      	b.n	800dc06 <_strtod_l+0xf6>
 800dc2a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dc2e:	f04f 38ff 	mov.w	r8, #4294967295
 800dc32:	e7e8      	b.n	800dc06 <_strtod_l+0xf6>
 800dc34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	9219      	str	r2, [sp, #100]	; 0x64
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	2b30      	cmp	r3, #48	; 0x30
 800dc3e:	d0f9      	beq.n	800dc34 <_strtod_l+0x124>
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d0a6      	beq.n	800db92 <_strtod_l+0x82>
 800dc44:	2301      	movs	r3, #1
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc4a:	220a      	movs	r2, #10
 800dc4c:	9308      	str	r3, [sp, #32]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	469b      	mov	fp, r3
 800dc52:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dc56:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dc58:	7805      	ldrb	r5, [r0, #0]
 800dc5a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800dc5e:	b2d9      	uxtb	r1, r3
 800dc60:	2909      	cmp	r1, #9
 800dc62:	d927      	bls.n	800dcb4 <_strtod_l+0x1a4>
 800dc64:	4622      	mov	r2, r4
 800dc66:	4639      	mov	r1, r7
 800dc68:	f003 f91b 	bl	8010ea2 <strncmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d033      	beq.n	800dcd8 <_strtod_l+0x1c8>
 800dc70:	2000      	movs	r0, #0
 800dc72:	462a      	mov	r2, r5
 800dc74:	465c      	mov	r4, fp
 800dc76:	4603      	mov	r3, r0
 800dc78:	9004      	str	r0, [sp, #16]
 800dc7a:	2a65      	cmp	r2, #101	; 0x65
 800dc7c:	d001      	beq.n	800dc82 <_strtod_l+0x172>
 800dc7e:	2a45      	cmp	r2, #69	; 0x45
 800dc80:	d114      	bne.n	800dcac <_strtod_l+0x19c>
 800dc82:	b91c      	cbnz	r4, 800dc8c <_strtod_l+0x17c>
 800dc84:	9a07      	ldr	r2, [sp, #28]
 800dc86:	4302      	orrs	r2, r0
 800dc88:	d09f      	beq.n	800dbca <_strtod_l+0xba>
 800dc8a:	2400      	movs	r4, #0
 800dc8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dc8e:	1c72      	adds	r2, r6, #1
 800dc90:	9219      	str	r2, [sp, #100]	; 0x64
 800dc92:	7872      	ldrb	r2, [r6, #1]
 800dc94:	2a2b      	cmp	r2, #43	; 0x2b
 800dc96:	d079      	beq.n	800dd8c <_strtod_l+0x27c>
 800dc98:	2a2d      	cmp	r2, #45	; 0x2d
 800dc9a:	f000 8083 	beq.w	800dda4 <_strtod_l+0x294>
 800dc9e:	2700      	movs	r7, #0
 800dca0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dca4:	2909      	cmp	r1, #9
 800dca6:	f240 8083 	bls.w	800ddb0 <_strtod_l+0x2a0>
 800dcaa:	9619      	str	r6, [sp, #100]	; 0x64
 800dcac:	2500      	movs	r5, #0
 800dcae:	e09f      	b.n	800ddf0 <_strtod_l+0x2e0>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	e7c8      	b.n	800dc46 <_strtod_l+0x136>
 800dcb4:	f1bb 0f08 	cmp.w	fp, #8
 800dcb8:	bfd5      	itete	le
 800dcba:	9906      	ldrle	r1, [sp, #24]
 800dcbc:	9905      	ldrgt	r1, [sp, #20]
 800dcbe:	fb02 3301 	mlale	r3, r2, r1, r3
 800dcc2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dcc6:	f100 0001 	add.w	r0, r0, #1
 800dcca:	bfd4      	ite	le
 800dccc:	9306      	strle	r3, [sp, #24]
 800dcce:	9305      	strgt	r3, [sp, #20]
 800dcd0:	f10b 0b01 	add.w	fp, fp, #1
 800dcd4:	9019      	str	r0, [sp, #100]	; 0x64
 800dcd6:	e7be      	b.n	800dc56 <_strtod_l+0x146>
 800dcd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcda:	191a      	adds	r2, r3, r4
 800dcdc:	9219      	str	r2, [sp, #100]	; 0x64
 800dcde:	5d1a      	ldrb	r2, [r3, r4]
 800dce0:	f1bb 0f00 	cmp.w	fp, #0
 800dce4:	d036      	beq.n	800dd54 <_strtod_l+0x244>
 800dce6:	465c      	mov	r4, fp
 800dce8:	9004      	str	r0, [sp, #16]
 800dcea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dcee:	2b09      	cmp	r3, #9
 800dcf0:	d912      	bls.n	800dd18 <_strtod_l+0x208>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e7c1      	b.n	800dc7a <_strtod_l+0x16a>
 800dcf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	9219      	str	r2, [sp, #100]	; 0x64
 800dcfe:	785a      	ldrb	r2, [r3, #1]
 800dd00:	2a30      	cmp	r2, #48	; 0x30
 800dd02:	d0f8      	beq.n	800dcf6 <_strtod_l+0x1e6>
 800dd04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dd08:	2b08      	cmp	r3, #8
 800dd0a:	f200 84d5 	bhi.w	800e6b8 <_strtod_l+0xba8>
 800dd0e:	9004      	str	r0, [sp, #16]
 800dd10:	2000      	movs	r0, #0
 800dd12:	4604      	mov	r4, r0
 800dd14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd16:	9308      	str	r3, [sp, #32]
 800dd18:	3a30      	subs	r2, #48	; 0x30
 800dd1a:	f100 0301 	add.w	r3, r0, #1
 800dd1e:	d013      	beq.n	800dd48 <_strtod_l+0x238>
 800dd20:	9904      	ldr	r1, [sp, #16]
 800dd22:	1905      	adds	r5, r0, r4
 800dd24:	4419      	add	r1, r3
 800dd26:	9104      	str	r1, [sp, #16]
 800dd28:	4623      	mov	r3, r4
 800dd2a:	210a      	movs	r1, #10
 800dd2c:	42ab      	cmp	r3, r5
 800dd2e:	d113      	bne.n	800dd58 <_strtod_l+0x248>
 800dd30:	1823      	adds	r3, r4, r0
 800dd32:	2b08      	cmp	r3, #8
 800dd34:	f104 0401 	add.w	r4, r4, #1
 800dd38:	4404      	add	r4, r0
 800dd3a:	dc1b      	bgt.n	800dd74 <_strtod_l+0x264>
 800dd3c:	230a      	movs	r3, #10
 800dd3e:	9906      	ldr	r1, [sp, #24]
 800dd40:	fb03 2301 	mla	r3, r3, r1, r2
 800dd44:	9306      	str	r3, [sp, #24]
 800dd46:	2300      	movs	r3, #0
 800dd48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	1c51      	adds	r1, r2, #1
 800dd4e:	9119      	str	r1, [sp, #100]	; 0x64
 800dd50:	7852      	ldrb	r2, [r2, #1]
 800dd52:	e7ca      	b.n	800dcea <_strtod_l+0x1da>
 800dd54:	4658      	mov	r0, fp
 800dd56:	e7d3      	b.n	800dd00 <_strtod_l+0x1f0>
 800dd58:	2b08      	cmp	r3, #8
 800dd5a:	dc04      	bgt.n	800dd66 <_strtod_l+0x256>
 800dd5c:	9f06      	ldr	r7, [sp, #24]
 800dd5e:	434f      	muls	r7, r1
 800dd60:	9706      	str	r7, [sp, #24]
 800dd62:	3301      	adds	r3, #1
 800dd64:	e7e2      	b.n	800dd2c <_strtod_l+0x21c>
 800dd66:	1c5f      	adds	r7, r3, #1
 800dd68:	2f10      	cmp	r7, #16
 800dd6a:	bfde      	ittt	le
 800dd6c:	9f05      	ldrle	r7, [sp, #20]
 800dd6e:	434f      	mulle	r7, r1
 800dd70:	9705      	strle	r7, [sp, #20]
 800dd72:	e7f6      	b.n	800dd62 <_strtod_l+0x252>
 800dd74:	2c10      	cmp	r4, #16
 800dd76:	bfdf      	itttt	le
 800dd78:	230a      	movle	r3, #10
 800dd7a:	9905      	ldrle	r1, [sp, #20]
 800dd7c:	fb03 2301 	mlale	r3, r3, r1, r2
 800dd80:	9305      	strle	r3, [sp, #20]
 800dd82:	e7e0      	b.n	800dd46 <_strtod_l+0x236>
 800dd84:	2300      	movs	r3, #0
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e77b      	b.n	800dc84 <_strtod_l+0x174>
 800dd8c:	2700      	movs	r7, #0
 800dd8e:	1cb2      	adds	r2, r6, #2
 800dd90:	9219      	str	r2, [sp, #100]	; 0x64
 800dd92:	78b2      	ldrb	r2, [r6, #2]
 800dd94:	e784      	b.n	800dca0 <_strtod_l+0x190>
 800dd96:	bf00      	nop
 800dd98:	08012f5c 	.word	0x08012f5c
 800dd9c:	08012cac 	.word	0x08012cac
 800dda0:	7ff00000 	.word	0x7ff00000
 800dda4:	2701      	movs	r7, #1
 800dda6:	e7f2      	b.n	800dd8e <_strtod_l+0x27e>
 800dda8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ddaa:	1c51      	adds	r1, r2, #1
 800ddac:	9119      	str	r1, [sp, #100]	; 0x64
 800ddae:	7852      	ldrb	r2, [r2, #1]
 800ddb0:	2a30      	cmp	r2, #48	; 0x30
 800ddb2:	d0f9      	beq.n	800dda8 <_strtod_l+0x298>
 800ddb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ddb8:	2908      	cmp	r1, #8
 800ddba:	f63f af77 	bhi.w	800dcac <_strtod_l+0x19c>
 800ddbe:	f04f 0e0a 	mov.w	lr, #10
 800ddc2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ddc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ddc8:	9209      	str	r2, [sp, #36]	; 0x24
 800ddca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ddcc:	1c51      	adds	r1, r2, #1
 800ddce:	9119      	str	r1, [sp, #100]	; 0x64
 800ddd0:	7852      	ldrb	r2, [r2, #1]
 800ddd2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ddd6:	2d09      	cmp	r5, #9
 800ddd8:	d935      	bls.n	800de46 <_strtod_l+0x336>
 800ddda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dddc:	1b49      	subs	r1, r1, r5
 800ddde:	2908      	cmp	r1, #8
 800dde0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dde4:	dc02      	bgt.n	800ddec <_strtod_l+0x2dc>
 800dde6:	4565      	cmp	r5, ip
 800dde8:	bfa8      	it	ge
 800ddea:	4665      	movge	r5, ip
 800ddec:	b107      	cbz	r7, 800ddf0 <_strtod_l+0x2e0>
 800ddee:	426d      	negs	r5, r5
 800ddf0:	2c00      	cmp	r4, #0
 800ddf2:	d14c      	bne.n	800de8e <_strtod_l+0x37e>
 800ddf4:	9907      	ldr	r1, [sp, #28]
 800ddf6:	4301      	orrs	r1, r0
 800ddf8:	f47f aecb 	bne.w	800db92 <_strtod_l+0x82>
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f47f aee4 	bne.w	800dbca <_strtod_l+0xba>
 800de02:	2a69      	cmp	r2, #105	; 0x69
 800de04:	d026      	beq.n	800de54 <_strtod_l+0x344>
 800de06:	dc23      	bgt.n	800de50 <_strtod_l+0x340>
 800de08:	2a49      	cmp	r2, #73	; 0x49
 800de0a:	d023      	beq.n	800de54 <_strtod_l+0x344>
 800de0c:	2a4e      	cmp	r2, #78	; 0x4e
 800de0e:	f47f aedc 	bne.w	800dbca <_strtod_l+0xba>
 800de12:	499d      	ldr	r1, [pc, #628]	; (800e088 <_strtod_l+0x578>)
 800de14:	a819      	add	r0, sp, #100	; 0x64
 800de16:	f002 f88b 	bl	800ff30 <__match>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	f43f aed5 	beq.w	800dbca <_strtod_l+0xba>
 800de20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b28      	cmp	r3, #40	; 0x28
 800de26:	d12c      	bne.n	800de82 <_strtod_l+0x372>
 800de28:	4998      	ldr	r1, [pc, #608]	; (800e08c <_strtod_l+0x57c>)
 800de2a:	aa1c      	add	r2, sp, #112	; 0x70
 800de2c:	a819      	add	r0, sp, #100	; 0x64
 800de2e:	f002 f893 	bl	800ff58 <__hexnan>
 800de32:	2805      	cmp	r0, #5
 800de34:	d125      	bne.n	800de82 <_strtod_l+0x372>
 800de36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800de3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800de40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800de44:	e6a5      	b.n	800db92 <_strtod_l+0x82>
 800de46:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800de4a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800de4e:	e7bc      	b.n	800ddca <_strtod_l+0x2ba>
 800de50:	2a6e      	cmp	r2, #110	; 0x6e
 800de52:	e7dc      	b.n	800de0e <_strtod_l+0x2fe>
 800de54:	498e      	ldr	r1, [pc, #568]	; (800e090 <_strtod_l+0x580>)
 800de56:	a819      	add	r0, sp, #100	; 0x64
 800de58:	f002 f86a 	bl	800ff30 <__match>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	f43f aeb4 	beq.w	800dbca <_strtod_l+0xba>
 800de62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de64:	498b      	ldr	r1, [pc, #556]	; (800e094 <_strtod_l+0x584>)
 800de66:	3b01      	subs	r3, #1
 800de68:	a819      	add	r0, sp, #100	; 0x64
 800de6a:	9319      	str	r3, [sp, #100]	; 0x64
 800de6c:	f002 f860 	bl	800ff30 <__match>
 800de70:	b910      	cbnz	r0, 800de78 <_strtod_l+0x368>
 800de72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de74:	3301      	adds	r3, #1
 800de76:	9319      	str	r3, [sp, #100]	; 0x64
 800de78:	f04f 0800 	mov.w	r8, #0
 800de7c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e098 <_strtod_l+0x588>
 800de80:	e687      	b.n	800db92 <_strtod_l+0x82>
 800de82:	4886      	ldr	r0, [pc, #536]	; (800e09c <_strtod_l+0x58c>)
 800de84:	f002 ffc4 	bl	8010e10 <nan>
 800de88:	4680      	mov	r8, r0
 800de8a:	4689      	mov	r9, r1
 800de8c:	e681      	b.n	800db92 <_strtod_l+0x82>
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	f1bb 0f00 	cmp.w	fp, #0
 800de94:	bf08      	it	eq
 800de96:	46a3      	moveq	fp, r4
 800de98:	1aeb      	subs	r3, r5, r3
 800de9a:	2c10      	cmp	r4, #16
 800de9c:	9806      	ldr	r0, [sp, #24]
 800de9e:	4626      	mov	r6, r4
 800dea0:	9307      	str	r3, [sp, #28]
 800dea2:	bfa8      	it	ge
 800dea4:	2610      	movge	r6, #16
 800dea6:	f7f2 fab5 	bl	8000414 <__aeabi_ui2d>
 800deaa:	2c09      	cmp	r4, #9
 800deac:	4680      	mov	r8, r0
 800deae:	4689      	mov	r9, r1
 800deb0:	dd13      	ble.n	800deda <_strtod_l+0x3ca>
 800deb2:	4b7b      	ldr	r3, [pc, #492]	; (800e0a0 <_strtod_l+0x590>)
 800deb4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800deb8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800debc:	f7f2 fb24 	bl	8000508 <__aeabi_dmul>
 800dec0:	4680      	mov	r8, r0
 800dec2:	9805      	ldr	r0, [sp, #20]
 800dec4:	4689      	mov	r9, r1
 800dec6:	f7f2 faa5 	bl	8000414 <__aeabi_ui2d>
 800deca:	4602      	mov	r2, r0
 800decc:	460b      	mov	r3, r1
 800dece:	4640      	mov	r0, r8
 800ded0:	4649      	mov	r1, r9
 800ded2:	f7f2 f963 	bl	800019c <__adddf3>
 800ded6:	4680      	mov	r8, r0
 800ded8:	4689      	mov	r9, r1
 800deda:	2c0f      	cmp	r4, #15
 800dedc:	dc36      	bgt.n	800df4c <_strtod_l+0x43c>
 800dede:	9b07      	ldr	r3, [sp, #28]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f43f ae56 	beq.w	800db92 <_strtod_l+0x82>
 800dee6:	dd22      	ble.n	800df2e <_strtod_l+0x41e>
 800dee8:	2b16      	cmp	r3, #22
 800deea:	dc09      	bgt.n	800df00 <_strtod_l+0x3f0>
 800deec:	496c      	ldr	r1, [pc, #432]	; (800e0a0 <_strtod_l+0x590>)
 800deee:	4642      	mov	r2, r8
 800def0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800def4:	464b      	mov	r3, r9
 800def6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800defa:	f7f2 fb05 	bl	8000508 <__aeabi_dmul>
 800defe:	e7c3      	b.n	800de88 <_strtod_l+0x378>
 800df00:	9a07      	ldr	r2, [sp, #28]
 800df02:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800df06:	4293      	cmp	r3, r2
 800df08:	db20      	blt.n	800df4c <_strtod_l+0x43c>
 800df0a:	4d65      	ldr	r5, [pc, #404]	; (800e0a0 <_strtod_l+0x590>)
 800df0c:	f1c4 040f 	rsb	r4, r4, #15
 800df10:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800df14:	4642      	mov	r2, r8
 800df16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df1a:	464b      	mov	r3, r9
 800df1c:	f7f2 faf4 	bl	8000508 <__aeabi_dmul>
 800df20:	9b07      	ldr	r3, [sp, #28]
 800df22:	1b1c      	subs	r4, r3, r4
 800df24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800df28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df2c:	e7e5      	b.n	800defa <_strtod_l+0x3ea>
 800df2e:	9b07      	ldr	r3, [sp, #28]
 800df30:	3316      	adds	r3, #22
 800df32:	db0b      	blt.n	800df4c <_strtod_l+0x43c>
 800df34:	9b04      	ldr	r3, [sp, #16]
 800df36:	4640      	mov	r0, r8
 800df38:	1b5d      	subs	r5, r3, r5
 800df3a:	4b59      	ldr	r3, [pc, #356]	; (800e0a0 <_strtod_l+0x590>)
 800df3c:	4649      	mov	r1, r9
 800df3e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800df42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df46:	f7f2 fc09 	bl	800075c <__aeabi_ddiv>
 800df4a:	e79d      	b.n	800de88 <_strtod_l+0x378>
 800df4c:	9b07      	ldr	r3, [sp, #28]
 800df4e:	1ba6      	subs	r6, r4, r6
 800df50:	441e      	add	r6, r3
 800df52:	2e00      	cmp	r6, #0
 800df54:	dd74      	ble.n	800e040 <_strtod_l+0x530>
 800df56:	f016 030f 	ands.w	r3, r6, #15
 800df5a:	d00a      	beq.n	800df72 <_strtod_l+0x462>
 800df5c:	4950      	ldr	r1, [pc, #320]	; (800e0a0 <_strtod_l+0x590>)
 800df5e:	4642      	mov	r2, r8
 800df60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df68:	464b      	mov	r3, r9
 800df6a:	f7f2 facd 	bl	8000508 <__aeabi_dmul>
 800df6e:	4680      	mov	r8, r0
 800df70:	4689      	mov	r9, r1
 800df72:	f036 060f 	bics.w	r6, r6, #15
 800df76:	d052      	beq.n	800e01e <_strtod_l+0x50e>
 800df78:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800df7c:	dd27      	ble.n	800dfce <_strtod_l+0x4be>
 800df7e:	f04f 0b00 	mov.w	fp, #0
 800df82:	f8cd b010 	str.w	fp, [sp, #16]
 800df86:	f8cd b020 	str.w	fp, [sp, #32]
 800df8a:	f8cd b018 	str.w	fp, [sp, #24]
 800df8e:	2322      	movs	r3, #34	; 0x22
 800df90:	f04f 0800 	mov.w	r8, #0
 800df94:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e098 <_strtod_l+0x588>
 800df98:	f8ca 3000 	str.w	r3, [sl]
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f43f adf7 	beq.w	800db92 <_strtod_l+0x82>
 800dfa4:	4650      	mov	r0, sl
 800dfa6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dfa8:	f002 f94a 	bl	8010240 <_Bfree>
 800dfac:	4650      	mov	r0, sl
 800dfae:	9906      	ldr	r1, [sp, #24]
 800dfb0:	f002 f946 	bl	8010240 <_Bfree>
 800dfb4:	4650      	mov	r0, sl
 800dfb6:	9904      	ldr	r1, [sp, #16]
 800dfb8:	f002 f942 	bl	8010240 <_Bfree>
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	9908      	ldr	r1, [sp, #32]
 800dfc0:	f002 f93e 	bl	8010240 <_Bfree>
 800dfc4:	4659      	mov	r1, fp
 800dfc6:	4650      	mov	r0, sl
 800dfc8:	f002 f93a 	bl	8010240 <_Bfree>
 800dfcc:	e5e1      	b.n	800db92 <_strtod_l+0x82>
 800dfce:	4b35      	ldr	r3, [pc, #212]	; (800e0a4 <_strtod_l+0x594>)
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	461f      	mov	r7, r3
 800dfda:	1136      	asrs	r6, r6, #4
 800dfdc:	2e01      	cmp	r6, #1
 800dfde:	dc21      	bgt.n	800e024 <_strtod_l+0x514>
 800dfe0:	b10b      	cbz	r3, 800dfe6 <_strtod_l+0x4d6>
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	4689      	mov	r9, r1
 800dfe6:	4b2f      	ldr	r3, [pc, #188]	; (800e0a4 <_strtod_l+0x594>)
 800dfe8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dfec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dff0:	4642      	mov	r2, r8
 800dff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dff6:	464b      	mov	r3, r9
 800dff8:	f7f2 fa86 	bl	8000508 <__aeabi_dmul>
 800dffc:	4b26      	ldr	r3, [pc, #152]	; (800e098 <_strtod_l+0x588>)
 800dffe:	460a      	mov	r2, r1
 800e000:	400b      	ands	r3, r1
 800e002:	4929      	ldr	r1, [pc, #164]	; (800e0a8 <_strtod_l+0x598>)
 800e004:	4680      	mov	r8, r0
 800e006:	428b      	cmp	r3, r1
 800e008:	d8b9      	bhi.n	800df7e <_strtod_l+0x46e>
 800e00a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e00e:	428b      	cmp	r3, r1
 800e010:	bf86      	itte	hi
 800e012:	f04f 38ff 	movhi.w	r8, #4294967295
 800e016:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e0ac <_strtod_l+0x59c>
 800e01a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e01e:	2300      	movs	r3, #0
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	e07f      	b.n	800e124 <_strtod_l+0x614>
 800e024:	07f2      	lsls	r2, r6, #31
 800e026:	d505      	bpl.n	800e034 <_strtod_l+0x524>
 800e028:	9b05      	ldr	r3, [sp, #20]
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f7f2 fa6b 	bl	8000508 <__aeabi_dmul>
 800e032:	2301      	movs	r3, #1
 800e034:	9a05      	ldr	r2, [sp, #20]
 800e036:	3701      	adds	r7, #1
 800e038:	3208      	adds	r2, #8
 800e03a:	1076      	asrs	r6, r6, #1
 800e03c:	9205      	str	r2, [sp, #20]
 800e03e:	e7cd      	b.n	800dfdc <_strtod_l+0x4cc>
 800e040:	d0ed      	beq.n	800e01e <_strtod_l+0x50e>
 800e042:	4276      	negs	r6, r6
 800e044:	f016 020f 	ands.w	r2, r6, #15
 800e048:	d00a      	beq.n	800e060 <_strtod_l+0x550>
 800e04a:	4b15      	ldr	r3, [pc, #84]	; (800e0a0 <_strtod_l+0x590>)
 800e04c:	4640      	mov	r0, r8
 800e04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e052:	4649      	mov	r1, r9
 800e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e058:	f7f2 fb80 	bl	800075c <__aeabi_ddiv>
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	1136      	asrs	r6, r6, #4
 800e062:	d0dc      	beq.n	800e01e <_strtod_l+0x50e>
 800e064:	2e1f      	cmp	r6, #31
 800e066:	dd23      	ble.n	800e0b0 <_strtod_l+0x5a0>
 800e068:	f04f 0b00 	mov.w	fp, #0
 800e06c:	f8cd b010 	str.w	fp, [sp, #16]
 800e070:	f8cd b020 	str.w	fp, [sp, #32]
 800e074:	f8cd b018 	str.w	fp, [sp, #24]
 800e078:	2322      	movs	r3, #34	; 0x22
 800e07a:	f04f 0800 	mov.w	r8, #0
 800e07e:	f04f 0900 	mov.w	r9, #0
 800e082:	f8ca 3000 	str.w	r3, [sl]
 800e086:	e789      	b.n	800df9c <_strtod_l+0x48c>
 800e088:	08012c7d 	.word	0x08012c7d
 800e08c:	08012cc0 	.word	0x08012cc0
 800e090:	08012c75 	.word	0x08012c75
 800e094:	08012e04 	.word	0x08012e04
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	08013118 	.word	0x08013118
 800e0a0:	08012ff8 	.word	0x08012ff8
 800e0a4:	08012fd0 	.word	0x08012fd0
 800e0a8:	7ca00000 	.word	0x7ca00000
 800e0ac:	7fefffff 	.word	0x7fefffff
 800e0b0:	f016 0310 	ands.w	r3, r6, #16
 800e0b4:	bf18      	it	ne
 800e0b6:	236a      	movne	r3, #106	; 0x6a
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	9305      	str	r3, [sp, #20]
 800e0bc:	4649      	mov	r1, r9
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4fb0      	ldr	r7, [pc, #704]	; (800e384 <_strtod_l+0x874>)
 800e0c2:	07f2      	lsls	r2, r6, #31
 800e0c4:	d504      	bpl.n	800e0d0 <_strtod_l+0x5c0>
 800e0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0ca:	f7f2 fa1d 	bl	8000508 <__aeabi_dmul>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	1076      	asrs	r6, r6, #1
 800e0d2:	f107 0708 	add.w	r7, r7, #8
 800e0d6:	d1f4      	bne.n	800e0c2 <_strtod_l+0x5b2>
 800e0d8:	b10b      	cbz	r3, 800e0de <_strtod_l+0x5ce>
 800e0da:	4680      	mov	r8, r0
 800e0dc:	4689      	mov	r9, r1
 800e0de:	9b05      	ldr	r3, [sp, #20]
 800e0e0:	b1c3      	cbz	r3, 800e114 <_strtod_l+0x604>
 800e0e2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e0e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	dd11      	ble.n	800e114 <_strtod_l+0x604>
 800e0f0:	2b1f      	cmp	r3, #31
 800e0f2:	f340 8127 	ble.w	800e344 <_strtod_l+0x834>
 800e0f6:	2b34      	cmp	r3, #52	; 0x34
 800e0f8:	bfd8      	it	le
 800e0fa:	f04f 33ff 	movle.w	r3, #4294967295
 800e0fe:	f04f 0800 	mov.w	r8, #0
 800e102:	bfcf      	iteee	gt
 800e104:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e108:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e10c:	fa03 f202 	lslle.w	r2, r3, r2
 800e110:	ea02 0901 	andle.w	r9, r2, r1
 800e114:	2200      	movs	r2, #0
 800e116:	2300      	movs	r3, #0
 800e118:	4640      	mov	r0, r8
 800e11a:	4649      	mov	r1, r9
 800e11c:	f7f2 fc5c 	bl	80009d8 <__aeabi_dcmpeq>
 800e120:	2800      	cmp	r0, #0
 800e122:	d1a1      	bne.n	800e068 <_strtod_l+0x558>
 800e124:	9b06      	ldr	r3, [sp, #24]
 800e126:	465a      	mov	r2, fp
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4650      	mov	r0, sl
 800e12c:	4623      	mov	r3, r4
 800e12e:	9908      	ldr	r1, [sp, #32]
 800e130:	f002 f8ee 	bl	8010310 <__s2b>
 800e134:	9008      	str	r0, [sp, #32]
 800e136:	2800      	cmp	r0, #0
 800e138:	f43f af21 	beq.w	800df7e <_strtod_l+0x46e>
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	f04f 0b00 	mov.w	fp, #0
 800e142:	1b5d      	subs	r5, r3, r5
 800e144:	9b07      	ldr	r3, [sp, #28]
 800e146:	f8cd b010 	str.w	fp, [sp, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bfb4      	ite	lt
 800e14e:	462b      	movlt	r3, r5
 800e150:	2300      	movge	r3, #0
 800e152:	930e      	str	r3, [sp, #56]	; 0x38
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e15a:	9314      	str	r3, [sp, #80]	; 0x50
 800e15c:	9b08      	ldr	r3, [sp, #32]
 800e15e:	4650      	mov	r0, sl
 800e160:	6859      	ldr	r1, [r3, #4]
 800e162:	f002 f82d 	bl	80101c0 <_Balloc>
 800e166:	9006      	str	r0, [sp, #24]
 800e168:	2800      	cmp	r0, #0
 800e16a:	f43f af10 	beq.w	800df8e <_strtod_l+0x47e>
 800e16e:	9b08      	ldr	r3, [sp, #32]
 800e170:	300c      	adds	r0, #12
 800e172:	691a      	ldr	r2, [r3, #16]
 800e174:	f103 010c 	add.w	r1, r3, #12
 800e178:	3202      	adds	r2, #2
 800e17a:	0092      	lsls	r2, r2, #2
 800e17c:	f7fe fc84 	bl	800ca88 <memcpy>
 800e180:	ab1c      	add	r3, sp, #112	; 0x70
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	ab1b      	add	r3, sp, #108	; 0x6c
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	4642      	mov	r2, r8
 800e18a:	464b      	mov	r3, r9
 800e18c:	4650      	mov	r0, sl
 800e18e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e192:	f002 fbff 	bl	8010994 <__d2b>
 800e196:	901a      	str	r0, [sp, #104]	; 0x68
 800e198:	2800      	cmp	r0, #0
 800e19a:	f43f aef8 	beq.w	800df8e <_strtod_l+0x47e>
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	f002 f94d 	bl	8010440 <__i2b>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	9004      	str	r0, [sp, #16]
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f43f aeef 	beq.w	800df8e <_strtod_l+0x47e>
 800e1b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e1b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e1b4:	2d00      	cmp	r5, #0
 800e1b6:	bfab      	itete	ge
 800e1b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e1ba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e1bc:	18ee      	addge	r6, r5, r3
 800e1be:	1b5c      	sublt	r4, r3, r5
 800e1c0:	9b05      	ldr	r3, [sp, #20]
 800e1c2:	bfa8      	it	ge
 800e1c4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e1c6:	eba5 0503 	sub.w	r5, r5, r3
 800e1ca:	4415      	add	r5, r2
 800e1cc:	4b6e      	ldr	r3, [pc, #440]	; (800e388 <_strtod_l+0x878>)
 800e1ce:	f105 35ff 	add.w	r5, r5, #4294967295
 800e1d2:	bfb8      	it	lt
 800e1d4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e1d6:	429d      	cmp	r5, r3
 800e1d8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e1dc:	f280 80c4 	bge.w	800e368 <_strtod_l+0x858>
 800e1e0:	1b5b      	subs	r3, r3, r5
 800e1e2:	2b1f      	cmp	r3, #31
 800e1e4:	f04f 0701 	mov.w	r7, #1
 800e1e8:	eba2 0203 	sub.w	r2, r2, r3
 800e1ec:	f300 80b1 	bgt.w	800e352 <_strtod_l+0x842>
 800e1f0:	2500      	movs	r5, #0
 800e1f2:	fa07 f303 	lsl.w	r3, r7, r3
 800e1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1f8:	18b7      	adds	r7, r6, r2
 800e1fa:	9b05      	ldr	r3, [sp, #20]
 800e1fc:	42be      	cmp	r6, r7
 800e1fe:	4414      	add	r4, r2
 800e200:	441c      	add	r4, r3
 800e202:	4633      	mov	r3, r6
 800e204:	bfa8      	it	ge
 800e206:	463b      	movge	r3, r7
 800e208:	42a3      	cmp	r3, r4
 800e20a:	bfa8      	it	ge
 800e20c:	4623      	movge	r3, r4
 800e20e:	2b00      	cmp	r3, #0
 800e210:	bfc2      	ittt	gt
 800e212:	1aff      	subgt	r7, r7, r3
 800e214:	1ae4      	subgt	r4, r4, r3
 800e216:	1af6      	subgt	r6, r6, r3
 800e218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dd17      	ble.n	800e24e <_strtod_l+0x73e>
 800e21e:	461a      	mov	r2, r3
 800e220:	4650      	mov	r0, sl
 800e222:	9904      	ldr	r1, [sp, #16]
 800e224:	f002 f9ca 	bl	80105bc <__pow5mult>
 800e228:	9004      	str	r0, [sp, #16]
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f43f aeaf 	beq.w	800df8e <_strtod_l+0x47e>
 800e230:	4601      	mov	r1, r0
 800e232:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e234:	4650      	mov	r0, sl
 800e236:	f002 f919 	bl	801046c <__multiply>
 800e23a:	9009      	str	r0, [sp, #36]	; 0x24
 800e23c:	2800      	cmp	r0, #0
 800e23e:	f43f aea6 	beq.w	800df8e <_strtod_l+0x47e>
 800e242:	4650      	mov	r0, sl
 800e244:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e246:	f001 fffb 	bl	8010240 <_Bfree>
 800e24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24c:	931a      	str	r3, [sp, #104]	; 0x68
 800e24e:	2f00      	cmp	r7, #0
 800e250:	f300 808e 	bgt.w	800e370 <_strtod_l+0x860>
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	dd08      	ble.n	800e26c <_strtod_l+0x75c>
 800e25a:	4650      	mov	r0, sl
 800e25c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e25e:	9906      	ldr	r1, [sp, #24]
 800e260:	f002 f9ac 	bl	80105bc <__pow5mult>
 800e264:	9006      	str	r0, [sp, #24]
 800e266:	2800      	cmp	r0, #0
 800e268:	f43f ae91 	beq.w	800df8e <_strtod_l+0x47e>
 800e26c:	2c00      	cmp	r4, #0
 800e26e:	dd08      	ble.n	800e282 <_strtod_l+0x772>
 800e270:	4622      	mov	r2, r4
 800e272:	4650      	mov	r0, sl
 800e274:	9906      	ldr	r1, [sp, #24]
 800e276:	f002 f9fb 	bl	8010670 <__lshift>
 800e27a:	9006      	str	r0, [sp, #24]
 800e27c:	2800      	cmp	r0, #0
 800e27e:	f43f ae86 	beq.w	800df8e <_strtod_l+0x47e>
 800e282:	2e00      	cmp	r6, #0
 800e284:	dd08      	ble.n	800e298 <_strtod_l+0x788>
 800e286:	4632      	mov	r2, r6
 800e288:	4650      	mov	r0, sl
 800e28a:	9904      	ldr	r1, [sp, #16]
 800e28c:	f002 f9f0 	bl	8010670 <__lshift>
 800e290:	9004      	str	r0, [sp, #16]
 800e292:	2800      	cmp	r0, #0
 800e294:	f43f ae7b 	beq.w	800df8e <_strtod_l+0x47e>
 800e298:	4650      	mov	r0, sl
 800e29a:	9a06      	ldr	r2, [sp, #24]
 800e29c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e29e:	f002 fa73 	bl	8010788 <__mdiff>
 800e2a2:	4683      	mov	fp, r0
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f43f ae72 	beq.w	800df8e <_strtod_l+0x47e>
 800e2aa:	2400      	movs	r4, #0
 800e2ac:	68c3      	ldr	r3, [r0, #12]
 800e2ae:	9904      	ldr	r1, [sp, #16]
 800e2b0:	60c4      	str	r4, [r0, #12]
 800e2b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2b4:	f002 fa4c 	bl	8010750 <__mcmp>
 800e2b8:	42a0      	cmp	r0, r4
 800e2ba:	da6b      	bge.n	800e394 <_strtod_l+0x884>
 800e2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2be:	ea53 0308 	orrs.w	r3, r3, r8
 800e2c2:	f040 8091 	bne.w	800e3e8 <_strtod_l+0x8d8>
 800e2c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f040 808c 	bne.w	800e3e8 <_strtod_l+0x8d8>
 800e2d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2d4:	0d1b      	lsrs	r3, r3, #20
 800e2d6:	051b      	lsls	r3, r3, #20
 800e2d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e2dc:	f240 8084 	bls.w	800e3e8 <_strtod_l+0x8d8>
 800e2e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e2e4:	b91b      	cbnz	r3, 800e2ee <_strtod_l+0x7de>
 800e2e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	dd7c      	ble.n	800e3e8 <_strtod_l+0x8d8>
 800e2ee:	4659      	mov	r1, fp
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	4650      	mov	r0, sl
 800e2f4:	f002 f9bc 	bl	8010670 <__lshift>
 800e2f8:	9904      	ldr	r1, [sp, #16]
 800e2fa:	4683      	mov	fp, r0
 800e2fc:	f002 fa28 	bl	8010750 <__mcmp>
 800e300:	2800      	cmp	r0, #0
 800e302:	dd71      	ble.n	800e3e8 <_strtod_l+0x8d8>
 800e304:	9905      	ldr	r1, [sp, #20]
 800e306:	464b      	mov	r3, r9
 800e308:	4a20      	ldr	r2, [pc, #128]	; (800e38c <_strtod_l+0x87c>)
 800e30a:	2900      	cmp	r1, #0
 800e30c:	f000 808c 	beq.w	800e428 <_strtod_l+0x918>
 800e310:	ea02 0109 	and.w	r1, r2, r9
 800e314:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e318:	f300 8086 	bgt.w	800e428 <_strtod_l+0x918>
 800e31c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e320:	f77f aeaa 	ble.w	800e078 <_strtod_l+0x568>
 800e324:	4640      	mov	r0, r8
 800e326:	4649      	mov	r1, r9
 800e328:	4b19      	ldr	r3, [pc, #100]	; (800e390 <_strtod_l+0x880>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	f7f2 f8ec 	bl	8000508 <__aeabi_dmul>
 800e330:	460b      	mov	r3, r1
 800e332:	4303      	orrs	r3, r0
 800e334:	bf08      	it	eq
 800e336:	2322      	moveq	r3, #34	; 0x22
 800e338:	4680      	mov	r8, r0
 800e33a:	4689      	mov	r9, r1
 800e33c:	bf08      	it	eq
 800e33e:	f8ca 3000 	streq.w	r3, [sl]
 800e342:	e62f      	b.n	800dfa4 <_strtod_l+0x494>
 800e344:	f04f 32ff 	mov.w	r2, #4294967295
 800e348:	fa02 f303 	lsl.w	r3, r2, r3
 800e34c:	ea03 0808 	and.w	r8, r3, r8
 800e350:	e6e0      	b.n	800e114 <_strtod_l+0x604>
 800e352:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e356:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e35a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e35e:	35e2      	adds	r5, #226	; 0xe2
 800e360:	fa07 f505 	lsl.w	r5, r7, r5
 800e364:	970f      	str	r7, [sp, #60]	; 0x3c
 800e366:	e747      	b.n	800e1f8 <_strtod_l+0x6e8>
 800e368:	2301      	movs	r3, #1
 800e36a:	2500      	movs	r5, #0
 800e36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e36e:	e743      	b.n	800e1f8 <_strtod_l+0x6e8>
 800e370:	463a      	mov	r2, r7
 800e372:	4650      	mov	r0, sl
 800e374:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e376:	f002 f97b 	bl	8010670 <__lshift>
 800e37a:	901a      	str	r0, [sp, #104]	; 0x68
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f47f af69 	bne.w	800e254 <_strtod_l+0x744>
 800e382:	e604      	b.n	800df8e <_strtod_l+0x47e>
 800e384:	08012cd8 	.word	0x08012cd8
 800e388:	fffffc02 	.word	0xfffffc02
 800e38c:	7ff00000 	.word	0x7ff00000
 800e390:	39500000 	.word	0x39500000
 800e394:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e398:	d165      	bne.n	800e466 <_strtod_l+0x956>
 800e39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e39c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3a0:	b35a      	cbz	r2, 800e3fa <_strtod_l+0x8ea>
 800e3a2:	4a99      	ldr	r2, [pc, #612]	; (800e608 <_strtod_l+0xaf8>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d12b      	bne.n	800e400 <_strtod_l+0x8f0>
 800e3a8:	9b05      	ldr	r3, [sp, #20]
 800e3aa:	4641      	mov	r1, r8
 800e3ac:	b303      	cbz	r3, 800e3f0 <_strtod_l+0x8e0>
 800e3ae:	464a      	mov	r2, r9
 800e3b0:	4b96      	ldr	r3, [pc, #600]	; (800e60c <_strtod_l+0xafc>)
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3bc:	d81b      	bhi.n	800e3f6 <_strtod_l+0x8e6>
 800e3be:	0d1b      	lsrs	r3, r3, #20
 800e3c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	d119      	bne.n	800e400 <_strtod_l+0x8f0>
 800e3cc:	4b90      	ldr	r3, [pc, #576]	; (800e610 <_strtod_l+0xb00>)
 800e3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d102      	bne.n	800e3da <_strtod_l+0x8ca>
 800e3d4:	3101      	adds	r1, #1
 800e3d6:	f43f adda 	beq.w	800df8e <_strtod_l+0x47e>
 800e3da:	f04f 0800 	mov.w	r8, #0
 800e3de:	4b8b      	ldr	r3, [pc, #556]	; (800e60c <_strtod_l+0xafc>)
 800e3e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3e2:	401a      	ands	r2, r3
 800e3e4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e3e8:	9b05      	ldr	r3, [sp, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d19a      	bne.n	800e324 <_strtod_l+0x814>
 800e3ee:	e5d9      	b.n	800dfa4 <_strtod_l+0x494>
 800e3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f4:	e7e8      	b.n	800e3c8 <_strtod_l+0x8b8>
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	e7e6      	b.n	800e3c8 <_strtod_l+0x8b8>
 800e3fa:	ea53 0308 	orrs.w	r3, r3, r8
 800e3fe:	d081      	beq.n	800e304 <_strtod_l+0x7f4>
 800e400:	b1e5      	cbz	r5, 800e43c <_strtod_l+0x92c>
 800e402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e404:	421d      	tst	r5, r3
 800e406:	d0ef      	beq.n	800e3e8 <_strtod_l+0x8d8>
 800e408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e40a:	4640      	mov	r0, r8
 800e40c:	4649      	mov	r1, r9
 800e40e:	9a05      	ldr	r2, [sp, #20]
 800e410:	b1c3      	cbz	r3, 800e444 <_strtod_l+0x934>
 800e412:	f7ff fb59 	bl	800dac8 <sulp>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e41e:	f7f1 febd 	bl	800019c <__adddf3>
 800e422:	4680      	mov	r8, r0
 800e424:	4689      	mov	r9, r1
 800e426:	e7df      	b.n	800e3e8 <_strtod_l+0x8d8>
 800e428:	4013      	ands	r3, r2
 800e42a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e42e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e432:	f04f 38ff 	mov.w	r8, #4294967295
 800e436:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e43a:	e7d5      	b.n	800e3e8 <_strtod_l+0x8d8>
 800e43c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e43e:	ea13 0f08 	tst.w	r3, r8
 800e442:	e7e0      	b.n	800e406 <_strtod_l+0x8f6>
 800e444:	f7ff fb40 	bl	800dac8 <sulp>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e450:	f7f1 fea2 	bl	8000198 <__aeabi_dsub>
 800e454:	2200      	movs	r2, #0
 800e456:	2300      	movs	r3, #0
 800e458:	4680      	mov	r8, r0
 800e45a:	4689      	mov	r9, r1
 800e45c:	f7f2 fabc 	bl	80009d8 <__aeabi_dcmpeq>
 800e460:	2800      	cmp	r0, #0
 800e462:	d0c1      	beq.n	800e3e8 <_strtod_l+0x8d8>
 800e464:	e608      	b.n	800e078 <_strtod_l+0x568>
 800e466:	4658      	mov	r0, fp
 800e468:	9904      	ldr	r1, [sp, #16]
 800e46a:	f002 faef 	bl	8010a4c <__ratio>
 800e46e:	2200      	movs	r2, #0
 800e470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e474:	4606      	mov	r6, r0
 800e476:	460f      	mov	r7, r1
 800e478:	f7f2 fac2 	bl	8000a00 <__aeabi_dcmple>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d070      	beq.n	800e562 <_strtod_l+0xa52>
 800e480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e482:	2b00      	cmp	r3, #0
 800e484:	d042      	beq.n	800e50c <_strtod_l+0x9fc>
 800e486:	2600      	movs	r6, #0
 800e488:	4f62      	ldr	r7, [pc, #392]	; (800e614 <_strtod_l+0xb04>)
 800e48a:	4d62      	ldr	r5, [pc, #392]	; (800e614 <_strtod_l+0xb04>)
 800e48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e492:	0d1b      	lsrs	r3, r3, #20
 800e494:	051b      	lsls	r3, r3, #20
 800e496:	930f      	str	r3, [sp, #60]	; 0x3c
 800e498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e49a:	4b5f      	ldr	r3, [pc, #380]	; (800e618 <_strtod_l+0xb08>)
 800e49c:	429a      	cmp	r2, r3
 800e49e:	f040 80c3 	bne.w	800e628 <_strtod_l+0xb18>
 800e4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e4aa:	4649      	mov	r1, r9
 800e4ac:	f002 f9f8 	bl	80108a0 <__ulp>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	f7f2 f826 	bl	8000508 <__aeabi_dmul>
 800e4bc:	4642      	mov	r2, r8
 800e4be:	464b      	mov	r3, r9
 800e4c0:	f7f1 fe6c 	bl	800019c <__adddf3>
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4951      	ldr	r1, [pc, #324]	; (800e60c <_strtod_l+0xafc>)
 800e4c8:	4a54      	ldr	r2, [pc, #336]	; (800e61c <_strtod_l+0xb0c>)
 800e4ca:	4019      	ands	r1, r3
 800e4cc:	4291      	cmp	r1, r2
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	d95d      	bls.n	800e58e <_strtod_l+0xa7e>
 800e4d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4d4:	4b4e      	ldr	r3, [pc, #312]	; (800e610 <_strtod_l+0xb00>)
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d103      	bne.n	800e4e2 <_strtod_l+0x9d2>
 800e4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4dc:	3301      	adds	r3, #1
 800e4de:	f43f ad56 	beq.w	800df8e <_strtod_l+0x47e>
 800e4e2:	f04f 38ff 	mov.w	r8, #4294967295
 800e4e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e610 <_strtod_l+0xb00>
 800e4ea:	4650      	mov	r0, sl
 800e4ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e4ee:	f001 fea7 	bl	8010240 <_Bfree>
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	9906      	ldr	r1, [sp, #24]
 800e4f6:	f001 fea3 	bl	8010240 <_Bfree>
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	9904      	ldr	r1, [sp, #16]
 800e4fe:	f001 fe9f 	bl	8010240 <_Bfree>
 800e502:	4659      	mov	r1, fp
 800e504:	4650      	mov	r0, sl
 800e506:	f001 fe9b 	bl	8010240 <_Bfree>
 800e50a:	e627      	b.n	800e15c <_strtod_l+0x64c>
 800e50c:	f1b8 0f00 	cmp.w	r8, #0
 800e510:	d119      	bne.n	800e546 <_strtod_l+0xa36>
 800e512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e518:	b9e3      	cbnz	r3, 800e554 <_strtod_l+0xa44>
 800e51a:	2200      	movs	r2, #0
 800e51c:	4630      	mov	r0, r6
 800e51e:	4639      	mov	r1, r7
 800e520:	4b3c      	ldr	r3, [pc, #240]	; (800e614 <_strtod_l+0xb04>)
 800e522:	f7f2 fa63 	bl	80009ec <__aeabi_dcmplt>
 800e526:	b9c8      	cbnz	r0, 800e55c <_strtod_l+0xa4c>
 800e528:	2200      	movs	r2, #0
 800e52a:	4630      	mov	r0, r6
 800e52c:	4639      	mov	r1, r7
 800e52e:	4b3c      	ldr	r3, [pc, #240]	; (800e620 <_strtod_l+0xb10>)
 800e530:	f7f1 ffea 	bl	8000508 <__aeabi_dmul>
 800e534:	4604      	mov	r4, r0
 800e536:	460d      	mov	r5, r1
 800e538:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e53c:	9416      	str	r4, [sp, #88]	; 0x58
 800e53e:	9317      	str	r3, [sp, #92]	; 0x5c
 800e540:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e544:	e7a2      	b.n	800e48c <_strtod_l+0x97c>
 800e546:	f1b8 0f01 	cmp.w	r8, #1
 800e54a:	d103      	bne.n	800e554 <_strtod_l+0xa44>
 800e54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f43f ad92 	beq.w	800e078 <_strtod_l+0x568>
 800e554:	2600      	movs	r6, #0
 800e556:	2400      	movs	r4, #0
 800e558:	4f32      	ldr	r7, [pc, #200]	; (800e624 <_strtod_l+0xb14>)
 800e55a:	e796      	b.n	800e48a <_strtod_l+0x97a>
 800e55c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e55e:	4d30      	ldr	r5, [pc, #192]	; (800e620 <_strtod_l+0xb10>)
 800e560:	e7ea      	b.n	800e538 <_strtod_l+0xa28>
 800e562:	4b2f      	ldr	r3, [pc, #188]	; (800e620 <_strtod_l+0xb10>)
 800e564:	2200      	movs	r2, #0
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f1 ffcd 	bl	8000508 <__aeabi_dmul>
 800e56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e570:	4604      	mov	r4, r0
 800e572:	460d      	mov	r5, r1
 800e574:	b933      	cbnz	r3, 800e584 <_strtod_l+0xa74>
 800e576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e57a:	9010      	str	r0, [sp, #64]	; 0x40
 800e57c:	9311      	str	r3, [sp, #68]	; 0x44
 800e57e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e582:	e783      	b.n	800e48c <_strtod_l+0x97c>
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e58c:	e7f7      	b.n	800e57e <_strtod_l+0xa6e>
 800e58e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e592:	9b05      	ldr	r3, [sp, #20]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1a8      	bne.n	800e4ea <_strtod_l+0x9da>
 800e598:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e59c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e59e:	0d1b      	lsrs	r3, r3, #20
 800e5a0:	051b      	lsls	r3, r3, #20
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d1a1      	bne.n	800e4ea <_strtod_l+0x9da>
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7f2 fd6b 	bl	8001084 <__aeabi_d2lz>
 800e5ae:	f7f1 ff7d 	bl	80004ac <__aeabi_l2d>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	f7f1 fded 	bl	8000198 <__aeabi_dsub>
 800e5be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5c4:	ea43 0308 	orr.w	r3, r3, r8
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	460d      	mov	r5, r1
 800e5ce:	d066      	beq.n	800e69e <_strtod_l+0xb8e>
 800e5d0:	a309      	add	r3, pc, #36	; (adr r3, 800e5f8 <_strtod_l+0xae8>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f2 fa09 	bl	80009ec <__aeabi_dcmplt>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	f47f ace2 	bne.w	800dfa4 <_strtod_l+0x494>
 800e5e0:	a307      	add	r3, pc, #28	; (adr r3, 800e600 <_strtod_l+0xaf0>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	f7f2 fa1d 	bl	8000a28 <__aeabi_dcmpgt>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f43f af7b 	beq.w	800e4ea <_strtod_l+0x9da>
 800e5f4:	e4d6      	b.n	800dfa4 <_strtod_l+0x494>
 800e5f6:	bf00      	nop
 800e5f8:	94a03595 	.word	0x94a03595
 800e5fc:	3fdfffff 	.word	0x3fdfffff
 800e600:	35afe535 	.word	0x35afe535
 800e604:	3fe00000 	.word	0x3fe00000
 800e608:	000fffff 	.word	0x000fffff
 800e60c:	7ff00000 	.word	0x7ff00000
 800e610:	7fefffff 	.word	0x7fefffff
 800e614:	3ff00000 	.word	0x3ff00000
 800e618:	7fe00000 	.word	0x7fe00000
 800e61c:	7c9fffff 	.word	0x7c9fffff
 800e620:	3fe00000 	.word	0x3fe00000
 800e624:	bff00000 	.word	0xbff00000
 800e628:	9b05      	ldr	r3, [sp, #20]
 800e62a:	b313      	cbz	r3, 800e672 <_strtod_l+0xb62>
 800e62c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e62e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e632:	d81e      	bhi.n	800e672 <_strtod_l+0xb62>
 800e634:	a326      	add	r3, pc, #152	; (adr r3, 800e6d0 <_strtod_l+0xbc0>)
 800e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63a:	4620      	mov	r0, r4
 800e63c:	4629      	mov	r1, r5
 800e63e:	f7f2 f9df 	bl	8000a00 <__aeabi_dcmple>
 800e642:	b190      	cbz	r0, 800e66a <_strtod_l+0xb5a>
 800e644:	4629      	mov	r1, r5
 800e646:	4620      	mov	r0, r4
 800e648:	f7f2 fa36 	bl	8000ab8 <__aeabi_d2uiz>
 800e64c:	2801      	cmp	r0, #1
 800e64e:	bf38      	it	cc
 800e650:	2001      	movcc	r0, #1
 800e652:	f7f1 fedf 	bl	8000414 <__aeabi_ui2d>
 800e656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e658:	4604      	mov	r4, r0
 800e65a:	460d      	mov	r5, r1
 800e65c:	b9d3      	cbnz	r3, 800e694 <_strtod_l+0xb84>
 800e65e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e662:	9012      	str	r0, [sp, #72]	; 0x48
 800e664:	9313      	str	r3, [sp, #76]	; 0x4c
 800e666:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e66a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e66c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e670:	1a9f      	subs	r7, r3, r2
 800e672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e676:	f002 f913 	bl	80108a0 <__ulp>
 800e67a:	4602      	mov	r2, r0
 800e67c:	460b      	mov	r3, r1
 800e67e:	4630      	mov	r0, r6
 800e680:	4639      	mov	r1, r7
 800e682:	f7f1 ff41 	bl	8000508 <__aeabi_dmul>
 800e686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e68a:	f7f1 fd87 	bl	800019c <__adddf3>
 800e68e:	4680      	mov	r8, r0
 800e690:	4689      	mov	r9, r1
 800e692:	e77e      	b.n	800e592 <_strtod_l+0xa82>
 800e694:	4602      	mov	r2, r0
 800e696:	460b      	mov	r3, r1
 800e698:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e69c:	e7e3      	b.n	800e666 <_strtod_l+0xb56>
 800e69e:	a30e      	add	r3, pc, #56	; (adr r3, 800e6d8 <_strtod_l+0xbc8>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f2 f9a2 	bl	80009ec <__aeabi_dcmplt>
 800e6a8:	e7a1      	b.n	800e5ee <_strtod_l+0xade>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	f7ff ba71 	b.w	800db9a <_strtod_l+0x8a>
 800e6b8:	2a65      	cmp	r2, #101	; 0x65
 800e6ba:	f43f ab63 	beq.w	800dd84 <_strtod_l+0x274>
 800e6be:	2a45      	cmp	r2, #69	; 0x45
 800e6c0:	f43f ab60 	beq.w	800dd84 <_strtod_l+0x274>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	f7ff bb95 	b.w	800ddf4 <_strtod_l+0x2e4>
 800e6ca:	bf00      	nop
 800e6cc:	f3af 8000 	nop.w
 800e6d0:	ffc00000 	.word	0xffc00000
 800e6d4:	41dfffff 	.word	0x41dfffff
 800e6d8:	94a03595 	.word	0x94a03595
 800e6dc:	3fcfffff 	.word	0x3fcfffff

0800e6e0 <_strtod_r>:
 800e6e0:	4b01      	ldr	r3, [pc, #4]	; (800e6e8 <_strtod_r+0x8>)
 800e6e2:	f7ff ba15 	b.w	800db10 <_strtod_l>
 800e6e6:	bf00      	nop
 800e6e8:	200000a0 	.word	0x200000a0

0800e6ec <_strtol_l.constprop.0>:
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f2:	4680      	mov	r8, r0
 800e6f4:	d001      	beq.n	800e6fa <_strtol_l.constprop.0+0xe>
 800e6f6:	2b24      	cmp	r3, #36	; 0x24
 800e6f8:	d906      	bls.n	800e708 <_strtol_l.constprop.0+0x1c>
 800e6fa:	f7fe f993 	bl	800ca24 <__errno>
 800e6fe:	2316      	movs	r3, #22
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	2000      	movs	r0, #0
 800e704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e708:	460d      	mov	r5, r1
 800e70a:	4f35      	ldr	r7, [pc, #212]	; (800e7e0 <_strtol_l.constprop.0+0xf4>)
 800e70c:	4628      	mov	r0, r5
 800e70e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e712:	5de6      	ldrb	r6, [r4, r7]
 800e714:	f016 0608 	ands.w	r6, r6, #8
 800e718:	d1f8      	bne.n	800e70c <_strtol_l.constprop.0+0x20>
 800e71a:	2c2d      	cmp	r4, #45	; 0x2d
 800e71c:	d12f      	bne.n	800e77e <_strtol_l.constprop.0+0x92>
 800e71e:	2601      	movs	r6, #1
 800e720:	782c      	ldrb	r4, [r5, #0]
 800e722:	1c85      	adds	r5, r0, #2
 800e724:	2b00      	cmp	r3, #0
 800e726:	d057      	beq.n	800e7d8 <_strtol_l.constprop.0+0xec>
 800e728:	2b10      	cmp	r3, #16
 800e72a:	d109      	bne.n	800e740 <_strtol_l.constprop.0+0x54>
 800e72c:	2c30      	cmp	r4, #48	; 0x30
 800e72e:	d107      	bne.n	800e740 <_strtol_l.constprop.0+0x54>
 800e730:	7828      	ldrb	r0, [r5, #0]
 800e732:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e736:	2858      	cmp	r0, #88	; 0x58
 800e738:	d149      	bne.n	800e7ce <_strtol_l.constprop.0+0xe2>
 800e73a:	2310      	movs	r3, #16
 800e73c:	786c      	ldrb	r4, [r5, #1]
 800e73e:	3502      	adds	r5, #2
 800e740:	2700      	movs	r7, #0
 800e742:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800e746:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e74a:	fbbe f9f3 	udiv	r9, lr, r3
 800e74e:	4638      	mov	r0, r7
 800e750:	fb03 ea19 	mls	sl, r3, r9, lr
 800e754:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e758:	f1bc 0f09 	cmp.w	ip, #9
 800e75c:	d814      	bhi.n	800e788 <_strtol_l.constprop.0+0x9c>
 800e75e:	4664      	mov	r4, ip
 800e760:	42a3      	cmp	r3, r4
 800e762:	dd22      	ble.n	800e7aa <_strtol_l.constprop.0+0xbe>
 800e764:	2f00      	cmp	r7, #0
 800e766:	db1d      	blt.n	800e7a4 <_strtol_l.constprop.0+0xb8>
 800e768:	4581      	cmp	r9, r0
 800e76a:	d31b      	bcc.n	800e7a4 <_strtol_l.constprop.0+0xb8>
 800e76c:	d101      	bne.n	800e772 <_strtol_l.constprop.0+0x86>
 800e76e:	45a2      	cmp	sl, r4
 800e770:	db18      	blt.n	800e7a4 <_strtol_l.constprop.0+0xb8>
 800e772:	2701      	movs	r7, #1
 800e774:	fb00 4003 	mla	r0, r0, r3, r4
 800e778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e77c:	e7ea      	b.n	800e754 <_strtol_l.constprop.0+0x68>
 800e77e:	2c2b      	cmp	r4, #43	; 0x2b
 800e780:	bf04      	itt	eq
 800e782:	782c      	ldrbeq	r4, [r5, #0]
 800e784:	1c85      	addeq	r5, r0, #2
 800e786:	e7cd      	b.n	800e724 <_strtol_l.constprop.0+0x38>
 800e788:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e78c:	f1bc 0f19 	cmp.w	ip, #25
 800e790:	d801      	bhi.n	800e796 <_strtol_l.constprop.0+0xaa>
 800e792:	3c37      	subs	r4, #55	; 0x37
 800e794:	e7e4      	b.n	800e760 <_strtol_l.constprop.0+0x74>
 800e796:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e79a:	f1bc 0f19 	cmp.w	ip, #25
 800e79e:	d804      	bhi.n	800e7aa <_strtol_l.constprop.0+0xbe>
 800e7a0:	3c57      	subs	r4, #87	; 0x57
 800e7a2:	e7dd      	b.n	800e760 <_strtol_l.constprop.0+0x74>
 800e7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800e7a8:	e7e6      	b.n	800e778 <_strtol_l.constprop.0+0x8c>
 800e7aa:	2f00      	cmp	r7, #0
 800e7ac:	da07      	bge.n	800e7be <_strtol_l.constprop.0+0xd2>
 800e7ae:	2322      	movs	r3, #34	; 0x22
 800e7b0:	4670      	mov	r0, lr
 800e7b2:	f8c8 3000 	str.w	r3, [r8]
 800e7b6:	2a00      	cmp	r2, #0
 800e7b8:	d0a4      	beq.n	800e704 <_strtol_l.constprop.0+0x18>
 800e7ba:	1e69      	subs	r1, r5, #1
 800e7bc:	e005      	b.n	800e7ca <_strtol_l.constprop.0+0xde>
 800e7be:	b106      	cbz	r6, 800e7c2 <_strtol_l.constprop.0+0xd6>
 800e7c0:	4240      	negs	r0, r0
 800e7c2:	2a00      	cmp	r2, #0
 800e7c4:	d09e      	beq.n	800e704 <_strtol_l.constprop.0+0x18>
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	d1f7      	bne.n	800e7ba <_strtol_l.constprop.0+0xce>
 800e7ca:	6011      	str	r1, [r2, #0]
 800e7cc:	e79a      	b.n	800e704 <_strtol_l.constprop.0+0x18>
 800e7ce:	2430      	movs	r4, #48	; 0x30
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1b5      	bne.n	800e740 <_strtol_l.constprop.0+0x54>
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	e7b3      	b.n	800e740 <_strtol_l.constprop.0+0x54>
 800e7d8:	2c30      	cmp	r4, #48	; 0x30
 800e7da:	d0a9      	beq.n	800e730 <_strtol_l.constprop.0+0x44>
 800e7dc:	230a      	movs	r3, #10
 800e7de:	e7af      	b.n	800e740 <_strtol_l.constprop.0+0x54>
 800e7e0:	08012d01 	.word	0x08012d01

0800e7e4 <_strtol_r>:
 800e7e4:	f7ff bf82 	b.w	800e6ec <_strtol_l.constprop.0>

0800e7e8 <__swbuf_r>:
 800e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ea:	460e      	mov	r6, r1
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	b118      	cbz	r0, 800e7fa <__swbuf_r+0x12>
 800e7f2:	6983      	ldr	r3, [r0, #24]
 800e7f4:	b90b      	cbnz	r3, 800e7fa <__swbuf_r+0x12>
 800e7f6:	f001 f847 	bl	800f888 <__sinit>
 800e7fa:	4b21      	ldr	r3, [pc, #132]	; (800e880 <__swbuf_r+0x98>)
 800e7fc:	429c      	cmp	r4, r3
 800e7fe:	d12b      	bne.n	800e858 <__swbuf_r+0x70>
 800e800:	686c      	ldr	r4, [r5, #4]
 800e802:	69a3      	ldr	r3, [r4, #24]
 800e804:	60a3      	str	r3, [r4, #8]
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	071a      	lsls	r2, r3, #28
 800e80a:	d52f      	bpl.n	800e86c <__swbuf_r+0x84>
 800e80c:	6923      	ldr	r3, [r4, #16]
 800e80e:	b36b      	cbz	r3, 800e86c <__swbuf_r+0x84>
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	6820      	ldr	r0, [r4, #0]
 800e814:	b2f6      	uxtb	r6, r6
 800e816:	1ac0      	subs	r0, r0, r3
 800e818:	6963      	ldr	r3, [r4, #20]
 800e81a:	4637      	mov	r7, r6
 800e81c:	4283      	cmp	r3, r0
 800e81e:	dc04      	bgt.n	800e82a <__swbuf_r+0x42>
 800e820:	4621      	mov	r1, r4
 800e822:	4628      	mov	r0, r5
 800e824:	f000 ff9c 	bl	800f760 <_fflush_r>
 800e828:	bb30      	cbnz	r0, 800e878 <__swbuf_r+0x90>
 800e82a:	68a3      	ldr	r3, [r4, #8]
 800e82c:	3001      	adds	r0, #1
 800e82e:	3b01      	subs	r3, #1
 800e830:	60a3      	str	r3, [r4, #8]
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	1c5a      	adds	r2, r3, #1
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	701e      	strb	r6, [r3, #0]
 800e83a:	6963      	ldr	r3, [r4, #20]
 800e83c:	4283      	cmp	r3, r0
 800e83e:	d004      	beq.n	800e84a <__swbuf_r+0x62>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	07db      	lsls	r3, r3, #31
 800e844:	d506      	bpl.n	800e854 <__swbuf_r+0x6c>
 800e846:	2e0a      	cmp	r6, #10
 800e848:	d104      	bne.n	800e854 <__swbuf_r+0x6c>
 800e84a:	4621      	mov	r1, r4
 800e84c:	4628      	mov	r0, r5
 800e84e:	f000 ff87 	bl	800f760 <_fflush_r>
 800e852:	b988      	cbnz	r0, 800e878 <__swbuf_r+0x90>
 800e854:	4638      	mov	r0, r7
 800e856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e858:	4b0a      	ldr	r3, [pc, #40]	; (800e884 <__swbuf_r+0x9c>)
 800e85a:	429c      	cmp	r4, r3
 800e85c:	d101      	bne.n	800e862 <__swbuf_r+0x7a>
 800e85e:	68ac      	ldr	r4, [r5, #8]
 800e860:	e7cf      	b.n	800e802 <__swbuf_r+0x1a>
 800e862:	4b09      	ldr	r3, [pc, #36]	; (800e888 <__swbuf_r+0xa0>)
 800e864:	429c      	cmp	r4, r3
 800e866:	bf08      	it	eq
 800e868:	68ec      	ldreq	r4, [r5, #12]
 800e86a:	e7ca      	b.n	800e802 <__swbuf_r+0x1a>
 800e86c:	4621      	mov	r1, r4
 800e86e:	4628      	mov	r0, r5
 800e870:	f000 f80c 	bl	800e88c <__swsetup_r>
 800e874:	2800      	cmp	r0, #0
 800e876:	d0cb      	beq.n	800e810 <__swbuf_r+0x28>
 800e878:	f04f 37ff 	mov.w	r7, #4294967295
 800e87c:	e7ea      	b.n	800e854 <__swbuf_r+0x6c>
 800e87e:	bf00      	nop
 800e880:	08012eb4 	.word	0x08012eb4
 800e884:	08012ed4 	.word	0x08012ed4
 800e888:	08012e94 	.word	0x08012e94

0800e88c <__swsetup_r>:
 800e88c:	4b32      	ldr	r3, [pc, #200]	; (800e958 <__swsetup_r+0xcc>)
 800e88e:	b570      	push	{r4, r5, r6, lr}
 800e890:	681d      	ldr	r5, [r3, #0]
 800e892:	4606      	mov	r6, r0
 800e894:	460c      	mov	r4, r1
 800e896:	b125      	cbz	r5, 800e8a2 <__swsetup_r+0x16>
 800e898:	69ab      	ldr	r3, [r5, #24]
 800e89a:	b913      	cbnz	r3, 800e8a2 <__swsetup_r+0x16>
 800e89c:	4628      	mov	r0, r5
 800e89e:	f000 fff3 	bl	800f888 <__sinit>
 800e8a2:	4b2e      	ldr	r3, [pc, #184]	; (800e95c <__swsetup_r+0xd0>)
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d10f      	bne.n	800e8c8 <__swsetup_r+0x3c>
 800e8a8:	686c      	ldr	r4, [r5, #4]
 800e8aa:	89a3      	ldrh	r3, [r4, #12]
 800e8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8b0:	0719      	lsls	r1, r3, #28
 800e8b2:	d42c      	bmi.n	800e90e <__swsetup_r+0x82>
 800e8b4:	06dd      	lsls	r5, r3, #27
 800e8b6:	d411      	bmi.n	800e8dc <__swsetup_r+0x50>
 800e8b8:	2309      	movs	r3, #9
 800e8ba:	6033      	str	r3, [r6, #0]
 800e8bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c4:	81a3      	strh	r3, [r4, #12]
 800e8c6:	e03e      	b.n	800e946 <__swsetup_r+0xba>
 800e8c8:	4b25      	ldr	r3, [pc, #148]	; (800e960 <__swsetup_r+0xd4>)
 800e8ca:	429c      	cmp	r4, r3
 800e8cc:	d101      	bne.n	800e8d2 <__swsetup_r+0x46>
 800e8ce:	68ac      	ldr	r4, [r5, #8]
 800e8d0:	e7eb      	b.n	800e8aa <__swsetup_r+0x1e>
 800e8d2:	4b24      	ldr	r3, [pc, #144]	; (800e964 <__swsetup_r+0xd8>)
 800e8d4:	429c      	cmp	r4, r3
 800e8d6:	bf08      	it	eq
 800e8d8:	68ec      	ldreq	r4, [r5, #12]
 800e8da:	e7e6      	b.n	800e8aa <__swsetup_r+0x1e>
 800e8dc:	0758      	lsls	r0, r3, #29
 800e8de:	d512      	bpl.n	800e906 <__swsetup_r+0x7a>
 800e8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8e2:	b141      	cbz	r1, 800e8f6 <__swsetup_r+0x6a>
 800e8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8e8:	4299      	cmp	r1, r3
 800e8ea:	d002      	beq.n	800e8f2 <__swsetup_r+0x66>
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f7fe f8e1 	bl	800cab4 <_free_r>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8fc:	81a3      	strh	r3, [r4, #12]
 800e8fe:	2300      	movs	r3, #0
 800e900:	6063      	str	r3, [r4, #4]
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f043 0308 	orr.w	r3, r3, #8
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	6923      	ldr	r3, [r4, #16]
 800e910:	b94b      	cbnz	r3, 800e926 <__swsetup_r+0x9a>
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e91c:	d003      	beq.n	800e926 <__swsetup_r+0x9a>
 800e91e:	4621      	mov	r1, r4
 800e920:	4630      	mov	r0, r6
 800e922:	f001 fbe1 	bl	80100e8 <__smakebuf_r>
 800e926:	89a0      	ldrh	r0, [r4, #12]
 800e928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e92c:	f010 0301 	ands.w	r3, r0, #1
 800e930:	d00a      	beq.n	800e948 <__swsetup_r+0xbc>
 800e932:	2300      	movs	r3, #0
 800e934:	60a3      	str	r3, [r4, #8]
 800e936:	6963      	ldr	r3, [r4, #20]
 800e938:	425b      	negs	r3, r3
 800e93a:	61a3      	str	r3, [r4, #24]
 800e93c:	6923      	ldr	r3, [r4, #16]
 800e93e:	b943      	cbnz	r3, 800e952 <__swsetup_r+0xc6>
 800e940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e944:	d1ba      	bne.n	800e8bc <__swsetup_r+0x30>
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	0781      	lsls	r1, r0, #30
 800e94a:	bf58      	it	pl
 800e94c:	6963      	ldrpl	r3, [r4, #20]
 800e94e:	60a3      	str	r3, [r4, #8]
 800e950:	e7f4      	b.n	800e93c <__swsetup_r+0xb0>
 800e952:	2000      	movs	r0, #0
 800e954:	e7f7      	b.n	800e946 <__swsetup_r+0xba>
 800e956:	bf00      	nop
 800e958:	20000038 	.word	0x20000038
 800e95c:	08012eb4 	.word	0x08012eb4
 800e960:	08012ed4 	.word	0x08012ed4
 800e964:	08012e94 	.word	0x08012e94

0800e968 <quorem>:
 800e968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	6903      	ldr	r3, [r0, #16]
 800e96e:	690c      	ldr	r4, [r1, #16]
 800e970:	4607      	mov	r7, r0
 800e972:	42a3      	cmp	r3, r4
 800e974:	f2c0 8082 	blt.w	800ea7c <quorem+0x114>
 800e978:	3c01      	subs	r4, #1
 800e97a:	f100 0514 	add.w	r5, r0, #20
 800e97e:	f101 0814 	add.w	r8, r1, #20
 800e982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e986:	9301      	str	r3, [sp, #4]
 800e988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e98c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e990:	3301      	adds	r3, #1
 800e992:	429a      	cmp	r2, r3
 800e994:	fbb2 f6f3 	udiv	r6, r2, r3
 800e998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e99c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e9a0:	d331      	bcc.n	800ea06 <quorem+0x9e>
 800e9a2:	f04f 0e00 	mov.w	lr, #0
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	46ac      	mov	ip, r5
 800e9aa:	46f2      	mov	sl, lr
 800e9ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800e9b0:	b293      	uxth	r3, r2
 800e9b2:	fb06 e303 	mla	r3, r6, r3, lr
 800e9b6:	0c12      	lsrs	r2, r2, #16
 800e9b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	fb06 e202 	mla	r2, r6, r2, lr
 800e9c2:	ebaa 0303 	sub.w	r3, sl, r3
 800e9c6:	f8dc a000 	ldr.w	sl, [ip]
 800e9ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e9ce:	fa1f fa8a 	uxth.w	sl, sl
 800e9d2:	4453      	add	r3, sl
 800e9d4:	f8dc a000 	ldr.w	sl, [ip]
 800e9d8:	b292      	uxth	r2, r2
 800e9da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e9de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9e8:	4581      	cmp	r9, r0
 800e9ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9ee:	f84c 3b04 	str.w	r3, [ip], #4
 800e9f2:	d2db      	bcs.n	800e9ac <quorem+0x44>
 800e9f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9f8:	b92b      	cbnz	r3, 800ea06 <quorem+0x9e>
 800e9fa:	9b01      	ldr	r3, [sp, #4]
 800e9fc:	3b04      	subs	r3, #4
 800e9fe:	429d      	cmp	r5, r3
 800ea00:	461a      	mov	r2, r3
 800ea02:	d32f      	bcc.n	800ea64 <quorem+0xfc>
 800ea04:	613c      	str	r4, [r7, #16]
 800ea06:	4638      	mov	r0, r7
 800ea08:	f001 fea2 	bl	8010750 <__mcmp>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	db25      	blt.n	800ea5c <quorem+0xf4>
 800ea10:	4628      	mov	r0, r5
 800ea12:	f04f 0c00 	mov.w	ip, #0
 800ea16:	3601      	adds	r6, #1
 800ea18:	f858 1b04 	ldr.w	r1, [r8], #4
 800ea1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ea20:	b28b      	uxth	r3, r1
 800ea22:	ebac 0303 	sub.w	r3, ip, r3
 800ea26:	fa1f f28e 	uxth.w	r2, lr
 800ea2a:	4413      	add	r3, r2
 800ea2c:	0c0a      	lsrs	r2, r1, #16
 800ea2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea3c:	45c1      	cmp	r9, r8
 800ea3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea42:	f840 3b04 	str.w	r3, [r0], #4
 800ea46:	d2e7      	bcs.n	800ea18 <quorem+0xb0>
 800ea48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea50:	b922      	cbnz	r2, 800ea5c <quorem+0xf4>
 800ea52:	3b04      	subs	r3, #4
 800ea54:	429d      	cmp	r5, r3
 800ea56:	461a      	mov	r2, r3
 800ea58:	d30a      	bcc.n	800ea70 <quorem+0x108>
 800ea5a:	613c      	str	r4, [r7, #16]
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	b003      	add	sp, #12
 800ea60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea64:	6812      	ldr	r2, [r2, #0]
 800ea66:	3b04      	subs	r3, #4
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	d1cb      	bne.n	800ea04 <quorem+0x9c>
 800ea6c:	3c01      	subs	r4, #1
 800ea6e:	e7c6      	b.n	800e9fe <quorem+0x96>
 800ea70:	6812      	ldr	r2, [r2, #0]
 800ea72:	3b04      	subs	r3, #4
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	d1f0      	bne.n	800ea5a <quorem+0xf2>
 800ea78:	3c01      	subs	r4, #1
 800ea7a:	e7eb      	b.n	800ea54 <quorem+0xec>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e7ee      	b.n	800ea5e <quorem+0xf6>

0800ea80 <_dtoa_r>:
 800ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea84:	4616      	mov	r6, r2
 800ea86:	461f      	mov	r7, r3
 800ea88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea8a:	b099      	sub	sp, #100	; 0x64
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea96:	b974      	cbnz	r4, 800eab6 <_dtoa_r+0x36>
 800ea98:	2010      	movs	r0, #16
 800ea9a:	f7fd ffed 	bl	800ca78 <malloc>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	6268      	str	r0, [r5, #36]	; 0x24
 800eaa2:	b920      	cbnz	r0, 800eaae <_dtoa_r+0x2e>
 800eaa4:	21ea      	movs	r1, #234	; 0xea
 800eaa6:	4ba8      	ldr	r3, [pc, #672]	; (800ed48 <_dtoa_r+0x2c8>)
 800eaa8:	48a8      	ldr	r0, [pc, #672]	; (800ed4c <_dtoa_r+0x2cc>)
 800eaaa:	f002 fa2d 	bl	8010f08 <__assert_func>
 800eaae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eab2:	6004      	str	r4, [r0, #0]
 800eab4:	60c4      	str	r4, [r0, #12]
 800eab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eab8:	6819      	ldr	r1, [r3, #0]
 800eaba:	b151      	cbz	r1, 800ead2 <_dtoa_r+0x52>
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	2301      	movs	r3, #1
 800eac0:	4093      	lsls	r3, r2
 800eac2:	604a      	str	r2, [r1, #4]
 800eac4:	608b      	str	r3, [r1, #8]
 800eac6:	4628      	mov	r0, r5
 800eac8:	f001 fbba 	bl	8010240 <_Bfree>
 800eacc:	2200      	movs	r2, #0
 800eace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	1e3b      	subs	r3, r7, #0
 800ead4:	bfaf      	iteee	ge
 800ead6:	2300      	movge	r3, #0
 800ead8:	2201      	movlt	r2, #1
 800eada:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eade:	9305      	strlt	r3, [sp, #20]
 800eae0:	bfa8      	it	ge
 800eae2:	f8c8 3000 	strge.w	r3, [r8]
 800eae6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eaea:	4b99      	ldr	r3, [pc, #612]	; (800ed50 <_dtoa_r+0x2d0>)
 800eaec:	bfb8      	it	lt
 800eaee:	f8c8 2000 	strlt.w	r2, [r8]
 800eaf2:	ea33 0309 	bics.w	r3, r3, r9
 800eaf6:	d119      	bne.n	800eb2c <_dtoa_r+0xac>
 800eaf8:	f242 730f 	movw	r3, #9999	; 0x270f
 800eafc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb04:	4333      	orrs	r3, r6
 800eb06:	f000 857f 	beq.w	800f608 <_dtoa_r+0xb88>
 800eb0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb0c:	b953      	cbnz	r3, 800eb24 <_dtoa_r+0xa4>
 800eb0e:	4b91      	ldr	r3, [pc, #580]	; (800ed54 <_dtoa_r+0x2d4>)
 800eb10:	e022      	b.n	800eb58 <_dtoa_r+0xd8>
 800eb12:	4b91      	ldr	r3, [pc, #580]	; (800ed58 <_dtoa_r+0x2d8>)
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	3308      	adds	r3, #8
 800eb18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	9803      	ldr	r0, [sp, #12]
 800eb1e:	b019      	add	sp, #100	; 0x64
 800eb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb24:	4b8b      	ldr	r3, [pc, #556]	; (800ed54 <_dtoa_r+0x2d4>)
 800eb26:	9303      	str	r3, [sp, #12]
 800eb28:	3303      	adds	r3, #3
 800eb2a:	e7f5      	b.n	800eb18 <_dtoa_r+0x98>
 800eb2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eb30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eb34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f7f1 ff4c 	bl	80009d8 <__aeabi_dcmpeq>
 800eb40:	4680      	mov	r8, r0
 800eb42:	b158      	cbz	r0, 800eb5c <_dtoa_r+0xdc>
 800eb44:	2301      	movs	r3, #1
 800eb46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f000 8558 	beq.w	800f602 <_dtoa_r+0xb82>
 800eb52:	4882      	ldr	r0, [pc, #520]	; (800ed5c <_dtoa_r+0x2dc>)
 800eb54:	6018      	str	r0, [r3, #0]
 800eb56:	1e43      	subs	r3, r0, #1
 800eb58:	9303      	str	r3, [sp, #12]
 800eb5a:	e7df      	b.n	800eb1c <_dtoa_r+0x9c>
 800eb5c:	ab16      	add	r3, sp, #88	; 0x58
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	ab17      	add	r3, sp, #92	; 0x5c
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	4628      	mov	r0, r5
 800eb66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb6a:	f001 ff13 	bl	8010994 <__d2b>
 800eb6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb72:	4683      	mov	fp, r0
 800eb74:	2c00      	cmp	r4, #0
 800eb76:	d07f      	beq.n	800ec78 <_dtoa_r+0x1f8>
 800eb78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb92:	2200      	movs	r2, #0
 800eb94:	4b72      	ldr	r3, [pc, #456]	; (800ed60 <_dtoa_r+0x2e0>)
 800eb96:	f7f1 faff 	bl	8000198 <__aeabi_dsub>
 800eb9a:	a365      	add	r3, pc, #404	; (adr r3, 800ed30 <_dtoa_r+0x2b0>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fcb2 	bl	8000508 <__aeabi_dmul>
 800eba4:	a364      	add	r3, pc, #400	; (adr r3, 800ed38 <_dtoa_r+0x2b8>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	f7f1 faf7 	bl	800019c <__adddf3>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	460f      	mov	r7, r1
 800ebb4:	f7f1 fc3e 	bl	8000434 <__aeabi_i2d>
 800ebb8:	a361      	add	r3, pc, #388	; (adr r3, 800ed40 <_dtoa_r+0x2c0>)
 800ebba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbe:	f7f1 fca3 	bl	8000508 <__aeabi_dmul>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	4639      	mov	r1, r7
 800ebca:	f7f1 fae7 	bl	800019c <__adddf3>
 800ebce:	4606      	mov	r6, r0
 800ebd0:	460f      	mov	r7, r1
 800ebd2:	f7f1 ff49 	bl	8000a68 <__aeabi_d2iz>
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4682      	mov	sl, r0
 800ebda:	2300      	movs	r3, #0
 800ebdc:	4630      	mov	r0, r6
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 ff04 	bl	80009ec <__aeabi_dcmplt>
 800ebe4:	b148      	cbz	r0, 800ebfa <_dtoa_r+0x17a>
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	f7f1 fc24 	bl	8000434 <__aeabi_i2d>
 800ebec:	4632      	mov	r2, r6
 800ebee:	463b      	mov	r3, r7
 800ebf0:	f7f1 fef2 	bl	80009d8 <__aeabi_dcmpeq>
 800ebf4:	b908      	cbnz	r0, 800ebfa <_dtoa_r+0x17a>
 800ebf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebfa:	f1ba 0f16 	cmp.w	sl, #22
 800ebfe:	d858      	bhi.n	800ecb2 <_dtoa_r+0x232>
 800ec00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec04:	4b57      	ldr	r3, [pc, #348]	; (800ed64 <_dtoa_r+0x2e4>)
 800ec06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 feed 	bl	80009ec <__aeabi_dcmplt>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d04f      	beq.n	800ecb6 <_dtoa_r+0x236>
 800ec16:	2300      	movs	r3, #0
 800ec18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec20:	1b1c      	subs	r4, r3, r4
 800ec22:	1e63      	subs	r3, r4, #1
 800ec24:	9309      	str	r3, [sp, #36]	; 0x24
 800ec26:	bf49      	itett	mi
 800ec28:	f1c4 0301 	rsbmi	r3, r4, #1
 800ec2c:	2300      	movpl	r3, #0
 800ec2e:	9306      	strmi	r3, [sp, #24]
 800ec30:	2300      	movmi	r3, #0
 800ec32:	bf54      	ite	pl
 800ec34:	9306      	strpl	r3, [sp, #24]
 800ec36:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ec38:	f1ba 0f00 	cmp.w	sl, #0
 800ec3c:	db3d      	blt.n	800ecba <_dtoa_r+0x23a>
 800ec3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ec44:	4453      	add	r3, sl
 800ec46:	9309      	str	r3, [sp, #36]	; 0x24
 800ec48:	2300      	movs	r3, #0
 800ec4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ec4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec4e:	2b09      	cmp	r3, #9
 800ec50:	f200 808c 	bhi.w	800ed6c <_dtoa_r+0x2ec>
 800ec54:	2b05      	cmp	r3, #5
 800ec56:	bfc4      	itt	gt
 800ec58:	3b04      	subgt	r3, #4
 800ec5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ec5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec5e:	bfc8      	it	gt
 800ec60:	2400      	movgt	r4, #0
 800ec62:	f1a3 0302 	sub.w	r3, r3, #2
 800ec66:	bfd8      	it	le
 800ec68:	2401      	movle	r4, #1
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	f200 808a 	bhi.w	800ed84 <_dtoa_r+0x304>
 800ec70:	e8df f003 	tbb	[pc, r3]
 800ec74:	5b4d4f2d 	.word	0x5b4d4f2d
 800ec78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ec7c:	441c      	add	r4, r3
 800ec7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec82:	2b20      	cmp	r3, #32
 800ec84:	bfc3      	ittte	gt
 800ec86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec8e:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec92:	f1c3 0320 	rsble	r3, r3, #32
 800ec96:	bfc6      	itte	gt
 800ec98:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec9c:	4318      	orrgt	r0, r3
 800ec9e:	fa06 f003 	lslle.w	r0, r6, r3
 800eca2:	f7f1 fbb7 	bl	8000414 <__aeabi_ui2d>
 800eca6:	2301      	movs	r3, #1
 800eca8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ecac:	3c01      	subs	r4, #1
 800ecae:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecb0:	e76f      	b.n	800eb92 <_dtoa_r+0x112>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e7b2      	b.n	800ec1c <_dtoa_r+0x19c>
 800ecb6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ecb8:	e7b1      	b.n	800ec1e <_dtoa_r+0x19e>
 800ecba:	9b06      	ldr	r3, [sp, #24]
 800ecbc:	eba3 030a 	sub.w	r3, r3, sl
 800ecc0:	9306      	str	r3, [sp, #24]
 800ecc2:	f1ca 0300 	rsb	r3, sl, #0
 800ecc6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecc8:	2300      	movs	r3, #0
 800ecca:	930e      	str	r3, [sp, #56]	; 0x38
 800eccc:	e7be      	b.n	800ec4c <_dtoa_r+0x1cc>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dc58      	bgt.n	800ed8a <_dtoa_r+0x30a>
 800ecd8:	f04f 0901 	mov.w	r9, #1
 800ecdc:	464b      	mov	r3, r9
 800ecde:	f8cd 9020 	str.w	r9, [sp, #32]
 800ece2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ece6:	2200      	movs	r2, #0
 800ece8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ecea:	6042      	str	r2, [r0, #4]
 800ecec:	2204      	movs	r2, #4
 800ecee:	f102 0614 	add.w	r6, r2, #20
 800ecf2:	429e      	cmp	r6, r3
 800ecf4:	6841      	ldr	r1, [r0, #4]
 800ecf6:	d94e      	bls.n	800ed96 <_dtoa_r+0x316>
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f001 fa61 	bl	80101c0 <_Balloc>
 800ecfe:	9003      	str	r0, [sp, #12]
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d14c      	bne.n	800ed9e <_dtoa_r+0x31e>
 800ed04:	4602      	mov	r2, r0
 800ed06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ed0a:	4b17      	ldr	r3, [pc, #92]	; (800ed68 <_dtoa_r+0x2e8>)
 800ed0c:	e6cc      	b.n	800eaa8 <_dtoa_r+0x28>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e7de      	b.n	800ecd0 <_dtoa_r+0x250>
 800ed12:	2300      	movs	r3, #0
 800ed14:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed18:	eb0a 0903 	add.w	r9, sl, r3
 800ed1c:	f109 0301 	add.w	r3, r9, #1
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	9308      	str	r3, [sp, #32]
 800ed24:	bfb8      	it	lt
 800ed26:	2301      	movlt	r3, #1
 800ed28:	e7dd      	b.n	800ece6 <_dtoa_r+0x266>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e7f2      	b.n	800ed14 <_dtoa_r+0x294>
 800ed2e:	bf00      	nop
 800ed30:	636f4361 	.word	0x636f4361
 800ed34:	3fd287a7 	.word	0x3fd287a7
 800ed38:	8b60c8b3 	.word	0x8b60c8b3
 800ed3c:	3fc68a28 	.word	0x3fc68a28
 800ed40:	509f79fb 	.word	0x509f79fb
 800ed44:	3fd34413 	.word	0x3fd34413
 800ed48:	08012e0e 	.word	0x08012e0e
 800ed4c:	08012e25 	.word	0x08012e25
 800ed50:	7ff00000 	.word	0x7ff00000
 800ed54:	08012e0a 	.word	0x08012e0a
 800ed58:	08012e01 	.word	0x08012e01
 800ed5c:	08012c81 	.word	0x08012c81
 800ed60:	3ff80000 	.word	0x3ff80000
 800ed64:	08012ff8 	.word	0x08012ff8
 800ed68:	08012e80 	.word	0x08012e80
 800ed6c:	2401      	movs	r4, #1
 800ed6e:	2300      	movs	r3, #0
 800ed70:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed72:	9322      	str	r3, [sp, #136]	; 0x88
 800ed74:	f04f 39ff 	mov.w	r9, #4294967295
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2312      	movs	r3, #18
 800ed7c:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed80:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed82:	e7b0      	b.n	800ece6 <_dtoa_r+0x266>
 800ed84:	2301      	movs	r3, #1
 800ed86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed88:	e7f4      	b.n	800ed74 <_dtoa_r+0x2f4>
 800ed8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed8e:	464b      	mov	r3, r9
 800ed90:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed94:	e7a7      	b.n	800ece6 <_dtoa_r+0x266>
 800ed96:	3101      	adds	r1, #1
 800ed98:	6041      	str	r1, [r0, #4]
 800ed9a:	0052      	lsls	r2, r2, #1
 800ed9c:	e7a7      	b.n	800ecee <_dtoa_r+0x26e>
 800ed9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eda0:	9a03      	ldr	r2, [sp, #12]
 800eda2:	601a      	str	r2, [r3, #0]
 800eda4:	9b08      	ldr	r3, [sp, #32]
 800eda6:	2b0e      	cmp	r3, #14
 800eda8:	f200 80a8 	bhi.w	800eefc <_dtoa_r+0x47c>
 800edac:	2c00      	cmp	r4, #0
 800edae:	f000 80a5 	beq.w	800eefc <_dtoa_r+0x47c>
 800edb2:	f1ba 0f00 	cmp.w	sl, #0
 800edb6:	dd34      	ble.n	800ee22 <_dtoa_r+0x3a2>
 800edb8:	4a9a      	ldr	r2, [pc, #616]	; (800f024 <_dtoa_r+0x5a4>)
 800edba:	f00a 030f 	and.w	r3, sl, #15
 800edbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800edc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800edca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800edce:	ea4f 142a 	mov.w	r4, sl, asr #4
 800edd2:	d016      	beq.n	800ee02 <_dtoa_r+0x382>
 800edd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edd8:	4b93      	ldr	r3, [pc, #588]	; (800f028 <_dtoa_r+0x5a8>)
 800edda:	2703      	movs	r7, #3
 800eddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ede0:	f7f1 fcbc 	bl	800075c <__aeabi_ddiv>
 800ede4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ede8:	f004 040f 	and.w	r4, r4, #15
 800edec:	4e8e      	ldr	r6, [pc, #568]	; (800f028 <_dtoa_r+0x5a8>)
 800edee:	b954      	cbnz	r4, 800ee06 <_dtoa_r+0x386>
 800edf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800edf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800edf8:	f7f1 fcb0 	bl	800075c <__aeabi_ddiv>
 800edfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee00:	e029      	b.n	800ee56 <_dtoa_r+0x3d6>
 800ee02:	2702      	movs	r7, #2
 800ee04:	e7f2      	b.n	800edec <_dtoa_r+0x36c>
 800ee06:	07e1      	lsls	r1, r4, #31
 800ee08:	d508      	bpl.n	800ee1c <_dtoa_r+0x39c>
 800ee0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee12:	f7f1 fb79 	bl	8000508 <__aeabi_dmul>
 800ee16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee1a:	3701      	adds	r7, #1
 800ee1c:	1064      	asrs	r4, r4, #1
 800ee1e:	3608      	adds	r6, #8
 800ee20:	e7e5      	b.n	800edee <_dtoa_r+0x36e>
 800ee22:	f000 80a5 	beq.w	800ef70 <_dtoa_r+0x4f0>
 800ee26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee2a:	f1ca 0400 	rsb	r4, sl, #0
 800ee2e:	4b7d      	ldr	r3, [pc, #500]	; (800f024 <_dtoa_r+0x5a4>)
 800ee30:	f004 020f 	and.w	r2, r4, #15
 800ee34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	f7f1 fb64 	bl	8000508 <__aeabi_dmul>
 800ee40:	2702      	movs	r7, #2
 800ee42:	2300      	movs	r3, #0
 800ee44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee48:	4e77      	ldr	r6, [pc, #476]	; (800f028 <_dtoa_r+0x5a8>)
 800ee4a:	1124      	asrs	r4, r4, #4
 800ee4c:	2c00      	cmp	r4, #0
 800ee4e:	f040 8084 	bne.w	800ef5a <_dtoa_r+0x4da>
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1d2      	bne.n	800edfc <_dtoa_r+0x37c>
 800ee56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f000 808b 	beq.w	800ef74 <_dtoa_r+0x4f4>
 800ee5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ee62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	4b6f      	ldr	r3, [pc, #444]	; (800f02c <_dtoa_r+0x5ac>)
 800ee6e:	f7f1 fdbd 	bl	80009ec <__aeabi_dcmplt>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d07e      	beq.n	800ef74 <_dtoa_r+0x4f4>
 800ee76:	9b08      	ldr	r3, [sp, #32]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d07b      	beq.n	800ef74 <_dtoa_r+0x4f4>
 800ee7c:	f1b9 0f00 	cmp.w	r9, #0
 800ee80:	dd38      	ble.n	800eef4 <_dtoa_r+0x474>
 800ee82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee86:	2200      	movs	r2, #0
 800ee88:	4b69      	ldr	r3, [pc, #420]	; (800f030 <_dtoa_r+0x5b0>)
 800ee8a:	f7f1 fb3d 	bl	8000508 <__aeabi_dmul>
 800ee8e:	464c      	mov	r4, r9
 800ee90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee94:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ee98:	3701      	adds	r7, #1
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7f1 faca 	bl	8000434 <__aeabi_i2d>
 800eea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eea4:	f7f1 fb30 	bl	8000508 <__aeabi_dmul>
 800eea8:	2200      	movs	r2, #0
 800eeaa:	4b62      	ldr	r3, [pc, #392]	; (800f034 <_dtoa_r+0x5b4>)
 800eeac:	f7f1 f976 	bl	800019c <__adddf3>
 800eeb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eeb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eeb8:	9611      	str	r6, [sp, #68]	; 0x44
 800eeba:	2c00      	cmp	r4, #0
 800eebc:	d15d      	bne.n	800ef7a <_dtoa_r+0x4fa>
 800eebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eec2:	2200      	movs	r2, #0
 800eec4:	4b5c      	ldr	r3, [pc, #368]	; (800f038 <_dtoa_r+0x5b8>)
 800eec6:	f7f1 f967 	bl	8000198 <__aeabi_dsub>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eed2:	4633      	mov	r3, r6
 800eed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eed6:	f7f1 fda7 	bl	8000a28 <__aeabi_dcmpgt>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	f040 829c 	bne.w	800f418 <_dtoa_r+0x998>
 800eee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eee6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eeea:	f7f1 fd7f 	bl	80009ec <__aeabi_dcmplt>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	f040 8290 	bne.w	800f414 <_dtoa_r+0x994>
 800eef4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800eef8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eefc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f2c0 8152 	blt.w	800f1a8 <_dtoa_r+0x728>
 800ef04:	f1ba 0f0e 	cmp.w	sl, #14
 800ef08:	f300 814e 	bgt.w	800f1a8 <_dtoa_r+0x728>
 800ef0c:	4b45      	ldr	r3, [pc, #276]	; (800f024 <_dtoa_r+0x5a4>)
 800ef0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ef16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ef1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f280 80db 	bge.w	800f0d8 <_dtoa_r+0x658>
 800ef22:	9b08      	ldr	r3, [sp, #32]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f300 80d7 	bgt.w	800f0d8 <_dtoa_r+0x658>
 800ef2a:	f040 8272 	bne.w	800f412 <_dtoa_r+0x992>
 800ef2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef32:	2200      	movs	r2, #0
 800ef34:	4b40      	ldr	r3, [pc, #256]	; (800f038 <_dtoa_r+0x5b8>)
 800ef36:	f7f1 fae7 	bl	8000508 <__aeabi_dmul>
 800ef3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef3e:	f7f1 fd69 	bl	8000a14 <__aeabi_dcmpge>
 800ef42:	9c08      	ldr	r4, [sp, #32]
 800ef44:	4626      	mov	r6, r4
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f040 8248 	bne.w	800f3dc <_dtoa_r+0x95c>
 800ef4c:	2331      	movs	r3, #49	; 0x31
 800ef4e:	9f03      	ldr	r7, [sp, #12]
 800ef50:	f10a 0a01 	add.w	sl, sl, #1
 800ef54:	f807 3b01 	strb.w	r3, [r7], #1
 800ef58:	e244      	b.n	800f3e4 <_dtoa_r+0x964>
 800ef5a:	07e2      	lsls	r2, r4, #31
 800ef5c:	d505      	bpl.n	800ef6a <_dtoa_r+0x4ea>
 800ef5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef62:	f7f1 fad1 	bl	8000508 <__aeabi_dmul>
 800ef66:	2301      	movs	r3, #1
 800ef68:	3701      	adds	r7, #1
 800ef6a:	1064      	asrs	r4, r4, #1
 800ef6c:	3608      	adds	r6, #8
 800ef6e:	e76d      	b.n	800ee4c <_dtoa_r+0x3cc>
 800ef70:	2702      	movs	r7, #2
 800ef72:	e770      	b.n	800ee56 <_dtoa_r+0x3d6>
 800ef74:	46d0      	mov	r8, sl
 800ef76:	9c08      	ldr	r4, [sp, #32]
 800ef78:	e78f      	b.n	800ee9a <_dtoa_r+0x41a>
 800ef7a:	9903      	ldr	r1, [sp, #12]
 800ef7c:	4b29      	ldr	r3, [pc, #164]	; (800f024 <_dtoa_r+0x5a4>)
 800ef7e:	4421      	add	r1, r4
 800ef80:	9112      	str	r1, [sp, #72]	; 0x48
 800ef82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef90:	2900      	cmp	r1, #0
 800ef92:	d055      	beq.n	800f040 <_dtoa_r+0x5c0>
 800ef94:	2000      	movs	r0, #0
 800ef96:	4929      	ldr	r1, [pc, #164]	; (800f03c <_dtoa_r+0x5bc>)
 800ef98:	f7f1 fbe0 	bl	800075c <__aeabi_ddiv>
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	4632      	mov	r2, r6
 800efa0:	f7f1 f8fa 	bl	8000198 <__aeabi_dsub>
 800efa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efa8:	9f03      	ldr	r7, [sp, #12]
 800efaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efae:	f7f1 fd5b 	bl	8000a68 <__aeabi_d2iz>
 800efb2:	4604      	mov	r4, r0
 800efb4:	f7f1 fa3e 	bl	8000434 <__aeabi_i2d>
 800efb8:	4602      	mov	r2, r0
 800efba:	460b      	mov	r3, r1
 800efbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efc0:	f7f1 f8ea 	bl	8000198 <__aeabi_dsub>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	3430      	adds	r4, #48	; 0x30
 800efca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800efd2:	f807 4b01 	strb.w	r4, [r7], #1
 800efd6:	f7f1 fd09 	bl	80009ec <__aeabi_dcmplt>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d174      	bne.n	800f0c8 <_dtoa_r+0x648>
 800efde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efe2:	2000      	movs	r0, #0
 800efe4:	4911      	ldr	r1, [pc, #68]	; (800f02c <_dtoa_r+0x5ac>)
 800efe6:	f7f1 f8d7 	bl	8000198 <__aeabi_dsub>
 800efea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800efee:	f7f1 fcfd 	bl	80009ec <__aeabi_dcmplt>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	f040 80b7 	bne.w	800f166 <_dtoa_r+0x6e6>
 800eff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800effa:	429f      	cmp	r7, r3
 800effc:	f43f af7a 	beq.w	800eef4 <_dtoa_r+0x474>
 800f000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f004:	2200      	movs	r2, #0
 800f006:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <_dtoa_r+0x5b0>)
 800f008:	f7f1 fa7e 	bl	8000508 <__aeabi_dmul>
 800f00c:	2200      	movs	r2, #0
 800f00e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f016:	4b06      	ldr	r3, [pc, #24]	; (800f030 <_dtoa_r+0x5b0>)
 800f018:	f7f1 fa76 	bl	8000508 <__aeabi_dmul>
 800f01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f020:	e7c3      	b.n	800efaa <_dtoa_r+0x52a>
 800f022:	bf00      	nop
 800f024:	08012ff8 	.word	0x08012ff8
 800f028:	08012fd0 	.word	0x08012fd0
 800f02c:	3ff00000 	.word	0x3ff00000
 800f030:	40240000 	.word	0x40240000
 800f034:	401c0000 	.word	0x401c0000
 800f038:	40140000 	.word	0x40140000
 800f03c:	3fe00000 	.word	0x3fe00000
 800f040:	4630      	mov	r0, r6
 800f042:	4639      	mov	r1, r7
 800f044:	f7f1 fa60 	bl	8000508 <__aeabi_dmul>
 800f048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f04a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f04e:	9c03      	ldr	r4, [sp, #12]
 800f050:	9314      	str	r3, [sp, #80]	; 0x50
 800f052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f056:	f7f1 fd07 	bl	8000a68 <__aeabi_d2iz>
 800f05a:	9015      	str	r0, [sp, #84]	; 0x54
 800f05c:	f7f1 f9ea 	bl	8000434 <__aeabi_i2d>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f068:	f7f1 f896 	bl	8000198 <__aeabi_dsub>
 800f06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f06e:	4606      	mov	r6, r0
 800f070:	3330      	adds	r3, #48	; 0x30
 800f072:	f804 3b01 	strb.w	r3, [r4], #1
 800f076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f078:	460f      	mov	r7, r1
 800f07a:	429c      	cmp	r4, r3
 800f07c:	f04f 0200 	mov.w	r2, #0
 800f080:	d124      	bne.n	800f0cc <_dtoa_r+0x64c>
 800f082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f086:	4bb0      	ldr	r3, [pc, #704]	; (800f348 <_dtoa_r+0x8c8>)
 800f088:	f7f1 f888 	bl	800019c <__adddf3>
 800f08c:	4602      	mov	r2, r0
 800f08e:	460b      	mov	r3, r1
 800f090:	4630      	mov	r0, r6
 800f092:	4639      	mov	r1, r7
 800f094:	f7f1 fcc8 	bl	8000a28 <__aeabi_dcmpgt>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d163      	bne.n	800f164 <_dtoa_r+0x6e4>
 800f09c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	49a9      	ldr	r1, [pc, #676]	; (800f348 <_dtoa_r+0x8c8>)
 800f0a4:	f7f1 f878 	bl	8000198 <__aeabi_dsub>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	f7f1 fc9c 	bl	80009ec <__aeabi_dcmplt>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f43f af1d 	beq.w	800eef4 <_dtoa_r+0x474>
 800f0ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f0bc:	1e7b      	subs	r3, r7, #1
 800f0be:	9314      	str	r3, [sp, #80]	; 0x50
 800f0c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f0c4:	2b30      	cmp	r3, #48	; 0x30
 800f0c6:	d0f8      	beq.n	800f0ba <_dtoa_r+0x63a>
 800f0c8:	46c2      	mov	sl, r8
 800f0ca:	e03b      	b.n	800f144 <_dtoa_r+0x6c4>
 800f0cc:	4b9f      	ldr	r3, [pc, #636]	; (800f34c <_dtoa_r+0x8cc>)
 800f0ce:	f7f1 fa1b 	bl	8000508 <__aeabi_dmul>
 800f0d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0d6:	e7bc      	b.n	800f052 <_dtoa_r+0x5d2>
 800f0d8:	9f03      	ldr	r7, [sp, #12]
 800f0da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f0de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0e2:	4640      	mov	r0, r8
 800f0e4:	4649      	mov	r1, r9
 800f0e6:	f7f1 fb39 	bl	800075c <__aeabi_ddiv>
 800f0ea:	f7f1 fcbd 	bl	8000a68 <__aeabi_d2iz>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	f7f1 f9a0 	bl	8000434 <__aeabi_i2d>
 800f0f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0f8:	f7f1 fa06 	bl	8000508 <__aeabi_dmul>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	460b      	mov	r3, r1
 800f100:	4640      	mov	r0, r8
 800f102:	4649      	mov	r1, r9
 800f104:	f7f1 f848 	bl	8000198 <__aeabi_dsub>
 800f108:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f10c:	f807 6b01 	strb.w	r6, [r7], #1
 800f110:	9e03      	ldr	r6, [sp, #12]
 800f112:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f116:	1bbe      	subs	r6, r7, r6
 800f118:	45b4      	cmp	ip, r6
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	d136      	bne.n	800f18e <_dtoa_r+0x70e>
 800f120:	f7f1 f83c 	bl	800019c <__adddf3>
 800f124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f128:	4680      	mov	r8, r0
 800f12a:	4689      	mov	r9, r1
 800f12c:	f7f1 fc7c 	bl	8000a28 <__aeabi_dcmpgt>
 800f130:	bb58      	cbnz	r0, 800f18a <_dtoa_r+0x70a>
 800f132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f136:	4640      	mov	r0, r8
 800f138:	4649      	mov	r1, r9
 800f13a:	f7f1 fc4d 	bl	80009d8 <__aeabi_dcmpeq>
 800f13e:	b108      	cbz	r0, 800f144 <_dtoa_r+0x6c4>
 800f140:	07e1      	lsls	r1, r4, #31
 800f142:	d422      	bmi.n	800f18a <_dtoa_r+0x70a>
 800f144:	4628      	mov	r0, r5
 800f146:	4659      	mov	r1, fp
 800f148:	f001 f87a 	bl	8010240 <_Bfree>
 800f14c:	2300      	movs	r3, #0
 800f14e:	703b      	strb	r3, [r7, #0]
 800f150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f152:	f10a 0001 	add.w	r0, sl, #1
 800f156:	6018      	str	r0, [r3, #0]
 800f158:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f43f acde 	beq.w	800eb1c <_dtoa_r+0x9c>
 800f160:	601f      	str	r7, [r3, #0]
 800f162:	e4db      	b.n	800eb1c <_dtoa_r+0x9c>
 800f164:	4627      	mov	r7, r4
 800f166:	463b      	mov	r3, r7
 800f168:	461f      	mov	r7, r3
 800f16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f16e:	2a39      	cmp	r2, #57	; 0x39
 800f170:	d107      	bne.n	800f182 <_dtoa_r+0x702>
 800f172:	9a03      	ldr	r2, [sp, #12]
 800f174:	429a      	cmp	r2, r3
 800f176:	d1f7      	bne.n	800f168 <_dtoa_r+0x6e8>
 800f178:	2230      	movs	r2, #48	; 0x30
 800f17a:	9903      	ldr	r1, [sp, #12]
 800f17c:	f108 0801 	add.w	r8, r8, #1
 800f180:	700a      	strb	r2, [r1, #0]
 800f182:	781a      	ldrb	r2, [r3, #0]
 800f184:	3201      	adds	r2, #1
 800f186:	701a      	strb	r2, [r3, #0]
 800f188:	e79e      	b.n	800f0c8 <_dtoa_r+0x648>
 800f18a:	46d0      	mov	r8, sl
 800f18c:	e7eb      	b.n	800f166 <_dtoa_r+0x6e6>
 800f18e:	2200      	movs	r2, #0
 800f190:	4b6e      	ldr	r3, [pc, #440]	; (800f34c <_dtoa_r+0x8cc>)
 800f192:	f7f1 f9b9 	bl	8000508 <__aeabi_dmul>
 800f196:	2200      	movs	r2, #0
 800f198:	2300      	movs	r3, #0
 800f19a:	4680      	mov	r8, r0
 800f19c:	4689      	mov	r9, r1
 800f19e:	f7f1 fc1b 	bl	80009d8 <__aeabi_dcmpeq>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d09b      	beq.n	800f0de <_dtoa_r+0x65e>
 800f1a6:	e7cd      	b.n	800f144 <_dtoa_r+0x6c4>
 800f1a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1aa:	2a00      	cmp	r2, #0
 800f1ac:	f000 80d0 	beq.w	800f350 <_dtoa_r+0x8d0>
 800f1b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f1b2:	2a01      	cmp	r2, #1
 800f1b4:	f300 80ae 	bgt.w	800f314 <_dtoa_r+0x894>
 800f1b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1ba:	2a00      	cmp	r2, #0
 800f1bc:	f000 80a6 	beq.w	800f30c <_dtoa_r+0x88c>
 800f1c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f1c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f1c6:	9f06      	ldr	r7, [sp, #24]
 800f1c8:	9a06      	ldr	r2, [sp, #24]
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	441a      	add	r2, r3
 800f1ce:	9206      	str	r2, [sp, #24]
 800f1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	441a      	add	r2, r3
 800f1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1d8:	f001 f932 	bl	8010440 <__i2b>
 800f1dc:	4606      	mov	r6, r0
 800f1de:	2f00      	cmp	r7, #0
 800f1e0:	dd0c      	ble.n	800f1fc <_dtoa_r+0x77c>
 800f1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dd09      	ble.n	800f1fc <_dtoa_r+0x77c>
 800f1e8:	42bb      	cmp	r3, r7
 800f1ea:	bfa8      	it	ge
 800f1ec:	463b      	movge	r3, r7
 800f1ee:	9a06      	ldr	r2, [sp, #24]
 800f1f0:	1aff      	subs	r7, r7, r3
 800f1f2:	1ad2      	subs	r2, r2, r3
 800f1f4:	9206      	str	r2, [sp, #24]
 800f1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1fe:	b1f3      	cbz	r3, 800f23e <_dtoa_r+0x7be>
 800f200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 80a8 	beq.w	800f358 <_dtoa_r+0x8d8>
 800f208:	2c00      	cmp	r4, #0
 800f20a:	dd10      	ble.n	800f22e <_dtoa_r+0x7ae>
 800f20c:	4631      	mov	r1, r6
 800f20e:	4622      	mov	r2, r4
 800f210:	4628      	mov	r0, r5
 800f212:	f001 f9d3 	bl	80105bc <__pow5mult>
 800f216:	465a      	mov	r2, fp
 800f218:	4601      	mov	r1, r0
 800f21a:	4606      	mov	r6, r0
 800f21c:	4628      	mov	r0, r5
 800f21e:	f001 f925 	bl	801046c <__multiply>
 800f222:	4680      	mov	r8, r0
 800f224:	4659      	mov	r1, fp
 800f226:	4628      	mov	r0, r5
 800f228:	f001 f80a 	bl	8010240 <_Bfree>
 800f22c:	46c3      	mov	fp, r8
 800f22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f230:	1b1a      	subs	r2, r3, r4
 800f232:	d004      	beq.n	800f23e <_dtoa_r+0x7be>
 800f234:	4659      	mov	r1, fp
 800f236:	4628      	mov	r0, r5
 800f238:	f001 f9c0 	bl	80105bc <__pow5mult>
 800f23c:	4683      	mov	fp, r0
 800f23e:	2101      	movs	r1, #1
 800f240:	4628      	mov	r0, r5
 800f242:	f001 f8fd 	bl	8010440 <__i2b>
 800f246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f248:	4604      	mov	r4, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f340 8086 	ble.w	800f35c <_dtoa_r+0x8dc>
 800f250:	461a      	mov	r2, r3
 800f252:	4601      	mov	r1, r0
 800f254:	4628      	mov	r0, r5
 800f256:	f001 f9b1 	bl	80105bc <__pow5mult>
 800f25a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f25c:	4604      	mov	r4, r0
 800f25e:	2b01      	cmp	r3, #1
 800f260:	dd7f      	ble.n	800f362 <_dtoa_r+0x8e2>
 800f262:	f04f 0800 	mov.w	r8, #0
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f26c:	6918      	ldr	r0, [r3, #16]
 800f26e:	f001 f899 	bl	80103a4 <__hi0bits>
 800f272:	f1c0 0020 	rsb	r0, r0, #32
 800f276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f278:	4418      	add	r0, r3
 800f27a:	f010 001f 	ands.w	r0, r0, #31
 800f27e:	f000 8092 	beq.w	800f3a6 <_dtoa_r+0x926>
 800f282:	f1c0 0320 	rsb	r3, r0, #32
 800f286:	2b04      	cmp	r3, #4
 800f288:	f340 808a 	ble.w	800f3a0 <_dtoa_r+0x920>
 800f28c:	f1c0 001c 	rsb	r0, r0, #28
 800f290:	9b06      	ldr	r3, [sp, #24]
 800f292:	4407      	add	r7, r0
 800f294:	4403      	add	r3, r0
 800f296:	9306      	str	r3, [sp, #24]
 800f298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f29a:	4403      	add	r3, r0
 800f29c:	9309      	str	r3, [sp, #36]	; 0x24
 800f29e:	9b06      	ldr	r3, [sp, #24]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dd05      	ble.n	800f2b0 <_dtoa_r+0x830>
 800f2a4:	4659      	mov	r1, fp
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f001 f9e1 	bl	8010670 <__lshift>
 800f2ae:	4683      	mov	fp, r0
 800f2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dd05      	ble.n	800f2c2 <_dtoa_r+0x842>
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f001 f9d8 	bl	8010670 <__lshift>
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d070      	beq.n	800f3aa <_dtoa_r+0x92a>
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	4658      	mov	r0, fp
 800f2cc:	f001 fa40 	bl	8010750 <__mcmp>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	da6a      	bge.n	800f3aa <_dtoa_r+0x92a>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4659      	mov	r1, fp
 800f2d8:	220a      	movs	r2, #10
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f000 ffd2 	bl	8010284 <__multadd>
 800f2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2e2:	4683      	mov	fp, r0
 800f2e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8194 	beq.w	800f616 <_dtoa_r+0xb96>
 800f2ee:	4631      	mov	r1, r6
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	220a      	movs	r2, #10
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f000 ffc5 	bl	8010284 <__multadd>
 800f2fa:	f1b9 0f00 	cmp.w	r9, #0
 800f2fe:	4606      	mov	r6, r0
 800f300:	f300 8093 	bgt.w	800f42a <_dtoa_r+0x9aa>
 800f304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f306:	2b02      	cmp	r3, #2
 800f308:	dc57      	bgt.n	800f3ba <_dtoa_r+0x93a>
 800f30a:	e08e      	b.n	800f42a <_dtoa_r+0x9aa>
 800f30c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f30e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f312:	e757      	b.n	800f1c4 <_dtoa_r+0x744>
 800f314:	9b08      	ldr	r3, [sp, #32]
 800f316:	1e5c      	subs	r4, r3, #1
 800f318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f31a:	42a3      	cmp	r3, r4
 800f31c:	bfb7      	itett	lt
 800f31e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f320:	1b1c      	subge	r4, r3, r4
 800f322:	1ae2      	sublt	r2, r4, r3
 800f324:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f326:	bfbe      	ittt	lt
 800f328:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f32a:	189b      	addlt	r3, r3, r2
 800f32c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f32e:	9b08      	ldr	r3, [sp, #32]
 800f330:	bfb8      	it	lt
 800f332:	2400      	movlt	r4, #0
 800f334:	2b00      	cmp	r3, #0
 800f336:	bfbb      	ittet	lt
 800f338:	9b06      	ldrlt	r3, [sp, #24]
 800f33a:	9a08      	ldrlt	r2, [sp, #32]
 800f33c:	9f06      	ldrge	r7, [sp, #24]
 800f33e:	1a9f      	sublt	r7, r3, r2
 800f340:	bfac      	ite	ge
 800f342:	9b08      	ldrge	r3, [sp, #32]
 800f344:	2300      	movlt	r3, #0
 800f346:	e73f      	b.n	800f1c8 <_dtoa_r+0x748>
 800f348:	3fe00000 	.word	0x3fe00000
 800f34c:	40240000 	.word	0x40240000
 800f350:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f352:	9f06      	ldr	r7, [sp, #24]
 800f354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f356:	e742      	b.n	800f1de <_dtoa_r+0x75e>
 800f358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f35a:	e76b      	b.n	800f234 <_dtoa_r+0x7b4>
 800f35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f35e:	2b01      	cmp	r3, #1
 800f360:	dc19      	bgt.n	800f396 <_dtoa_r+0x916>
 800f362:	9b04      	ldr	r3, [sp, #16]
 800f364:	b9bb      	cbnz	r3, 800f396 <_dtoa_r+0x916>
 800f366:	9b05      	ldr	r3, [sp, #20]
 800f368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f36c:	b99b      	cbnz	r3, 800f396 <_dtoa_r+0x916>
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f374:	0d1b      	lsrs	r3, r3, #20
 800f376:	051b      	lsls	r3, r3, #20
 800f378:	b183      	cbz	r3, 800f39c <_dtoa_r+0x91c>
 800f37a:	f04f 0801 	mov.w	r8, #1
 800f37e:	9b06      	ldr	r3, [sp, #24]
 800f380:	3301      	adds	r3, #1
 800f382:	9306      	str	r3, [sp, #24]
 800f384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f386:	3301      	adds	r3, #1
 800f388:	9309      	str	r3, [sp, #36]	; 0x24
 800f38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f47f af6a 	bne.w	800f266 <_dtoa_r+0x7e6>
 800f392:	2001      	movs	r0, #1
 800f394:	e76f      	b.n	800f276 <_dtoa_r+0x7f6>
 800f396:	f04f 0800 	mov.w	r8, #0
 800f39a:	e7f6      	b.n	800f38a <_dtoa_r+0x90a>
 800f39c:	4698      	mov	r8, r3
 800f39e:	e7f4      	b.n	800f38a <_dtoa_r+0x90a>
 800f3a0:	f43f af7d 	beq.w	800f29e <_dtoa_r+0x81e>
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	301c      	adds	r0, #28
 800f3a8:	e772      	b.n	800f290 <_dtoa_r+0x810>
 800f3aa:	9b08      	ldr	r3, [sp, #32]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	dc36      	bgt.n	800f41e <_dtoa_r+0x99e>
 800f3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	dd33      	ble.n	800f41e <_dtoa_r+0x99e>
 800f3b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3ba:	f1b9 0f00 	cmp.w	r9, #0
 800f3be:	d10d      	bne.n	800f3dc <_dtoa_r+0x95c>
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	464b      	mov	r3, r9
 800f3c4:	2205      	movs	r2, #5
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 ff5c 	bl	8010284 <__multadd>
 800f3cc:	4601      	mov	r1, r0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4658      	mov	r0, fp
 800f3d2:	f001 f9bd 	bl	8010750 <__mcmp>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	f73f adb8 	bgt.w	800ef4c <_dtoa_r+0x4cc>
 800f3dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3de:	9f03      	ldr	r7, [sp, #12]
 800f3e0:	ea6f 0a03 	mvn.w	sl, r3
 800f3e4:	f04f 0800 	mov.w	r8, #0
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f000 ff28 	bl	8010240 <_Bfree>
 800f3f0:	2e00      	cmp	r6, #0
 800f3f2:	f43f aea7 	beq.w	800f144 <_dtoa_r+0x6c4>
 800f3f6:	f1b8 0f00 	cmp.w	r8, #0
 800f3fa:	d005      	beq.n	800f408 <_dtoa_r+0x988>
 800f3fc:	45b0      	cmp	r8, r6
 800f3fe:	d003      	beq.n	800f408 <_dtoa_r+0x988>
 800f400:	4641      	mov	r1, r8
 800f402:	4628      	mov	r0, r5
 800f404:	f000 ff1c 	bl	8010240 <_Bfree>
 800f408:	4631      	mov	r1, r6
 800f40a:	4628      	mov	r0, r5
 800f40c:	f000 ff18 	bl	8010240 <_Bfree>
 800f410:	e698      	b.n	800f144 <_dtoa_r+0x6c4>
 800f412:	2400      	movs	r4, #0
 800f414:	4626      	mov	r6, r4
 800f416:	e7e1      	b.n	800f3dc <_dtoa_r+0x95c>
 800f418:	46c2      	mov	sl, r8
 800f41a:	4626      	mov	r6, r4
 800f41c:	e596      	b.n	800ef4c <_dtoa_r+0x4cc>
 800f41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 80fd 	beq.w	800f624 <_dtoa_r+0xba4>
 800f42a:	2f00      	cmp	r7, #0
 800f42c:	dd05      	ble.n	800f43a <_dtoa_r+0x9ba>
 800f42e:	4631      	mov	r1, r6
 800f430:	463a      	mov	r2, r7
 800f432:	4628      	mov	r0, r5
 800f434:	f001 f91c 	bl	8010670 <__lshift>
 800f438:	4606      	mov	r6, r0
 800f43a:	f1b8 0f00 	cmp.w	r8, #0
 800f43e:	d05c      	beq.n	800f4fa <_dtoa_r+0xa7a>
 800f440:	4628      	mov	r0, r5
 800f442:	6871      	ldr	r1, [r6, #4]
 800f444:	f000 febc 	bl	80101c0 <_Balloc>
 800f448:	4607      	mov	r7, r0
 800f44a:	b928      	cbnz	r0, 800f458 <_dtoa_r+0x9d8>
 800f44c:	4602      	mov	r2, r0
 800f44e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f452:	4b7f      	ldr	r3, [pc, #508]	; (800f650 <_dtoa_r+0xbd0>)
 800f454:	f7ff bb28 	b.w	800eaa8 <_dtoa_r+0x28>
 800f458:	6932      	ldr	r2, [r6, #16]
 800f45a:	f106 010c 	add.w	r1, r6, #12
 800f45e:	3202      	adds	r2, #2
 800f460:	0092      	lsls	r2, r2, #2
 800f462:	300c      	adds	r0, #12
 800f464:	f7fd fb10 	bl	800ca88 <memcpy>
 800f468:	2201      	movs	r2, #1
 800f46a:	4639      	mov	r1, r7
 800f46c:	4628      	mov	r0, r5
 800f46e:	f001 f8ff 	bl	8010670 <__lshift>
 800f472:	46b0      	mov	r8, r6
 800f474:	4606      	mov	r6, r0
 800f476:	9b03      	ldr	r3, [sp, #12]
 800f478:	3301      	adds	r3, #1
 800f47a:	9308      	str	r3, [sp, #32]
 800f47c:	9b03      	ldr	r3, [sp, #12]
 800f47e:	444b      	add	r3, r9
 800f480:	930a      	str	r3, [sp, #40]	; 0x28
 800f482:	9b04      	ldr	r3, [sp, #16]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	9309      	str	r3, [sp, #36]	; 0x24
 800f48a:	9b08      	ldr	r3, [sp, #32]
 800f48c:	4621      	mov	r1, r4
 800f48e:	3b01      	subs	r3, #1
 800f490:	4658      	mov	r0, fp
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	f7ff fa68 	bl	800e968 <quorem>
 800f498:	4603      	mov	r3, r0
 800f49a:	4641      	mov	r1, r8
 800f49c:	3330      	adds	r3, #48	; 0x30
 800f49e:	9006      	str	r0, [sp, #24]
 800f4a0:	4658      	mov	r0, fp
 800f4a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4a4:	f001 f954 	bl	8010750 <__mcmp>
 800f4a8:	4632      	mov	r2, r6
 800f4aa:	4681      	mov	r9, r0
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f001 f96a 	bl	8010788 <__mdiff>
 800f4b4:	68c2      	ldr	r2, [r0, #12]
 800f4b6:	4607      	mov	r7, r0
 800f4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4ba:	bb02      	cbnz	r2, 800f4fe <_dtoa_r+0xa7e>
 800f4bc:	4601      	mov	r1, r0
 800f4be:	4658      	mov	r0, fp
 800f4c0:	f001 f946 	bl	8010750 <__mcmp>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f4d0:	f000 feb6 	bl	8010240 <_Bfree>
 800f4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4d8:	9f08      	ldr	r7, [sp, #32]
 800f4da:	ea43 0102 	orr.w	r1, r3, r2
 800f4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e0:	430b      	orrs	r3, r1
 800f4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4e4:	d10d      	bne.n	800f502 <_dtoa_r+0xa82>
 800f4e6:	2b39      	cmp	r3, #57	; 0x39
 800f4e8:	d029      	beq.n	800f53e <_dtoa_r+0xabe>
 800f4ea:	f1b9 0f00 	cmp.w	r9, #0
 800f4ee:	dd01      	ble.n	800f4f4 <_dtoa_r+0xa74>
 800f4f0:	9b06      	ldr	r3, [sp, #24]
 800f4f2:	3331      	adds	r3, #49	; 0x31
 800f4f4:	9a04      	ldr	r2, [sp, #16]
 800f4f6:	7013      	strb	r3, [r2, #0]
 800f4f8:	e776      	b.n	800f3e8 <_dtoa_r+0x968>
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	e7b9      	b.n	800f472 <_dtoa_r+0x9f2>
 800f4fe:	2201      	movs	r2, #1
 800f500:	e7e2      	b.n	800f4c8 <_dtoa_r+0xa48>
 800f502:	f1b9 0f00 	cmp.w	r9, #0
 800f506:	db06      	blt.n	800f516 <_dtoa_r+0xa96>
 800f508:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f50a:	ea41 0909 	orr.w	r9, r1, r9
 800f50e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f510:	ea59 0101 	orrs.w	r1, r9, r1
 800f514:	d120      	bne.n	800f558 <_dtoa_r+0xad8>
 800f516:	2a00      	cmp	r2, #0
 800f518:	ddec      	ble.n	800f4f4 <_dtoa_r+0xa74>
 800f51a:	4659      	mov	r1, fp
 800f51c:	2201      	movs	r2, #1
 800f51e:	4628      	mov	r0, r5
 800f520:	9308      	str	r3, [sp, #32]
 800f522:	f001 f8a5 	bl	8010670 <__lshift>
 800f526:	4621      	mov	r1, r4
 800f528:	4683      	mov	fp, r0
 800f52a:	f001 f911 	bl	8010750 <__mcmp>
 800f52e:	2800      	cmp	r0, #0
 800f530:	9b08      	ldr	r3, [sp, #32]
 800f532:	dc02      	bgt.n	800f53a <_dtoa_r+0xaba>
 800f534:	d1de      	bne.n	800f4f4 <_dtoa_r+0xa74>
 800f536:	07da      	lsls	r2, r3, #31
 800f538:	d5dc      	bpl.n	800f4f4 <_dtoa_r+0xa74>
 800f53a:	2b39      	cmp	r3, #57	; 0x39
 800f53c:	d1d8      	bne.n	800f4f0 <_dtoa_r+0xa70>
 800f53e:	2339      	movs	r3, #57	; 0x39
 800f540:	9a04      	ldr	r2, [sp, #16]
 800f542:	7013      	strb	r3, [r2, #0]
 800f544:	463b      	mov	r3, r7
 800f546:	461f      	mov	r7, r3
 800f548:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	2a39      	cmp	r2, #57	; 0x39
 800f550:	d050      	beq.n	800f5f4 <_dtoa_r+0xb74>
 800f552:	3201      	adds	r2, #1
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	e747      	b.n	800f3e8 <_dtoa_r+0x968>
 800f558:	2a00      	cmp	r2, #0
 800f55a:	dd03      	ble.n	800f564 <_dtoa_r+0xae4>
 800f55c:	2b39      	cmp	r3, #57	; 0x39
 800f55e:	d0ee      	beq.n	800f53e <_dtoa_r+0xabe>
 800f560:	3301      	adds	r3, #1
 800f562:	e7c7      	b.n	800f4f4 <_dtoa_r+0xa74>
 800f564:	9a08      	ldr	r2, [sp, #32]
 800f566:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f568:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f56c:	428a      	cmp	r2, r1
 800f56e:	d02a      	beq.n	800f5c6 <_dtoa_r+0xb46>
 800f570:	4659      	mov	r1, fp
 800f572:	2300      	movs	r3, #0
 800f574:	220a      	movs	r2, #10
 800f576:	4628      	mov	r0, r5
 800f578:	f000 fe84 	bl	8010284 <__multadd>
 800f57c:	45b0      	cmp	r8, r6
 800f57e:	4683      	mov	fp, r0
 800f580:	f04f 0300 	mov.w	r3, #0
 800f584:	f04f 020a 	mov.w	r2, #10
 800f588:	4641      	mov	r1, r8
 800f58a:	4628      	mov	r0, r5
 800f58c:	d107      	bne.n	800f59e <_dtoa_r+0xb1e>
 800f58e:	f000 fe79 	bl	8010284 <__multadd>
 800f592:	4680      	mov	r8, r0
 800f594:	4606      	mov	r6, r0
 800f596:	9b08      	ldr	r3, [sp, #32]
 800f598:	3301      	adds	r3, #1
 800f59a:	9308      	str	r3, [sp, #32]
 800f59c:	e775      	b.n	800f48a <_dtoa_r+0xa0a>
 800f59e:	f000 fe71 	bl	8010284 <__multadd>
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4680      	mov	r8, r0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	220a      	movs	r2, #10
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f000 fe6a 	bl	8010284 <__multadd>
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	e7f0      	b.n	800f596 <_dtoa_r+0xb16>
 800f5b4:	f1b9 0f00 	cmp.w	r9, #0
 800f5b8:	bfcc      	ite	gt
 800f5ba:	464f      	movgt	r7, r9
 800f5bc:	2701      	movle	r7, #1
 800f5be:	f04f 0800 	mov.w	r8, #0
 800f5c2:	9a03      	ldr	r2, [sp, #12]
 800f5c4:	4417      	add	r7, r2
 800f5c6:	4659      	mov	r1, fp
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	9308      	str	r3, [sp, #32]
 800f5ce:	f001 f84f 	bl	8010670 <__lshift>
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	4683      	mov	fp, r0
 800f5d6:	f001 f8bb 	bl	8010750 <__mcmp>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	dcb2      	bgt.n	800f544 <_dtoa_r+0xac4>
 800f5de:	d102      	bne.n	800f5e6 <_dtoa_r+0xb66>
 800f5e0:	9b08      	ldr	r3, [sp, #32]
 800f5e2:	07db      	lsls	r3, r3, #31
 800f5e4:	d4ae      	bmi.n	800f544 <_dtoa_r+0xac4>
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	461f      	mov	r7, r3
 800f5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5ee:	2a30      	cmp	r2, #48	; 0x30
 800f5f0:	d0fa      	beq.n	800f5e8 <_dtoa_r+0xb68>
 800f5f2:	e6f9      	b.n	800f3e8 <_dtoa_r+0x968>
 800f5f4:	9a03      	ldr	r2, [sp, #12]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d1a5      	bne.n	800f546 <_dtoa_r+0xac6>
 800f5fa:	2331      	movs	r3, #49	; 0x31
 800f5fc:	f10a 0a01 	add.w	sl, sl, #1
 800f600:	e779      	b.n	800f4f6 <_dtoa_r+0xa76>
 800f602:	4b14      	ldr	r3, [pc, #80]	; (800f654 <_dtoa_r+0xbd4>)
 800f604:	f7ff baa8 	b.w	800eb58 <_dtoa_r+0xd8>
 800f608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f47f aa81 	bne.w	800eb12 <_dtoa_r+0x92>
 800f610:	4b11      	ldr	r3, [pc, #68]	; (800f658 <_dtoa_r+0xbd8>)
 800f612:	f7ff baa1 	b.w	800eb58 <_dtoa_r+0xd8>
 800f616:	f1b9 0f00 	cmp.w	r9, #0
 800f61a:	dc03      	bgt.n	800f624 <_dtoa_r+0xba4>
 800f61c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f61e:	2b02      	cmp	r3, #2
 800f620:	f73f aecb 	bgt.w	800f3ba <_dtoa_r+0x93a>
 800f624:	9f03      	ldr	r7, [sp, #12]
 800f626:	4621      	mov	r1, r4
 800f628:	4658      	mov	r0, fp
 800f62a:	f7ff f99d 	bl	800e968 <quorem>
 800f62e:	9a03      	ldr	r2, [sp, #12]
 800f630:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f634:	f807 3b01 	strb.w	r3, [r7], #1
 800f638:	1aba      	subs	r2, r7, r2
 800f63a:	4591      	cmp	r9, r2
 800f63c:	ddba      	ble.n	800f5b4 <_dtoa_r+0xb34>
 800f63e:	4659      	mov	r1, fp
 800f640:	2300      	movs	r3, #0
 800f642:	220a      	movs	r2, #10
 800f644:	4628      	mov	r0, r5
 800f646:	f000 fe1d 	bl	8010284 <__multadd>
 800f64a:	4683      	mov	fp, r0
 800f64c:	e7eb      	b.n	800f626 <_dtoa_r+0xba6>
 800f64e:	bf00      	nop
 800f650:	08012e80 	.word	0x08012e80
 800f654:	08012c80 	.word	0x08012c80
 800f658:	08012e01 	.word	0x08012e01

0800f65c <__sflush_r>:
 800f65c:	898a      	ldrh	r2, [r1, #12]
 800f65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f660:	4605      	mov	r5, r0
 800f662:	0710      	lsls	r0, r2, #28
 800f664:	460c      	mov	r4, r1
 800f666:	d457      	bmi.n	800f718 <__sflush_r+0xbc>
 800f668:	684b      	ldr	r3, [r1, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	dc04      	bgt.n	800f678 <__sflush_r+0x1c>
 800f66e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f670:	2b00      	cmp	r3, #0
 800f672:	dc01      	bgt.n	800f678 <__sflush_r+0x1c>
 800f674:	2000      	movs	r0, #0
 800f676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f67a:	2e00      	cmp	r6, #0
 800f67c:	d0fa      	beq.n	800f674 <__sflush_r+0x18>
 800f67e:	2300      	movs	r3, #0
 800f680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f684:	682f      	ldr	r7, [r5, #0]
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	d032      	beq.n	800f6f0 <__sflush_r+0x94>
 800f68a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	075a      	lsls	r2, r3, #29
 800f690:	d505      	bpl.n	800f69e <__sflush_r+0x42>
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	1ac0      	subs	r0, r0, r3
 800f696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f698:	b10b      	cbz	r3, 800f69e <__sflush_r+0x42>
 800f69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f69c:	1ac0      	subs	r0, r0, r3
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	6a21      	ldr	r1, [r4, #32]
 800f6a8:	47b0      	blx	r6
 800f6aa:	1c43      	adds	r3, r0, #1
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	d106      	bne.n	800f6be <__sflush_r+0x62>
 800f6b0:	6829      	ldr	r1, [r5, #0]
 800f6b2:	291d      	cmp	r1, #29
 800f6b4:	d82c      	bhi.n	800f710 <__sflush_r+0xb4>
 800f6b6:	4a29      	ldr	r2, [pc, #164]	; (800f75c <__sflush_r+0x100>)
 800f6b8:	40ca      	lsrs	r2, r1
 800f6ba:	07d6      	lsls	r6, r2, #31
 800f6bc:	d528      	bpl.n	800f710 <__sflush_r+0xb4>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	6062      	str	r2, [r4, #4]
 800f6c2:	6922      	ldr	r2, [r4, #16]
 800f6c4:	04d9      	lsls	r1, r3, #19
 800f6c6:	6022      	str	r2, [r4, #0]
 800f6c8:	d504      	bpl.n	800f6d4 <__sflush_r+0x78>
 800f6ca:	1c42      	adds	r2, r0, #1
 800f6cc:	d101      	bne.n	800f6d2 <__sflush_r+0x76>
 800f6ce:	682b      	ldr	r3, [r5, #0]
 800f6d0:	b903      	cbnz	r3, 800f6d4 <__sflush_r+0x78>
 800f6d2:	6560      	str	r0, [r4, #84]	; 0x54
 800f6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6d6:	602f      	str	r7, [r5, #0]
 800f6d8:	2900      	cmp	r1, #0
 800f6da:	d0cb      	beq.n	800f674 <__sflush_r+0x18>
 800f6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6e0:	4299      	cmp	r1, r3
 800f6e2:	d002      	beq.n	800f6ea <__sflush_r+0x8e>
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f7fd f9e5 	bl	800cab4 <_free_r>
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	6360      	str	r0, [r4, #52]	; 0x34
 800f6ee:	e7c2      	b.n	800f676 <__sflush_r+0x1a>
 800f6f0:	6a21      	ldr	r1, [r4, #32]
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	47b0      	blx	r6
 800f6f8:	1c41      	adds	r1, r0, #1
 800f6fa:	d1c7      	bne.n	800f68c <__sflush_r+0x30>
 800f6fc:	682b      	ldr	r3, [r5, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d0c4      	beq.n	800f68c <__sflush_r+0x30>
 800f702:	2b1d      	cmp	r3, #29
 800f704:	d001      	beq.n	800f70a <__sflush_r+0xae>
 800f706:	2b16      	cmp	r3, #22
 800f708:	d101      	bne.n	800f70e <__sflush_r+0xb2>
 800f70a:	602f      	str	r7, [r5, #0]
 800f70c:	e7b2      	b.n	800f674 <__sflush_r+0x18>
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f714:	81a3      	strh	r3, [r4, #12]
 800f716:	e7ae      	b.n	800f676 <__sflush_r+0x1a>
 800f718:	690f      	ldr	r7, [r1, #16]
 800f71a:	2f00      	cmp	r7, #0
 800f71c:	d0aa      	beq.n	800f674 <__sflush_r+0x18>
 800f71e:	0793      	lsls	r3, r2, #30
 800f720:	bf18      	it	ne
 800f722:	2300      	movne	r3, #0
 800f724:	680e      	ldr	r6, [r1, #0]
 800f726:	bf08      	it	eq
 800f728:	694b      	ldreq	r3, [r1, #20]
 800f72a:	1bf6      	subs	r6, r6, r7
 800f72c:	600f      	str	r7, [r1, #0]
 800f72e:	608b      	str	r3, [r1, #8]
 800f730:	2e00      	cmp	r6, #0
 800f732:	dd9f      	ble.n	800f674 <__sflush_r+0x18>
 800f734:	4633      	mov	r3, r6
 800f736:	463a      	mov	r2, r7
 800f738:	4628      	mov	r0, r5
 800f73a:	6a21      	ldr	r1, [r4, #32]
 800f73c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f740:	47e0      	blx	ip
 800f742:	2800      	cmp	r0, #0
 800f744:	dc06      	bgt.n	800f754 <__sflush_r+0xf8>
 800f746:	89a3      	ldrh	r3, [r4, #12]
 800f748:	f04f 30ff 	mov.w	r0, #4294967295
 800f74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f750:	81a3      	strh	r3, [r4, #12]
 800f752:	e790      	b.n	800f676 <__sflush_r+0x1a>
 800f754:	4407      	add	r7, r0
 800f756:	1a36      	subs	r6, r6, r0
 800f758:	e7ea      	b.n	800f730 <__sflush_r+0xd4>
 800f75a:	bf00      	nop
 800f75c:	20400001 	.word	0x20400001

0800f760 <_fflush_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	690b      	ldr	r3, [r1, #16]
 800f764:	4605      	mov	r5, r0
 800f766:	460c      	mov	r4, r1
 800f768:	b913      	cbnz	r3, 800f770 <_fflush_r+0x10>
 800f76a:	2500      	movs	r5, #0
 800f76c:	4628      	mov	r0, r5
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	b118      	cbz	r0, 800f77a <_fflush_r+0x1a>
 800f772:	6983      	ldr	r3, [r0, #24]
 800f774:	b90b      	cbnz	r3, 800f77a <_fflush_r+0x1a>
 800f776:	f000 f887 	bl	800f888 <__sinit>
 800f77a:	4b14      	ldr	r3, [pc, #80]	; (800f7cc <_fflush_r+0x6c>)
 800f77c:	429c      	cmp	r4, r3
 800f77e:	d11b      	bne.n	800f7b8 <_fflush_r+0x58>
 800f780:	686c      	ldr	r4, [r5, #4]
 800f782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0ef      	beq.n	800f76a <_fflush_r+0xa>
 800f78a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f78c:	07d0      	lsls	r0, r2, #31
 800f78e:	d404      	bmi.n	800f79a <_fflush_r+0x3a>
 800f790:	0599      	lsls	r1, r3, #22
 800f792:	d402      	bmi.n	800f79a <_fflush_r+0x3a>
 800f794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f796:	f000 fc80 	bl	801009a <__retarget_lock_acquire_recursive>
 800f79a:	4628      	mov	r0, r5
 800f79c:	4621      	mov	r1, r4
 800f79e:	f7ff ff5d 	bl	800f65c <__sflush_r>
 800f7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	07da      	lsls	r2, r3, #31
 800f7a8:	d4e0      	bmi.n	800f76c <_fflush_r+0xc>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	059b      	lsls	r3, r3, #22
 800f7ae:	d4dd      	bmi.n	800f76c <_fflush_r+0xc>
 800f7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7b2:	f000 fc73 	bl	801009c <__retarget_lock_release_recursive>
 800f7b6:	e7d9      	b.n	800f76c <_fflush_r+0xc>
 800f7b8:	4b05      	ldr	r3, [pc, #20]	; (800f7d0 <_fflush_r+0x70>)
 800f7ba:	429c      	cmp	r4, r3
 800f7bc:	d101      	bne.n	800f7c2 <_fflush_r+0x62>
 800f7be:	68ac      	ldr	r4, [r5, #8]
 800f7c0:	e7df      	b.n	800f782 <_fflush_r+0x22>
 800f7c2:	4b04      	ldr	r3, [pc, #16]	; (800f7d4 <_fflush_r+0x74>)
 800f7c4:	429c      	cmp	r4, r3
 800f7c6:	bf08      	it	eq
 800f7c8:	68ec      	ldreq	r4, [r5, #12]
 800f7ca:	e7da      	b.n	800f782 <_fflush_r+0x22>
 800f7cc:	08012eb4 	.word	0x08012eb4
 800f7d0:	08012ed4 	.word	0x08012ed4
 800f7d4:	08012e94 	.word	0x08012e94

0800f7d8 <std>:
 800f7d8:	2300      	movs	r3, #0
 800f7da:	b510      	push	{r4, lr}
 800f7dc:	4604      	mov	r4, r0
 800f7de:	e9c0 3300 	strd	r3, r3, [r0]
 800f7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7e6:	6083      	str	r3, [r0, #8]
 800f7e8:	8181      	strh	r1, [r0, #12]
 800f7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800f7ec:	81c2      	strh	r2, [r0, #14]
 800f7ee:	6183      	str	r3, [r0, #24]
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	2208      	movs	r2, #8
 800f7f4:	305c      	adds	r0, #92	; 0x5c
 800f7f6:	f7fd f955 	bl	800caa4 <memset>
 800f7fa:	4b05      	ldr	r3, [pc, #20]	; (800f810 <std+0x38>)
 800f7fc:	6224      	str	r4, [r4, #32]
 800f7fe:	6263      	str	r3, [r4, #36]	; 0x24
 800f800:	4b04      	ldr	r3, [pc, #16]	; (800f814 <std+0x3c>)
 800f802:	62a3      	str	r3, [r4, #40]	; 0x28
 800f804:	4b04      	ldr	r3, [pc, #16]	; (800f818 <std+0x40>)
 800f806:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f808:	4b04      	ldr	r3, [pc, #16]	; (800f81c <std+0x44>)
 800f80a:	6323      	str	r3, [r4, #48]	; 0x30
 800f80c:	bd10      	pop	{r4, pc}
 800f80e:	bf00      	nop
 800f810:	08010e1d 	.word	0x08010e1d
 800f814:	08010e3f 	.word	0x08010e3f
 800f818:	08010e77 	.word	0x08010e77
 800f81c:	08010e9b 	.word	0x08010e9b

0800f820 <_cleanup_r>:
 800f820:	4901      	ldr	r1, [pc, #4]	; (800f828 <_cleanup_r+0x8>)
 800f822:	f000 b8af 	b.w	800f984 <_fwalk_reent>
 800f826:	bf00      	nop
 800f828:	0800f761 	.word	0x0800f761

0800f82c <__sfmoreglue>:
 800f82c:	2268      	movs	r2, #104	; 0x68
 800f82e:	b570      	push	{r4, r5, r6, lr}
 800f830:	1e4d      	subs	r5, r1, #1
 800f832:	4355      	muls	r5, r2
 800f834:	460e      	mov	r6, r1
 800f836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f83a:	f7fd f9a3 	bl	800cb84 <_malloc_r>
 800f83e:	4604      	mov	r4, r0
 800f840:	b140      	cbz	r0, 800f854 <__sfmoreglue+0x28>
 800f842:	2100      	movs	r1, #0
 800f844:	e9c0 1600 	strd	r1, r6, [r0]
 800f848:	300c      	adds	r0, #12
 800f84a:	60a0      	str	r0, [r4, #8]
 800f84c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f850:	f7fd f928 	bl	800caa4 <memset>
 800f854:	4620      	mov	r0, r4
 800f856:	bd70      	pop	{r4, r5, r6, pc}

0800f858 <__sfp_lock_acquire>:
 800f858:	4801      	ldr	r0, [pc, #4]	; (800f860 <__sfp_lock_acquire+0x8>)
 800f85a:	f000 bc1e 	b.w	801009a <__retarget_lock_acquire_recursive>
 800f85e:	bf00      	nop
 800f860:	200013d1 	.word	0x200013d1

0800f864 <__sfp_lock_release>:
 800f864:	4801      	ldr	r0, [pc, #4]	; (800f86c <__sfp_lock_release+0x8>)
 800f866:	f000 bc19 	b.w	801009c <__retarget_lock_release_recursive>
 800f86a:	bf00      	nop
 800f86c:	200013d1 	.word	0x200013d1

0800f870 <__sinit_lock_acquire>:
 800f870:	4801      	ldr	r0, [pc, #4]	; (800f878 <__sinit_lock_acquire+0x8>)
 800f872:	f000 bc12 	b.w	801009a <__retarget_lock_acquire_recursive>
 800f876:	bf00      	nop
 800f878:	200013d2 	.word	0x200013d2

0800f87c <__sinit_lock_release>:
 800f87c:	4801      	ldr	r0, [pc, #4]	; (800f884 <__sinit_lock_release+0x8>)
 800f87e:	f000 bc0d 	b.w	801009c <__retarget_lock_release_recursive>
 800f882:	bf00      	nop
 800f884:	200013d2 	.word	0x200013d2

0800f888 <__sinit>:
 800f888:	b510      	push	{r4, lr}
 800f88a:	4604      	mov	r4, r0
 800f88c:	f7ff fff0 	bl	800f870 <__sinit_lock_acquire>
 800f890:	69a3      	ldr	r3, [r4, #24]
 800f892:	b11b      	cbz	r3, 800f89c <__sinit+0x14>
 800f894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f898:	f7ff bff0 	b.w	800f87c <__sinit_lock_release>
 800f89c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f8a0:	6523      	str	r3, [r4, #80]	; 0x50
 800f8a2:	4b13      	ldr	r3, [pc, #76]	; (800f8f0 <__sinit+0x68>)
 800f8a4:	4a13      	ldr	r2, [pc, #76]	; (800f8f4 <__sinit+0x6c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f8aa:	42a3      	cmp	r3, r4
 800f8ac:	bf08      	it	eq
 800f8ae:	2301      	moveq	r3, #1
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	bf08      	it	eq
 800f8b4:	61a3      	streq	r3, [r4, #24]
 800f8b6:	f000 f81f 	bl	800f8f8 <__sfp>
 800f8ba:	6060      	str	r0, [r4, #4]
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f000 f81b 	bl	800f8f8 <__sfp>
 800f8c2:	60a0      	str	r0, [r4, #8]
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f000 f817 	bl	800f8f8 <__sfp>
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2104      	movs	r1, #4
 800f8ce:	60e0      	str	r0, [r4, #12]
 800f8d0:	6860      	ldr	r0, [r4, #4]
 800f8d2:	f7ff ff81 	bl	800f7d8 <std>
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	2109      	movs	r1, #9
 800f8da:	68a0      	ldr	r0, [r4, #8]
 800f8dc:	f7ff ff7c 	bl	800f7d8 <std>
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	2112      	movs	r1, #18
 800f8e4:	68e0      	ldr	r0, [r4, #12]
 800f8e6:	f7ff ff77 	bl	800f7d8 <std>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	61a3      	str	r3, [r4, #24]
 800f8ee:	e7d1      	b.n	800f894 <__sinit+0xc>
 800f8f0:	08012c6c 	.word	0x08012c6c
 800f8f4:	0800f821 	.word	0x0800f821

0800f8f8 <__sfp>:
 800f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fa:	4607      	mov	r7, r0
 800f8fc:	f7ff ffac 	bl	800f858 <__sfp_lock_acquire>
 800f900:	4b1e      	ldr	r3, [pc, #120]	; (800f97c <__sfp+0x84>)
 800f902:	681e      	ldr	r6, [r3, #0]
 800f904:	69b3      	ldr	r3, [r6, #24]
 800f906:	b913      	cbnz	r3, 800f90e <__sfp+0x16>
 800f908:	4630      	mov	r0, r6
 800f90a:	f7ff ffbd 	bl	800f888 <__sinit>
 800f90e:	3648      	adds	r6, #72	; 0x48
 800f910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f914:	3b01      	subs	r3, #1
 800f916:	d503      	bpl.n	800f920 <__sfp+0x28>
 800f918:	6833      	ldr	r3, [r6, #0]
 800f91a:	b30b      	cbz	r3, 800f960 <__sfp+0x68>
 800f91c:	6836      	ldr	r6, [r6, #0]
 800f91e:	e7f7      	b.n	800f910 <__sfp+0x18>
 800f920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f924:	b9d5      	cbnz	r5, 800f95c <__sfp+0x64>
 800f926:	4b16      	ldr	r3, [pc, #88]	; (800f980 <__sfp+0x88>)
 800f928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f92c:	60e3      	str	r3, [r4, #12]
 800f92e:	6665      	str	r5, [r4, #100]	; 0x64
 800f930:	f000 fbb2 	bl	8010098 <__retarget_lock_init_recursive>
 800f934:	f7ff ff96 	bl	800f864 <__sfp_lock_release>
 800f938:	2208      	movs	r2, #8
 800f93a:	4629      	mov	r1, r5
 800f93c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f944:	6025      	str	r5, [r4, #0]
 800f946:	61a5      	str	r5, [r4, #24]
 800f948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f94c:	f7fd f8aa 	bl	800caa4 <memset>
 800f950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f958:	4620      	mov	r0, r4
 800f95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f95c:	3468      	adds	r4, #104	; 0x68
 800f95e:	e7d9      	b.n	800f914 <__sfp+0x1c>
 800f960:	2104      	movs	r1, #4
 800f962:	4638      	mov	r0, r7
 800f964:	f7ff ff62 	bl	800f82c <__sfmoreglue>
 800f968:	4604      	mov	r4, r0
 800f96a:	6030      	str	r0, [r6, #0]
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d1d5      	bne.n	800f91c <__sfp+0x24>
 800f970:	f7ff ff78 	bl	800f864 <__sfp_lock_release>
 800f974:	230c      	movs	r3, #12
 800f976:	603b      	str	r3, [r7, #0]
 800f978:	e7ee      	b.n	800f958 <__sfp+0x60>
 800f97a:	bf00      	nop
 800f97c:	08012c6c 	.word	0x08012c6c
 800f980:	ffff0001 	.word	0xffff0001

0800f984 <_fwalk_reent>:
 800f984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f988:	4606      	mov	r6, r0
 800f98a:	4688      	mov	r8, r1
 800f98c:	2700      	movs	r7, #0
 800f98e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f996:	f1b9 0901 	subs.w	r9, r9, #1
 800f99a:	d505      	bpl.n	800f9a8 <_fwalk_reent+0x24>
 800f99c:	6824      	ldr	r4, [r4, #0]
 800f99e:	2c00      	cmp	r4, #0
 800f9a0:	d1f7      	bne.n	800f992 <_fwalk_reent+0xe>
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a8:	89ab      	ldrh	r3, [r5, #12]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d907      	bls.n	800f9be <_fwalk_reent+0x3a>
 800f9ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	d003      	beq.n	800f9be <_fwalk_reent+0x3a>
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	47c0      	blx	r8
 800f9bc:	4307      	orrs	r7, r0
 800f9be:	3568      	adds	r5, #104	; 0x68
 800f9c0:	e7e9      	b.n	800f996 <_fwalk_reent+0x12>

0800f9c2 <rshift>:
 800f9c2:	6903      	ldr	r3, [r0, #16]
 800f9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f9cc:	f100 0414 	add.w	r4, r0, #20
 800f9d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f9d4:	dd46      	ble.n	800fa64 <rshift+0xa2>
 800f9d6:	f011 011f 	ands.w	r1, r1, #31
 800f9da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f9de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f9e2:	d10c      	bne.n	800f9fe <rshift+0x3c>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	f100 0710 	add.w	r7, r0, #16
 800f9ea:	42b1      	cmp	r1, r6
 800f9ec:	d335      	bcc.n	800fa5a <rshift+0x98>
 800f9ee:	1a9b      	subs	r3, r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	1eea      	subs	r2, r5, #3
 800f9f4:	4296      	cmp	r6, r2
 800f9f6:	bf38      	it	cc
 800f9f8:	2300      	movcc	r3, #0
 800f9fa:	4423      	add	r3, r4
 800f9fc:	e015      	b.n	800fa2a <rshift+0x68>
 800f9fe:	46a1      	mov	r9, r4
 800fa00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa04:	f1c1 0820 	rsb	r8, r1, #32
 800fa08:	40cf      	lsrs	r7, r1
 800fa0a:	f105 0e04 	add.w	lr, r5, #4
 800fa0e:	4576      	cmp	r6, lr
 800fa10:	46f4      	mov	ip, lr
 800fa12:	d816      	bhi.n	800fa42 <rshift+0x80>
 800fa14:	1a9a      	subs	r2, r3, r2
 800fa16:	0092      	lsls	r2, r2, #2
 800fa18:	3a04      	subs	r2, #4
 800fa1a:	3501      	adds	r5, #1
 800fa1c:	42ae      	cmp	r6, r5
 800fa1e:	bf38      	it	cc
 800fa20:	2200      	movcc	r2, #0
 800fa22:	18a3      	adds	r3, r4, r2
 800fa24:	50a7      	str	r7, [r4, r2]
 800fa26:	b107      	cbz	r7, 800fa2a <rshift+0x68>
 800fa28:	3304      	adds	r3, #4
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	eba3 0204 	sub.w	r2, r3, r4
 800fa30:	bf08      	it	eq
 800fa32:	2300      	moveq	r3, #0
 800fa34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa38:	6102      	str	r2, [r0, #16]
 800fa3a:	bf08      	it	eq
 800fa3c:	6143      	streq	r3, [r0, #20]
 800fa3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa42:	f8dc c000 	ldr.w	ip, [ip]
 800fa46:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa4a:	ea4c 0707 	orr.w	r7, ip, r7
 800fa4e:	f849 7b04 	str.w	r7, [r9], #4
 800fa52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa56:	40cf      	lsrs	r7, r1
 800fa58:	e7d9      	b.n	800fa0e <rshift+0x4c>
 800fa5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa62:	e7c2      	b.n	800f9ea <rshift+0x28>
 800fa64:	4623      	mov	r3, r4
 800fa66:	e7e0      	b.n	800fa2a <rshift+0x68>

0800fa68 <__hexdig_fun>:
 800fa68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fa6c:	2b09      	cmp	r3, #9
 800fa6e:	d802      	bhi.n	800fa76 <__hexdig_fun+0xe>
 800fa70:	3820      	subs	r0, #32
 800fa72:	b2c0      	uxtb	r0, r0
 800fa74:	4770      	bx	lr
 800fa76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fa7a:	2b05      	cmp	r3, #5
 800fa7c:	d801      	bhi.n	800fa82 <__hexdig_fun+0x1a>
 800fa7e:	3847      	subs	r0, #71	; 0x47
 800fa80:	e7f7      	b.n	800fa72 <__hexdig_fun+0xa>
 800fa82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa86:	2b05      	cmp	r3, #5
 800fa88:	d801      	bhi.n	800fa8e <__hexdig_fun+0x26>
 800fa8a:	3827      	subs	r0, #39	; 0x27
 800fa8c:	e7f1      	b.n	800fa72 <__hexdig_fun+0xa>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	4770      	bx	lr
	...

0800fa94 <__gethex>:
 800fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa98:	b08b      	sub	sp, #44	; 0x2c
 800fa9a:	9305      	str	r3, [sp, #20]
 800fa9c:	4bb2      	ldr	r3, [pc, #712]	; (800fd68 <__gethex+0x2d4>)
 800fa9e:	9002      	str	r0, [sp, #8]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	468b      	mov	fp, r1
 800faa4:	4618      	mov	r0, r3
 800faa6:	4690      	mov	r8, r2
 800faa8:	9303      	str	r3, [sp, #12]
 800faaa:	f7f0 fb69 	bl	8000180 <strlen>
 800faae:	4682      	mov	sl, r0
 800fab0:	9b03      	ldr	r3, [sp, #12]
 800fab2:	f8db 2000 	ldr.w	r2, [fp]
 800fab6:	4403      	add	r3, r0
 800fab8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fabc:	9306      	str	r3, [sp, #24]
 800fabe:	1c93      	adds	r3, r2, #2
 800fac0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fac4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fac8:	32fe      	adds	r2, #254	; 0xfe
 800faca:	18d1      	adds	r1, r2, r3
 800facc:	461f      	mov	r7, r3
 800face:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fad2:	9101      	str	r1, [sp, #4]
 800fad4:	2830      	cmp	r0, #48	; 0x30
 800fad6:	d0f8      	beq.n	800faca <__gethex+0x36>
 800fad8:	f7ff ffc6 	bl	800fa68 <__hexdig_fun>
 800fadc:	4604      	mov	r4, r0
 800fade:	2800      	cmp	r0, #0
 800fae0:	d13a      	bne.n	800fb58 <__gethex+0xc4>
 800fae2:	4652      	mov	r2, sl
 800fae4:	4638      	mov	r0, r7
 800fae6:	9903      	ldr	r1, [sp, #12]
 800fae8:	f001 f9db 	bl	8010ea2 <strncmp>
 800faec:	4605      	mov	r5, r0
 800faee:	2800      	cmp	r0, #0
 800faf0:	d166      	bne.n	800fbc0 <__gethex+0x12c>
 800faf2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800faf6:	eb07 060a 	add.w	r6, r7, sl
 800fafa:	f7ff ffb5 	bl	800fa68 <__hexdig_fun>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d060      	beq.n	800fbc4 <__gethex+0x130>
 800fb02:	4633      	mov	r3, r6
 800fb04:	7818      	ldrb	r0, [r3, #0]
 800fb06:	461f      	mov	r7, r3
 800fb08:	2830      	cmp	r0, #48	; 0x30
 800fb0a:	f103 0301 	add.w	r3, r3, #1
 800fb0e:	d0f9      	beq.n	800fb04 <__gethex+0x70>
 800fb10:	f7ff ffaa 	bl	800fa68 <__hexdig_fun>
 800fb14:	2301      	movs	r3, #1
 800fb16:	fab0 f480 	clz	r4, r0
 800fb1a:	4635      	mov	r5, r6
 800fb1c:	0964      	lsrs	r4, r4, #5
 800fb1e:	9301      	str	r3, [sp, #4]
 800fb20:	463a      	mov	r2, r7
 800fb22:	4616      	mov	r6, r2
 800fb24:	7830      	ldrb	r0, [r6, #0]
 800fb26:	3201      	adds	r2, #1
 800fb28:	f7ff ff9e 	bl	800fa68 <__hexdig_fun>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d1f8      	bne.n	800fb22 <__gethex+0x8e>
 800fb30:	4652      	mov	r2, sl
 800fb32:	4630      	mov	r0, r6
 800fb34:	9903      	ldr	r1, [sp, #12]
 800fb36:	f001 f9b4 	bl	8010ea2 <strncmp>
 800fb3a:	b980      	cbnz	r0, 800fb5e <__gethex+0xca>
 800fb3c:	b94d      	cbnz	r5, 800fb52 <__gethex+0xbe>
 800fb3e:	eb06 050a 	add.w	r5, r6, sl
 800fb42:	462a      	mov	r2, r5
 800fb44:	4616      	mov	r6, r2
 800fb46:	7830      	ldrb	r0, [r6, #0]
 800fb48:	3201      	adds	r2, #1
 800fb4a:	f7ff ff8d 	bl	800fa68 <__hexdig_fun>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d1f8      	bne.n	800fb44 <__gethex+0xb0>
 800fb52:	1bad      	subs	r5, r5, r6
 800fb54:	00ad      	lsls	r5, r5, #2
 800fb56:	e004      	b.n	800fb62 <__gethex+0xce>
 800fb58:	2400      	movs	r4, #0
 800fb5a:	4625      	mov	r5, r4
 800fb5c:	e7e0      	b.n	800fb20 <__gethex+0x8c>
 800fb5e:	2d00      	cmp	r5, #0
 800fb60:	d1f7      	bne.n	800fb52 <__gethex+0xbe>
 800fb62:	7833      	ldrb	r3, [r6, #0]
 800fb64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb68:	2b50      	cmp	r3, #80	; 0x50
 800fb6a:	d139      	bne.n	800fbe0 <__gethex+0x14c>
 800fb6c:	7873      	ldrb	r3, [r6, #1]
 800fb6e:	2b2b      	cmp	r3, #43	; 0x2b
 800fb70:	d02a      	beq.n	800fbc8 <__gethex+0x134>
 800fb72:	2b2d      	cmp	r3, #45	; 0x2d
 800fb74:	d02c      	beq.n	800fbd0 <__gethex+0x13c>
 800fb76:	f04f 0900 	mov.w	r9, #0
 800fb7a:	1c71      	adds	r1, r6, #1
 800fb7c:	7808      	ldrb	r0, [r1, #0]
 800fb7e:	f7ff ff73 	bl	800fa68 <__hexdig_fun>
 800fb82:	1e43      	subs	r3, r0, #1
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b18      	cmp	r3, #24
 800fb88:	d82a      	bhi.n	800fbe0 <__gethex+0x14c>
 800fb8a:	f1a0 0210 	sub.w	r2, r0, #16
 800fb8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb92:	f7ff ff69 	bl	800fa68 <__hexdig_fun>
 800fb96:	1e43      	subs	r3, r0, #1
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b18      	cmp	r3, #24
 800fb9c:	d91b      	bls.n	800fbd6 <__gethex+0x142>
 800fb9e:	f1b9 0f00 	cmp.w	r9, #0
 800fba2:	d000      	beq.n	800fba6 <__gethex+0x112>
 800fba4:	4252      	negs	r2, r2
 800fba6:	4415      	add	r5, r2
 800fba8:	f8cb 1000 	str.w	r1, [fp]
 800fbac:	b1d4      	cbz	r4, 800fbe4 <__gethex+0x150>
 800fbae:	9b01      	ldr	r3, [sp, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	bf14      	ite	ne
 800fbb4:	2700      	movne	r7, #0
 800fbb6:	2706      	moveq	r7, #6
 800fbb8:	4638      	mov	r0, r7
 800fbba:	b00b      	add	sp, #44	; 0x2c
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc0:	463e      	mov	r6, r7
 800fbc2:	4625      	mov	r5, r4
 800fbc4:	2401      	movs	r4, #1
 800fbc6:	e7cc      	b.n	800fb62 <__gethex+0xce>
 800fbc8:	f04f 0900 	mov.w	r9, #0
 800fbcc:	1cb1      	adds	r1, r6, #2
 800fbce:	e7d5      	b.n	800fb7c <__gethex+0xe8>
 800fbd0:	f04f 0901 	mov.w	r9, #1
 800fbd4:	e7fa      	b.n	800fbcc <__gethex+0x138>
 800fbd6:	230a      	movs	r3, #10
 800fbd8:	fb03 0202 	mla	r2, r3, r2, r0
 800fbdc:	3a10      	subs	r2, #16
 800fbde:	e7d6      	b.n	800fb8e <__gethex+0xfa>
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	e7e1      	b.n	800fba8 <__gethex+0x114>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	1bf3      	subs	r3, r6, r7
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	2b07      	cmp	r3, #7
 800fbec:	dc0a      	bgt.n	800fc04 <__gethex+0x170>
 800fbee:	9802      	ldr	r0, [sp, #8]
 800fbf0:	f000 fae6 	bl	80101c0 <_Balloc>
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	b940      	cbnz	r0, 800fc0a <__gethex+0x176>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	21de      	movs	r1, #222	; 0xde
 800fbfc:	4b5b      	ldr	r3, [pc, #364]	; (800fd6c <__gethex+0x2d8>)
 800fbfe:	485c      	ldr	r0, [pc, #368]	; (800fd70 <__gethex+0x2dc>)
 800fc00:	f001 f982 	bl	8010f08 <__assert_func>
 800fc04:	3101      	adds	r1, #1
 800fc06:	105b      	asrs	r3, r3, #1
 800fc08:	e7ef      	b.n	800fbea <__gethex+0x156>
 800fc0a:	f04f 0b00 	mov.w	fp, #0
 800fc0e:	f100 0914 	add.w	r9, r0, #20
 800fc12:	f1ca 0301 	rsb	r3, sl, #1
 800fc16:	f8cd 9010 	str.w	r9, [sp, #16]
 800fc1a:	f8cd b004 	str.w	fp, [sp, #4]
 800fc1e:	9308      	str	r3, [sp, #32]
 800fc20:	42b7      	cmp	r7, r6
 800fc22:	d33f      	bcc.n	800fca4 <__gethex+0x210>
 800fc24:	9f04      	ldr	r7, [sp, #16]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	f847 3b04 	str.w	r3, [r7], #4
 800fc2c:	eba7 0709 	sub.w	r7, r7, r9
 800fc30:	10bf      	asrs	r7, r7, #2
 800fc32:	6127      	str	r7, [r4, #16]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 fbb5 	bl	80103a4 <__hi0bits>
 800fc3a:	017f      	lsls	r7, r7, #5
 800fc3c:	f8d8 6000 	ldr.w	r6, [r8]
 800fc40:	1a3f      	subs	r7, r7, r0
 800fc42:	42b7      	cmp	r7, r6
 800fc44:	dd62      	ble.n	800fd0c <__gethex+0x278>
 800fc46:	1bbf      	subs	r7, r7, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f000 ff4f 	bl	8010aee <__any_on>
 800fc50:	4682      	mov	sl, r0
 800fc52:	b1a8      	cbz	r0, 800fc80 <__gethex+0x1ec>
 800fc54:	f04f 0a01 	mov.w	sl, #1
 800fc58:	1e7b      	subs	r3, r7, #1
 800fc5a:	1159      	asrs	r1, r3, #5
 800fc5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fc60:	f003 021f 	and.w	r2, r3, #31
 800fc64:	fa0a f202 	lsl.w	r2, sl, r2
 800fc68:	420a      	tst	r2, r1
 800fc6a:	d009      	beq.n	800fc80 <__gethex+0x1ec>
 800fc6c:	4553      	cmp	r3, sl
 800fc6e:	dd05      	ble.n	800fc7c <__gethex+0x1e8>
 800fc70:	4620      	mov	r0, r4
 800fc72:	1eb9      	subs	r1, r7, #2
 800fc74:	f000 ff3b 	bl	8010aee <__any_on>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	d144      	bne.n	800fd06 <__gethex+0x272>
 800fc7c:	f04f 0a02 	mov.w	sl, #2
 800fc80:	4639      	mov	r1, r7
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7ff fe9d 	bl	800f9c2 <rshift>
 800fc88:	443d      	add	r5, r7
 800fc8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc8e:	42ab      	cmp	r3, r5
 800fc90:	da4a      	bge.n	800fd28 <__gethex+0x294>
 800fc92:	4621      	mov	r1, r4
 800fc94:	9802      	ldr	r0, [sp, #8]
 800fc96:	f000 fad3 	bl	8010240 <_Bfree>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc9e:	27a3      	movs	r7, #163	; 0xa3
 800fca0:	6013      	str	r3, [r2, #0]
 800fca2:	e789      	b.n	800fbb8 <__gethex+0x124>
 800fca4:	1e73      	subs	r3, r6, #1
 800fca6:	9a06      	ldr	r2, [sp, #24]
 800fca8:	9307      	str	r3, [sp, #28]
 800fcaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d019      	beq.n	800fce6 <__gethex+0x252>
 800fcb2:	f1bb 0f20 	cmp.w	fp, #32
 800fcb6:	d107      	bne.n	800fcc8 <__gethex+0x234>
 800fcb8:	9b04      	ldr	r3, [sp, #16]
 800fcba:	9a01      	ldr	r2, [sp, #4]
 800fcbc:	f843 2b04 	str.w	r2, [r3], #4
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	469b      	mov	fp, r3
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fccc:	f7ff fecc 	bl	800fa68 <__hexdig_fun>
 800fcd0:	9b01      	ldr	r3, [sp, #4]
 800fcd2:	f000 000f 	and.w	r0, r0, #15
 800fcd6:	fa00 f00b 	lsl.w	r0, r0, fp
 800fcda:	4303      	orrs	r3, r0
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	f10b 0b04 	add.w	fp, fp, #4
 800fce2:	9b07      	ldr	r3, [sp, #28]
 800fce4:	e00d      	b.n	800fd02 <__gethex+0x26e>
 800fce6:	9a08      	ldr	r2, [sp, #32]
 800fce8:	1e73      	subs	r3, r6, #1
 800fcea:	4413      	add	r3, r2
 800fcec:	42bb      	cmp	r3, r7
 800fcee:	d3e0      	bcc.n	800fcb2 <__gethex+0x21e>
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	4652      	mov	r2, sl
 800fcf4:	9903      	ldr	r1, [sp, #12]
 800fcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf8:	f001 f8d3 	bl	8010ea2 <strncmp>
 800fcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d1d7      	bne.n	800fcb2 <__gethex+0x21e>
 800fd02:	461e      	mov	r6, r3
 800fd04:	e78c      	b.n	800fc20 <__gethex+0x18c>
 800fd06:	f04f 0a03 	mov.w	sl, #3
 800fd0a:	e7b9      	b.n	800fc80 <__gethex+0x1ec>
 800fd0c:	da09      	bge.n	800fd22 <__gethex+0x28e>
 800fd0e:	1bf7      	subs	r7, r6, r7
 800fd10:	4621      	mov	r1, r4
 800fd12:	463a      	mov	r2, r7
 800fd14:	9802      	ldr	r0, [sp, #8]
 800fd16:	f000 fcab 	bl	8010670 <__lshift>
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	1bed      	subs	r5, r5, r7
 800fd1e:	f100 0914 	add.w	r9, r0, #20
 800fd22:	f04f 0a00 	mov.w	sl, #0
 800fd26:	e7b0      	b.n	800fc8a <__gethex+0x1f6>
 800fd28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fd2c:	42a8      	cmp	r0, r5
 800fd2e:	dd72      	ble.n	800fe16 <__gethex+0x382>
 800fd30:	1b45      	subs	r5, r0, r5
 800fd32:	42ae      	cmp	r6, r5
 800fd34:	dc35      	bgt.n	800fda2 <__gethex+0x30e>
 800fd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	d029      	beq.n	800fd92 <__gethex+0x2fe>
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d02b      	beq.n	800fd9a <__gethex+0x306>
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d11c      	bne.n	800fd80 <__gethex+0x2ec>
 800fd46:	42ae      	cmp	r6, r5
 800fd48:	d11a      	bne.n	800fd80 <__gethex+0x2ec>
 800fd4a:	2e01      	cmp	r6, #1
 800fd4c:	d112      	bne.n	800fd74 <__gethex+0x2e0>
 800fd4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd52:	9a05      	ldr	r2, [sp, #20]
 800fd54:	2762      	movs	r7, #98	; 0x62
 800fd56:	6013      	str	r3, [r2, #0]
 800fd58:	2301      	movs	r3, #1
 800fd5a:	6123      	str	r3, [r4, #16]
 800fd5c:	f8c9 3000 	str.w	r3, [r9]
 800fd60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd62:	601c      	str	r4, [r3, #0]
 800fd64:	e728      	b.n	800fbb8 <__gethex+0x124>
 800fd66:	bf00      	nop
 800fd68:	08012f5c 	.word	0x08012f5c
 800fd6c:	08012e80 	.word	0x08012e80
 800fd70:	08012ef4 	.word	0x08012ef4
 800fd74:	4620      	mov	r0, r4
 800fd76:	1e71      	subs	r1, r6, #1
 800fd78:	f000 feb9 	bl	8010aee <__any_on>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1e6      	bne.n	800fd4e <__gethex+0x2ba>
 800fd80:	4621      	mov	r1, r4
 800fd82:	9802      	ldr	r0, [sp, #8]
 800fd84:	f000 fa5c 	bl	8010240 <_Bfree>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd8c:	2750      	movs	r7, #80	; 0x50
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	e712      	b.n	800fbb8 <__gethex+0x124>
 800fd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1f3      	bne.n	800fd80 <__gethex+0x2ec>
 800fd98:	e7d9      	b.n	800fd4e <__gethex+0x2ba>
 800fd9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d1d6      	bne.n	800fd4e <__gethex+0x2ba>
 800fda0:	e7ee      	b.n	800fd80 <__gethex+0x2ec>
 800fda2:	1e6f      	subs	r7, r5, #1
 800fda4:	f1ba 0f00 	cmp.w	sl, #0
 800fda8:	d132      	bne.n	800fe10 <__gethex+0x37c>
 800fdaa:	b127      	cbz	r7, 800fdb6 <__gethex+0x322>
 800fdac:	4639      	mov	r1, r7
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f000 fe9d 	bl	8010aee <__any_on>
 800fdb4:	4682      	mov	sl, r0
 800fdb6:	2101      	movs	r1, #1
 800fdb8:	117b      	asrs	r3, r7, #5
 800fdba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fdbe:	f007 071f 	and.w	r7, r7, #31
 800fdc2:	fa01 f707 	lsl.w	r7, r1, r7
 800fdc6:	421f      	tst	r7, r3
 800fdc8:	f04f 0702 	mov.w	r7, #2
 800fdcc:	4629      	mov	r1, r5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	bf18      	it	ne
 800fdd2:	f04a 0a02 	orrne.w	sl, sl, #2
 800fdd6:	1b76      	subs	r6, r6, r5
 800fdd8:	f7ff fdf3 	bl	800f9c2 <rshift>
 800fddc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fde0:	f1ba 0f00 	cmp.w	sl, #0
 800fde4:	d048      	beq.n	800fe78 <__gethex+0x3e4>
 800fde6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d015      	beq.n	800fe1a <__gethex+0x386>
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d017      	beq.n	800fe22 <__gethex+0x38e>
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d109      	bne.n	800fe0a <__gethex+0x376>
 800fdf6:	f01a 0f02 	tst.w	sl, #2
 800fdfa:	d006      	beq.n	800fe0a <__gethex+0x376>
 800fdfc:	f8d9 0000 	ldr.w	r0, [r9]
 800fe00:	ea4a 0a00 	orr.w	sl, sl, r0
 800fe04:	f01a 0f01 	tst.w	sl, #1
 800fe08:	d10e      	bne.n	800fe28 <__gethex+0x394>
 800fe0a:	f047 0710 	orr.w	r7, r7, #16
 800fe0e:	e033      	b.n	800fe78 <__gethex+0x3e4>
 800fe10:	f04f 0a01 	mov.w	sl, #1
 800fe14:	e7cf      	b.n	800fdb6 <__gethex+0x322>
 800fe16:	2701      	movs	r7, #1
 800fe18:	e7e2      	b.n	800fde0 <__gethex+0x34c>
 800fe1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe1c:	f1c3 0301 	rsb	r3, r3, #1
 800fe20:	9315      	str	r3, [sp, #84]	; 0x54
 800fe22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d0f0      	beq.n	800fe0a <__gethex+0x376>
 800fe28:	f04f 0c00 	mov.w	ip, #0
 800fe2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe30:	f104 0314 	add.w	r3, r4, #20
 800fe34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe42:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe46:	d01c      	beq.n	800fe82 <__gethex+0x3ee>
 800fe48:	3201      	adds	r2, #1
 800fe4a:	6002      	str	r2, [r0, #0]
 800fe4c:	2f02      	cmp	r7, #2
 800fe4e:	f104 0314 	add.w	r3, r4, #20
 800fe52:	d13d      	bne.n	800fed0 <__gethex+0x43c>
 800fe54:	f8d8 2000 	ldr.w	r2, [r8]
 800fe58:	3a01      	subs	r2, #1
 800fe5a:	42b2      	cmp	r2, r6
 800fe5c:	d10a      	bne.n	800fe74 <__gethex+0x3e0>
 800fe5e:	2201      	movs	r2, #1
 800fe60:	1171      	asrs	r1, r6, #5
 800fe62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe66:	f006 061f 	and.w	r6, r6, #31
 800fe6a:	fa02 f606 	lsl.w	r6, r2, r6
 800fe6e:	421e      	tst	r6, r3
 800fe70:	bf18      	it	ne
 800fe72:	4617      	movne	r7, r2
 800fe74:	f047 0720 	orr.w	r7, r7, #32
 800fe78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe7a:	601c      	str	r4, [r3, #0]
 800fe7c:	9b05      	ldr	r3, [sp, #20]
 800fe7e:	601d      	str	r5, [r3, #0]
 800fe80:	e69a      	b.n	800fbb8 <__gethex+0x124>
 800fe82:	4299      	cmp	r1, r3
 800fe84:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe88:	d8d8      	bhi.n	800fe3c <__gethex+0x3a8>
 800fe8a:	68a3      	ldr	r3, [r4, #8]
 800fe8c:	459b      	cmp	fp, r3
 800fe8e:	db17      	blt.n	800fec0 <__gethex+0x42c>
 800fe90:	6861      	ldr	r1, [r4, #4]
 800fe92:	9802      	ldr	r0, [sp, #8]
 800fe94:	3101      	adds	r1, #1
 800fe96:	f000 f993 	bl	80101c0 <_Balloc>
 800fe9a:	4681      	mov	r9, r0
 800fe9c:	b918      	cbnz	r0, 800fea6 <__gethex+0x412>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	2184      	movs	r1, #132	; 0x84
 800fea2:	4b19      	ldr	r3, [pc, #100]	; (800ff08 <__gethex+0x474>)
 800fea4:	e6ab      	b.n	800fbfe <__gethex+0x16a>
 800fea6:	6922      	ldr	r2, [r4, #16]
 800fea8:	f104 010c 	add.w	r1, r4, #12
 800feac:	3202      	adds	r2, #2
 800feae:	0092      	lsls	r2, r2, #2
 800feb0:	300c      	adds	r0, #12
 800feb2:	f7fc fde9 	bl	800ca88 <memcpy>
 800feb6:	4621      	mov	r1, r4
 800feb8:	9802      	ldr	r0, [sp, #8]
 800feba:	f000 f9c1 	bl	8010240 <_Bfree>
 800febe:	464c      	mov	r4, r9
 800fec0:	6923      	ldr	r3, [r4, #16]
 800fec2:	1c5a      	adds	r2, r3, #1
 800fec4:	6122      	str	r2, [r4, #16]
 800fec6:	2201      	movs	r2, #1
 800fec8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fecc:	615a      	str	r2, [r3, #20]
 800fece:	e7bd      	b.n	800fe4c <__gethex+0x3b8>
 800fed0:	6922      	ldr	r2, [r4, #16]
 800fed2:	455a      	cmp	r2, fp
 800fed4:	dd0b      	ble.n	800feee <__gethex+0x45a>
 800fed6:	2101      	movs	r1, #1
 800fed8:	4620      	mov	r0, r4
 800feda:	f7ff fd72 	bl	800f9c2 <rshift>
 800fede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fee2:	3501      	adds	r5, #1
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	f6ff aed4 	blt.w	800fc92 <__gethex+0x1fe>
 800feea:	2701      	movs	r7, #1
 800feec:	e7c2      	b.n	800fe74 <__gethex+0x3e0>
 800feee:	f016 061f 	ands.w	r6, r6, #31
 800fef2:	d0fa      	beq.n	800feea <__gethex+0x456>
 800fef4:	4453      	add	r3, sl
 800fef6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fefa:	f000 fa53 	bl	80103a4 <__hi0bits>
 800fefe:	f1c6 0620 	rsb	r6, r6, #32
 800ff02:	42b0      	cmp	r0, r6
 800ff04:	dbe7      	blt.n	800fed6 <__gethex+0x442>
 800ff06:	e7f0      	b.n	800feea <__gethex+0x456>
 800ff08:	08012e80 	.word	0x08012e80

0800ff0c <L_shift>:
 800ff0c:	f1c2 0208 	rsb	r2, r2, #8
 800ff10:	0092      	lsls	r2, r2, #2
 800ff12:	b570      	push	{r4, r5, r6, lr}
 800ff14:	f1c2 0620 	rsb	r6, r2, #32
 800ff18:	6843      	ldr	r3, [r0, #4]
 800ff1a:	6804      	ldr	r4, [r0, #0]
 800ff1c:	fa03 f506 	lsl.w	r5, r3, r6
 800ff20:	432c      	orrs	r4, r5
 800ff22:	40d3      	lsrs	r3, r2
 800ff24:	6004      	str	r4, [r0, #0]
 800ff26:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff2a:	4288      	cmp	r0, r1
 800ff2c:	d3f4      	bcc.n	800ff18 <L_shift+0xc>
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}

0800ff30 <__match>:
 800ff30:	b530      	push	{r4, r5, lr}
 800ff32:	6803      	ldr	r3, [r0, #0]
 800ff34:	3301      	adds	r3, #1
 800ff36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff3a:	b914      	cbnz	r4, 800ff42 <__match+0x12>
 800ff3c:	6003      	str	r3, [r0, #0]
 800ff3e:	2001      	movs	r0, #1
 800ff40:	bd30      	pop	{r4, r5, pc}
 800ff42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ff4a:	2d19      	cmp	r5, #25
 800ff4c:	bf98      	it	ls
 800ff4e:	3220      	addls	r2, #32
 800ff50:	42a2      	cmp	r2, r4
 800ff52:	d0f0      	beq.n	800ff36 <__match+0x6>
 800ff54:	2000      	movs	r0, #0
 800ff56:	e7f3      	b.n	800ff40 <__match+0x10>

0800ff58 <__hexnan>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	2500      	movs	r5, #0
 800ff5e:	680b      	ldr	r3, [r1, #0]
 800ff60:	4682      	mov	sl, r0
 800ff62:	115e      	asrs	r6, r3, #5
 800ff64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff68:	f013 031f 	ands.w	r3, r3, #31
 800ff6c:	bf18      	it	ne
 800ff6e:	3604      	addne	r6, #4
 800ff70:	1f37      	subs	r7, r6, #4
 800ff72:	46b9      	mov	r9, r7
 800ff74:	463c      	mov	r4, r7
 800ff76:	46ab      	mov	fp, r5
 800ff78:	b087      	sub	sp, #28
 800ff7a:	4690      	mov	r8, r2
 800ff7c:	6802      	ldr	r2, [r0, #0]
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff84:	9502      	str	r5, [sp, #8]
 800ff86:	7851      	ldrb	r1, [r2, #1]
 800ff88:	1c53      	adds	r3, r2, #1
 800ff8a:	9303      	str	r3, [sp, #12]
 800ff8c:	b341      	cbz	r1, 800ffe0 <__hexnan+0x88>
 800ff8e:	4608      	mov	r0, r1
 800ff90:	9205      	str	r2, [sp, #20]
 800ff92:	9104      	str	r1, [sp, #16]
 800ff94:	f7ff fd68 	bl	800fa68 <__hexdig_fun>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d14f      	bne.n	801003c <__hexnan+0xe4>
 800ff9c:	9904      	ldr	r1, [sp, #16]
 800ff9e:	9a05      	ldr	r2, [sp, #20]
 800ffa0:	2920      	cmp	r1, #32
 800ffa2:	d818      	bhi.n	800ffd6 <__hexnan+0x7e>
 800ffa4:	9b02      	ldr	r3, [sp, #8]
 800ffa6:	459b      	cmp	fp, r3
 800ffa8:	dd13      	ble.n	800ffd2 <__hexnan+0x7a>
 800ffaa:	454c      	cmp	r4, r9
 800ffac:	d206      	bcs.n	800ffbc <__hexnan+0x64>
 800ffae:	2d07      	cmp	r5, #7
 800ffb0:	dc04      	bgt.n	800ffbc <__hexnan+0x64>
 800ffb2:	462a      	mov	r2, r5
 800ffb4:	4649      	mov	r1, r9
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f7ff ffa8 	bl	800ff0c <L_shift>
 800ffbc:	4544      	cmp	r4, r8
 800ffbe:	d950      	bls.n	8010062 <__hexnan+0x10a>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f1a4 0904 	sub.w	r9, r4, #4
 800ffc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffca:	461d      	mov	r5, r3
 800ffcc:	464c      	mov	r4, r9
 800ffce:	f8cd b008 	str.w	fp, [sp, #8]
 800ffd2:	9a03      	ldr	r2, [sp, #12]
 800ffd4:	e7d7      	b.n	800ff86 <__hexnan+0x2e>
 800ffd6:	2929      	cmp	r1, #41	; 0x29
 800ffd8:	d156      	bne.n	8010088 <__hexnan+0x130>
 800ffda:	3202      	adds	r2, #2
 800ffdc:	f8ca 2000 	str.w	r2, [sl]
 800ffe0:	f1bb 0f00 	cmp.w	fp, #0
 800ffe4:	d050      	beq.n	8010088 <__hexnan+0x130>
 800ffe6:	454c      	cmp	r4, r9
 800ffe8:	d206      	bcs.n	800fff8 <__hexnan+0xa0>
 800ffea:	2d07      	cmp	r5, #7
 800ffec:	dc04      	bgt.n	800fff8 <__hexnan+0xa0>
 800ffee:	462a      	mov	r2, r5
 800fff0:	4649      	mov	r1, r9
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7ff ff8a 	bl	800ff0c <L_shift>
 800fff8:	4544      	cmp	r4, r8
 800fffa:	d934      	bls.n	8010066 <__hexnan+0x10e>
 800fffc:	4623      	mov	r3, r4
 800fffe:	f1a8 0204 	sub.w	r2, r8, #4
 8010002:	f853 1b04 	ldr.w	r1, [r3], #4
 8010006:	429f      	cmp	r7, r3
 8010008:	f842 1f04 	str.w	r1, [r2, #4]!
 801000c:	d2f9      	bcs.n	8010002 <__hexnan+0xaa>
 801000e:	1b3b      	subs	r3, r7, r4
 8010010:	f023 0303 	bic.w	r3, r3, #3
 8010014:	3304      	adds	r3, #4
 8010016:	3401      	adds	r4, #1
 8010018:	3e03      	subs	r6, #3
 801001a:	42b4      	cmp	r4, r6
 801001c:	bf88      	it	hi
 801001e:	2304      	movhi	r3, #4
 8010020:	2200      	movs	r2, #0
 8010022:	4443      	add	r3, r8
 8010024:	f843 2b04 	str.w	r2, [r3], #4
 8010028:	429f      	cmp	r7, r3
 801002a:	d2fb      	bcs.n	8010024 <__hexnan+0xcc>
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	b91b      	cbnz	r3, 8010038 <__hexnan+0xe0>
 8010030:	4547      	cmp	r7, r8
 8010032:	d127      	bne.n	8010084 <__hexnan+0x12c>
 8010034:	2301      	movs	r3, #1
 8010036:	603b      	str	r3, [r7, #0]
 8010038:	2005      	movs	r0, #5
 801003a:	e026      	b.n	801008a <__hexnan+0x132>
 801003c:	3501      	adds	r5, #1
 801003e:	2d08      	cmp	r5, #8
 8010040:	f10b 0b01 	add.w	fp, fp, #1
 8010044:	dd06      	ble.n	8010054 <__hexnan+0xfc>
 8010046:	4544      	cmp	r4, r8
 8010048:	d9c3      	bls.n	800ffd2 <__hexnan+0x7a>
 801004a:	2300      	movs	r3, #0
 801004c:	2501      	movs	r5, #1
 801004e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010052:	3c04      	subs	r4, #4
 8010054:	6822      	ldr	r2, [r4, #0]
 8010056:	f000 000f 	and.w	r0, r0, #15
 801005a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801005e:	6022      	str	r2, [r4, #0]
 8010060:	e7b7      	b.n	800ffd2 <__hexnan+0x7a>
 8010062:	2508      	movs	r5, #8
 8010064:	e7b5      	b.n	800ffd2 <__hexnan+0x7a>
 8010066:	9b01      	ldr	r3, [sp, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d0df      	beq.n	801002c <__hexnan+0xd4>
 801006c:	f04f 32ff 	mov.w	r2, #4294967295
 8010070:	f1c3 0320 	rsb	r3, r3, #32
 8010074:	fa22 f303 	lsr.w	r3, r2, r3
 8010078:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801007c:	401a      	ands	r2, r3
 801007e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010082:	e7d3      	b.n	801002c <__hexnan+0xd4>
 8010084:	3f04      	subs	r7, #4
 8010086:	e7d1      	b.n	801002c <__hexnan+0xd4>
 8010088:	2004      	movs	r0, #4
 801008a:	b007      	add	sp, #28
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010090 <_localeconv_r>:
 8010090:	4800      	ldr	r0, [pc, #0]	; (8010094 <_localeconv_r+0x4>)
 8010092:	4770      	bx	lr
 8010094:	20000190 	.word	0x20000190

08010098 <__retarget_lock_init_recursive>:
 8010098:	4770      	bx	lr

0801009a <__retarget_lock_acquire_recursive>:
 801009a:	4770      	bx	lr

0801009c <__retarget_lock_release_recursive>:
 801009c:	4770      	bx	lr

0801009e <__swhatbuf_r>:
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	460e      	mov	r6, r1
 80100a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a6:	4614      	mov	r4, r2
 80100a8:	2900      	cmp	r1, #0
 80100aa:	461d      	mov	r5, r3
 80100ac:	b096      	sub	sp, #88	; 0x58
 80100ae:	da08      	bge.n	80100c2 <__swhatbuf_r+0x24>
 80100b0:	2200      	movs	r2, #0
 80100b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100b6:	602a      	str	r2, [r5, #0]
 80100b8:	061a      	lsls	r2, r3, #24
 80100ba:	d410      	bmi.n	80100de <__swhatbuf_r+0x40>
 80100bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100c0:	e00e      	b.n	80100e0 <__swhatbuf_r+0x42>
 80100c2:	466a      	mov	r2, sp
 80100c4:	f000 ff60 	bl	8010f88 <_fstat_r>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	dbf1      	blt.n	80100b0 <__swhatbuf_r+0x12>
 80100cc:	9a01      	ldr	r2, [sp, #4]
 80100ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100d6:	425a      	negs	r2, r3
 80100d8:	415a      	adcs	r2, r3
 80100da:	602a      	str	r2, [r5, #0]
 80100dc:	e7ee      	b.n	80100bc <__swhatbuf_r+0x1e>
 80100de:	2340      	movs	r3, #64	; 0x40
 80100e0:	2000      	movs	r0, #0
 80100e2:	6023      	str	r3, [r4, #0]
 80100e4:	b016      	add	sp, #88	; 0x58
 80100e6:	bd70      	pop	{r4, r5, r6, pc}

080100e8 <__smakebuf_r>:
 80100e8:	898b      	ldrh	r3, [r1, #12]
 80100ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100ec:	079d      	lsls	r5, r3, #30
 80100ee:	4606      	mov	r6, r0
 80100f0:	460c      	mov	r4, r1
 80100f2:	d507      	bpl.n	8010104 <__smakebuf_r+0x1c>
 80100f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	6123      	str	r3, [r4, #16]
 80100fc:	2301      	movs	r3, #1
 80100fe:	6163      	str	r3, [r4, #20]
 8010100:	b002      	add	sp, #8
 8010102:	bd70      	pop	{r4, r5, r6, pc}
 8010104:	466a      	mov	r2, sp
 8010106:	ab01      	add	r3, sp, #4
 8010108:	f7ff ffc9 	bl	801009e <__swhatbuf_r>
 801010c:	9900      	ldr	r1, [sp, #0]
 801010e:	4605      	mov	r5, r0
 8010110:	4630      	mov	r0, r6
 8010112:	f7fc fd37 	bl	800cb84 <_malloc_r>
 8010116:	b948      	cbnz	r0, 801012c <__smakebuf_r+0x44>
 8010118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801011c:	059a      	lsls	r2, r3, #22
 801011e:	d4ef      	bmi.n	8010100 <__smakebuf_r+0x18>
 8010120:	f023 0303 	bic.w	r3, r3, #3
 8010124:	f043 0302 	orr.w	r3, r3, #2
 8010128:	81a3      	strh	r3, [r4, #12]
 801012a:	e7e3      	b.n	80100f4 <__smakebuf_r+0xc>
 801012c:	4b0d      	ldr	r3, [pc, #52]	; (8010164 <__smakebuf_r+0x7c>)
 801012e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010130:	89a3      	ldrh	r3, [r4, #12]
 8010132:	6020      	str	r0, [r4, #0]
 8010134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010138:	81a3      	strh	r3, [r4, #12]
 801013a:	9b00      	ldr	r3, [sp, #0]
 801013c:	6120      	str	r0, [r4, #16]
 801013e:	6163      	str	r3, [r4, #20]
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	b15b      	cbz	r3, 801015c <__smakebuf_r+0x74>
 8010144:	4630      	mov	r0, r6
 8010146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801014a:	f000 ff2f 	bl	8010fac <_isatty_r>
 801014e:	b128      	cbz	r0, 801015c <__smakebuf_r+0x74>
 8010150:	89a3      	ldrh	r3, [r4, #12]
 8010152:	f023 0303 	bic.w	r3, r3, #3
 8010156:	f043 0301 	orr.w	r3, r3, #1
 801015a:	81a3      	strh	r3, [r4, #12]
 801015c:	89a0      	ldrh	r0, [r4, #12]
 801015e:	4305      	orrs	r5, r0
 8010160:	81a5      	strh	r5, [r4, #12]
 8010162:	e7cd      	b.n	8010100 <__smakebuf_r+0x18>
 8010164:	0800f821 	.word	0x0800f821

08010168 <__ascii_mbtowc>:
 8010168:	b082      	sub	sp, #8
 801016a:	b901      	cbnz	r1, 801016e <__ascii_mbtowc+0x6>
 801016c:	a901      	add	r1, sp, #4
 801016e:	b142      	cbz	r2, 8010182 <__ascii_mbtowc+0x1a>
 8010170:	b14b      	cbz	r3, 8010186 <__ascii_mbtowc+0x1e>
 8010172:	7813      	ldrb	r3, [r2, #0]
 8010174:	600b      	str	r3, [r1, #0]
 8010176:	7812      	ldrb	r2, [r2, #0]
 8010178:	1e10      	subs	r0, r2, #0
 801017a:	bf18      	it	ne
 801017c:	2001      	movne	r0, #1
 801017e:	b002      	add	sp, #8
 8010180:	4770      	bx	lr
 8010182:	4610      	mov	r0, r2
 8010184:	e7fb      	b.n	801017e <__ascii_mbtowc+0x16>
 8010186:	f06f 0001 	mvn.w	r0, #1
 801018a:	e7f8      	b.n	801017e <__ascii_mbtowc+0x16>

0801018c <memchr>:
 801018c:	4603      	mov	r3, r0
 801018e:	b510      	push	{r4, lr}
 8010190:	b2c9      	uxtb	r1, r1
 8010192:	4402      	add	r2, r0
 8010194:	4293      	cmp	r3, r2
 8010196:	4618      	mov	r0, r3
 8010198:	d101      	bne.n	801019e <memchr+0x12>
 801019a:	2000      	movs	r0, #0
 801019c:	e003      	b.n	80101a6 <memchr+0x1a>
 801019e:	7804      	ldrb	r4, [r0, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	428c      	cmp	r4, r1
 80101a4:	d1f6      	bne.n	8010194 <memchr+0x8>
 80101a6:	bd10      	pop	{r4, pc}

080101a8 <__malloc_lock>:
 80101a8:	4801      	ldr	r0, [pc, #4]	; (80101b0 <__malloc_lock+0x8>)
 80101aa:	f7ff bf76 	b.w	801009a <__retarget_lock_acquire_recursive>
 80101ae:	bf00      	nop
 80101b0:	200013d0 	.word	0x200013d0

080101b4 <__malloc_unlock>:
 80101b4:	4801      	ldr	r0, [pc, #4]	; (80101bc <__malloc_unlock+0x8>)
 80101b6:	f7ff bf71 	b.w	801009c <__retarget_lock_release_recursive>
 80101ba:	bf00      	nop
 80101bc:	200013d0 	.word	0x200013d0

080101c0 <_Balloc>:
 80101c0:	b570      	push	{r4, r5, r6, lr}
 80101c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	b976      	cbnz	r6, 80101e8 <_Balloc+0x28>
 80101ca:	2010      	movs	r0, #16
 80101cc:	f7fc fc54 	bl	800ca78 <malloc>
 80101d0:	4602      	mov	r2, r0
 80101d2:	6260      	str	r0, [r4, #36]	; 0x24
 80101d4:	b920      	cbnz	r0, 80101e0 <_Balloc+0x20>
 80101d6:	2166      	movs	r1, #102	; 0x66
 80101d8:	4b17      	ldr	r3, [pc, #92]	; (8010238 <_Balloc+0x78>)
 80101da:	4818      	ldr	r0, [pc, #96]	; (801023c <_Balloc+0x7c>)
 80101dc:	f000 fe94 	bl	8010f08 <__assert_func>
 80101e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101e4:	6006      	str	r6, [r0, #0]
 80101e6:	60c6      	str	r6, [r0, #12]
 80101e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80101ea:	68f3      	ldr	r3, [r6, #12]
 80101ec:	b183      	cbz	r3, 8010210 <_Balloc+0x50>
 80101ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80101f6:	b9b8      	cbnz	r0, 8010228 <_Balloc+0x68>
 80101f8:	2101      	movs	r1, #1
 80101fa:	fa01 f605 	lsl.w	r6, r1, r5
 80101fe:	1d72      	adds	r2, r6, #5
 8010200:	4620      	mov	r0, r4
 8010202:	0092      	lsls	r2, r2, #2
 8010204:	f000 fc94 	bl	8010b30 <_calloc_r>
 8010208:	b160      	cbz	r0, 8010224 <_Balloc+0x64>
 801020a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801020e:	e00e      	b.n	801022e <_Balloc+0x6e>
 8010210:	2221      	movs	r2, #33	; 0x21
 8010212:	2104      	movs	r1, #4
 8010214:	4620      	mov	r0, r4
 8010216:	f000 fc8b 	bl	8010b30 <_calloc_r>
 801021a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801021c:	60f0      	str	r0, [r6, #12]
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e4      	bne.n	80101ee <_Balloc+0x2e>
 8010224:	2000      	movs	r0, #0
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	6802      	ldr	r2, [r0, #0]
 801022a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801022e:	2300      	movs	r3, #0
 8010230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010234:	e7f7      	b.n	8010226 <_Balloc+0x66>
 8010236:	bf00      	nop
 8010238:	08012e0e 	.word	0x08012e0e
 801023c:	08012f70 	.word	0x08012f70

08010240 <_Bfree>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010244:	4605      	mov	r5, r0
 8010246:	460c      	mov	r4, r1
 8010248:	b976      	cbnz	r6, 8010268 <_Bfree+0x28>
 801024a:	2010      	movs	r0, #16
 801024c:	f7fc fc14 	bl	800ca78 <malloc>
 8010250:	4602      	mov	r2, r0
 8010252:	6268      	str	r0, [r5, #36]	; 0x24
 8010254:	b920      	cbnz	r0, 8010260 <_Bfree+0x20>
 8010256:	218a      	movs	r1, #138	; 0x8a
 8010258:	4b08      	ldr	r3, [pc, #32]	; (801027c <_Bfree+0x3c>)
 801025a:	4809      	ldr	r0, [pc, #36]	; (8010280 <_Bfree+0x40>)
 801025c:	f000 fe54 	bl	8010f08 <__assert_func>
 8010260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010264:	6006      	str	r6, [r0, #0]
 8010266:	60c6      	str	r6, [r0, #12]
 8010268:	b13c      	cbz	r4, 801027a <_Bfree+0x3a>
 801026a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801026c:	6862      	ldr	r2, [r4, #4]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010274:	6021      	str	r1, [r4, #0]
 8010276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801027a:	bd70      	pop	{r4, r5, r6, pc}
 801027c:	08012e0e 	.word	0x08012e0e
 8010280:	08012f70 	.word	0x08012f70

08010284 <__multadd>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	4607      	mov	r7, r0
 801028a:	460c      	mov	r4, r1
 801028c:	461e      	mov	r6, r3
 801028e:	2000      	movs	r0, #0
 8010290:	690d      	ldr	r5, [r1, #16]
 8010292:	f101 0c14 	add.w	ip, r1, #20
 8010296:	f8dc 3000 	ldr.w	r3, [ip]
 801029a:	3001      	adds	r0, #1
 801029c:	b299      	uxth	r1, r3
 801029e:	fb02 6101 	mla	r1, r2, r1, r6
 80102a2:	0c1e      	lsrs	r6, r3, #16
 80102a4:	0c0b      	lsrs	r3, r1, #16
 80102a6:	fb02 3306 	mla	r3, r2, r6, r3
 80102aa:	b289      	uxth	r1, r1
 80102ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102b0:	4285      	cmp	r5, r0
 80102b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102b6:	f84c 1b04 	str.w	r1, [ip], #4
 80102ba:	dcec      	bgt.n	8010296 <__multadd+0x12>
 80102bc:	b30e      	cbz	r6, 8010302 <__multadd+0x7e>
 80102be:	68a3      	ldr	r3, [r4, #8]
 80102c0:	42ab      	cmp	r3, r5
 80102c2:	dc19      	bgt.n	80102f8 <__multadd+0x74>
 80102c4:	6861      	ldr	r1, [r4, #4]
 80102c6:	4638      	mov	r0, r7
 80102c8:	3101      	adds	r1, #1
 80102ca:	f7ff ff79 	bl	80101c0 <_Balloc>
 80102ce:	4680      	mov	r8, r0
 80102d0:	b928      	cbnz	r0, 80102de <__multadd+0x5a>
 80102d2:	4602      	mov	r2, r0
 80102d4:	21b5      	movs	r1, #181	; 0xb5
 80102d6:	4b0c      	ldr	r3, [pc, #48]	; (8010308 <__multadd+0x84>)
 80102d8:	480c      	ldr	r0, [pc, #48]	; (801030c <__multadd+0x88>)
 80102da:	f000 fe15 	bl	8010f08 <__assert_func>
 80102de:	6922      	ldr	r2, [r4, #16]
 80102e0:	f104 010c 	add.w	r1, r4, #12
 80102e4:	3202      	adds	r2, #2
 80102e6:	0092      	lsls	r2, r2, #2
 80102e8:	300c      	adds	r0, #12
 80102ea:	f7fc fbcd 	bl	800ca88 <memcpy>
 80102ee:	4621      	mov	r1, r4
 80102f0:	4638      	mov	r0, r7
 80102f2:	f7ff ffa5 	bl	8010240 <_Bfree>
 80102f6:	4644      	mov	r4, r8
 80102f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80102fc:	3501      	adds	r5, #1
 80102fe:	615e      	str	r6, [r3, #20]
 8010300:	6125      	str	r5, [r4, #16]
 8010302:	4620      	mov	r0, r4
 8010304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010308:	08012e80 	.word	0x08012e80
 801030c:	08012f70 	.word	0x08012f70

08010310 <__s2b>:
 8010310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010314:	4615      	mov	r5, r2
 8010316:	2209      	movs	r2, #9
 8010318:	461f      	mov	r7, r3
 801031a:	3308      	adds	r3, #8
 801031c:	460c      	mov	r4, r1
 801031e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010322:	4606      	mov	r6, r0
 8010324:	2201      	movs	r2, #1
 8010326:	2100      	movs	r1, #0
 8010328:	429a      	cmp	r2, r3
 801032a:	db09      	blt.n	8010340 <__s2b+0x30>
 801032c:	4630      	mov	r0, r6
 801032e:	f7ff ff47 	bl	80101c0 <_Balloc>
 8010332:	b940      	cbnz	r0, 8010346 <__s2b+0x36>
 8010334:	4602      	mov	r2, r0
 8010336:	21ce      	movs	r1, #206	; 0xce
 8010338:	4b18      	ldr	r3, [pc, #96]	; (801039c <__s2b+0x8c>)
 801033a:	4819      	ldr	r0, [pc, #100]	; (80103a0 <__s2b+0x90>)
 801033c:	f000 fde4 	bl	8010f08 <__assert_func>
 8010340:	0052      	lsls	r2, r2, #1
 8010342:	3101      	adds	r1, #1
 8010344:	e7f0      	b.n	8010328 <__s2b+0x18>
 8010346:	9b08      	ldr	r3, [sp, #32]
 8010348:	2d09      	cmp	r5, #9
 801034a:	6143      	str	r3, [r0, #20]
 801034c:	f04f 0301 	mov.w	r3, #1
 8010350:	6103      	str	r3, [r0, #16]
 8010352:	dd16      	ble.n	8010382 <__s2b+0x72>
 8010354:	f104 0909 	add.w	r9, r4, #9
 8010358:	46c8      	mov	r8, r9
 801035a:	442c      	add	r4, r5
 801035c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010360:	4601      	mov	r1, r0
 8010362:	220a      	movs	r2, #10
 8010364:	4630      	mov	r0, r6
 8010366:	3b30      	subs	r3, #48	; 0x30
 8010368:	f7ff ff8c 	bl	8010284 <__multadd>
 801036c:	45a0      	cmp	r8, r4
 801036e:	d1f5      	bne.n	801035c <__s2b+0x4c>
 8010370:	f1a5 0408 	sub.w	r4, r5, #8
 8010374:	444c      	add	r4, r9
 8010376:	1b2d      	subs	r5, r5, r4
 8010378:	1963      	adds	r3, r4, r5
 801037a:	42bb      	cmp	r3, r7
 801037c:	db04      	blt.n	8010388 <__s2b+0x78>
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	2509      	movs	r5, #9
 8010384:	340a      	adds	r4, #10
 8010386:	e7f6      	b.n	8010376 <__s2b+0x66>
 8010388:	f814 3b01 	ldrb.w	r3, [r4], #1
 801038c:	4601      	mov	r1, r0
 801038e:	220a      	movs	r2, #10
 8010390:	4630      	mov	r0, r6
 8010392:	3b30      	subs	r3, #48	; 0x30
 8010394:	f7ff ff76 	bl	8010284 <__multadd>
 8010398:	e7ee      	b.n	8010378 <__s2b+0x68>
 801039a:	bf00      	nop
 801039c:	08012e80 	.word	0x08012e80
 80103a0:	08012f70 	.word	0x08012f70

080103a4 <__hi0bits>:
 80103a4:	0c02      	lsrs	r2, r0, #16
 80103a6:	0412      	lsls	r2, r2, #16
 80103a8:	4603      	mov	r3, r0
 80103aa:	b9ca      	cbnz	r2, 80103e0 <__hi0bits+0x3c>
 80103ac:	0403      	lsls	r3, r0, #16
 80103ae:	2010      	movs	r0, #16
 80103b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80103b4:	bf04      	itt	eq
 80103b6:	021b      	lsleq	r3, r3, #8
 80103b8:	3008      	addeq	r0, #8
 80103ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80103be:	bf04      	itt	eq
 80103c0:	011b      	lsleq	r3, r3, #4
 80103c2:	3004      	addeq	r0, #4
 80103c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80103c8:	bf04      	itt	eq
 80103ca:	009b      	lsleq	r3, r3, #2
 80103cc:	3002      	addeq	r0, #2
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	db05      	blt.n	80103de <__hi0bits+0x3a>
 80103d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80103d6:	f100 0001 	add.w	r0, r0, #1
 80103da:	bf08      	it	eq
 80103dc:	2020      	moveq	r0, #32
 80103de:	4770      	bx	lr
 80103e0:	2000      	movs	r0, #0
 80103e2:	e7e5      	b.n	80103b0 <__hi0bits+0xc>

080103e4 <__lo0bits>:
 80103e4:	6803      	ldr	r3, [r0, #0]
 80103e6:	4602      	mov	r2, r0
 80103e8:	f013 0007 	ands.w	r0, r3, #7
 80103ec:	d00b      	beq.n	8010406 <__lo0bits+0x22>
 80103ee:	07d9      	lsls	r1, r3, #31
 80103f0:	d421      	bmi.n	8010436 <__lo0bits+0x52>
 80103f2:	0798      	lsls	r0, r3, #30
 80103f4:	bf49      	itett	mi
 80103f6:	085b      	lsrmi	r3, r3, #1
 80103f8:	089b      	lsrpl	r3, r3, #2
 80103fa:	2001      	movmi	r0, #1
 80103fc:	6013      	strmi	r3, [r2, #0]
 80103fe:	bf5c      	itt	pl
 8010400:	2002      	movpl	r0, #2
 8010402:	6013      	strpl	r3, [r2, #0]
 8010404:	4770      	bx	lr
 8010406:	b299      	uxth	r1, r3
 8010408:	b909      	cbnz	r1, 801040e <__lo0bits+0x2a>
 801040a:	2010      	movs	r0, #16
 801040c:	0c1b      	lsrs	r3, r3, #16
 801040e:	b2d9      	uxtb	r1, r3
 8010410:	b909      	cbnz	r1, 8010416 <__lo0bits+0x32>
 8010412:	3008      	adds	r0, #8
 8010414:	0a1b      	lsrs	r3, r3, #8
 8010416:	0719      	lsls	r1, r3, #28
 8010418:	bf04      	itt	eq
 801041a:	091b      	lsreq	r3, r3, #4
 801041c:	3004      	addeq	r0, #4
 801041e:	0799      	lsls	r1, r3, #30
 8010420:	bf04      	itt	eq
 8010422:	089b      	lsreq	r3, r3, #2
 8010424:	3002      	addeq	r0, #2
 8010426:	07d9      	lsls	r1, r3, #31
 8010428:	d403      	bmi.n	8010432 <__lo0bits+0x4e>
 801042a:	085b      	lsrs	r3, r3, #1
 801042c:	f100 0001 	add.w	r0, r0, #1
 8010430:	d003      	beq.n	801043a <__lo0bits+0x56>
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	4770      	bx	lr
 8010436:	2000      	movs	r0, #0
 8010438:	4770      	bx	lr
 801043a:	2020      	movs	r0, #32
 801043c:	4770      	bx	lr
	...

08010440 <__i2b>:
 8010440:	b510      	push	{r4, lr}
 8010442:	460c      	mov	r4, r1
 8010444:	2101      	movs	r1, #1
 8010446:	f7ff febb 	bl	80101c0 <_Balloc>
 801044a:	4602      	mov	r2, r0
 801044c:	b928      	cbnz	r0, 801045a <__i2b+0x1a>
 801044e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010452:	4b04      	ldr	r3, [pc, #16]	; (8010464 <__i2b+0x24>)
 8010454:	4804      	ldr	r0, [pc, #16]	; (8010468 <__i2b+0x28>)
 8010456:	f000 fd57 	bl	8010f08 <__assert_func>
 801045a:	2301      	movs	r3, #1
 801045c:	6144      	str	r4, [r0, #20]
 801045e:	6103      	str	r3, [r0, #16]
 8010460:	bd10      	pop	{r4, pc}
 8010462:	bf00      	nop
 8010464:	08012e80 	.word	0x08012e80
 8010468:	08012f70 	.word	0x08012f70

0801046c <__multiply>:
 801046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010470:	4691      	mov	r9, r2
 8010472:	690a      	ldr	r2, [r1, #16]
 8010474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010478:	460c      	mov	r4, r1
 801047a:	429a      	cmp	r2, r3
 801047c:	bfbe      	ittt	lt
 801047e:	460b      	movlt	r3, r1
 8010480:	464c      	movlt	r4, r9
 8010482:	4699      	movlt	r9, r3
 8010484:	6927      	ldr	r7, [r4, #16]
 8010486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801048a:	68a3      	ldr	r3, [r4, #8]
 801048c:	6861      	ldr	r1, [r4, #4]
 801048e:	eb07 060a 	add.w	r6, r7, sl
 8010492:	42b3      	cmp	r3, r6
 8010494:	b085      	sub	sp, #20
 8010496:	bfb8      	it	lt
 8010498:	3101      	addlt	r1, #1
 801049a:	f7ff fe91 	bl	80101c0 <_Balloc>
 801049e:	b930      	cbnz	r0, 80104ae <__multiply+0x42>
 80104a0:	4602      	mov	r2, r0
 80104a2:	f240 115d 	movw	r1, #349	; 0x15d
 80104a6:	4b43      	ldr	r3, [pc, #268]	; (80105b4 <__multiply+0x148>)
 80104a8:	4843      	ldr	r0, [pc, #268]	; (80105b8 <__multiply+0x14c>)
 80104aa:	f000 fd2d 	bl	8010f08 <__assert_func>
 80104ae:	f100 0514 	add.w	r5, r0, #20
 80104b2:	462b      	mov	r3, r5
 80104b4:	2200      	movs	r2, #0
 80104b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104ba:	4543      	cmp	r3, r8
 80104bc:	d321      	bcc.n	8010502 <__multiply+0x96>
 80104be:	f104 0314 	add.w	r3, r4, #20
 80104c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80104c6:	f109 0314 	add.w	r3, r9, #20
 80104ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80104ce:	9202      	str	r2, [sp, #8]
 80104d0:	1b3a      	subs	r2, r7, r4
 80104d2:	3a15      	subs	r2, #21
 80104d4:	f022 0203 	bic.w	r2, r2, #3
 80104d8:	3204      	adds	r2, #4
 80104da:	f104 0115 	add.w	r1, r4, #21
 80104de:	428f      	cmp	r7, r1
 80104e0:	bf38      	it	cc
 80104e2:	2204      	movcc	r2, #4
 80104e4:	9201      	str	r2, [sp, #4]
 80104e6:	9a02      	ldr	r2, [sp, #8]
 80104e8:	9303      	str	r3, [sp, #12]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d80c      	bhi.n	8010508 <__multiply+0x9c>
 80104ee:	2e00      	cmp	r6, #0
 80104f0:	dd03      	ble.n	80104fa <__multiply+0x8e>
 80104f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d059      	beq.n	80105ae <__multiply+0x142>
 80104fa:	6106      	str	r6, [r0, #16]
 80104fc:	b005      	add	sp, #20
 80104fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010502:	f843 2b04 	str.w	r2, [r3], #4
 8010506:	e7d8      	b.n	80104ba <__multiply+0x4e>
 8010508:	f8b3 a000 	ldrh.w	sl, [r3]
 801050c:	f1ba 0f00 	cmp.w	sl, #0
 8010510:	d023      	beq.n	801055a <__multiply+0xee>
 8010512:	46a9      	mov	r9, r5
 8010514:	f04f 0c00 	mov.w	ip, #0
 8010518:	f104 0e14 	add.w	lr, r4, #20
 801051c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010520:	f8d9 1000 	ldr.w	r1, [r9]
 8010524:	fa1f fb82 	uxth.w	fp, r2
 8010528:	b289      	uxth	r1, r1
 801052a:	fb0a 110b 	mla	r1, sl, fp, r1
 801052e:	4461      	add	r1, ip
 8010530:	f8d9 c000 	ldr.w	ip, [r9]
 8010534:	0c12      	lsrs	r2, r2, #16
 8010536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801053a:	fb0a c202 	mla	r2, sl, r2, ip
 801053e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010542:	b289      	uxth	r1, r1
 8010544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010548:	4577      	cmp	r7, lr
 801054a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801054e:	f849 1b04 	str.w	r1, [r9], #4
 8010552:	d8e3      	bhi.n	801051c <__multiply+0xb0>
 8010554:	9a01      	ldr	r2, [sp, #4]
 8010556:	f845 c002 	str.w	ip, [r5, r2]
 801055a:	9a03      	ldr	r2, [sp, #12]
 801055c:	3304      	adds	r3, #4
 801055e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010562:	f1b9 0f00 	cmp.w	r9, #0
 8010566:	d020      	beq.n	80105aa <__multiply+0x13e>
 8010568:	46ae      	mov	lr, r5
 801056a:	f04f 0a00 	mov.w	sl, #0
 801056e:	6829      	ldr	r1, [r5, #0]
 8010570:	f104 0c14 	add.w	ip, r4, #20
 8010574:	f8bc b000 	ldrh.w	fp, [ip]
 8010578:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801057c:	b289      	uxth	r1, r1
 801057e:	fb09 220b 	mla	r2, r9, fp, r2
 8010582:	4492      	add	sl, r2
 8010584:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010588:	f84e 1b04 	str.w	r1, [lr], #4
 801058c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010590:	f8be 1000 	ldrh.w	r1, [lr]
 8010594:	0c12      	lsrs	r2, r2, #16
 8010596:	fb09 1102 	mla	r1, r9, r2, r1
 801059a:	4567      	cmp	r7, ip
 801059c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80105a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80105a4:	d8e6      	bhi.n	8010574 <__multiply+0x108>
 80105a6:	9a01      	ldr	r2, [sp, #4]
 80105a8:	50a9      	str	r1, [r5, r2]
 80105aa:	3504      	adds	r5, #4
 80105ac:	e79b      	b.n	80104e6 <__multiply+0x7a>
 80105ae:	3e01      	subs	r6, #1
 80105b0:	e79d      	b.n	80104ee <__multiply+0x82>
 80105b2:	bf00      	nop
 80105b4:	08012e80 	.word	0x08012e80
 80105b8:	08012f70 	.word	0x08012f70

080105bc <__pow5mult>:
 80105bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c0:	4615      	mov	r5, r2
 80105c2:	f012 0203 	ands.w	r2, r2, #3
 80105c6:	4606      	mov	r6, r0
 80105c8:	460f      	mov	r7, r1
 80105ca:	d007      	beq.n	80105dc <__pow5mult+0x20>
 80105cc:	4c25      	ldr	r4, [pc, #148]	; (8010664 <__pow5mult+0xa8>)
 80105ce:	3a01      	subs	r2, #1
 80105d0:	2300      	movs	r3, #0
 80105d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105d6:	f7ff fe55 	bl	8010284 <__multadd>
 80105da:	4607      	mov	r7, r0
 80105dc:	10ad      	asrs	r5, r5, #2
 80105de:	d03d      	beq.n	801065c <__pow5mult+0xa0>
 80105e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80105e2:	b97c      	cbnz	r4, 8010604 <__pow5mult+0x48>
 80105e4:	2010      	movs	r0, #16
 80105e6:	f7fc fa47 	bl	800ca78 <malloc>
 80105ea:	4602      	mov	r2, r0
 80105ec:	6270      	str	r0, [r6, #36]	; 0x24
 80105ee:	b928      	cbnz	r0, 80105fc <__pow5mult+0x40>
 80105f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80105f4:	4b1c      	ldr	r3, [pc, #112]	; (8010668 <__pow5mult+0xac>)
 80105f6:	481d      	ldr	r0, [pc, #116]	; (801066c <__pow5mult+0xb0>)
 80105f8:	f000 fc86 	bl	8010f08 <__assert_func>
 80105fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010600:	6004      	str	r4, [r0, #0]
 8010602:	60c4      	str	r4, [r0, #12]
 8010604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801060c:	b94c      	cbnz	r4, 8010622 <__pow5mult+0x66>
 801060e:	f240 2171 	movw	r1, #625	; 0x271
 8010612:	4630      	mov	r0, r6
 8010614:	f7ff ff14 	bl	8010440 <__i2b>
 8010618:	2300      	movs	r3, #0
 801061a:	4604      	mov	r4, r0
 801061c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010620:	6003      	str	r3, [r0, #0]
 8010622:	f04f 0900 	mov.w	r9, #0
 8010626:	07eb      	lsls	r3, r5, #31
 8010628:	d50a      	bpl.n	8010640 <__pow5mult+0x84>
 801062a:	4639      	mov	r1, r7
 801062c:	4622      	mov	r2, r4
 801062e:	4630      	mov	r0, r6
 8010630:	f7ff ff1c 	bl	801046c <__multiply>
 8010634:	4680      	mov	r8, r0
 8010636:	4639      	mov	r1, r7
 8010638:	4630      	mov	r0, r6
 801063a:	f7ff fe01 	bl	8010240 <_Bfree>
 801063e:	4647      	mov	r7, r8
 8010640:	106d      	asrs	r5, r5, #1
 8010642:	d00b      	beq.n	801065c <__pow5mult+0xa0>
 8010644:	6820      	ldr	r0, [r4, #0]
 8010646:	b938      	cbnz	r0, 8010658 <__pow5mult+0x9c>
 8010648:	4622      	mov	r2, r4
 801064a:	4621      	mov	r1, r4
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff ff0d 	bl	801046c <__multiply>
 8010652:	6020      	str	r0, [r4, #0]
 8010654:	f8c0 9000 	str.w	r9, [r0]
 8010658:	4604      	mov	r4, r0
 801065a:	e7e4      	b.n	8010626 <__pow5mult+0x6a>
 801065c:	4638      	mov	r0, r7
 801065e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010662:	bf00      	nop
 8010664:	080130c0 	.word	0x080130c0
 8010668:	08012e0e 	.word	0x08012e0e
 801066c:	08012f70 	.word	0x08012f70

08010670 <__lshift>:
 8010670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010674:	460c      	mov	r4, r1
 8010676:	4607      	mov	r7, r0
 8010678:	4691      	mov	r9, r2
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	6849      	ldr	r1, [r1, #4]
 801067e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010682:	68a3      	ldr	r3, [r4, #8]
 8010684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010688:	f108 0601 	add.w	r6, r8, #1
 801068c:	42b3      	cmp	r3, r6
 801068e:	db0b      	blt.n	80106a8 <__lshift+0x38>
 8010690:	4638      	mov	r0, r7
 8010692:	f7ff fd95 	bl	80101c0 <_Balloc>
 8010696:	4605      	mov	r5, r0
 8010698:	b948      	cbnz	r0, 80106ae <__lshift+0x3e>
 801069a:	4602      	mov	r2, r0
 801069c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80106a0:	4b29      	ldr	r3, [pc, #164]	; (8010748 <__lshift+0xd8>)
 80106a2:	482a      	ldr	r0, [pc, #168]	; (801074c <__lshift+0xdc>)
 80106a4:	f000 fc30 	bl	8010f08 <__assert_func>
 80106a8:	3101      	adds	r1, #1
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	e7ee      	b.n	801068c <__lshift+0x1c>
 80106ae:	2300      	movs	r3, #0
 80106b0:	f100 0114 	add.w	r1, r0, #20
 80106b4:	f100 0210 	add.w	r2, r0, #16
 80106b8:	4618      	mov	r0, r3
 80106ba:	4553      	cmp	r3, sl
 80106bc:	db37      	blt.n	801072e <__lshift+0xbe>
 80106be:	6920      	ldr	r0, [r4, #16]
 80106c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106c4:	f104 0314 	add.w	r3, r4, #20
 80106c8:	f019 091f 	ands.w	r9, r9, #31
 80106cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80106d4:	d02f      	beq.n	8010736 <__lshift+0xc6>
 80106d6:	468a      	mov	sl, r1
 80106d8:	f04f 0c00 	mov.w	ip, #0
 80106dc:	f1c9 0e20 	rsb	lr, r9, #32
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	fa02 f209 	lsl.w	r2, r2, r9
 80106e6:	ea42 020c 	orr.w	r2, r2, ip
 80106ea:	f84a 2b04 	str.w	r2, [sl], #4
 80106ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80106f2:	4298      	cmp	r0, r3
 80106f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80106f8:	d8f2      	bhi.n	80106e0 <__lshift+0x70>
 80106fa:	1b03      	subs	r3, r0, r4
 80106fc:	3b15      	subs	r3, #21
 80106fe:	f023 0303 	bic.w	r3, r3, #3
 8010702:	3304      	adds	r3, #4
 8010704:	f104 0215 	add.w	r2, r4, #21
 8010708:	4290      	cmp	r0, r2
 801070a:	bf38      	it	cc
 801070c:	2304      	movcc	r3, #4
 801070e:	f841 c003 	str.w	ip, [r1, r3]
 8010712:	f1bc 0f00 	cmp.w	ip, #0
 8010716:	d001      	beq.n	801071c <__lshift+0xac>
 8010718:	f108 0602 	add.w	r6, r8, #2
 801071c:	3e01      	subs	r6, #1
 801071e:	4638      	mov	r0, r7
 8010720:	4621      	mov	r1, r4
 8010722:	612e      	str	r6, [r5, #16]
 8010724:	f7ff fd8c 	bl	8010240 <_Bfree>
 8010728:	4628      	mov	r0, r5
 801072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010732:	3301      	adds	r3, #1
 8010734:	e7c1      	b.n	80106ba <__lshift+0x4a>
 8010736:	3904      	subs	r1, #4
 8010738:	f853 2b04 	ldr.w	r2, [r3], #4
 801073c:	4298      	cmp	r0, r3
 801073e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010742:	d8f9      	bhi.n	8010738 <__lshift+0xc8>
 8010744:	e7ea      	b.n	801071c <__lshift+0xac>
 8010746:	bf00      	nop
 8010748:	08012e80 	.word	0x08012e80
 801074c:	08012f70 	.word	0x08012f70

08010750 <__mcmp>:
 8010750:	4603      	mov	r3, r0
 8010752:	690a      	ldr	r2, [r1, #16]
 8010754:	6900      	ldr	r0, [r0, #16]
 8010756:	b530      	push	{r4, r5, lr}
 8010758:	1a80      	subs	r0, r0, r2
 801075a:	d10d      	bne.n	8010778 <__mcmp+0x28>
 801075c:	3314      	adds	r3, #20
 801075e:	3114      	adds	r1, #20
 8010760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801076c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010770:	4295      	cmp	r5, r2
 8010772:	d002      	beq.n	801077a <__mcmp+0x2a>
 8010774:	d304      	bcc.n	8010780 <__mcmp+0x30>
 8010776:	2001      	movs	r0, #1
 8010778:	bd30      	pop	{r4, r5, pc}
 801077a:	42a3      	cmp	r3, r4
 801077c:	d3f4      	bcc.n	8010768 <__mcmp+0x18>
 801077e:	e7fb      	b.n	8010778 <__mcmp+0x28>
 8010780:	f04f 30ff 	mov.w	r0, #4294967295
 8010784:	e7f8      	b.n	8010778 <__mcmp+0x28>
	...

08010788 <__mdiff>:
 8010788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801078c:	460d      	mov	r5, r1
 801078e:	4607      	mov	r7, r0
 8010790:	4611      	mov	r1, r2
 8010792:	4628      	mov	r0, r5
 8010794:	4614      	mov	r4, r2
 8010796:	f7ff ffdb 	bl	8010750 <__mcmp>
 801079a:	1e06      	subs	r6, r0, #0
 801079c:	d111      	bne.n	80107c2 <__mdiff+0x3a>
 801079e:	4631      	mov	r1, r6
 80107a0:	4638      	mov	r0, r7
 80107a2:	f7ff fd0d 	bl	80101c0 <_Balloc>
 80107a6:	4602      	mov	r2, r0
 80107a8:	b928      	cbnz	r0, 80107b6 <__mdiff+0x2e>
 80107aa:	f240 2132 	movw	r1, #562	; 0x232
 80107ae:	4b3a      	ldr	r3, [pc, #232]	; (8010898 <__mdiff+0x110>)
 80107b0:	483a      	ldr	r0, [pc, #232]	; (801089c <__mdiff+0x114>)
 80107b2:	f000 fba9 	bl	8010f08 <__assert_func>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80107bc:	4610      	mov	r0, r2
 80107be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	bfa4      	itt	ge
 80107c4:	4623      	movge	r3, r4
 80107c6:	462c      	movge	r4, r5
 80107c8:	4638      	mov	r0, r7
 80107ca:	6861      	ldr	r1, [r4, #4]
 80107cc:	bfa6      	itte	ge
 80107ce:	461d      	movge	r5, r3
 80107d0:	2600      	movge	r6, #0
 80107d2:	2601      	movlt	r6, #1
 80107d4:	f7ff fcf4 	bl	80101c0 <_Balloc>
 80107d8:	4602      	mov	r2, r0
 80107da:	b918      	cbnz	r0, 80107e4 <__mdiff+0x5c>
 80107dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80107e0:	4b2d      	ldr	r3, [pc, #180]	; (8010898 <__mdiff+0x110>)
 80107e2:	e7e5      	b.n	80107b0 <__mdiff+0x28>
 80107e4:	f102 0814 	add.w	r8, r2, #20
 80107e8:	46c2      	mov	sl, r8
 80107ea:	f04f 0c00 	mov.w	ip, #0
 80107ee:	6927      	ldr	r7, [r4, #16]
 80107f0:	60c6      	str	r6, [r0, #12]
 80107f2:	692e      	ldr	r6, [r5, #16]
 80107f4:	f104 0014 	add.w	r0, r4, #20
 80107f8:	f105 0914 	add.w	r9, r5, #20
 80107fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010804:	3410      	adds	r4, #16
 8010806:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801080a:	f859 3b04 	ldr.w	r3, [r9], #4
 801080e:	fa1f f18b 	uxth.w	r1, fp
 8010812:	448c      	add	ip, r1
 8010814:	b299      	uxth	r1, r3
 8010816:	0c1b      	lsrs	r3, r3, #16
 8010818:	ebac 0101 	sub.w	r1, ip, r1
 801081c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010820:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010824:	b289      	uxth	r1, r1
 8010826:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801082a:	454e      	cmp	r6, r9
 801082c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010830:	f84a 3b04 	str.w	r3, [sl], #4
 8010834:	d8e7      	bhi.n	8010806 <__mdiff+0x7e>
 8010836:	1b73      	subs	r3, r6, r5
 8010838:	3b15      	subs	r3, #21
 801083a:	f023 0303 	bic.w	r3, r3, #3
 801083e:	3515      	adds	r5, #21
 8010840:	3304      	adds	r3, #4
 8010842:	42ae      	cmp	r6, r5
 8010844:	bf38      	it	cc
 8010846:	2304      	movcc	r3, #4
 8010848:	4418      	add	r0, r3
 801084a:	4443      	add	r3, r8
 801084c:	461e      	mov	r6, r3
 801084e:	4605      	mov	r5, r0
 8010850:	4575      	cmp	r5, lr
 8010852:	d30e      	bcc.n	8010872 <__mdiff+0xea>
 8010854:	f10e 0103 	add.w	r1, lr, #3
 8010858:	1a09      	subs	r1, r1, r0
 801085a:	f021 0103 	bic.w	r1, r1, #3
 801085e:	3803      	subs	r0, #3
 8010860:	4586      	cmp	lr, r0
 8010862:	bf38      	it	cc
 8010864:	2100      	movcc	r1, #0
 8010866:	4419      	add	r1, r3
 8010868:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801086c:	b18b      	cbz	r3, 8010892 <__mdiff+0x10a>
 801086e:	6117      	str	r7, [r2, #16]
 8010870:	e7a4      	b.n	80107bc <__mdiff+0x34>
 8010872:	f855 8b04 	ldr.w	r8, [r5], #4
 8010876:	fa1f f188 	uxth.w	r1, r8
 801087a:	4461      	add	r1, ip
 801087c:	140c      	asrs	r4, r1, #16
 801087e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010882:	b289      	uxth	r1, r1
 8010884:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010888:	ea4f 4c24 	mov.w	ip, r4, asr #16
 801088c:	f846 1b04 	str.w	r1, [r6], #4
 8010890:	e7de      	b.n	8010850 <__mdiff+0xc8>
 8010892:	3f01      	subs	r7, #1
 8010894:	e7e8      	b.n	8010868 <__mdiff+0xe0>
 8010896:	bf00      	nop
 8010898:	08012e80 	.word	0x08012e80
 801089c:	08012f70 	.word	0x08012f70

080108a0 <__ulp>:
 80108a0:	4b11      	ldr	r3, [pc, #68]	; (80108e8 <__ulp+0x48>)
 80108a2:	400b      	ands	r3, r1
 80108a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	dd02      	ble.n	80108b2 <__ulp+0x12>
 80108ac:	2000      	movs	r0, #0
 80108ae:	4619      	mov	r1, r3
 80108b0:	4770      	bx	lr
 80108b2:	425b      	negs	r3, r3
 80108b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80108b8:	f04f 0000 	mov.w	r0, #0
 80108bc:	f04f 0100 	mov.w	r1, #0
 80108c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80108c4:	da04      	bge.n	80108d0 <__ulp+0x30>
 80108c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80108ca:	fa43 f102 	asr.w	r1, r3, r2
 80108ce:	4770      	bx	lr
 80108d0:	f1a2 0314 	sub.w	r3, r2, #20
 80108d4:	2b1e      	cmp	r3, #30
 80108d6:	bfd6      	itet	le
 80108d8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80108dc:	2301      	movgt	r3, #1
 80108de:	fa22 f303 	lsrle.w	r3, r2, r3
 80108e2:	4618      	mov	r0, r3
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	7ff00000 	.word	0x7ff00000

080108ec <__b2d>:
 80108ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f0:	6907      	ldr	r7, [r0, #16]
 80108f2:	f100 0914 	add.w	r9, r0, #20
 80108f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80108fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80108fe:	f1a7 0804 	sub.w	r8, r7, #4
 8010902:	4630      	mov	r0, r6
 8010904:	f7ff fd4e 	bl	80103a4 <__hi0bits>
 8010908:	f1c0 0320 	rsb	r3, r0, #32
 801090c:	280a      	cmp	r0, #10
 801090e:	600b      	str	r3, [r1, #0]
 8010910:	491f      	ldr	r1, [pc, #124]	; (8010990 <__b2d+0xa4>)
 8010912:	dc17      	bgt.n	8010944 <__b2d+0x58>
 8010914:	45c1      	cmp	r9, r8
 8010916:	bf28      	it	cs
 8010918:	2200      	movcs	r2, #0
 801091a:	f1c0 0c0b 	rsb	ip, r0, #11
 801091e:	fa26 f30c 	lsr.w	r3, r6, ip
 8010922:	bf38      	it	cc
 8010924:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010928:	ea43 0501 	orr.w	r5, r3, r1
 801092c:	f100 0315 	add.w	r3, r0, #21
 8010930:	fa06 f303 	lsl.w	r3, r6, r3
 8010934:	fa22 f20c 	lsr.w	r2, r2, ip
 8010938:	ea43 0402 	orr.w	r4, r3, r2
 801093c:	4620      	mov	r0, r4
 801093e:	4629      	mov	r1, r5
 8010940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010944:	45c1      	cmp	r9, r8
 8010946:	bf2e      	itee	cs
 8010948:	2200      	movcs	r2, #0
 801094a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801094e:	f1a7 0808 	subcc.w	r8, r7, #8
 8010952:	f1b0 030b 	subs.w	r3, r0, #11
 8010956:	d016      	beq.n	8010986 <__b2d+0x9a>
 8010958:	f1c3 0720 	rsb	r7, r3, #32
 801095c:	fa22 f107 	lsr.w	r1, r2, r7
 8010960:	45c8      	cmp	r8, r9
 8010962:	fa06 f603 	lsl.w	r6, r6, r3
 8010966:	ea46 0601 	orr.w	r6, r6, r1
 801096a:	bf94      	ite	ls
 801096c:	2100      	movls	r1, #0
 801096e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010972:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8010976:	fa02 f003 	lsl.w	r0, r2, r3
 801097a:	40f9      	lsrs	r1, r7
 801097c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010980:	ea40 0401 	orr.w	r4, r0, r1
 8010984:	e7da      	b.n	801093c <__b2d+0x50>
 8010986:	4614      	mov	r4, r2
 8010988:	ea46 0501 	orr.w	r5, r6, r1
 801098c:	e7d6      	b.n	801093c <__b2d+0x50>
 801098e:	bf00      	nop
 8010990:	3ff00000 	.word	0x3ff00000

08010994 <__d2b>:
 8010994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010998:	2101      	movs	r1, #1
 801099a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801099e:	4690      	mov	r8, r2
 80109a0:	461d      	mov	r5, r3
 80109a2:	f7ff fc0d 	bl	80101c0 <_Balloc>
 80109a6:	4604      	mov	r4, r0
 80109a8:	b930      	cbnz	r0, 80109b8 <__d2b+0x24>
 80109aa:	4602      	mov	r2, r0
 80109ac:	f240 310a 	movw	r1, #778	; 0x30a
 80109b0:	4b24      	ldr	r3, [pc, #144]	; (8010a44 <__d2b+0xb0>)
 80109b2:	4825      	ldr	r0, [pc, #148]	; (8010a48 <__d2b+0xb4>)
 80109b4:	f000 faa8 	bl	8010f08 <__assert_func>
 80109b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80109bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80109c0:	bb2d      	cbnz	r5, 8010a0e <__d2b+0x7a>
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	f1b8 0300 	subs.w	r3, r8, #0
 80109c8:	d026      	beq.n	8010a18 <__d2b+0x84>
 80109ca:	4668      	mov	r0, sp
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	f7ff fd09 	bl	80103e4 <__lo0bits>
 80109d2:	9900      	ldr	r1, [sp, #0]
 80109d4:	b1f0      	cbz	r0, 8010a14 <__d2b+0x80>
 80109d6:	9a01      	ldr	r2, [sp, #4]
 80109d8:	f1c0 0320 	rsb	r3, r0, #32
 80109dc:	fa02 f303 	lsl.w	r3, r2, r3
 80109e0:	430b      	orrs	r3, r1
 80109e2:	40c2      	lsrs	r2, r0
 80109e4:	6163      	str	r3, [r4, #20]
 80109e6:	9201      	str	r2, [sp, #4]
 80109e8:	9b01      	ldr	r3, [sp, #4]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	bf14      	ite	ne
 80109ee:	2102      	movne	r1, #2
 80109f0:	2101      	moveq	r1, #1
 80109f2:	61a3      	str	r3, [r4, #24]
 80109f4:	6121      	str	r1, [r4, #16]
 80109f6:	b1c5      	cbz	r5, 8010a2a <__d2b+0x96>
 80109f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109fc:	4405      	add	r5, r0
 80109fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a02:	603d      	str	r5, [r7, #0]
 8010a04:	6030      	str	r0, [r6, #0]
 8010a06:	4620      	mov	r0, r4
 8010a08:	b002      	add	sp, #8
 8010a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a12:	e7d6      	b.n	80109c2 <__d2b+0x2e>
 8010a14:	6161      	str	r1, [r4, #20]
 8010a16:	e7e7      	b.n	80109e8 <__d2b+0x54>
 8010a18:	a801      	add	r0, sp, #4
 8010a1a:	f7ff fce3 	bl	80103e4 <__lo0bits>
 8010a1e:	2101      	movs	r1, #1
 8010a20:	9b01      	ldr	r3, [sp, #4]
 8010a22:	6121      	str	r1, [r4, #16]
 8010a24:	6163      	str	r3, [r4, #20]
 8010a26:	3020      	adds	r0, #32
 8010a28:	e7e5      	b.n	80109f6 <__d2b+0x62>
 8010a2a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010a2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a32:	6038      	str	r0, [r7, #0]
 8010a34:	6918      	ldr	r0, [r3, #16]
 8010a36:	f7ff fcb5 	bl	80103a4 <__hi0bits>
 8010a3a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010a3e:	6031      	str	r1, [r6, #0]
 8010a40:	e7e1      	b.n	8010a06 <__d2b+0x72>
 8010a42:	bf00      	nop
 8010a44:	08012e80 	.word	0x08012e80
 8010a48:	08012f70 	.word	0x08012f70

08010a4c <__ratio>:
 8010a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a50:	4688      	mov	r8, r1
 8010a52:	4669      	mov	r1, sp
 8010a54:	4681      	mov	r9, r0
 8010a56:	f7ff ff49 	bl	80108ec <__b2d>
 8010a5a:	460f      	mov	r7, r1
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	460d      	mov	r5, r1
 8010a60:	4640      	mov	r0, r8
 8010a62:	a901      	add	r1, sp, #4
 8010a64:	f7ff ff42 	bl	80108ec <__b2d>
 8010a68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010a70:	468b      	mov	fp, r1
 8010a72:	eba3 0c02 	sub.w	ip, r3, r2
 8010a76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a7a:	1a9b      	subs	r3, r3, r2
 8010a7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	bfd5      	itete	le
 8010a84:	460a      	movle	r2, r1
 8010a86:	462a      	movgt	r2, r5
 8010a88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a8c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010a90:	bfd8      	it	le
 8010a92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010a96:	465b      	mov	r3, fp
 8010a98:	4602      	mov	r2, r0
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f7ef fe5d 	bl	800075c <__aeabi_ddiv>
 8010aa2:	b003      	add	sp, #12
 8010aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010aa8 <__copybits>:
 8010aa8:	3901      	subs	r1, #1
 8010aaa:	b570      	push	{r4, r5, r6, lr}
 8010aac:	1149      	asrs	r1, r1, #5
 8010aae:	6914      	ldr	r4, [r2, #16]
 8010ab0:	3101      	adds	r1, #1
 8010ab2:	f102 0314 	add.w	r3, r2, #20
 8010ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010aba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010abe:	1f05      	subs	r5, r0, #4
 8010ac0:	42a3      	cmp	r3, r4
 8010ac2:	d30c      	bcc.n	8010ade <__copybits+0x36>
 8010ac4:	1aa3      	subs	r3, r4, r2
 8010ac6:	3b11      	subs	r3, #17
 8010ac8:	f023 0303 	bic.w	r3, r3, #3
 8010acc:	3211      	adds	r2, #17
 8010ace:	42a2      	cmp	r2, r4
 8010ad0:	bf88      	it	hi
 8010ad2:	2300      	movhi	r3, #0
 8010ad4:	4418      	add	r0, r3
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	4288      	cmp	r0, r1
 8010ada:	d305      	bcc.n	8010ae8 <__copybits+0x40>
 8010adc:	bd70      	pop	{r4, r5, r6, pc}
 8010ade:	f853 6b04 	ldr.w	r6, [r3], #4
 8010ae2:	f845 6f04 	str.w	r6, [r5, #4]!
 8010ae6:	e7eb      	b.n	8010ac0 <__copybits+0x18>
 8010ae8:	f840 3b04 	str.w	r3, [r0], #4
 8010aec:	e7f4      	b.n	8010ad8 <__copybits+0x30>

08010aee <__any_on>:
 8010aee:	f100 0214 	add.w	r2, r0, #20
 8010af2:	6900      	ldr	r0, [r0, #16]
 8010af4:	114b      	asrs	r3, r1, #5
 8010af6:	4298      	cmp	r0, r3
 8010af8:	b510      	push	{r4, lr}
 8010afa:	db11      	blt.n	8010b20 <__any_on+0x32>
 8010afc:	dd0a      	ble.n	8010b14 <__any_on+0x26>
 8010afe:	f011 011f 	ands.w	r1, r1, #31
 8010b02:	d007      	beq.n	8010b14 <__any_on+0x26>
 8010b04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b08:	fa24 f001 	lsr.w	r0, r4, r1
 8010b0c:	fa00 f101 	lsl.w	r1, r0, r1
 8010b10:	428c      	cmp	r4, r1
 8010b12:	d10b      	bne.n	8010b2c <__any_on+0x3e>
 8010b14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d803      	bhi.n	8010b24 <__any_on+0x36>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	4603      	mov	r3, r0
 8010b22:	e7f7      	b.n	8010b14 <__any_on+0x26>
 8010b24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b28:	2900      	cmp	r1, #0
 8010b2a:	d0f5      	beq.n	8010b18 <__any_on+0x2a>
 8010b2c:	2001      	movs	r0, #1
 8010b2e:	e7f6      	b.n	8010b1e <__any_on+0x30>

08010b30 <_calloc_r>:
 8010b30:	b570      	push	{r4, r5, r6, lr}
 8010b32:	fba1 5402 	umull	r5, r4, r1, r2
 8010b36:	b934      	cbnz	r4, 8010b46 <_calloc_r+0x16>
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f7fc f823 	bl	800cb84 <_malloc_r>
 8010b3e:	4606      	mov	r6, r0
 8010b40:	b928      	cbnz	r0, 8010b4e <_calloc_r+0x1e>
 8010b42:	4630      	mov	r0, r6
 8010b44:	bd70      	pop	{r4, r5, r6, pc}
 8010b46:	220c      	movs	r2, #12
 8010b48:	2600      	movs	r6, #0
 8010b4a:	6002      	str	r2, [r0, #0]
 8010b4c:	e7f9      	b.n	8010b42 <_calloc_r+0x12>
 8010b4e:	462a      	mov	r2, r5
 8010b50:	4621      	mov	r1, r4
 8010b52:	f7fb ffa7 	bl	800caa4 <memset>
 8010b56:	e7f4      	b.n	8010b42 <_calloc_r+0x12>

08010b58 <__ssputs_r>:
 8010b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b5c:	688e      	ldr	r6, [r1, #8]
 8010b5e:	4682      	mov	sl, r0
 8010b60:	429e      	cmp	r6, r3
 8010b62:	460c      	mov	r4, r1
 8010b64:	4690      	mov	r8, r2
 8010b66:	461f      	mov	r7, r3
 8010b68:	d838      	bhi.n	8010bdc <__ssputs_r+0x84>
 8010b6a:	898a      	ldrh	r2, [r1, #12]
 8010b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b70:	d032      	beq.n	8010bd8 <__ssputs_r+0x80>
 8010b72:	6825      	ldr	r5, [r4, #0]
 8010b74:	6909      	ldr	r1, [r1, #16]
 8010b76:	3301      	adds	r3, #1
 8010b78:	eba5 0901 	sub.w	r9, r5, r1
 8010b7c:	6965      	ldr	r5, [r4, #20]
 8010b7e:	444b      	add	r3, r9
 8010b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b88:	106d      	asrs	r5, r5, #1
 8010b8a:	429d      	cmp	r5, r3
 8010b8c:	bf38      	it	cc
 8010b8e:	461d      	movcc	r5, r3
 8010b90:	0553      	lsls	r3, r2, #21
 8010b92:	d531      	bpl.n	8010bf8 <__ssputs_r+0xa0>
 8010b94:	4629      	mov	r1, r5
 8010b96:	f7fb fff5 	bl	800cb84 <_malloc_r>
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	b950      	cbnz	r0, 8010bb4 <__ssputs_r+0x5c>
 8010b9e:	230c      	movs	r3, #12
 8010ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba4:	f8ca 3000 	str.w	r3, [sl]
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bae:	81a3      	strh	r3, [r4, #12]
 8010bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb4:	464a      	mov	r2, r9
 8010bb6:	6921      	ldr	r1, [r4, #16]
 8010bb8:	f7fb ff66 	bl	800ca88 <memcpy>
 8010bbc:	89a3      	ldrh	r3, [r4, #12]
 8010bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc6:	81a3      	strh	r3, [r4, #12]
 8010bc8:	6126      	str	r6, [r4, #16]
 8010bca:	444e      	add	r6, r9
 8010bcc:	6026      	str	r6, [r4, #0]
 8010bce:	463e      	mov	r6, r7
 8010bd0:	6165      	str	r5, [r4, #20]
 8010bd2:	eba5 0509 	sub.w	r5, r5, r9
 8010bd6:	60a5      	str	r5, [r4, #8]
 8010bd8:	42be      	cmp	r6, r7
 8010bda:	d900      	bls.n	8010bde <__ssputs_r+0x86>
 8010bdc:	463e      	mov	r6, r7
 8010bde:	4632      	mov	r2, r6
 8010be0:	4641      	mov	r1, r8
 8010be2:	6820      	ldr	r0, [r4, #0]
 8010be4:	f000 fa04 	bl	8010ff0 <memmove>
 8010be8:	68a3      	ldr	r3, [r4, #8]
 8010bea:	2000      	movs	r0, #0
 8010bec:	1b9b      	subs	r3, r3, r6
 8010bee:	60a3      	str	r3, [r4, #8]
 8010bf0:	6823      	ldr	r3, [r4, #0]
 8010bf2:	4433      	add	r3, r6
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	e7db      	b.n	8010bb0 <__ssputs_r+0x58>
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	f000 fa13 	bl	8011024 <_realloc_r>
 8010bfe:	4606      	mov	r6, r0
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d1e1      	bne.n	8010bc8 <__ssputs_r+0x70>
 8010c04:	4650      	mov	r0, sl
 8010c06:	6921      	ldr	r1, [r4, #16]
 8010c08:	f7fb ff54 	bl	800cab4 <_free_r>
 8010c0c:	e7c7      	b.n	8010b9e <__ssputs_r+0x46>
	...

08010c10 <_svfiprintf_r>:
 8010c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c14:	4698      	mov	r8, r3
 8010c16:	898b      	ldrh	r3, [r1, #12]
 8010c18:	4607      	mov	r7, r0
 8010c1a:	061b      	lsls	r3, r3, #24
 8010c1c:	460d      	mov	r5, r1
 8010c1e:	4614      	mov	r4, r2
 8010c20:	b09d      	sub	sp, #116	; 0x74
 8010c22:	d50e      	bpl.n	8010c42 <_svfiprintf_r+0x32>
 8010c24:	690b      	ldr	r3, [r1, #16]
 8010c26:	b963      	cbnz	r3, 8010c42 <_svfiprintf_r+0x32>
 8010c28:	2140      	movs	r1, #64	; 0x40
 8010c2a:	f7fb ffab 	bl	800cb84 <_malloc_r>
 8010c2e:	6028      	str	r0, [r5, #0]
 8010c30:	6128      	str	r0, [r5, #16]
 8010c32:	b920      	cbnz	r0, 8010c3e <_svfiprintf_r+0x2e>
 8010c34:	230c      	movs	r3, #12
 8010c36:	603b      	str	r3, [r7, #0]
 8010c38:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3c:	e0d1      	b.n	8010de2 <_svfiprintf_r+0x1d2>
 8010c3e:	2340      	movs	r3, #64	; 0x40
 8010c40:	616b      	str	r3, [r5, #20]
 8010c42:	2300      	movs	r3, #0
 8010c44:	9309      	str	r3, [sp, #36]	; 0x24
 8010c46:	2320      	movs	r3, #32
 8010c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c4c:	2330      	movs	r3, #48	; 0x30
 8010c4e:	f04f 0901 	mov.w	r9, #1
 8010c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010dfc <_svfiprintf_r+0x1ec>
 8010c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c5e:	4623      	mov	r3, r4
 8010c60:	469a      	mov	sl, r3
 8010c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c66:	b10a      	cbz	r2, 8010c6c <_svfiprintf_r+0x5c>
 8010c68:	2a25      	cmp	r2, #37	; 0x25
 8010c6a:	d1f9      	bne.n	8010c60 <_svfiprintf_r+0x50>
 8010c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8010c70:	d00b      	beq.n	8010c8a <_svfiprintf_r+0x7a>
 8010c72:	465b      	mov	r3, fp
 8010c74:	4622      	mov	r2, r4
 8010c76:	4629      	mov	r1, r5
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7ff ff6d 	bl	8010b58 <__ssputs_r>
 8010c7e:	3001      	adds	r0, #1
 8010c80:	f000 80aa 	beq.w	8010dd8 <_svfiprintf_r+0x1c8>
 8010c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c86:	445a      	add	r2, fp
 8010c88:	9209      	str	r2, [sp, #36]	; 0x24
 8010c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 80a2 	beq.w	8010dd8 <_svfiprintf_r+0x1c8>
 8010c94:	2300      	movs	r3, #0
 8010c96:	f04f 32ff 	mov.w	r2, #4294967295
 8010c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c9e:	f10a 0a01 	add.w	sl, sl, #1
 8010ca2:	9304      	str	r3, [sp, #16]
 8010ca4:	9307      	str	r3, [sp, #28]
 8010ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010caa:	931a      	str	r3, [sp, #104]	; 0x68
 8010cac:	4654      	mov	r4, sl
 8010cae:	2205      	movs	r2, #5
 8010cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb4:	4851      	ldr	r0, [pc, #324]	; (8010dfc <_svfiprintf_r+0x1ec>)
 8010cb6:	f7ff fa69 	bl	801018c <memchr>
 8010cba:	9a04      	ldr	r2, [sp, #16]
 8010cbc:	b9d8      	cbnz	r0, 8010cf6 <_svfiprintf_r+0xe6>
 8010cbe:	06d0      	lsls	r0, r2, #27
 8010cc0:	bf44      	itt	mi
 8010cc2:	2320      	movmi	r3, #32
 8010cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cc8:	0711      	lsls	r1, r2, #28
 8010cca:	bf44      	itt	mi
 8010ccc:	232b      	movmi	r3, #43	; 0x2b
 8010cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8010cd8:	d015      	beq.n	8010d06 <_svfiprintf_r+0xf6>
 8010cda:	4654      	mov	r4, sl
 8010cdc:	2000      	movs	r0, #0
 8010cde:	f04f 0c0a 	mov.w	ip, #10
 8010ce2:	9a07      	ldr	r2, [sp, #28]
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cea:	3b30      	subs	r3, #48	; 0x30
 8010cec:	2b09      	cmp	r3, #9
 8010cee:	d94e      	bls.n	8010d8e <_svfiprintf_r+0x17e>
 8010cf0:	b1b0      	cbz	r0, 8010d20 <_svfiprintf_r+0x110>
 8010cf2:	9207      	str	r2, [sp, #28]
 8010cf4:	e014      	b.n	8010d20 <_svfiprintf_r+0x110>
 8010cf6:	eba0 0308 	sub.w	r3, r0, r8
 8010cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	46a2      	mov	sl, r4
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	e7d2      	b.n	8010cac <_svfiprintf_r+0x9c>
 8010d06:	9b03      	ldr	r3, [sp, #12]
 8010d08:	1d19      	adds	r1, r3, #4
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	9103      	str	r1, [sp, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	bfbb      	ittet	lt
 8010d12:	425b      	neglt	r3, r3
 8010d14:	f042 0202 	orrlt.w	r2, r2, #2
 8010d18:	9307      	strge	r3, [sp, #28]
 8010d1a:	9307      	strlt	r3, [sp, #28]
 8010d1c:	bfb8      	it	lt
 8010d1e:	9204      	strlt	r2, [sp, #16]
 8010d20:	7823      	ldrb	r3, [r4, #0]
 8010d22:	2b2e      	cmp	r3, #46	; 0x2e
 8010d24:	d10c      	bne.n	8010d40 <_svfiprintf_r+0x130>
 8010d26:	7863      	ldrb	r3, [r4, #1]
 8010d28:	2b2a      	cmp	r3, #42	; 0x2a
 8010d2a:	d135      	bne.n	8010d98 <_svfiprintf_r+0x188>
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	3402      	adds	r4, #2
 8010d30:	1d1a      	adds	r2, r3, #4
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	9203      	str	r2, [sp, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bfb8      	it	lt
 8010d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d3e:	9305      	str	r3, [sp, #20]
 8010d40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010e00 <_svfiprintf_r+0x1f0>
 8010d44:	2203      	movs	r2, #3
 8010d46:	4650      	mov	r0, sl
 8010d48:	7821      	ldrb	r1, [r4, #0]
 8010d4a:	f7ff fa1f 	bl	801018c <memchr>
 8010d4e:	b140      	cbz	r0, 8010d62 <_svfiprintf_r+0x152>
 8010d50:	2340      	movs	r3, #64	; 0x40
 8010d52:	eba0 000a 	sub.w	r0, r0, sl
 8010d56:	fa03 f000 	lsl.w	r0, r3, r0
 8010d5a:	9b04      	ldr	r3, [sp, #16]
 8010d5c:	3401      	adds	r4, #1
 8010d5e:	4303      	orrs	r3, r0
 8010d60:	9304      	str	r3, [sp, #16]
 8010d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d66:	2206      	movs	r2, #6
 8010d68:	4826      	ldr	r0, [pc, #152]	; (8010e04 <_svfiprintf_r+0x1f4>)
 8010d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d6e:	f7ff fa0d 	bl	801018c <memchr>
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d038      	beq.n	8010de8 <_svfiprintf_r+0x1d8>
 8010d76:	4b24      	ldr	r3, [pc, #144]	; (8010e08 <_svfiprintf_r+0x1f8>)
 8010d78:	bb1b      	cbnz	r3, 8010dc2 <_svfiprintf_r+0x1b2>
 8010d7a:	9b03      	ldr	r3, [sp, #12]
 8010d7c:	3307      	adds	r3, #7
 8010d7e:	f023 0307 	bic.w	r3, r3, #7
 8010d82:	3308      	adds	r3, #8
 8010d84:	9303      	str	r3, [sp, #12]
 8010d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d88:	4433      	add	r3, r6
 8010d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d8c:	e767      	b.n	8010c5e <_svfiprintf_r+0x4e>
 8010d8e:	460c      	mov	r4, r1
 8010d90:	2001      	movs	r0, #1
 8010d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d96:	e7a5      	b.n	8010ce4 <_svfiprintf_r+0xd4>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f04f 0c0a 	mov.w	ip, #10
 8010d9e:	4619      	mov	r1, r3
 8010da0:	3401      	adds	r4, #1
 8010da2:	9305      	str	r3, [sp, #20]
 8010da4:	4620      	mov	r0, r4
 8010da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010daa:	3a30      	subs	r2, #48	; 0x30
 8010dac:	2a09      	cmp	r2, #9
 8010dae:	d903      	bls.n	8010db8 <_svfiprintf_r+0x1a8>
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d0c5      	beq.n	8010d40 <_svfiprintf_r+0x130>
 8010db4:	9105      	str	r1, [sp, #20]
 8010db6:	e7c3      	b.n	8010d40 <_svfiprintf_r+0x130>
 8010db8:	4604      	mov	r4, r0
 8010dba:	2301      	movs	r3, #1
 8010dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dc0:	e7f0      	b.n	8010da4 <_svfiprintf_r+0x194>
 8010dc2:	ab03      	add	r3, sp, #12
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4638      	mov	r0, r7
 8010dca:	4b10      	ldr	r3, [pc, #64]	; (8010e0c <_svfiprintf_r+0x1fc>)
 8010dcc:	a904      	add	r1, sp, #16
 8010dce:	f7fb ffeb 	bl	800cda8 <_printf_float>
 8010dd2:	1c42      	adds	r2, r0, #1
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	d1d6      	bne.n	8010d86 <_svfiprintf_r+0x176>
 8010dd8:	89ab      	ldrh	r3, [r5, #12]
 8010dda:	065b      	lsls	r3, r3, #25
 8010ddc:	f53f af2c 	bmi.w	8010c38 <_svfiprintf_r+0x28>
 8010de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010de2:	b01d      	add	sp, #116	; 0x74
 8010de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de8:	ab03      	add	r3, sp, #12
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	462a      	mov	r2, r5
 8010dee:	4638      	mov	r0, r7
 8010df0:	4b06      	ldr	r3, [pc, #24]	; (8010e0c <_svfiprintf_r+0x1fc>)
 8010df2:	a904      	add	r1, sp, #16
 8010df4:	f7fc fa74 	bl	800d2e0 <_printf_i>
 8010df8:	e7eb      	b.n	8010dd2 <_svfiprintf_r+0x1c2>
 8010dfa:	bf00      	nop
 8010dfc:	080130cc 	.word	0x080130cc
 8010e00:	080130d2 	.word	0x080130d2
 8010e04:	080130d6 	.word	0x080130d6
 8010e08:	0800cda9 	.word	0x0800cda9
 8010e0c:	08010b59 	.word	0x08010b59

08010e10 <nan>:
 8010e10:	2000      	movs	r0, #0
 8010e12:	4901      	ldr	r1, [pc, #4]	; (8010e18 <nan+0x8>)
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	7ff80000 	.word	0x7ff80000

08010e1c <__sread>:
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	460c      	mov	r4, r1
 8010e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e24:	f000 fa84 	bl	8011330 <_read_r>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	bfab      	itete	ge
 8010e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e30:	181b      	addge	r3, r3, r0
 8010e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e36:	bfac      	ite	ge
 8010e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e3a:	81a3      	strhlt	r3, [r4, #12]
 8010e3c:	bd10      	pop	{r4, pc}

08010e3e <__swrite>:
 8010e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e42:	461f      	mov	r7, r3
 8010e44:	898b      	ldrh	r3, [r1, #12]
 8010e46:	4605      	mov	r5, r0
 8010e48:	05db      	lsls	r3, r3, #23
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	4616      	mov	r6, r2
 8010e4e:	d505      	bpl.n	8010e5c <__swrite+0x1e>
 8010e50:	2302      	movs	r3, #2
 8010e52:	2200      	movs	r2, #0
 8010e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e58:	f000 f8b8 	bl	8010fcc <_lseek_r>
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	4632      	mov	r2, r6
 8010e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e64:	81a3      	strh	r3, [r4, #12]
 8010e66:	4628      	mov	r0, r5
 8010e68:	463b      	mov	r3, r7
 8010e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e72:	f000 b837 	b.w	8010ee4 <_write_r>

08010e76 <__sseek>:
 8010e76:	b510      	push	{r4, lr}
 8010e78:	460c      	mov	r4, r1
 8010e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e7e:	f000 f8a5 	bl	8010fcc <_lseek_r>
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	bf15      	itete	ne
 8010e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e92:	81a3      	strheq	r3, [r4, #12]
 8010e94:	bf18      	it	ne
 8010e96:	81a3      	strhne	r3, [r4, #12]
 8010e98:	bd10      	pop	{r4, pc}

08010e9a <__sclose>:
 8010e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e9e:	f000 b851 	b.w	8010f44 <_close_r>

08010ea2 <strncmp>:
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	b172      	cbz	r2, 8010ec6 <strncmp+0x24>
 8010ea8:	3901      	subs	r1, #1
 8010eaa:	1884      	adds	r4, r0, r2
 8010eac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010eb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010eb4:	4290      	cmp	r0, r2
 8010eb6:	d101      	bne.n	8010ebc <strncmp+0x1a>
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	d101      	bne.n	8010ec0 <strncmp+0x1e>
 8010ebc:	1a80      	subs	r0, r0, r2
 8010ebe:	bd10      	pop	{r4, pc}
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d1f3      	bne.n	8010eac <strncmp+0xa>
 8010ec4:	e7fa      	b.n	8010ebc <strncmp+0x1a>
 8010ec6:	4610      	mov	r0, r2
 8010ec8:	e7f9      	b.n	8010ebe <strncmp+0x1c>

08010eca <__ascii_wctomb>:
 8010eca:	4603      	mov	r3, r0
 8010ecc:	4608      	mov	r0, r1
 8010ece:	b141      	cbz	r1, 8010ee2 <__ascii_wctomb+0x18>
 8010ed0:	2aff      	cmp	r2, #255	; 0xff
 8010ed2:	d904      	bls.n	8010ede <__ascii_wctomb+0x14>
 8010ed4:	228a      	movs	r2, #138	; 0x8a
 8010ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eda:	601a      	str	r2, [r3, #0]
 8010edc:	4770      	bx	lr
 8010ede:	2001      	movs	r0, #1
 8010ee0:	700a      	strb	r2, [r1, #0]
 8010ee2:	4770      	bx	lr

08010ee4 <_write_r>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4608      	mov	r0, r1
 8010eea:	4611      	mov	r1, r2
 8010eec:	2200      	movs	r2, #0
 8010eee:	4d05      	ldr	r5, [pc, #20]	; (8010f04 <_write_r+0x20>)
 8010ef0:	602a      	str	r2, [r5, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	f7f1 fa50 	bl	8002398 <_write>
 8010ef8:	1c43      	adds	r3, r0, #1
 8010efa:	d102      	bne.n	8010f02 <_write_r+0x1e>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	b103      	cbz	r3, 8010f02 <_write_r+0x1e>
 8010f00:	6023      	str	r3, [r4, #0]
 8010f02:	bd38      	pop	{r3, r4, r5, pc}
 8010f04:	200013d4 	.word	0x200013d4

08010f08 <__assert_func>:
 8010f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f0a:	4614      	mov	r4, r2
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4b09      	ldr	r3, [pc, #36]	; (8010f34 <__assert_func+0x2c>)
 8010f10:	4605      	mov	r5, r0
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68d8      	ldr	r0, [r3, #12]
 8010f16:	b14c      	cbz	r4, 8010f2c <__assert_func+0x24>
 8010f18:	4b07      	ldr	r3, [pc, #28]	; (8010f38 <__assert_func+0x30>)
 8010f1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f1e:	9100      	str	r1, [sp, #0]
 8010f20:	462b      	mov	r3, r5
 8010f22:	4906      	ldr	r1, [pc, #24]	; (8010f3c <__assert_func+0x34>)
 8010f24:	f000 f81e 	bl	8010f64 <fiprintf>
 8010f28:	f000 fa14 	bl	8011354 <abort>
 8010f2c:	4b04      	ldr	r3, [pc, #16]	; (8010f40 <__assert_func+0x38>)
 8010f2e:	461c      	mov	r4, r3
 8010f30:	e7f3      	b.n	8010f1a <__assert_func+0x12>
 8010f32:	bf00      	nop
 8010f34:	20000038 	.word	0x20000038
 8010f38:	080130dd 	.word	0x080130dd
 8010f3c:	080130ea 	.word	0x080130ea
 8010f40:	08013118 	.word	0x08013118

08010f44 <_close_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	2300      	movs	r3, #0
 8010f48:	4d05      	ldr	r5, [pc, #20]	; (8010f60 <_close_r+0x1c>)
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	602b      	str	r3, [r5, #0]
 8010f50:	f7f1 fa3e 	bl	80023d0 <_close>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_close_r+0x1a>
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_close_r+0x1a>
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	200013d4 	.word	0x200013d4

08010f64 <fiprintf>:
 8010f64:	b40e      	push	{r1, r2, r3}
 8010f66:	b503      	push	{r0, r1, lr}
 8010f68:	4601      	mov	r1, r0
 8010f6a:	ab03      	add	r3, sp, #12
 8010f6c:	4805      	ldr	r0, [pc, #20]	; (8010f84 <fiprintf+0x20>)
 8010f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f72:	6800      	ldr	r0, [r0, #0]
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	f000 f8ab 	bl	80110d0 <_vfiprintf_r>
 8010f7a:	b002      	add	sp, #8
 8010f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f80:	b003      	add	sp, #12
 8010f82:	4770      	bx	lr
 8010f84:	20000038 	.word	0x20000038

08010f88 <_fstat_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	4d06      	ldr	r5, [pc, #24]	; (8010fa8 <_fstat_r+0x20>)
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	4611      	mov	r1, r2
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	f7f1 fa26 	bl	80023e6 <_fstat>
 8010f9a:	1c43      	adds	r3, r0, #1
 8010f9c:	d102      	bne.n	8010fa4 <_fstat_r+0x1c>
 8010f9e:	682b      	ldr	r3, [r5, #0]
 8010fa0:	b103      	cbz	r3, 8010fa4 <_fstat_r+0x1c>
 8010fa2:	6023      	str	r3, [r4, #0]
 8010fa4:	bd38      	pop	{r3, r4, r5, pc}
 8010fa6:	bf00      	nop
 8010fa8:	200013d4 	.word	0x200013d4

08010fac <_isatty_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	2300      	movs	r3, #0
 8010fb0:	4d05      	ldr	r5, [pc, #20]	; (8010fc8 <_isatty_r+0x1c>)
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	602b      	str	r3, [r5, #0]
 8010fb8:	f7f1 fa24 	bl	8002404 <_isatty>
 8010fbc:	1c43      	adds	r3, r0, #1
 8010fbe:	d102      	bne.n	8010fc6 <_isatty_r+0x1a>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	b103      	cbz	r3, 8010fc6 <_isatty_r+0x1a>
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	200013d4 	.word	0x200013d4

08010fcc <_lseek_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	4604      	mov	r4, r0
 8010fd0:	4608      	mov	r0, r1
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	4d05      	ldr	r5, [pc, #20]	; (8010fec <_lseek_r+0x20>)
 8010fd8:	602a      	str	r2, [r5, #0]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	f7f1 fa1c 	bl	8002418 <_lseek>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_lseek_r+0x1e>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_lseek_r+0x1e>
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	200013d4 	.word	0x200013d4

08010ff0 <memmove>:
 8010ff0:	4288      	cmp	r0, r1
 8010ff2:	b510      	push	{r4, lr}
 8010ff4:	eb01 0402 	add.w	r4, r1, r2
 8010ff8:	d902      	bls.n	8011000 <memmove+0x10>
 8010ffa:	4284      	cmp	r4, r0
 8010ffc:	4623      	mov	r3, r4
 8010ffe:	d807      	bhi.n	8011010 <memmove+0x20>
 8011000:	1e43      	subs	r3, r0, #1
 8011002:	42a1      	cmp	r1, r4
 8011004:	d008      	beq.n	8011018 <memmove+0x28>
 8011006:	f811 2b01 	ldrb.w	r2, [r1], #1
 801100a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801100e:	e7f8      	b.n	8011002 <memmove+0x12>
 8011010:	4601      	mov	r1, r0
 8011012:	4402      	add	r2, r0
 8011014:	428a      	cmp	r2, r1
 8011016:	d100      	bne.n	801101a <memmove+0x2a>
 8011018:	bd10      	pop	{r4, pc}
 801101a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801101e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011022:	e7f7      	b.n	8011014 <memmove+0x24>

08011024 <_realloc_r>:
 8011024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011028:	4680      	mov	r8, r0
 801102a:	4614      	mov	r4, r2
 801102c:	460e      	mov	r6, r1
 801102e:	b921      	cbnz	r1, 801103a <_realloc_r+0x16>
 8011030:	4611      	mov	r1, r2
 8011032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011036:	f7fb bda5 	b.w	800cb84 <_malloc_r>
 801103a:	b92a      	cbnz	r2, 8011048 <_realloc_r+0x24>
 801103c:	f7fb fd3a 	bl	800cab4 <_free_r>
 8011040:	4625      	mov	r5, r4
 8011042:	4628      	mov	r0, r5
 8011044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011048:	f000 f98b 	bl	8011362 <_malloc_usable_size_r>
 801104c:	4284      	cmp	r4, r0
 801104e:	4607      	mov	r7, r0
 8011050:	d802      	bhi.n	8011058 <_realloc_r+0x34>
 8011052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011056:	d812      	bhi.n	801107e <_realloc_r+0x5a>
 8011058:	4621      	mov	r1, r4
 801105a:	4640      	mov	r0, r8
 801105c:	f7fb fd92 	bl	800cb84 <_malloc_r>
 8011060:	4605      	mov	r5, r0
 8011062:	2800      	cmp	r0, #0
 8011064:	d0ed      	beq.n	8011042 <_realloc_r+0x1e>
 8011066:	42bc      	cmp	r4, r7
 8011068:	4622      	mov	r2, r4
 801106a:	4631      	mov	r1, r6
 801106c:	bf28      	it	cs
 801106e:	463a      	movcs	r2, r7
 8011070:	f7fb fd0a 	bl	800ca88 <memcpy>
 8011074:	4631      	mov	r1, r6
 8011076:	4640      	mov	r0, r8
 8011078:	f7fb fd1c 	bl	800cab4 <_free_r>
 801107c:	e7e1      	b.n	8011042 <_realloc_r+0x1e>
 801107e:	4635      	mov	r5, r6
 8011080:	e7df      	b.n	8011042 <_realloc_r+0x1e>

08011082 <__sfputc_r>:
 8011082:	6893      	ldr	r3, [r2, #8]
 8011084:	b410      	push	{r4}
 8011086:	3b01      	subs	r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	6093      	str	r3, [r2, #8]
 801108c:	da07      	bge.n	801109e <__sfputc_r+0x1c>
 801108e:	6994      	ldr	r4, [r2, #24]
 8011090:	42a3      	cmp	r3, r4
 8011092:	db01      	blt.n	8011098 <__sfputc_r+0x16>
 8011094:	290a      	cmp	r1, #10
 8011096:	d102      	bne.n	801109e <__sfputc_r+0x1c>
 8011098:	bc10      	pop	{r4}
 801109a:	f7fd bba5 	b.w	800e7e8 <__swbuf_r>
 801109e:	6813      	ldr	r3, [r2, #0]
 80110a0:	1c58      	adds	r0, r3, #1
 80110a2:	6010      	str	r0, [r2, #0]
 80110a4:	7019      	strb	r1, [r3, #0]
 80110a6:	4608      	mov	r0, r1
 80110a8:	bc10      	pop	{r4}
 80110aa:	4770      	bx	lr

080110ac <__sfputs_r>:
 80110ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ae:	4606      	mov	r6, r0
 80110b0:	460f      	mov	r7, r1
 80110b2:	4614      	mov	r4, r2
 80110b4:	18d5      	adds	r5, r2, r3
 80110b6:	42ac      	cmp	r4, r5
 80110b8:	d101      	bne.n	80110be <__sfputs_r+0x12>
 80110ba:	2000      	movs	r0, #0
 80110bc:	e007      	b.n	80110ce <__sfputs_r+0x22>
 80110be:	463a      	mov	r2, r7
 80110c0:	4630      	mov	r0, r6
 80110c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c6:	f7ff ffdc 	bl	8011082 <__sfputc_r>
 80110ca:	1c43      	adds	r3, r0, #1
 80110cc:	d1f3      	bne.n	80110b6 <__sfputs_r+0xa>
 80110ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110d0 <_vfiprintf_r>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	460d      	mov	r5, r1
 80110d6:	4614      	mov	r4, r2
 80110d8:	4698      	mov	r8, r3
 80110da:	4606      	mov	r6, r0
 80110dc:	b09d      	sub	sp, #116	; 0x74
 80110de:	b118      	cbz	r0, 80110e8 <_vfiprintf_r+0x18>
 80110e0:	6983      	ldr	r3, [r0, #24]
 80110e2:	b90b      	cbnz	r3, 80110e8 <_vfiprintf_r+0x18>
 80110e4:	f7fe fbd0 	bl	800f888 <__sinit>
 80110e8:	4b89      	ldr	r3, [pc, #548]	; (8011310 <_vfiprintf_r+0x240>)
 80110ea:	429d      	cmp	r5, r3
 80110ec:	d11b      	bne.n	8011126 <_vfiprintf_r+0x56>
 80110ee:	6875      	ldr	r5, [r6, #4]
 80110f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110f2:	07d9      	lsls	r1, r3, #31
 80110f4:	d405      	bmi.n	8011102 <_vfiprintf_r+0x32>
 80110f6:	89ab      	ldrh	r3, [r5, #12]
 80110f8:	059a      	lsls	r2, r3, #22
 80110fa:	d402      	bmi.n	8011102 <_vfiprintf_r+0x32>
 80110fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110fe:	f7fe ffcc 	bl	801009a <__retarget_lock_acquire_recursive>
 8011102:	89ab      	ldrh	r3, [r5, #12]
 8011104:	071b      	lsls	r3, r3, #28
 8011106:	d501      	bpl.n	801110c <_vfiprintf_r+0x3c>
 8011108:	692b      	ldr	r3, [r5, #16]
 801110a:	b9eb      	cbnz	r3, 8011148 <_vfiprintf_r+0x78>
 801110c:	4629      	mov	r1, r5
 801110e:	4630      	mov	r0, r6
 8011110:	f7fd fbbc 	bl	800e88c <__swsetup_r>
 8011114:	b1c0      	cbz	r0, 8011148 <_vfiprintf_r+0x78>
 8011116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011118:	07dc      	lsls	r4, r3, #31
 801111a:	d50e      	bpl.n	801113a <_vfiprintf_r+0x6a>
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	b01d      	add	sp, #116	; 0x74
 8011122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011126:	4b7b      	ldr	r3, [pc, #492]	; (8011314 <_vfiprintf_r+0x244>)
 8011128:	429d      	cmp	r5, r3
 801112a:	d101      	bne.n	8011130 <_vfiprintf_r+0x60>
 801112c:	68b5      	ldr	r5, [r6, #8]
 801112e:	e7df      	b.n	80110f0 <_vfiprintf_r+0x20>
 8011130:	4b79      	ldr	r3, [pc, #484]	; (8011318 <_vfiprintf_r+0x248>)
 8011132:	429d      	cmp	r5, r3
 8011134:	bf08      	it	eq
 8011136:	68f5      	ldreq	r5, [r6, #12]
 8011138:	e7da      	b.n	80110f0 <_vfiprintf_r+0x20>
 801113a:	89ab      	ldrh	r3, [r5, #12]
 801113c:	0598      	lsls	r0, r3, #22
 801113e:	d4ed      	bmi.n	801111c <_vfiprintf_r+0x4c>
 8011140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011142:	f7fe ffab 	bl	801009c <__retarget_lock_release_recursive>
 8011146:	e7e9      	b.n	801111c <_vfiprintf_r+0x4c>
 8011148:	2300      	movs	r3, #0
 801114a:	9309      	str	r3, [sp, #36]	; 0x24
 801114c:	2320      	movs	r3, #32
 801114e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011152:	2330      	movs	r3, #48	; 0x30
 8011154:	f04f 0901 	mov.w	r9, #1
 8011158:	f8cd 800c 	str.w	r8, [sp, #12]
 801115c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801131c <_vfiprintf_r+0x24c>
 8011160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011164:	4623      	mov	r3, r4
 8011166:	469a      	mov	sl, r3
 8011168:	f813 2b01 	ldrb.w	r2, [r3], #1
 801116c:	b10a      	cbz	r2, 8011172 <_vfiprintf_r+0xa2>
 801116e:	2a25      	cmp	r2, #37	; 0x25
 8011170:	d1f9      	bne.n	8011166 <_vfiprintf_r+0x96>
 8011172:	ebba 0b04 	subs.w	fp, sl, r4
 8011176:	d00b      	beq.n	8011190 <_vfiprintf_r+0xc0>
 8011178:	465b      	mov	r3, fp
 801117a:	4622      	mov	r2, r4
 801117c:	4629      	mov	r1, r5
 801117e:	4630      	mov	r0, r6
 8011180:	f7ff ff94 	bl	80110ac <__sfputs_r>
 8011184:	3001      	adds	r0, #1
 8011186:	f000 80aa 	beq.w	80112de <_vfiprintf_r+0x20e>
 801118a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801118c:	445a      	add	r2, fp
 801118e:	9209      	str	r2, [sp, #36]	; 0x24
 8011190:	f89a 3000 	ldrb.w	r3, [sl]
 8011194:	2b00      	cmp	r3, #0
 8011196:	f000 80a2 	beq.w	80112de <_vfiprintf_r+0x20e>
 801119a:	2300      	movs	r3, #0
 801119c:	f04f 32ff 	mov.w	r2, #4294967295
 80111a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111a4:	f10a 0a01 	add.w	sl, sl, #1
 80111a8:	9304      	str	r3, [sp, #16]
 80111aa:	9307      	str	r3, [sp, #28]
 80111ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111b0:	931a      	str	r3, [sp, #104]	; 0x68
 80111b2:	4654      	mov	r4, sl
 80111b4:	2205      	movs	r2, #5
 80111b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ba:	4858      	ldr	r0, [pc, #352]	; (801131c <_vfiprintf_r+0x24c>)
 80111bc:	f7fe ffe6 	bl	801018c <memchr>
 80111c0:	9a04      	ldr	r2, [sp, #16]
 80111c2:	b9d8      	cbnz	r0, 80111fc <_vfiprintf_r+0x12c>
 80111c4:	06d1      	lsls	r1, r2, #27
 80111c6:	bf44      	itt	mi
 80111c8:	2320      	movmi	r3, #32
 80111ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111ce:	0713      	lsls	r3, r2, #28
 80111d0:	bf44      	itt	mi
 80111d2:	232b      	movmi	r3, #43	; 0x2b
 80111d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111d8:	f89a 3000 	ldrb.w	r3, [sl]
 80111dc:	2b2a      	cmp	r3, #42	; 0x2a
 80111de:	d015      	beq.n	801120c <_vfiprintf_r+0x13c>
 80111e0:	4654      	mov	r4, sl
 80111e2:	2000      	movs	r0, #0
 80111e4:	f04f 0c0a 	mov.w	ip, #10
 80111e8:	9a07      	ldr	r2, [sp, #28]
 80111ea:	4621      	mov	r1, r4
 80111ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111f0:	3b30      	subs	r3, #48	; 0x30
 80111f2:	2b09      	cmp	r3, #9
 80111f4:	d94e      	bls.n	8011294 <_vfiprintf_r+0x1c4>
 80111f6:	b1b0      	cbz	r0, 8011226 <_vfiprintf_r+0x156>
 80111f8:	9207      	str	r2, [sp, #28]
 80111fa:	e014      	b.n	8011226 <_vfiprintf_r+0x156>
 80111fc:	eba0 0308 	sub.w	r3, r0, r8
 8011200:	fa09 f303 	lsl.w	r3, r9, r3
 8011204:	4313      	orrs	r3, r2
 8011206:	46a2      	mov	sl, r4
 8011208:	9304      	str	r3, [sp, #16]
 801120a:	e7d2      	b.n	80111b2 <_vfiprintf_r+0xe2>
 801120c:	9b03      	ldr	r3, [sp, #12]
 801120e:	1d19      	adds	r1, r3, #4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	9103      	str	r1, [sp, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	bfbb      	ittet	lt
 8011218:	425b      	neglt	r3, r3
 801121a:	f042 0202 	orrlt.w	r2, r2, #2
 801121e:	9307      	strge	r3, [sp, #28]
 8011220:	9307      	strlt	r3, [sp, #28]
 8011222:	bfb8      	it	lt
 8011224:	9204      	strlt	r2, [sp, #16]
 8011226:	7823      	ldrb	r3, [r4, #0]
 8011228:	2b2e      	cmp	r3, #46	; 0x2e
 801122a:	d10c      	bne.n	8011246 <_vfiprintf_r+0x176>
 801122c:	7863      	ldrb	r3, [r4, #1]
 801122e:	2b2a      	cmp	r3, #42	; 0x2a
 8011230:	d135      	bne.n	801129e <_vfiprintf_r+0x1ce>
 8011232:	9b03      	ldr	r3, [sp, #12]
 8011234:	3402      	adds	r4, #2
 8011236:	1d1a      	adds	r2, r3, #4
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	9203      	str	r2, [sp, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	bfb8      	it	lt
 8011240:	f04f 33ff 	movlt.w	r3, #4294967295
 8011244:	9305      	str	r3, [sp, #20]
 8011246:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011320 <_vfiprintf_r+0x250>
 801124a:	2203      	movs	r2, #3
 801124c:	4650      	mov	r0, sl
 801124e:	7821      	ldrb	r1, [r4, #0]
 8011250:	f7fe ff9c 	bl	801018c <memchr>
 8011254:	b140      	cbz	r0, 8011268 <_vfiprintf_r+0x198>
 8011256:	2340      	movs	r3, #64	; 0x40
 8011258:	eba0 000a 	sub.w	r0, r0, sl
 801125c:	fa03 f000 	lsl.w	r0, r3, r0
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	3401      	adds	r4, #1
 8011264:	4303      	orrs	r3, r0
 8011266:	9304      	str	r3, [sp, #16]
 8011268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801126c:	2206      	movs	r2, #6
 801126e:	482d      	ldr	r0, [pc, #180]	; (8011324 <_vfiprintf_r+0x254>)
 8011270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011274:	f7fe ff8a 	bl	801018c <memchr>
 8011278:	2800      	cmp	r0, #0
 801127a:	d03f      	beq.n	80112fc <_vfiprintf_r+0x22c>
 801127c:	4b2a      	ldr	r3, [pc, #168]	; (8011328 <_vfiprintf_r+0x258>)
 801127e:	bb1b      	cbnz	r3, 80112c8 <_vfiprintf_r+0x1f8>
 8011280:	9b03      	ldr	r3, [sp, #12]
 8011282:	3307      	adds	r3, #7
 8011284:	f023 0307 	bic.w	r3, r3, #7
 8011288:	3308      	adds	r3, #8
 801128a:	9303      	str	r3, [sp, #12]
 801128c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801128e:	443b      	add	r3, r7
 8011290:	9309      	str	r3, [sp, #36]	; 0x24
 8011292:	e767      	b.n	8011164 <_vfiprintf_r+0x94>
 8011294:	460c      	mov	r4, r1
 8011296:	2001      	movs	r0, #1
 8011298:	fb0c 3202 	mla	r2, ip, r2, r3
 801129c:	e7a5      	b.n	80111ea <_vfiprintf_r+0x11a>
 801129e:	2300      	movs	r3, #0
 80112a0:	f04f 0c0a 	mov.w	ip, #10
 80112a4:	4619      	mov	r1, r3
 80112a6:	3401      	adds	r4, #1
 80112a8:	9305      	str	r3, [sp, #20]
 80112aa:	4620      	mov	r0, r4
 80112ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112b0:	3a30      	subs	r2, #48	; 0x30
 80112b2:	2a09      	cmp	r2, #9
 80112b4:	d903      	bls.n	80112be <_vfiprintf_r+0x1ee>
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d0c5      	beq.n	8011246 <_vfiprintf_r+0x176>
 80112ba:	9105      	str	r1, [sp, #20]
 80112bc:	e7c3      	b.n	8011246 <_vfiprintf_r+0x176>
 80112be:	4604      	mov	r4, r0
 80112c0:	2301      	movs	r3, #1
 80112c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80112c6:	e7f0      	b.n	80112aa <_vfiprintf_r+0x1da>
 80112c8:	ab03      	add	r3, sp, #12
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	462a      	mov	r2, r5
 80112ce:	4630      	mov	r0, r6
 80112d0:	4b16      	ldr	r3, [pc, #88]	; (801132c <_vfiprintf_r+0x25c>)
 80112d2:	a904      	add	r1, sp, #16
 80112d4:	f7fb fd68 	bl	800cda8 <_printf_float>
 80112d8:	4607      	mov	r7, r0
 80112da:	1c78      	adds	r0, r7, #1
 80112dc:	d1d6      	bne.n	801128c <_vfiprintf_r+0x1bc>
 80112de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112e0:	07d9      	lsls	r1, r3, #31
 80112e2:	d405      	bmi.n	80112f0 <_vfiprintf_r+0x220>
 80112e4:	89ab      	ldrh	r3, [r5, #12]
 80112e6:	059a      	lsls	r2, r3, #22
 80112e8:	d402      	bmi.n	80112f0 <_vfiprintf_r+0x220>
 80112ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112ec:	f7fe fed6 	bl	801009c <__retarget_lock_release_recursive>
 80112f0:	89ab      	ldrh	r3, [r5, #12]
 80112f2:	065b      	lsls	r3, r3, #25
 80112f4:	f53f af12 	bmi.w	801111c <_vfiprintf_r+0x4c>
 80112f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112fa:	e711      	b.n	8011120 <_vfiprintf_r+0x50>
 80112fc:	ab03      	add	r3, sp, #12
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	462a      	mov	r2, r5
 8011302:	4630      	mov	r0, r6
 8011304:	4b09      	ldr	r3, [pc, #36]	; (801132c <_vfiprintf_r+0x25c>)
 8011306:	a904      	add	r1, sp, #16
 8011308:	f7fb ffea 	bl	800d2e0 <_printf_i>
 801130c:	e7e4      	b.n	80112d8 <_vfiprintf_r+0x208>
 801130e:	bf00      	nop
 8011310:	08012eb4 	.word	0x08012eb4
 8011314:	08012ed4 	.word	0x08012ed4
 8011318:	08012e94 	.word	0x08012e94
 801131c:	080130cc 	.word	0x080130cc
 8011320:	080130d2 	.word	0x080130d2
 8011324:	080130d6 	.word	0x080130d6
 8011328:	0800cda9 	.word	0x0800cda9
 801132c:	080110ad 	.word	0x080110ad

08011330 <_read_r>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	4604      	mov	r4, r0
 8011334:	4608      	mov	r0, r1
 8011336:	4611      	mov	r1, r2
 8011338:	2200      	movs	r2, #0
 801133a:	4d05      	ldr	r5, [pc, #20]	; (8011350 <_read_r+0x20>)
 801133c:	602a      	str	r2, [r5, #0]
 801133e:	461a      	mov	r2, r3
 8011340:	f7f1 f80d 	bl	800235e <_read>
 8011344:	1c43      	adds	r3, r0, #1
 8011346:	d102      	bne.n	801134e <_read_r+0x1e>
 8011348:	682b      	ldr	r3, [r5, #0]
 801134a:	b103      	cbz	r3, 801134e <_read_r+0x1e>
 801134c:	6023      	str	r3, [r4, #0]
 801134e:	bd38      	pop	{r3, r4, r5, pc}
 8011350:	200013d4 	.word	0x200013d4

08011354 <abort>:
 8011354:	2006      	movs	r0, #6
 8011356:	b508      	push	{r3, lr}
 8011358:	f000 f834 	bl	80113c4 <raise>
 801135c:	2001      	movs	r0, #1
 801135e:	f7f0 fff4 	bl	800234a <_exit>

08011362 <_malloc_usable_size_r>:
 8011362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011366:	1f18      	subs	r0, r3, #4
 8011368:	2b00      	cmp	r3, #0
 801136a:	bfbc      	itt	lt
 801136c:	580b      	ldrlt	r3, [r1, r0]
 801136e:	18c0      	addlt	r0, r0, r3
 8011370:	4770      	bx	lr

08011372 <_raise_r>:
 8011372:	291f      	cmp	r1, #31
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4604      	mov	r4, r0
 8011378:	460d      	mov	r5, r1
 801137a:	d904      	bls.n	8011386 <_raise_r+0x14>
 801137c:	2316      	movs	r3, #22
 801137e:	6003      	str	r3, [r0, #0]
 8011380:	f04f 30ff 	mov.w	r0, #4294967295
 8011384:	bd38      	pop	{r3, r4, r5, pc}
 8011386:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011388:	b112      	cbz	r2, 8011390 <_raise_r+0x1e>
 801138a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801138e:	b94b      	cbnz	r3, 80113a4 <_raise_r+0x32>
 8011390:	4620      	mov	r0, r4
 8011392:	f000 f831 	bl	80113f8 <_getpid_r>
 8011396:	462a      	mov	r2, r5
 8011398:	4601      	mov	r1, r0
 801139a:	4620      	mov	r0, r4
 801139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a0:	f000 b818 	b.w	80113d4 <_kill_r>
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d00a      	beq.n	80113be <_raise_r+0x4c>
 80113a8:	1c59      	adds	r1, r3, #1
 80113aa:	d103      	bne.n	80113b4 <_raise_r+0x42>
 80113ac:	2316      	movs	r3, #22
 80113ae:	6003      	str	r3, [r0, #0]
 80113b0:	2001      	movs	r0, #1
 80113b2:	e7e7      	b.n	8011384 <_raise_r+0x12>
 80113b4:	2400      	movs	r4, #0
 80113b6:	4628      	mov	r0, r5
 80113b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113bc:	4798      	blx	r3
 80113be:	2000      	movs	r0, #0
 80113c0:	e7e0      	b.n	8011384 <_raise_r+0x12>
	...

080113c4 <raise>:
 80113c4:	4b02      	ldr	r3, [pc, #8]	; (80113d0 <raise+0xc>)
 80113c6:	4601      	mov	r1, r0
 80113c8:	6818      	ldr	r0, [r3, #0]
 80113ca:	f7ff bfd2 	b.w	8011372 <_raise_r>
 80113ce:	bf00      	nop
 80113d0:	20000038 	.word	0x20000038

080113d4 <_kill_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	2300      	movs	r3, #0
 80113d8:	4d06      	ldr	r5, [pc, #24]	; (80113f4 <_kill_r+0x20>)
 80113da:	4604      	mov	r4, r0
 80113dc:	4608      	mov	r0, r1
 80113de:	4611      	mov	r1, r2
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	f7f0 ffa2 	bl	800232a <_kill>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	d102      	bne.n	80113f0 <_kill_r+0x1c>
 80113ea:	682b      	ldr	r3, [r5, #0]
 80113ec:	b103      	cbz	r3, 80113f0 <_kill_r+0x1c>
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	bd38      	pop	{r3, r4, r5, pc}
 80113f2:	bf00      	nop
 80113f4:	200013d4 	.word	0x200013d4

080113f8 <_getpid_r>:
 80113f8:	f7f0 bf90 	b.w	800231c <_getpid>

080113fc <_init>:
 80113fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fe:	bf00      	nop
 8011400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011402:	bc08      	pop	{r3}
 8011404:	469e      	mov	lr, r3
 8011406:	4770      	bx	lr

08011408 <_fini>:
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140a:	bf00      	nop
 801140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140e:	bc08      	pop	{r3}
 8011410:	469e      	mov	lr, r3
 8011412:	4770      	bx	lr
