
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109dc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a74  08010b20  08010b20  00020b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012594  08012594  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08012594  08012594  00022594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801259c  0801259c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801259c  0801259c  0002259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125a0  080125a0  000225a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080125a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  20000208  080127a8  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200013d0  080127a8  000313d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b25d  00000000  00000000  0003022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000477a  00000000  00000000  0004b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0004fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00051418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5ad  00000000  00000000  000529f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d42  00000000  00000000  0006efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095566  00000000  00000000  00090ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012624d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000771c  00000000  00000000  001262a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000208 	.word	0x20000208
 800015c:	00000000 	.word	0x00000000
 8000160:	08010b04 	.word	0x08010b04

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000020c 	.word	0x2000020c
 800017c:	08010b04 	.word	0x08010b04

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_uldivmod>:
 8001054:	b953      	cbnz	r3, 800106c <__aeabi_uldivmod+0x18>
 8001056:	b94a      	cbnz	r2, 800106c <__aeabi_uldivmod+0x18>
 8001058:	2900      	cmp	r1, #0
 800105a:	bf08      	it	eq
 800105c:	2800      	cmpeq	r0, #0
 800105e:	bf1c      	itt	ne
 8001060:	f04f 31ff 	movne.w	r1, #4294967295
 8001064:	f04f 30ff 	movne.w	r0, #4294967295
 8001068:	f000 b9ae 	b.w	80013c8 <__aeabi_idiv0>
 800106c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001074:	f000 f83e 	bl	80010f4 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fcab 	bl	80009ec <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa21 	bl	8000508 <__aeabi_dmul>
 80010c6:	f7ff fcf7 	bl	8000ab8 <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f9a2 	bl	8000414 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa18 	bl	8000508 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f85a 	bl	8000198 <__aeabi_dsub>
 80010e4:	f7ff fce8 	bl	8000ab8 <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <__udivmoddi4>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	9e08      	ldr	r6, [sp, #32]
 80010fa:	460d      	mov	r5, r1
 80010fc:	4604      	mov	r4, r0
 80010fe:	4688      	mov	r8, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d14d      	bne.n	80011a0 <__udivmoddi4+0xac>
 8001104:	428a      	cmp	r2, r1
 8001106:	4694      	mov	ip, r2
 8001108:	d968      	bls.n	80011dc <__udivmoddi4+0xe8>
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b152      	cbz	r2, 8001126 <__udivmoddi4+0x32>
 8001110:	fa01 f302 	lsl.w	r3, r1, r2
 8001114:	f1c2 0120 	rsb	r1, r2, #32
 8001118:	fa20 f101 	lsr.w	r1, r0, r1
 800111c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001120:	ea41 0803 	orr.w	r8, r1, r3
 8001124:	4094      	lsls	r4, r2
 8001126:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800112a:	fbb8 f7f1 	udiv	r7, r8, r1
 800112e:	fa1f fe8c 	uxth.w	lr, ip
 8001132:	fb01 8817 	mls	r8, r1, r7, r8
 8001136:	fb07 f00e 	mul.w	r0, r7, lr
 800113a:	0c23      	lsrs	r3, r4, #16
 800113c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001140:	4298      	cmp	r0, r3
 8001142:	d90a      	bls.n	800115a <__udivmoddi4+0x66>
 8001144:	eb1c 0303 	adds.w	r3, ip, r3
 8001148:	f107 35ff 	add.w	r5, r7, #4294967295
 800114c:	f080 811e 	bcs.w	800138c <__udivmoddi4+0x298>
 8001150:	4298      	cmp	r0, r3
 8001152:	f240 811b 	bls.w	800138c <__udivmoddi4+0x298>
 8001156:	3f02      	subs	r7, #2
 8001158:	4463      	add	r3, ip
 800115a:	1a1b      	subs	r3, r3, r0
 800115c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001160:	fb01 3310 	mls	r3, r1, r0, r3
 8001164:	fb00 fe0e 	mul.w	lr, r0, lr
 8001168:	b2a4      	uxth	r4, r4
 800116a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800116e:	45a6      	cmp	lr, r4
 8001170:	d90a      	bls.n	8001188 <__udivmoddi4+0x94>
 8001172:	eb1c 0404 	adds.w	r4, ip, r4
 8001176:	f100 33ff 	add.w	r3, r0, #4294967295
 800117a:	f080 8109 	bcs.w	8001390 <__udivmoddi4+0x29c>
 800117e:	45a6      	cmp	lr, r4
 8001180:	f240 8106 	bls.w	8001390 <__udivmoddi4+0x29c>
 8001184:	4464      	add	r4, ip
 8001186:	3802      	subs	r0, #2
 8001188:	2100      	movs	r1, #0
 800118a:	eba4 040e 	sub.w	r4, r4, lr
 800118e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001192:	b11e      	cbz	r6, 800119c <__udivmoddi4+0xa8>
 8001194:	2300      	movs	r3, #0
 8001196:	40d4      	lsrs	r4, r2
 8001198:	e9c6 4300 	strd	r4, r3, [r6]
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0xc2>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	f000 80ee 	beq.w	8001386 <__udivmoddi4+0x292>
 80011aa:	2100      	movs	r1, #0
 80011ac:	e9c6 0500 	strd	r0, r5, [r6]
 80011b0:	4608      	mov	r0, r1
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	fab3 f183 	clz	r1, r3
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d14a      	bne.n	8001254 <__udivmoddi4+0x160>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d302      	bcc.n	80011c8 <__udivmoddi4+0xd4>
 80011c2:	4282      	cmp	r2, r0
 80011c4:	f200 80fc 	bhi.w	80013c0 <__udivmoddi4+0x2cc>
 80011c8:	1a84      	subs	r4, r0, r2
 80011ca:	eb65 0303 	sbc.w	r3, r5, r3
 80011ce:	2001      	movs	r0, #1
 80011d0:	4698      	mov	r8, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d0e2      	beq.n	800119c <__udivmoddi4+0xa8>
 80011d6:	e9c6 4800 	strd	r4, r8, [r6]
 80011da:	e7df      	b.n	800119c <__udivmoddi4+0xa8>
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xec>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	f040 8091 	bne.w	800130c <__udivmoddi4+0x218>
 80011ea:	eba1 000c 	sub.w	r0, r1, ip
 80011ee:	2101      	movs	r1, #1
 80011f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f4:	fa1f fe8c 	uxth.w	lr, ip
 80011f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001200:	0c25      	lsrs	r5, r4, #16
 8001202:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001206:	fb0e f003 	mul.w	r0, lr, r3
 800120a:	42a8      	cmp	r0, r5
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x12c>
 800120e:	eb1c 0505 	adds.w	r5, ip, r5
 8001212:	f103 38ff 	add.w	r8, r3, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x12a>
 8001218:	42a8      	cmp	r0, r5
 800121a:	f200 80ce 	bhi.w	80013ba <__udivmoddi4+0x2c6>
 800121e:	4643      	mov	r3, r8
 8001220:	1a2d      	subs	r5, r5, r0
 8001222:	fbb5 f0f7 	udiv	r0, r5, r7
 8001226:	fb07 5510 	mls	r5, r7, r0, r5
 800122a:	fb0e fe00 	mul.w	lr, lr, r0
 800122e:	b2a4      	uxth	r4, r4
 8001230:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001234:	45a6      	cmp	lr, r4
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x156>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001240:	d202      	bcs.n	8001248 <__udivmoddi4+0x154>
 8001242:	45a6      	cmp	lr, r4
 8001244:	f200 80b6 	bhi.w	80013b4 <__udivmoddi4+0x2c0>
 8001248:	4628      	mov	r0, r5
 800124a:	eba4 040e 	sub.w	r4, r4, lr
 800124e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001252:	e79e      	b.n	8001192 <__udivmoddi4+0x9e>
 8001254:	f1c1 0720 	rsb	r7, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 fc07 	lsr.w	ip, r2, r7
 800125e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001262:	fa25 fa07 	lsr.w	sl, r5, r7
 8001266:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800126a:	fbba f8f9 	udiv	r8, sl, r9
 800126e:	fa20 f307 	lsr.w	r3, r0, r7
 8001272:	fb09 aa18 	mls	sl, r9, r8, sl
 8001276:	408d      	lsls	r5, r1
 8001278:	fa1f fe8c 	uxth.w	lr, ip
 800127c:	431d      	orrs	r5, r3
 800127e:	fa00 f301 	lsl.w	r3, r0, r1
 8001282:	fb08 f00e 	mul.w	r0, r8, lr
 8001286:	0c2c      	lsrs	r4, r5, #16
 8001288:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800128c:	42a0      	cmp	r0, r4
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90b      	bls.n	80012ac <__udivmoddi4+0x1b8>
 8001294:	eb1c 0404 	adds.w	r4, ip, r4
 8001298:	f108 3aff 	add.w	sl, r8, #4294967295
 800129c:	f080 8088 	bcs.w	80013b0 <__udivmoddi4+0x2bc>
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	f240 8085 	bls.w	80013b0 <__udivmoddi4+0x2bc>
 80012a6:	f1a8 0802 	sub.w	r8, r8, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	1a24      	subs	r4, r4, r0
 80012ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80012b2:	fb09 4410 	mls	r4, r9, r0, r4
 80012b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80012ba:	b2ad      	uxth	r5, r5
 80012bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x1e2>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012cc:	d26c      	bcs.n	80013a8 <__udivmoddi4+0x2b4>
 80012ce:	45a6      	cmp	lr, r4
 80012d0:	d96a      	bls.n	80013a8 <__udivmoddi4+0x2b4>
 80012d2:	3802      	subs	r0, #2
 80012d4:	4464      	add	r4, ip
 80012d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012da:	fba0 9502 	umull	r9, r5, r0, r2
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	42ac      	cmp	r4, r5
 80012e4:	46c8      	mov	r8, r9
 80012e6:	46ae      	mov	lr, r5
 80012e8:	d356      	bcc.n	8001398 <__udivmoddi4+0x2a4>
 80012ea:	d053      	beq.n	8001394 <__udivmoddi4+0x2a0>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d069      	beq.n	80013c4 <__udivmoddi4+0x2d0>
 80012f0:	ebb3 0208 	subs.w	r2, r3, r8
 80012f4:	eb64 040e 	sbc.w	r4, r4, lr
 80012f8:	fa22 f301 	lsr.w	r3, r2, r1
 80012fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001300:	431f      	orrs	r7, r3
 8001302:	40cc      	lsrs	r4, r1
 8001304:	e9c6 7400 	strd	r7, r4, [r6]
 8001308:	2100      	movs	r1, #0
 800130a:	e747      	b.n	800119c <__udivmoddi4+0xa8>
 800130c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001310:	f1c2 0120 	rsb	r1, r2, #32
 8001314:	fa25 f301 	lsr.w	r3, r5, r1
 8001318:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800131c:	fa20 f101 	lsr.w	r1, r0, r1
 8001320:	4095      	lsls	r5, r2
 8001322:	430d      	orrs	r5, r1
 8001324:	fbb3 f1f7 	udiv	r1, r3, r7
 8001328:	fb07 3311 	mls	r3, r7, r1, r3
 800132c:	fa1f fe8c 	uxth.w	lr, ip
 8001330:	0c28      	lsrs	r0, r5, #16
 8001332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001336:	fb01 f30e 	mul.w	r3, r1, lr
 800133a:	4283      	cmp	r3, r0
 800133c:	fa04 f402 	lsl.w	r4, r4, r2
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x260>
 8001342:	eb1c 0000 	adds.w	r0, ip, r0
 8001346:	f101 38ff 	add.w	r8, r1, #4294967295
 800134a:	d22f      	bcs.n	80013ac <__udivmoddi4+0x2b8>
 800134c:	4283      	cmp	r3, r0
 800134e:	d92d      	bls.n	80013ac <__udivmoddi4+0x2b8>
 8001350:	3902      	subs	r1, #2
 8001352:	4460      	add	r0, ip
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	fbb0 f3f7 	udiv	r3, r0, r7
 800135a:	fb07 0013 	mls	r0, r7, r3, r0
 800135e:	b2ad      	uxth	r5, r5
 8001360:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001364:	fb03 f00e 	mul.w	r0, r3, lr
 8001368:	42a8      	cmp	r0, r5
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x28a>
 800136c:	eb1c 0505 	adds.w	r5, ip, r5
 8001370:	f103 38ff 	add.w	r8, r3, #4294967295
 8001374:	d216      	bcs.n	80013a4 <__udivmoddi4+0x2b0>
 8001376:	42a8      	cmp	r0, r5
 8001378:	d914      	bls.n	80013a4 <__udivmoddi4+0x2b0>
 800137a:	3b02      	subs	r3, #2
 800137c:	4465      	add	r5, ip
 800137e:	1a28      	subs	r0, r5, r0
 8001380:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001384:	e738      	b.n	80011f8 <__udivmoddi4+0x104>
 8001386:	4631      	mov	r1, r6
 8001388:	4630      	mov	r0, r6
 800138a:	e707      	b.n	800119c <__udivmoddi4+0xa8>
 800138c:	462f      	mov	r7, r5
 800138e:	e6e4      	b.n	800115a <__udivmoddi4+0x66>
 8001390:	4618      	mov	r0, r3
 8001392:	e6f9      	b.n	8001188 <__udivmoddi4+0x94>
 8001394:	454b      	cmp	r3, r9
 8001396:	d2a9      	bcs.n	80012ec <__udivmoddi4+0x1f8>
 8001398:	ebb9 0802 	subs.w	r8, r9, r2
 800139c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013a0:	3801      	subs	r0, #1
 80013a2:	e7a3      	b.n	80012ec <__udivmoddi4+0x1f8>
 80013a4:	4643      	mov	r3, r8
 80013a6:	e7ea      	b.n	800137e <__udivmoddi4+0x28a>
 80013a8:	4628      	mov	r0, r5
 80013aa:	e794      	b.n	80012d6 <__udivmoddi4+0x1e2>
 80013ac:	4641      	mov	r1, r8
 80013ae:	e7d1      	b.n	8001354 <__udivmoddi4+0x260>
 80013b0:	46d0      	mov	r8, sl
 80013b2:	e77b      	b.n	80012ac <__udivmoddi4+0x1b8>
 80013b4:	4464      	add	r4, ip
 80013b6:	3802      	subs	r0, #2
 80013b8:	e747      	b.n	800124a <__udivmoddi4+0x156>
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4465      	add	r5, ip
 80013be:	e72f      	b.n	8001220 <__udivmoddi4+0x12c>
 80013c0:	4608      	mov	r0, r1
 80013c2:	e706      	b.n	80011d2 <__udivmoddi4+0xde>
 80013c4:	4631      	mov	r1, r6
 80013c6:	e6e9      	b.n	800119c <__udivmoddi4+0xa8>

080013c8 <__aeabi_idiv0>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <deviceInit>:
#include <stdio.h>

//extern DATA data;
extern DEVICE device;

void deviceInit(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	sprintf((char *)device.id,"%s","+84123456789");
 80013d0:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <deviceInit+0x1c>)
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <deviceInit+0x20>)
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <deviceInit+0x24>)
 80013d6:	f00b fec5 	bl	800d164 <siprintf>
	sprintf((char *)device.url,"%s","https://rain-4a16a-default-rtdb.firebaseio.com/test2.json");
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <deviceInit+0x28>)
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <deviceInit+0x20>)
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <deviceInit+0x2c>)
 80013e0:	f00b fec0 	bl	800d164 <siprintf>
};
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08010b20 	.word	0x08010b20
 80013ec:	08010b30 	.word	0x08010b30
 80013f0:	20000724 	.word	0x20000724
 80013f4:	08010b34 	.word	0x08010b34
 80013f8:	20000733 	.word	0x20000733

080013fc <dataCounter>:

MODE dataCounter()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	extern DATA data;
	DATA_STATUS status = dataGetTime(&data);
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <dataCounter+0x38>)
 8001404:	f00a fb72 	bl	800baec <dataGetTime>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	if (status == DATA_STOP)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <dataCounter+0x1a>
	{
		return FINISH;
 8001412:	2302      	movs	r3, #2
 8001414:	e00a      	b.n	800142c <dataCounter+0x30>
	};
	if (status == DATA_WAITE)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d101      	bne.n	8001420 <dataCounter+0x24>
	{
		return WAITE_MODE;
 800141c:	2300      	movs	r3, #0
 800141e:	e005      	b.n	800142c <dataCounter+0x30>
	};
	if (status == DATA_RUN)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <dataCounter+0x2e>
	{
		return RUN_MODE;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <dataCounter+0x30>
	};
	return WAITE_MODE;
 800142a:	2300      	movs	r3, #0
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003c8 	.word	0x200003c8

08001438 <start>:
SD_CARD_STATUS sdStatus;

uint8_t flagButtion = 0;

void start()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    //setup_moniter();
    //moniter_begin();
    deviceInit();
 800143c:	f7ff ffc6 	bl	80013cc <deviceInit>
    dataInit();
 8001440:	f00a fb28 	bl	800ba94 <dataInit>
    startSIM();
 8001444:	f00a fd86 	bl	800bf54 <startSIM>
    checkMode = RUN;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <start+0x38>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    simStatus = simInit();
 800144e:	f00a fd95 	bl	800bf7c <simInit>
 8001452:	4603      	mov	r3, r0
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <start+0x3c>)
 8001458:	701a      	strb	r2, [r3, #0]
    sdStatus = SD_Init();
 800145a:	f00a fd1f 	bl	800be9c <SD_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <start+0x40>)
 8001464:	701a      	strb	r2, [r3, #0]
    initCounter(&data);
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <start+0x44>)
 8001468:	f00a fb02 	bl	800ba70 <initCounter>
    //home_moniter(simStatus, sdStatus, &data);
};
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000224 	.word	0x20000224
 8001478:	20000225 	.word	0x20000225
 800147c:	200003c8 	.word	0x200003c8

08001480 <maincontroller>:

void maincontroller()
{
 8001480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001484:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8001488:	af0c      	add	r7, sp, #48	; 0x30
    MODE status = WAITE_MODE;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
    if (checkMode == RUN)
 8001490:	4bac      	ldr	r3, [pc, #688]	; (8001744 <maincontroller+0x2c4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <maincontroller+0x22>
    {
        status = dataCounter();
 8001498:	f7ff ffb0 	bl	80013fc <dataCounter>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
    }
    if (status == WAITE_MODE)
    {
    }

    if (status == FINISH)
 80014a2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	f040 80e4 	bne.w	8001674 <maincontroller+0x1f4>
    {
    	char forder[10] = {0};
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80014b2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	809a      	strh	r2, [r3, #4]
    	char file[10] = {0};
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80014c2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	809a      	strh	r2, [r3, #4]
    	char timeSend[50] = {0};
 80014cc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80014d0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	222e      	movs	r2, #46	; 0x2e
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00a fe64 	bl	800c1ac <memset>
    	char bufferData[500] = {0};
 80014e4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80014e8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a fe57 	bl	800c1ac <memset>
        
        SIM checkSimStatus = SIM_STATUS_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256

        checkMode = STOP;
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <maincontroller+0x2c4>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
        handleData();
 800150a:	f00a fba3 	bl	800bc54 <handleData>

        getDateTime(&realtimedata);
 800150e:	488e      	ldr	r0, [pc, #568]	; (8001748 <maincontroller+0x2c8>)
 8001510:	f00a fd6a 	bl	800bfe8 <getDateTime>
        getRealTime(&realtimedata);
 8001514:	488c      	ldr	r0, [pc, #560]	; (8001748 <maincontroller+0x2c8>)
 8001516:	f00a fdad 	bl	800c074 <getRealTime>
        memcpy(forder, (char *)&realtimedata.dateTime, 8);
 800151a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800151e:	2208      	movs	r2, #8
 8001520:	4989      	ldr	r1, [pc, #548]	; (8001748 <maincontroller+0x2c8>)
 8001522:	4618      	mov	r0, r3
 8001524:	f00a fe34 	bl	800c190 <memcpy>
        memcpy(file, (char *)&realtimedata.realTime, 8);
 8001528:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800152c:	2208      	movs	r2, #8
 800152e:	4987      	ldr	r1, [pc, #540]	; (800174c <maincontroller+0x2cc>)
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fe2d 	bl	800c190 <memcpy>

        sprintf(timeSend, "DATE %s-TIME %s", forder, file);
 8001536:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800153a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800153e:	f107 0014 	add.w	r0, r7, #20
 8001542:	4983      	ldr	r1, [pc, #524]	; (8001750 <maincontroller+0x2d0>)
 8001544:	f00b fe0e 	bl	800d164 <siprintf>

        sprintf(bufferData , "id,%s\n execution time,%s\n count,%lu\n time relust,%lu:%lu:%lu\n Distance high,%.2f\n Distance,%.2f\n flow water,%.2f\n percent,%.2f\n", device.id, timeSend, data.count, data.hour, data.minute, data.second, data.Distance_high, data.Distance, data.Flow_warter, data.percent);
 8001548:	4b82      	ldr	r3, [pc, #520]	; (8001754 <maincontroller+0x2d4>)
 800154a:	681e      	ldr	r6, [r3, #0]
 800154c:	4b81      	ldr	r3, [pc, #516]	; (8001754 <maincontroller+0x2d4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b80      	ldr	r3, [pc, #512]	; (8001754 <maincontroller+0x2d4>)
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	4b7e      	ldr	r3, [pc, #504]	; (8001754 <maincontroller+0x2d4>)
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	6079      	str	r1, [r7, #4]
 800155e:	4b7d      	ldr	r3, [pc, #500]	; (8001754 <maincontroller+0x2d4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff78 	bl	8000458 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4b79      	ldr	r3, [pc, #484]	; (8001754 <maincontroller+0x2d4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff71 	bl	8000458 <__aeabi_f2d>
 8001576:	4680      	mov	r8, r0
 8001578:	4689      	mov	r9, r1
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <maincontroller+0x2d4>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff6a 	bl	8000458 <__aeabi_f2d>
 8001584:	4682      	mov	sl, r0
 8001586:	468b      	mov	fp, r1
 8001588:	4b72      	ldr	r3, [pc, #456]	; (8001754 <maincontroller+0x2d4>)
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff63 	bl	8000458 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	f107 0114 	add.w	r1, r7, #20
 800159a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800159e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80015a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80015a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80015aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80015ae:	687c      	ldr	r4, [r7, #4]
 80015b0:	9403      	str	r4, [sp, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	9202      	str	r2, [sp, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9600      	str	r6, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	4a66      	ldr	r2, [pc, #408]	; (8001758 <maincontroller+0x2d8>)
 80015c0:	4966      	ldr	r1, [pc, #408]	; (800175c <maincontroller+0x2dc>)
 80015c2:	f00b fdcf 	bl	800d164 <siprintf>

        SD_CARD_STATUS checkSdStatus = SD_CreatFile(forder, file, bufferData);
 80015c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015ca:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 80015ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00a fc74 	bl	800bec0 <SD_CreatFile>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255

        sprintf(bufferData , "{\"id\":\"%s\",\"execution time\":\"%s\",\"count\":\"%lu\",\"time relust\":\"%lu:%lu:%lu\",\"Distance high\":\"%.2f\",\"Distance\":\"%.2f\",\"flow water\":\"%.2f\",\"percent\":\"%.2f\"}", device.id, timeSend, data.count, data.hour, data.minute, data.second, data.Distance_high, data.Distance, data.Flow_warter, data.percent);
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <maincontroller+0x2d4>)
 80015e0:	681e      	ldr	r6, [r3, #0]
 80015e2:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <maincontroller+0x2d4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <maincontroller+0x2d4>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	4b59      	ldr	r3, [pc, #356]	; (8001754 <maincontroller+0x2d4>)
 80015f0:	68d9      	ldr	r1, [r3, #12]
 80015f2:	6079      	str	r1, [r7, #4]
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <maincontroller+0x2d4>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff2d 	bl	8000458 <__aeabi_f2d>
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
 8001602:	4b54      	ldr	r3, [pc, #336]	; (8001754 <maincontroller+0x2d4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff26 	bl	8000458 <__aeabi_f2d>
 800160c:	4680      	mov	r8, r0
 800160e:	4689      	mov	r9, r1
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <maincontroller+0x2d4>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff1f 	bl	8000458 <__aeabi_f2d>
 800161a:	4682      	mov	sl, r0
 800161c:	468b      	mov	fp, r1
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <maincontroller+0x2d4>)
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff18 	bl	8000458 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	f107 0114 	add.w	r1, r7, #20
 8001630:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001634:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001638:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800163c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001640:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001644:	687c      	ldr	r4, [r7, #4]
 8001646:	9403      	str	r4, [sp, #12]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	9202      	str	r2, [sp, #8]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	9600      	str	r6, [sp, #0]
 8001652:	460b      	mov	r3, r1
 8001654:	4a40      	ldr	r2, [pc, #256]	; (8001758 <maincontroller+0x2d8>)
 8001656:	4942      	ldr	r1, [pc, #264]	; (8001760 <maincontroller+0x2e0>)
 8001658:	f00b fd84 	bl	800d164 <siprintf>

        if (checkSdStatus == SD_CARD_OK)
 800165c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <maincontroller+0x1f4>
        {
            checkSimStatus = sendDataFirebase(bufferData);
 8001664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001668:	4618      	mov	r0, r3
 800166a:	f00a fd4b 	bl	800c104 <sendDataFirebase>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
        }
        //finish_moniter(&data, checkSimStatus, checkSdStatus);
    }

    if (ButtionOn == 1)
 8001674:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <maincontroller+0x2e4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d116      	bne.n	80016aa <maincontroller+0x22a>
    {
        // HAL_NVIC_SystemReset();
        ButtionOn = 0;
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <maincontroller+0x2e4>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
        flagButtion = 0;
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <maincontroller+0x2e8>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
        checkMode = RUN;
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <maincontroller+0x2c4>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
        simStatus = simInit();
 800168e:	f00a fc75 	bl	800bf7c <simInit>
 8001692:	4603      	mov	r3, r0
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <maincontroller+0x2ec>)
 8001698:	701a      	strb	r2, [r3, #0]
        sdStatus = SD_Init();
 800169a:	f00a fbff 	bl	800be9c <SD_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <maincontroller+0x2f0>)
 80016a4:	701a      	strb	r2, [r3, #0]
        dataInit();
 80016a6:	f00a f9f5 	bl	800ba94 <dataInit>
        //home_moniter(simStatus, sdStatus, &data);
    }

    if (ButtionOn == 2)
 80016aa:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <maincontroller+0x2e4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d108      	bne.n	80016c4 <maincontroller+0x244>
    {
        ButtionOn = 0;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <maincontroller+0x2e4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
        flagButtion = 0;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <maincontroller+0x2e8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
        deviceInformatio(&device);
 80016be:	4826      	ldr	r0, [pc, #152]	; (8001758 <maincontroller+0x2d8>)
 80016c0:	f00a fb34 	bl	800bd2c <deviceInformatio>
    }
    if (ButtionOn == 3 && flagButtion == 1)
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <maincontroller+0x2e4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d114      	bne.n	80016f6 <maincontroller+0x276>
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <maincontroller+0x2e8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d110      	bne.n	80016f6 <maincontroller+0x276>
    {
        ButtionOn = 0;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <maincontroller+0x2e4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
        data.Distance_high = data.Distance_high + 0.5;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <maincontroller+0x2d4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa5e 	bl	8000ba4 <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <maincontroller+0x2d4>)
 80016ee:	61da      	str	r2, [r3, #28]
        dataConfigure(&data);
 80016f0:	4818      	ldr	r0, [pc, #96]	; (8001754 <maincontroller+0x2d4>)
 80016f2:	f00a fb57 	bl	800bda4 <dataConfigure>
    }
    if (ButtionOn == 4 && flagButtion == 1)
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <maincontroller+0x2e4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d117      	bne.n	800172e <maincontroller+0x2ae>
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <maincontroller+0x2e8>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d113      	bne.n	800172e <maincontroller+0x2ae>
    {
        flagButtion = 1;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <maincontroller+0x2e8>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
        ButtionOn = 0;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <maincontroller+0x2e4>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
        data.Distance_high = data.Distance_high - 0.5;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <maincontroller+0x2d4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fa40 	bl	8000ba0 <__aeabi_fsub>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <maincontroller+0x2d4>)
 8001726:	61da      	str	r2, [r3, #28]
        dataConfigure(&data);
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <maincontroller+0x2d4>)
 800172a:	f00a fb3b 	bl	800bda4 <dataConfigure>
    }
    if (ButtionOn == 5)
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <maincontroller+0x2e4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d121      	bne.n	800177a <maincontroller+0x2fa>
    {
        ButtionOn = 0;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <maincontroller+0x2e4>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
        flagButtion = 1;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <maincontroller+0x2e8>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e017      	b.n	8001774 <maincontroller+0x2f4>
 8001744:	20000000 	.word	0x20000000
 8001748:	200007fc 	.word	0x200007fc
 800174c:	20000806 	.word	0x20000806
 8001750:	08010b70 	.word	0x08010b70
 8001754:	200003c8 	.word	0x200003c8
 8001758:	20000724 	.word	0x20000724
 800175c:	08010b80 	.word	0x08010b80
 8001760:	08010c00 	.word	0x08010c00
 8001764:	20000812 	.word	0x20000812
 8001768:	20000226 	.word	0x20000226
 800176c:	20000224 	.word	0x20000224
 8001770:	20000225 	.word	0x20000225
        dataConfigure(&data);
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <maincontroller+0x36c>)
 8001776:	f00a fb15 	bl	800bda4 <dataConfigure>
    }
    if (ButtionOn == 6 && flagButtion == 1)
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <maincontroller+0x370>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d114      	bne.n	80017ac <maincontroller+0x32c>
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <maincontroller+0x374>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d110      	bne.n	80017ac <maincontroller+0x32c>
    {
        ButtionOn = 0;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <maincontroller+0x370>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
        data.Distance = data.Distance + 0.5;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <maincontroller+0x36c>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fa03 	bl	8000ba4 <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <maincontroller+0x36c>)
 80017a4:	621a      	str	r2, [r3, #32]
        dataConfigure(&data);
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <maincontroller+0x36c>)
 80017a8:	f00a fafc 	bl	800bda4 <dataConfigure>
    }
    if (ButtionOn == 7 && flagButtion == 1)
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <maincontroller+0x370>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d114      	bne.n	80017de <maincontroller+0x35e>
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <maincontroller+0x374>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d110      	bne.n	80017de <maincontroller+0x35e>
    {
        ButtionOn = 0;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <maincontroller+0x370>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
        data.Distance = data.Distance - 0.5;
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <maincontroller+0x36c>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f9e8 	bl	8000ba0 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <maincontroller+0x36c>)
 80017d6:	621a      	str	r2, [r3, #32]
        dataConfigure(&data);
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <maincontroller+0x36c>)
 80017da:	f00a fae3 	bl	800bda4 <dataConfigure>
    }
}
 80017de:	bf00      	nop
 80017e0:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ea:	bf00      	nop
 80017ec:	200003c8 	.word	0x200003c8
 80017f0:	20000812 	.word	0x20000812
 80017f4:	20000226 	.word	0x20000226

080017f8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
uint8_t gettick;
uint8_t time;
uint8_t ButtionOn = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  gettick = HAL_GetTick();
 8001802:	f000 ff39 	bl	8002678 <HAL_GetTick>
 8001806:	4603      	mov	r3, r0
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800180c:	701a      	strb	r2, [r3, #0]
  //if (gettick - time > 20)
  {
    switch (GPIO_PIN)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	2b20      	cmp	r3, #32
 8001812:	dc47      	bgt.n	80018a4 <HAL_GPIO_EXTI_Callback+0xac>
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd63      	ble.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
 8001818:	3b01      	subs	r3, #1
 800181a:	2b1f      	cmp	r3, #31
 800181c:	d860      	bhi.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	080018d9 	.word	0x080018d9
 8001828:	080018d1 	.word	0x080018d1
 800182c:	080018e1 	.word	0x080018e1
 8001830:	080018c9 	.word	0x080018c9
 8001834:	080018e1 	.word	0x080018e1
 8001838:	080018e1 	.word	0x080018e1
 800183c:	080018e1 	.word	0x080018e1
 8001840:	080018c1 	.word	0x080018c1
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e1 	.word	0x080018e1
 800184c:	080018e1 	.word	0x080018e1
 8001850:	080018e1 	.word	0x080018e1
 8001854:	080018e1 	.word	0x080018e1
 8001858:	080018e1 	.word	0x080018e1
 800185c:	080018e1 	.word	0x080018e1
 8001860:	080018b9 	.word	0x080018b9
 8001864:	080018e1 	.word	0x080018e1
 8001868:	080018e1 	.word	0x080018e1
 800186c:	080018e1 	.word	0x080018e1
 8001870:	080018e1 	.word	0x080018e1
 8001874:	080018e1 	.word	0x080018e1
 8001878:	080018e1 	.word	0x080018e1
 800187c:	080018e1 	.word	0x080018e1
 8001880:	080018e1 	.word	0x080018e1
 8001884:	080018e1 	.word	0x080018e1
 8001888:	080018e1 	.word	0x080018e1
 800188c:	080018e1 	.word	0x080018e1
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018e1 	.word	0x080018e1
 8001898:	080018e1 	.word	0x080018e1
 800189c:	080018e1 	.word	0x080018e1
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	2b40      	cmp	r3, #64	; 0x40
 80018a6:	d11b      	bne.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    {
    case BUTTION7:
      ButtionOn = 1;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e017      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION6:
      ButtionOn = 2;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      break;
 80018b6:	e013      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION5:
      ButtionOn = 3;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e00f      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION4:
      ButtionOn = 4;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e00b      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION3:
      ButtionOn = 5;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018ca:	2205      	movs	r2, #5
 80018cc:	701a      	strb	r2, [r3, #0]
      break;
 80018ce:	e007      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION2:
      ButtionOn = 6;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018d2:	2206      	movs	r2, #6
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe8>
    case BUTTION1:
      ButtionOn = 7;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x100>)
 80018da:	2207      	movs	r2, #7
 80018dc:	701a      	strb	r2, [r3, #0]
      break;
 80018de:	bf00      	nop
    }
    time = HAL_GetTick();
 80018e0:	f000 feca 	bl	8002678 <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_GPIO_EXTI_Callback+0x104>)
 80018ea:	701a      	strb	r2, [r3, #0]
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000810 	.word	0x20000810
 80018f8:	20000812 	.word	0x20000812
 80018fc:	20000811 	.word	0x20000811

08001900 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e1b      	ldrb	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d111      	bne.n	8001934 <HAL_TIM_IC_CaptureCallback+0x34>
  {
    data.countTime = evenMode(&data, RUN_TIME);
 8001910:	2102      	movs	r1, #2
 8001912:	480a      	ldr	r0, [pc, #40]	; (800193c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001914:	f00a f8d2 	bl	800babc <evenMode>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_TIM_IC_CaptureCallback+0x3c>)
 800191e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    data.evenMode = countTime(&data, RUN_COUNT);
 8001922:	2100      	movs	r1, #0
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001926:	f00a f8d5 	bl	800bad4 <countTime>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001930:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200003c8 	.word	0x200003c8

08001940 <HAL_UARTEx_RxEventCallback>:

 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
   sim.rxFlag = SIMTRUE;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_UARTEx_RxEventCallback+0x30>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
   SIM_StatusTypeDef status = SIM_BUSY;
 8001952:	2303      	movs	r3, #3
 8001954:	73fb      	strb	r3, [r7, #15]
   HAL_UARTEx_ReceiveToIdle_DMA(sim.UART, (uint8_t *)sim.rxBuffer,
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_UARTEx_RxEventCallback+0x30>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800195e:	4905      	ldr	r1, [pc, #20]	; (8001974 <HAL_UARTEx_RxEventCallback+0x34>)
 8001960:	4618      	mov	r0, r3
 8001962:	f004 f98c 	bl	8005c7e <HAL_UARTEx_ReceiveToIdle_DMA>
                                SIM_BUFFER_SIZE);
 }
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200003f8 	.word	0x200003f8
 8001974:	20000404 	.word	0x20000404

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197c:	f000 fe0a 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001980:	f000 f81c 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001984:	f000 f9e2 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001988:	f000 f9c2 	bl	8001d10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800198c:	f000 f996 	bl	8001cbc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001990:	f000 f878 	bl	8001a84 <MX_RTC_Init>
  MX_SPI1_Init();
 8001994:	f000 f8d0 	bl	8001b38 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001998:	f000 f906 	bl	8001ba8 <MX_SPI3_Init>
  MX_TIM4_Init();
 800199c:	f000 f93a 	bl	8001c14 <MX_TIM4_Init>
  MX_FATFS_Init();
 80019a0:	f005 f92c 	bl	8006bfc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  start();
 80019a4:	f7ff fd48 	bl	8001438 <start>

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80019a8:	2100      	movs	r1, #0
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <main+0x40>)
 80019ac:	f003 fbd0 	bl	8005150 <HAL_TIM_OC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    maincontroller();
 80019b0:	f7ff fd66 	bl	8001480 <maincontroller>
 80019b4:	e7fc      	b.n	80019b0 <main+0x38>
 80019b6:	bf00      	nop
 80019b8:	200002f8 	.word	0x200002f8

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	2234      	movs	r2, #52	; 0x34
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00a fbee 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <SystemClock_Config+0xc4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <SystemClock_Config+0xc4>)
 80019f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f6:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80019f8:	2306      	movs	r3, #6
 80019fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fca5 	bl	8003370 <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a2c:	f000 fa62 	bl	8001ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a34:	2303      	movs	r3, #3
 8001a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 ffc0 	bl	80039d0 <HAL_RCC_ClockConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a56:	f000 fa4d 	bl	8001ef4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a62:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fa36 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001a72:	f000 fa3f 	bl	8001ef4 <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3750      	adds	r7, #80	; 0x50
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <MX_RTC_Init+0xac>)
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <MX_RTC_Init+0xb0>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <MX_RTC_Init+0xac>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_RTC_Init+0xac>)
 8001aaa:	227f      	movs	r2, #127	; 0x7f
 8001aac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <MX_RTC_Init+0xac>)
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_RTC_Init+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_RTC_Init+0xac>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_RTC_Init+0xac>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ac6:	481a      	ldr	r0, [pc, #104]	; (8001b30 <MX_RTC_Init+0xac>)
 8001ac8:	f002 fad4 	bl	8004074 <HAL_RTC_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ad2:	f000 fa0f 	bl	8001ef4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8001ade:	231e      	movs	r3, #30
 8001ae0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	480f      	ldr	r0, [pc, #60]	; (8001b30 <MX_RTC_Init+0xac>)
 8001af2:	f002 fb42 	bl	800417a <HAL_RTC_SetTime>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001afc:	f000 f9fa 	bl	8001ef4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b00:	2301      	movs	r3, #1
 8001b02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b04:	2301      	movs	r3, #1
 8001b06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_RTC_Init+0xac>)
 8001b18:	f002 fc27 	bl	800436a <HAL_RTC_SetDate>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b22:	f000 f9e7 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000228 	.word	0x20000228
 8001b34:	40002800 	.word	0x40002800

08001b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b3e:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <MX_SPI1_Init+0x6c>)
 8001b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b6e:	2228      	movs	r2, #40	; 0x28
 8001b70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b86:	220a      	movs	r2, #10
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_SPI1_Init+0x68>)
 8001b8c:	f002 fd7b 	bl	8004686 <HAL_SPI_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001b96:	f000 f9ad 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000248 	.word	0x20000248
 8001ba4:	40013000 	.word	0x40013000

08001ba8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <MX_SPI3_Init+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bdc:	2218      	movs	r2, #24
 8001bde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_SPI3_Init+0x64>)
 8001bfa:	f002 fd44 	bl	8004686 <HAL_SPI_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c04:	f000 f976 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200002a0 	.word	0x200002a0
 8001c10:	40003c00 	.word	0x40003c00

08001c14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <MX_TIM4_Init+0xa4>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c38:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c5a:	f003 fb5b 	bl	8005314 <HAL_TIM_IC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c64:	f000 f946 	bl	8001ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c78:	f003 fed0 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001c82:	f000 f937 	bl	8001ef4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c86:	2302      	movs	r3, #2
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM4_Init+0xa0>)
 8001c9e:	f003 fc54 	bl	800554a <HAL_TIM_IC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ca8:	f000 f924 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200002f8 	.word	0x200002f8
 8001cb8:	40000800 	.word	0x40000800

08001cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_USART1_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	f003 fef0 	bl	8005ad8 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f000 f8f9 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000338 	.word	0x20000338
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 fda3 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d38:	200f      	movs	r0, #15
 8001d3a:	f000 fdbc 	bl	80028b6 <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a5e      	ldr	r2, [pc, #376]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_Pin|RI_Pin|DETEC_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f248 0106 	movw	r1, #32774	; 0x8006
 8001dc8:	4846      	ldr	r0, [pc, #280]	; (8001ee4 <MX_GPIO_Init+0x198>)
 8001dca:	f001 faa1 	bl	8003310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|RST_SIM_Pin|FLIGHT_Pin|PWRKEY_Pin
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f24f 0198 	movw	r1, #61592	; 0xf098
 8001dd4:	4844      	ldr	r0, [pc, #272]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001dd6:	f001 fa9b 	bl	8003310 <HAL_GPIO_WritePin>
                          |DC_Pin|RST_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2104      	movs	r1, #4
 8001dde:	4843      	ldr	r0, [pc, #268]	; (8001eec <MX_GPIO_Init+0x1a0>)
 8001de0:	f001 fa96 	bl	8003310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8001de4:	2301      	movs	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8001de8:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	483d      	ldr	r0, [pc, #244]	; (8001ef0 <MX_GPIO_Init+0x1a4>)
 8001dfa:	f001 f909 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT3_Pin BT4_Pin BT5_Pin
                           BT6_Pin BT7_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT3_Pin|BT4_Pin|BT5_Pin
 8001dfe:	237e      	movs	r3, #126	; 0x7e
 8001e00:	617b      	str	r3, [r7, #20]
                          |BT6_Pin|BT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4837      	ldr	r0, [pc, #220]	; (8001ef0 <MX_GPIO_Init+0x1a4>)
 8001e14:	f001 f8fc 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_Pin RI_Pin DETEC_Pin */
  GPIO_InitStruct.Pin = DTR_Pin|RI_Pin|DETEC_Pin;
 8001e18:	f248 0306 	movw	r3, #32774	; 0x8006
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	482c      	ldr	r0, [pc, #176]	; (8001ee4 <MX_GPIO_Init+0x198>)
 8001e32:	f001 f8ed 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_Pin RST_SIM_Pin FLIGHT_Pin PWRKEY_Pin
                           DC_Pin RST_Pin CS_Pin */
  GPIO_InitStruct.Pin = PWR_Pin|RST_SIM_Pin|FLIGHT_Pin|PWRKEY_Pin
 8001e36:	f24f 0398 	movw	r3, #61592	; 0xf098
 8001e3a:	617b      	str	r3, [r7, #20]
                          |DC_Pin|RST_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001e50:	f001 f8de 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCS_Pin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8001e54:	2304      	movs	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4820      	ldr	r0, [pc, #128]	; (8001eec <MX_GPIO_Init+0x1a0>)
 8001e6c:	f001 f8d0 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001e70:	2320      	movs	r3, #32
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001e84:	f001 f8c4 	bl	8003010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2007      	movs	r0, #7
 8001e8e:	f000 fcf6 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e92:	2007      	movs	r0, #7
 8001e94:	f000 fd0f 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2008      	movs	r0, #8
 8001e9e:	f000 fcee 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ea2:	2008      	movs	r0, #8
 8001ea4:	f000 fd07 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2009      	movs	r0, #9
 8001eae:	f000 fce6 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001eb2:	2009      	movs	r0, #9
 8001eb4:	f000 fcff 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f000 fcde 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f000 fcf7 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2017      	movs	r0, #23
 8001ece:	f000 fcd6 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed2:	2017      	movs	r0, #23
 8001ed4:	f000 fcef 	bl	80028b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40020800 	.word	0x40020800

08001ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efc:	e7fe      	b.n	8001efc <Error_Handler+0x8>
	...

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_MspInit+0x78>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_MspInit+0x78>)
 8001f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f10:	6253      	str	r3, [r2, #36]	; 0x24
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_MspInit+0x78>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_MspInit+0x78>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <HAL_MspInit+0x78>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_MspInit+0x78>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x78>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x78>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6253      	str	r3, [r2, #36]	; 0x24
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x78>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2004      	movs	r0, #4
 8001f54:	f000 fc93 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001f58:	2004      	movs	r0, #4
 8001f5a:	f000 fcac 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2005      	movs	r0, #5
 8001f64:	f000 fc8b 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f68:	2005      	movs	r0, #5
 8001f6a:	f000 fca4 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_RTC_MspInit+0x24>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d102      	bne.n	8001f94 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RTC_MspInit+0x28>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40002800 	.word	0x40002800
 8001fa4:	424706d8 	.word	0x424706d8

08001fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_SPI_MspInit+0xf8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d130      	bne.n	800202c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ffa:	23a0      	movs	r3, #160	; 0xa0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200a:	2305      	movs	r3, #5
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	4824      	ldr	r0, [pc, #144]	; (80020a8 <HAL_SPI_MspInit+0x100>)
 8002016:	f000 fffb 	bl	8003010 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2023      	movs	r0, #35	; 0x23
 8002020:	f000 fc2d 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002024:	2023      	movs	r0, #35	; 0x23
 8002026:	f000 fc46 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800202a:	e035      	b.n	8002098 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_SPI_MspInit+0x104>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d130      	bne.n	8002098 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 800203c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002040:	6253      	str	r3, [r2, #36]	; 0x24
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_SPI_MspInit+0xfc>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002066:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002078:	2306      	movs	r3, #6
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <HAL_SPI_MspInit+0x108>)
 8002084:	f000 ffc4 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	202f      	movs	r0, #47	; 0x2f
 800208e:	f000 fbf6 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002092:	202f      	movs	r0, #47	; 0x2f
 8002094:	f000 fc0f 	bl	80028b6 <HAL_NVIC_EnableIRQ>
}
 8002098:	bf00      	nop
 800209a:	3730      	adds	r7, #48	; 0x30
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013000 	.word	0x40013000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40003c00 	.word	0x40003c00
 80020b0:	40020800 	.word	0x40020800

080020b4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_TIM_IC_MspInit+0x8c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12f      	bne.n	8002136 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6253      	str	r3, [r2, #36]	; 0x24
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_TIM_IC_MspInit+0x90>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002116:	2302      	movs	r3, #2
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4809      	ldr	r0, [pc, #36]	; (8002148 <HAL_TIM_IC_MspInit+0x94>)
 8002122:	f000 ff75 	bl	8003010 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2101      	movs	r1, #1
 800212a:	201e      	movs	r0, #30
 800212c:	f000 fba7 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002130:	201e      	movs	r0, #30
 8002132:	f000 fbc0 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40000800 	.word	0x40000800
 8002144:	40023800 	.word	0x40023800
 8002148:	40020400 	.word	0x40020400

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_UART_MspInit+0xd8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d156      	bne.n	800221c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_UART_MspInit+0xdc>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <HAL_UART_MspInit+0xdc>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_UART_MspInit+0xdc>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_UART_MspInit+0xdc>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_UART_MspInit+0xdc>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_UART_MspInit+0xdc>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800219e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b0:	2307      	movs	r3, #7
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	481c      	ldr	r0, [pc, #112]	; (800222c <HAL_UART_MspInit+0xe0>)
 80021bc:	f000 ff28 	bl	8003010 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_UART_MspInit+0xe8>)
 80021c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021f0:	480f      	ldr	r0, [pc, #60]	; (8002230 <HAL_UART_MspInit+0xe4>)
 80021f2:	f000 fb7b 	bl	80028ec <HAL_DMA_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80021fc:	f7ff fe7a 	bl	8001ef4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <HAL_UART_MspInit+0xe4>)
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_UART_MspInit+0xe4>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	2025      	movs	r0, #37	; 0x25
 8002212:	f000 fb34 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002216:	2025      	movs	r0, #37	; 0x25
 8002218:	f000 fb4d 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40013800 	.word	0x40013800
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000
 8002230:	20000380 	.word	0x20000380
 8002234:	40026058 	.word	0x40026058

08002238 <SDTimer_Handler>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <SDTimer_Handler+0x3c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <SDTimer_Handler+0x1c>
		Timer1--;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <SDTimer_Handler+0x3c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <SDTimer_Handler+0x3c>)
 8002252:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <SDTimer_Handler+0x40>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <SDTimer_Handler+0x34>
		Timer2--;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SDTimer_Handler+0x40>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <SDTimer_Handler+0x40>)
 800226a:	701a      	strb	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000814 	.word	0x20000814
 8002278:	20000815 	.word	0x20000815

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
	...

080022c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <SysTick_Handler+0x30>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <SysTick_Handler+0x30>)
 80022d0:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <SysTick_Handler+0x30>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d904      	bls.n	80022e6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Handler+0x30>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80022e2:	f7ff ffa9 	bl	8002238 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e6:	f000 f9b5 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000813 	.word	0x20000813

080022f4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80022f8:	f000 fd28 	bl	8002d4c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 8002310:	2002      	movs	r0, #2
 8002312:	f001 f815 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT3_Pin);
 800231e:	2004      	movs	r0, #4
 8002320:	f001 f80e 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT4_Pin);
 800232c:	2008      	movs	r0, #8
 800232e:	f001 f807 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}

08002336 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT5_Pin);
 800233a:	2010      	movs	r0, #16
 800233c:	f001 f800 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DMA1_Channel5_IRQHandler+0x10>)
 800234a:	f000 fc21 	bl	8002b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000380 	.word	0x20000380

08002358 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT6_Pin);
 800235c:	2020      	movs	r0, #32
 800235e:	f000 ffef 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT7_Pin);
 8002362:	2040      	movs	r0, #64	; 0x40
 8002364:	f000 ffec 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM4_IRQHandler+0x10>)
 8002372:	f003 f80e 	bl	8005392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200002f8 	.word	0x200002f8

08002380 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <SPI1_IRQHandler+0x10>)
 8002386:	f002 fcfb 	bl	8004d80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000248 	.word	0x20000248

08002394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USART1_IRQHandler+0x10>)
 800239a:	f003 fccd 	bl	8005d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000338 	.word	0x20000338

080023a8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <SPI3_IRQHandler+0x10>)
 80023ae:	f002 fce7 	bl	8004d80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200002a0 	.word	0x200002a0

080023bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <_kill>:

int _kill(int pid, int sig)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023d4:	f009 feaa 	bl	800c12c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	2216      	movs	r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
  return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_exit>:

void _exit (int status)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023f2:	f04f 31ff 	mov.w	r1, #4294967295
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffe7 	bl	80023ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80023fc:	e7fe      	b.n	80023fc <_exit+0x12>

080023fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e00a      	b.n	8002426 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002410:	f3af 8000 	nop.w
 8002414:	4601      	mov	r1, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	60ba      	str	r2, [r7, #8]
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	dbf0      	blt.n	8002410 <_read+0x12>
  }

  return len;
 800242e:	687b      	ldr	r3, [r7, #4]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e009      	b.n	800245e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	60ba      	str	r2, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbf1      	blt.n	800244a <_write+0x12>
  }
  return len;
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_close>:

int _close(int file)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
     __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f009 fe14 	bl	800c12c <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20008000 	.word	0x20008000
 8002530:	00000800 	.word	0x00000800
 8002534:	20000818 	.word	0x20000818
 8002538:	200013d0 	.word	0x200013d0

0800253c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
	    bl  SystemInit
 8002548:	f7ff fff8 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800254e:	490c      	ldr	r1, [pc, #48]	; (8002580 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002550:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002564:	4c09      	ldr	r4, [pc, #36]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002572:	f009 fde1 	bl	800c138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002576:	f7ff f9ff 	bl	8001978 <main>
  bx lr
 800257a:	4770      	bx	lr
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002584:	080125a4 	.word	0x080125a4
  ldr r2, =_sbss
 8002588:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800258c:	200013d0 	.word	0x200013d0

08002590 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_IRQHandler>
	...

08002594 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	71fb      	strb	r3, [r7, #7]

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_Init+0x48>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_Init+0x48>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_Init+0x48>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_Init+0x48>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f000 f956 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025bc:	2000      	movs	r0, #0
 80025be:	f000 f80f 	bl	80025e0 <HAL_InitTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_Init+0x3a>
  {
    status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	e001      	b.n	80025d2 <HAL_Init+0x3e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ce:	f7ff fc97 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_InitTick+0x68>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_InitTick+0x6c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_InitTick+0x68>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002600:	fbb1 f3f3 	udiv	r3, r1, r3
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f962 	bl	80028d2 <HAL_SYSTICK_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	d809      	bhi.n	800262e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800261a:	2200      	movs	r2, #0
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	f04f 30ff 	mov.w	r0, #4294967295
 8002622:	f000 f92c 	bl	800287e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_InitTick+0x70>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e007      	b.n	800263e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e004      	b.n	800263e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000000c 	.word	0x2000000c
 800264c:	20000004 	.word	0x20000004
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_IncTick+0x1c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_IncTick+0x20>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_IncTick+0x1c>)
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000081c 	.word	0x2000081c
 8002674:	2000000c 	.word	0x2000000c

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <HAL_GetTick+0x10>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	2000081c 	.word	0x2000081c

0800268c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff fff0 	bl	8002678 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d004      	beq.n	80026b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_Delay+0x40>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026b0:	bf00      	nop
 80026b2:	f7ff ffe1 	bl	8002678 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d8f7      	bhi.n	80026b2 <HAL_Delay+0x26>
  {
  }
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4906      	ldr	r1, [pc, #24]	; (8002768 <__NVIC_EnableIRQ+0x34>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff90 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff2d 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff42 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff90 	bl	80027c0 <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5f 	bl	800276c <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff35 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffa2 	bl	8002824 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e059      	b.n	80029b2 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_DMA_Init+0xd0>)
 8002906:	429a      	cmp	r2, r3
 8002908:	d80f      	bhi.n	800292a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_DMA_Init+0xd4>)
 8002912:	4413      	add	r3, r2
 8002914:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <HAL_DMA_Init+0xd8>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	009a      	lsls	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_DMA_Init+0xdc>)
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
 8002928:	e00e      	b.n	8002948 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_DMA_Init+0xe0>)
 8002932:	4413      	add	r3, r2
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_DMA_Init+0xd8>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_DMA_Init+0xe4>)
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40026407 	.word	0x40026407
 80029c0:	bffd9ff8 	.word	0xbffd9ff8
 80029c4:	cccccccd 	.word	0xcccccccd
 80029c8:	40026000 	.word	0x40026000
 80029cc:	bffd9bf8 	.word	0xbffd9bf8
 80029d0:	40026400 	.word	0x40026400

080029d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e04b      	b.n	8002a8c <HAL_DMA_Start_IT+0xb8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13a      	bne.n	8002a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f95e 	bl	8002cee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 020e 	orr.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00f      	b.n	8002a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 020e 	bic.w	r2, r2, #14
 8002acc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 021c 	and.w	r2, r3, #28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d005      	beq.n	8002b32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e029      	b.n	8002b86 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020e 	bic.w	r2, r2, #14
 8002b40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 021c 	and.w	r2, r3, #28
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
    }
  }
  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f003 031c 	and.w	r3, r3, #28
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d026      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x7a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d021      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0204 	bic.w	r2, r2, #4
 8002be2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f003 021c 	and.w	r2, r3, #28
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d071      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	e06c      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 031c 	and.w	r3, r3, #28
 8002c12:	2202      	movs	r2, #2
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02e      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xec>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d029      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 020a 	bic.w	r2, r2, #10
 8002c44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 021c 	and.w	r2, r3, #28
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d038      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c7a:	e033      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 031c 	and.w	r3, r3, #28
 8002c84:	2208      	movs	r2, #8
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02a      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x156>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d025      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 020e 	bic.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 021c 	and.w	r2, r3, #28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
}
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f003 021c 	and.w	r2, r3, #28
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d108      	bne.n	8002d32 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d30:	e007      	b.n	8002d42 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	60da      	str	r2, [r3, #12]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d62:	d022      	beq.n	8002daa <HAL_FLASH_IRQHandler+0x5e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002d64:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d01b      	beq.n	8002daa <HAL_FLASH_IRQHandler+0x5e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d014      	beq.n	8002daa <HAL_FLASH_IRQHandler+0x5e>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d00d      	beq.n	8002daa <HAL_FLASH_IRQHandler+0x5e>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d006      	beq.n	8002daa <HAL_FLASH_IRQHandler+0x5e>
#endif /* FLASH_SR_OPTVERRUSR */
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) )
 8002d9c:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8002da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da8:	d117      	bne.n	8002dda <HAL_FLASH_IRQHandler+0x8e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d107      	bne.n	8002dc4 <HAL_FLASH_IRQHandler+0x78>
    {
      /* Return the faulty sector */
      addresstmp = pFlash.Page;
 8002db4:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	607b      	str	r3, [r7, #4]
      pFlash.Page = 0xFFFFFFFFU;
 8002dba:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e002      	b.n	8002dca <HAL_FLASH_IRQHandler+0x7e>
    }
    else
    {
      /* Return the faulty address */
      addresstmp = pFlash.Address;
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	607b      	str	r3, [r7, #4]
    }
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002dca:	f000 f887 	bl	8002edc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f87b 	bl	8002eca <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d14c      	bne.n	8002e80 <HAL_FLASH_IRQHandler+0x134>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002de6:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002de8:	2202      	movs	r2, #2
 8002dea:	619a      	str	r2, [r3, #24]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d044      	beq.n	8002e80 <HAL_FLASH_IRQHandler+0x134>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d12d      	bne.n	8002e5c <HAL_FLASH_IRQHandler+0x110>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.NbPagesToErase--;
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e08:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.NbPagesToErase != 0U)
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d017      	beq.n	8002e42 <HAL_FLASH_IRQHandler+0xf6>
        {
          addresstmp = pFlash.Page;
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f84d 	bl	8002eb8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Page + FLASH_PAGE_SIZE;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e26:	607b      	str	r3, [r7, #4]
          pFlash.Page = addresstmp;
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60d3      	str	r3, [r2, #12]

          /* If the erase operation is completed, disable the ERASE Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e38:	6053      	str	r3, [r2, #4]

          FLASH_PageErase(addresstmp);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8c6 	bl	8002fcc <FLASH_PageErase>
 8002e40:	e01e      	b.n	8002e80 <HAL_FLASH_IRQHandler+0x134>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Page = addresstmp = 0xFFFFFFFFU;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60d3      	str	r3, [r2, #12]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f82f 	bl	8002eb8 <HAL_FLASH_EndOfOperationCallback>
 8002e5a:	e011      	b.n	8002e80 <HAL_FLASH_IRQHandler+0x134>
        }
      }
      else
      {
          /* If the program operation is completed, disable the PROG Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e62:	f023 0308 	bic.w	r3, r3, #8
 8002e66:	6053      	str	r3, [r2, #4]

          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f823 	bl	8002eb8 <HAL_FLASH_EndOfOperationCallback>
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_FLASH_IRQHandler+0x15c>
  {
    /* Operation is completed, disable the PROG and ERASE */
    CLEAR_BIT(FLASH->PECR, (FLASH_PECR_ERASE | FLASH_PECR_PROG));
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e90:	f423 7302 	bic.w	r3, r3, #520	; 0x208
 8002e94:	6053      	str	r3, [r2, #4]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <HAL_FLASH_IRQHandler+0x164>)
 8002e9c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ea0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <HAL_FLASH_IRQHandler+0x168>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	741a      	strb	r2, [r3, #16]
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	20000820 	.word	0x20000820

08002eb8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef2:	d109      	bne.n	8002f08 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002efe:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002f08:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d109      	bne.n	8002f2a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f20:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f28:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f36:	d109      	bne.n	8002f4c <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f42:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f4a:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f58:	d109      	bne.n	8002f6e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f64:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f6c:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d109      	bne.n	8002f90 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f043 0320 	orr.w	r3, r3, #32
 8002f84:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002f86:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f8e:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d109      	bne.n	8002fb2 <FLASH_SetErrorCode+0xd6>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <FLASH_SetErrorCode+0xec>)
 8002fa8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <FLASH_SetErrorCode+0xe8>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6193      	str	r3, [r2, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	20000820 	.word	0x20000820

08002fcc <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <FLASH_PageErase+0x3c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <FLASH_PageErase+0x40>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <FLASH_PageErase+0x40>)
 8002fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe4:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <FLASH_PageErase+0x40>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <FLASH_PageErase+0x40>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	20000820 	.word	0x20000820
 800300c:	40023c00 	.word	0x40023c00

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003026:	e154      	b.n	80032d2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8146 	beq.w	80032cc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d005      	beq.n	8003058 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d130      	bne.n	80030ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0201 	and.w	r2, r3, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d017      	beq.n	80030f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d123      	bne.n	800314a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	08da      	lsrs	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3208      	adds	r2, #8
 800310a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	6939      	ldr	r1, [r7, #16]
 8003146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	2203      	movs	r2, #3
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0203 	and.w	r2, r3, #3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80a0 	beq.w	80032cc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318c:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_GPIO_Init+0x2e0>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a57      	ldr	r2, [pc, #348]	; (80032f0 <HAL_GPIO_Init+0x2e0>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_GPIO_Init+0x2e0>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80031a4:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <HAL_GPIO_Init+0x2e4>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	220f      	movs	r2, #15
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_GPIO_Init+0x2e8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d019      	beq.n	8003204 <HAL_GPIO_Init+0x1f4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <HAL_GPIO_Init+0x2ec>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_GPIO_Init+0x1f0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_GPIO_Init+0x2f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00d      	beq.n	80031fc <HAL_GPIO_Init+0x1ec>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x2f4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <HAL_GPIO_Init+0x1e8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_GPIO_Init+0x2f8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_GPIO_Init+0x1e4>
 80031f0:	2304      	movs	r3, #4
 80031f2:	e008      	b.n	8003206 <HAL_GPIO_Init+0x1f6>
 80031f4:	2305      	movs	r3, #5
 80031f6:	e006      	b.n	8003206 <HAL_GPIO_Init+0x1f6>
 80031f8:	2303      	movs	r3, #3
 80031fa:	e004      	b.n	8003206 <HAL_GPIO_Init+0x1f6>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_Init+0x1f6>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_GPIO_Init+0x1f6>
 8003204:	2300      	movs	r3, #0
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003216:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_GPIO_Init+0x2e4>)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_GPIO_Init+0x2fc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003248:	4a30      	ldr	r2, [pc, #192]	; (800330c <HAL_GPIO_Init+0x2fc>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_GPIO_Init+0x2fc>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003272:	4a26      	ldr	r2, [pc, #152]	; (800330c <HAL_GPIO_Init+0x2fc>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_GPIO_Init+0x2fc>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_GPIO_Init+0x2fc>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_GPIO_Init+0x2fc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032c6:	4a11      	ldr	r2, [pc, #68]	; (800330c <HAL_GPIO_Init+0x2fc>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f47f aea3 	bne.w	8003028 <HAL_GPIO_Init+0x18>
  }
}
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	4613      	mov	r3, r2
 800331e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003320:	787b      	ldrb	r3, [r7, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800332c:	e003      	b.n	8003336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fa4a 	bl	80017f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e31d      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	4b94      	ldr	r3, [pc, #592]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800338c:	4b91      	ldr	r3, [pc, #580]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d07b      	beq.n	800349a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x5e>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d10b      	bne.n	80033ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b6:	4b87      	ldr	r3, [pc, #540]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06a      	beq.n	8003498 <HAL_RCC_OscConfig+0x128>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d166      	bne.n	8003498 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e2f7      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e02d      	b.n	8003440 <HAL_RCC_OscConfig+0xd0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10c      	bne.n	8003406 <HAL_RCC_OscConfig+0x96>
 80033ec:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a78      	ldr	r2, [pc, #480]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a75      	ldr	r2, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0xd0>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b05      	cmp	r3, #5
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0xb8>
 800340e:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xd0>
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a69      	ldr	r2, [pc, #420]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff f916 	bl	8002678 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7ff f912 	bl	8002678 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e2ad      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7ff f902 	bl	8002678 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7ff f8fe 	bl	8002678 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e299      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05a      	beq.n	800355c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_OscConfig+0x176>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x160>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e276      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	493d      	ldr	r1, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e4:	e03a      	b.n	800355c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d020      	beq.n	8003530 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ee:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <HAL_RCC_OscConfig+0x268>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff f8c0 	bl	8002678 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fc:	f7ff f8bc 	bl	8002678 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e257      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	492a      	ldr	r1, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
 800352e:	e015      	b.n	800355c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_OscConfig+0x268>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff f89f 	bl	8002678 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353e:	f7ff f89b 	bl	8002678 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e236      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003550:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80b8 	beq.w	80036da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d170      	bne.n	8003652 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x218>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e21a      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003594:	429a      	cmp	r2, r3
 8003596:	d921      	bls.n	80035dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fc3b 	bl	8003e18 <RCC_SetFlashLatencyFromMSIRange>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e208      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4906      	ldr	r1, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	4901      	ldr	r1, [pc, #4]	; (80035d4 <HAL_RCC_OscConfig+0x264>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
 80035d2:	e020      	b.n	8003616 <HAL_RCC_OscConfig+0x2a6>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035dc:	4b99      	ldr	r3, [pc, #612]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4996      	ldr	r1, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ee:	4b95      	ldr	r3, [pc, #596]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	4991      	ldr	r1, [pc, #580]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fc06 	bl	8003e18 <RCC_SetFlashLatencyFromMSIRange>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1d3      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	3301      	adds	r3, #1
 800361e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003626:	4a87      	ldr	r2, [pc, #540]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	0912      	lsrs	r2, r2, #4
 800362c:	f002 020f 	and.w	r2, r2, #15
 8003630:	4985      	ldr	r1, [pc, #532]	; (8003848 <HAL_RCC_OscConfig+0x4d8>)
 8003632:	5c8a      	ldrb	r2, [r1, r2]
 8003634:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003636:	4a85      	ldr	r2, [pc, #532]	; (800384c <HAL_RCC_OscConfig+0x4dc>)
 8003638:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800363a:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCC_OscConfig+0x4e0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe ffce 	bl	80025e0 <HAL_InitTick>
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d045      	beq.n	80036da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	e1b5      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d029      	beq.n	80036ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800365a:	4b7e      	ldr	r3, [pc, #504]	; (8003854 <HAL_RCC_OscConfig+0x4e4>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff f80a 	bl	8002678 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003668:	f7ff f806 	bl	8002678 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1a1      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800367a:	4b72      	ldr	r3, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003686:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	496c      	ldr	r1, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4967      	ldr	r1, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e015      	b.n	80036da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ae:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCC_OscConfig+0x4e4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe ffe0 	bl	8002678 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036bc:	f7fe ffdc 	bl	8002678 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e177      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d030      	beq.n	8003748 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b5a      	ldr	r3, [pc, #360]	; (8003858 <HAL_RCC_OscConfig+0x4e8>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f4:	f7fe ffc0 	bl	8002678 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe ffbc 	bl	8002678 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e157      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x38c>
 800371a:	e015      	b.n	8003748 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371c:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe ffa9 	bl	8002678 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe ffa5 	bl	8002678 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e140      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80b5 	beq.w	80038c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	4a36      	ldr	r2, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6253      	str	r3, [r2, #36]	; 0x24
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b33      	ldr	r3, [pc, #204]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe ff6d 	bl	8002678 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe ff69 	bl	8002678 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e104      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x466>
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d2:	6353      	str	r3, [r2, #52]	; 0x34
 80037d4:	e02d      	b.n	8003832 <HAL_RCC_OscConfig+0x4c2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x488>
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	6353      	str	r3, [r2, #52]	; 0x34
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 80037f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f4:	6353      	str	r3, [r2, #52]	; 0x34
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x4c2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x4aa>
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	6353      	str	r3, [r2, #52]	; 0x34
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6353      	str	r3, [r2, #52]	; 0x34
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x4c2>
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003824:	6353      	str	r3, [r2, #52]	; 0x34
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x4d4>)
 800382c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003830:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7fe ff1d 	bl	8002678 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003840:	e019      	b.n	8003876 <HAL_RCC_OscConfig+0x506>
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	080110b0 	.word	0x080110b0
 800384c:	20000004 	.word	0x20000004
 8003850:	20000008 	.word	0x20000008
 8003854:	42470020 	.word	0x42470020
 8003858:	42470680 	.word	0x42470680
 800385c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe ff0a 	bl	8002678 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0a3      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x4f0>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe fef8 	bl	8002678 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fef4 	bl	8002678 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e08d      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d079      	beq.n	80039bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d056      	beq.n	800397c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d13b      	bne.n	800394e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_RCC_OscConfig+0x65c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fecc 	bl	8002678 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fec8 	bl	8002678 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e063      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4319      	orrs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	430b      	orrs	r3, r1
 800391a:	492b      	ldr	r1, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <HAL_RCC_OscConfig+0x65c>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fea7 	bl	8002678 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fea3 	bl	8002678 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03e      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x5be>
 800394c:	e036      	b.n	80039bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_RCC_OscConfig+0x65c>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fe90 	bl	8002678 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fe8c 	bl	8002678 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e027      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x5ec>
 800397a:	e01f      	b.n	80039bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e01a      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_OscConfig+0x658>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	429a      	cmp	r2, r3
 800399a:	d10d      	bne.n	80039b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470060 	.word	0x42470060

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e11a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b8f      	ldr	r3, [pc, #572]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d919      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x34>
 80039f8:	4b8a      	ldr	r3, [pc, #552]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a89      	ldr	r2, [pc, #548]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b87      	ldr	r3, [pc, #540]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 0201 	bic.w	r2, r3, #1
 8003a0c:	4985      	ldr	r1, [pc, #532]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a14:	4b83      	ldr	r3, [pc, #524]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0f9      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a32:	4b7d      	ldr	r3, [pc, #500]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	497a      	ldr	r1, [pc, #488]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 808e 	beq.w	8003b6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a5a:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d121      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0d7      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0cb      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a8a:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0bf      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0b7      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	495c      	ldr	r1, [pc, #368]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fe fddc 	bl	8002678 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d112      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fdd4 	bl	8002678 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e09b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae2:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d1ee      	bne.n	8003acc <HAL_RCC_ClockConfig+0xfc>
 8003aee:	e03e      	b.n	8003b6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d112      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f7fe fdbd 	bl	8002678 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e084      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_ClockConfig+0x12a>
 8003b1c:	e027      	b.n	8003b6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d11d      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fe fda6 	bl	8002678 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e06d      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x158>
 8003b4a:	e010      	b.n	8003b6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe fd94 	bl	8002678 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e05b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ee      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6e:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d219      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x1be>
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	4923      	ldr	r1, [pc, #140]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCC_ClockConfig+0x254>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e034      	b.n	8003c1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4917      	ldr	r1, [pc, #92]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bee:	f000 f823 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCC_ClockConfig+0x258>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	490b      	ldr	r1, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	5ccb      	ldrb	r3, [r1, r3]
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fce6 	bl	80025e0 <HAL_InitTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c18:	7afb      	ldrb	r3, [r7, #11]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	080110b0 	.word	0x080110b0
 8003c30:	20000004 	.word	0x20000004
 8003c34:	20000008 	.word	0x20000008

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b08e      	sub	sp, #56	; 0x38
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c40:	4b58      	ldr	r3, [pc, #352]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	f200 8092 	bhi.w	8003d7a <HAL_RCC_GetSysClockFreq+0x142>
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x28>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x2e>
 8003c5e:	e08c      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x170>)
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c64:	e097      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_GetSysClockFreq+0x174>)
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c6a:	e094      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	0c9b      	lsrs	r3, r3, #18
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x178>)
 8003c76:	5c9b      	ldrb	r3, [r3, r2]
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	0d9b      	lsrs	r3, r3, #22
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d021      	beq.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	2200      	movs	r2, #0
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_GetSysClockFreq+0x174>)
 8003c9c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003ca0:	464a      	mov	r2, r9
 8003ca2:	fb03 f202 	mul.w	r2, r3, r2
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4644      	mov	r4, r8
 8003caa:	fb04 f303 	mul.w	r3, r4, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a3e      	ldr	r2, [pc, #248]	; (8003dac <HAL_RCC_GetSysClockFreq+0x174>)
 8003cb2:	4644      	mov	r4, r8
 8003cb4:	fba4 0102 	umull	r0, r1, r4, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	617a      	str	r2, [r7, #20]
 8003cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cc8:	f7fd f9c4 	bl	8001054 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	e04e      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	2200      	movs	r2, #0
 8003cda:	469a      	mov	sl, r3
 8003cdc:	4693      	mov	fp, r2
 8003cde:	4652      	mov	r2, sl
 8003ce0:	465b      	mov	r3, fp
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf0:	0150      	lsls	r0, r2, #5
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d12:	ebb2 0408 	subs.w	r4, r2, r8
 8003d16:	eb63 0509 	sbc.w	r5, r3, r9
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	00eb      	lsls	r3, r5, #3
 8003d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d28:	00e2      	lsls	r2, r4, #3
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	eb14 030a 	adds.w	r3, r4, sl
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	eb45 030b 	adc.w	r3, r5, fp
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4604      	mov	r4, r0
 8003d50:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003d54:	4601      	mov	r1, r0
 8003d56:	028a      	lsls	r2, r1, #10
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	60fa      	str	r2, [r7, #12]
 8003d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d68:	f7fd f974 	bl	8001054 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d78:	e00d      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3738      	adds	r7, #56	; 0x38
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	016e3600 	.word	0x016e3600
 8003db0:	080110a4 	.word	0x080110a4

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dcc:	f7ff fff2 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40023800 	.word	0x40023800
 8003dec:	080110c0 	.word	0x080110c0

08003df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df4:	f7ff ffde 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0adb      	lsrs	r3, r3, #11
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	080110c0 	.word	0x080110c0

08003e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e24:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d12c      	bne.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e30:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e016      	b.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6253      	str	r3, [r2, #36]	; 0x24
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003e68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003e7c:	d105      	bne.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e84:	d101      	bne.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e86:	2301      	movs	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0201 	bic.w	r2, r3, #1
 8003ea4:	490b      	ldr	r1, [pc, #44]	; (8003ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	40023c00 	.word	0x40023c00

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80b8 	beq.w	800405e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	4a59      	ldr	r2, [pc, #356]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6253      	str	r3, [r2, #36]	; 0x24
 8003f0a:	4b57      	ldr	r3, [pc, #348]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b54      	ldr	r3, [pc, #336]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fba1 	bl	8002678 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe fb9d 	bl	8002678 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	; 0x64
 8003f46:	d901      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e089      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f58:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003f60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d00f      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f7c:	d108      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f7e:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e067      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d034      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d02d      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d027      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fba:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fc2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fca:	4b29      	ldr	r3, [pc, #164]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003fd0:	4a25      	ldr	r2, [pc, #148]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d014      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fb4a 	bl	8002678 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fb46 	bl	8002678 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e030      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800401e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004022:	d10a      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004034:	490c      	ldr	r1, [pc, #48]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800403c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004048:	4313      	orrs	r3, r2
 800404a:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405c:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
 8004070:	424706dc 	.word	0x424706dc

08004074 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e073      	b.n	8004172 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7f5b      	ldrb	r3, [r3, #29]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd ff6e 	bl	8001f7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d055      	beq.n	8004160 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	22ca      	movs	r2, #202	; 0xca
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2253      	movs	r2, #83	; 0x53
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa48 	bl	800455a <RTC_EnterInitMode>
 80040ca:	4603      	mov	r3, r0
 80040cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d12c      	bne.n	800412e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6919      	ldr	r1, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa4f 	bl	80045c8 <RTC_ExitInitMode>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d110      	bne.n	8004156 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	22ff      	movs	r2, #255	; 0xff
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
 800415e:	e001      	b.n	8004164 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800417a:	b590      	push	{r4, r7, lr}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	7f1b      	ldrb	r3, [r3, #28]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_RTC_SetTime+0x1c>
 8004192:	2302      	movs	r3, #2
 8004194:	e087      	b.n	80042a6 <HAL_RTC_SetTime+0x12c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2202      	movs	r2, #2
 80041a0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d126      	bne.n	80041f6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fa26 	bl	8004612 <RTC_ByteToBcd2>
 80041c6:	4603      	mov	r3, r0
 80041c8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fa1f 	bl	8004612 <RTC_ByteToBcd2>
 80041d4:	4603      	mov	r3, r0
 80041d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041d8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	789b      	ldrb	r3, [r3, #2]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa17 	bl	8004612 <RTC_ByteToBcd2>
 80041e4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e018      	b.n	8004228 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004216:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800421c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ca      	movs	r2, #202	; 0xca
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2253      	movs	r2, #83	; 0x53
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f98e 	bl	800455a <RTC_EnterInitMode>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d120      	bne.n	800428a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004252:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004266:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9a1 	bl	80045c8 <RTC_ExitInitMode>
 8004286:	4603      	mov	r3, r0
 8004288:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]

  return status;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}

080042ae <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	0d9b      	lsrs	r3, r3, #22
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11a      	bne.n	8004360 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f98c 	bl	800464c <RTC_Bcd2ToByte>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f983 	bl	800464c <RTC_Bcd2ToByte>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	789b      	ldrb	r3, [r3, #2]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f97a 	bl	800464c <RTC_Bcd2ToByte>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800436a:	b590      	push	{r4, r7, lr}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	7f1b      	ldrb	r3, [r3, #28]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_RTC_SetDate+0x1c>
 8004382:	2302      	movs	r3, #2
 8004384:	e071      	b.n	800446a <HAL_RTC_SetDate+0x100>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2202      	movs	r2, #2
 8004390:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10e      	bne.n	80043b6 <HAL_RTC_SetDate+0x4c>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	f023 0310 	bic.w	r3, r3, #16
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	330a      	adds	r3, #10
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11c      	bne.n	80043f6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	78db      	ldrb	r3, [r3, #3]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f926 	bl	8004612 <RTC_ByteToBcd2>
 80043c6:	4603      	mov	r3, r0
 80043c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f91f 	bl	8004612 <RTC_ByteToBcd2>
 80043d4:	4603      	mov	r3, r0
 80043d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	789b      	ldrb	r3, [r3, #2]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f917 	bl	8004612 <RTC_ByteToBcd2>
 80043e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e00e      	b.n	8004414 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004402:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004408:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	22ca      	movs	r2, #202	; 0xca
 800441a:	625a      	str	r2, [r3, #36]	; 0x24
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2253      	movs	r2, #83	; 0x53
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f898 	bl	800455a <RTC_EnterInitMode>
 800442a:	4603      	mov	r3, r0
 800442c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004442:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f8bf 	bl	80045c8 <RTC_ExitInitMode>
 800444a:	4603      	mov	r3, r0
 800444c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]

  return status;
 8004468:	7cfb      	ldrb	r3, [r7, #19]
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}

08004472 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004490:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	0b5b      	lsrs	r3, r3, #13
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11a      	bne.n	8004506 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	78db      	ldrb	r3, [r3, #3]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f8b9 	bl	800464c <RTC_Bcd2ToByte>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8b0 	bl	800464c <RTC_Bcd2ToByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	789b      	ldrb	r3, [r3, #2]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 f8a7 	bl	800464c <RTC_Bcd2ToByte>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f64f 7257 	movw	r2, #65367	; 0xff57
 8004524:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004526:	f7fe f8a7 	bl	8002678 <HAL_GetTick>
 800452a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800452c:	e009      	b.n	8004542 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800452e:	f7fe f8a3 	bl	8002678 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453c:	d901      	bls.n	8004542 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e007      	b.n	8004552 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d122      	bne.n	80045be <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004588:	f7fe f876 	bl	8002678 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800458e:	e00c      	b.n	80045aa <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004590:	f7fe f872 	bl	8002678 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459e:	d904      	bls.n	80045aa <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2204      	movs	r2, #4
 80045a4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <RTC_EnterInitMode+0x64>
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d1e8      	bne.n	8004590 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e2:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ff8c 	bl	8004510 <HAL_RTC_WaitForSynchro>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004620:	e005      	b.n	800462e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	3b0a      	subs	r3, #10
 800462c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d8f6      	bhi.n	8004622 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	b2da      	uxtb	r2, r3
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4313      	orrs	r3, r2
 8004640:	b2db      	uxtb	r3, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4413      	add	r3, r2
 800467a:	b2db      	uxtb	r3, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e07b      	b.n	8004790 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a8:	d009      	beq.n	80046be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	61da      	str	r2, [r3, #28]
 80046b0:	e005      	b.n	80046be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fd fc65 	bl	8001fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	ea42 0103 	orr.w	r1, r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0104 	and.w	r1, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0210 	and.w	r2, r3, #16
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_SPI_Transmit+0x22>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e12d      	b.n	8004a16 <HAL_SPI_Transmit+0x27e>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c2:	f7fd ff59 	bl	8002678 <HAL_GetTick>
 80047c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
 80047da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047dc:	e116      	b.n	8004a0c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_Transmit+0x52>
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ee:	e10d      	b.n	8004a0c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2203      	movs	r2, #3
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004836:	d10f      	bne.n	8004858 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004856:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d007      	beq.n	8004876 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487e:	d14f      	bne.n	8004920 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_SPI_Transmit+0xf6>
 8004888:	8afb      	ldrh	r3, [r7, #22]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d142      	bne.n	8004914 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	1c9a      	adds	r2, r3, #2
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048b2:	e02f      	b.n	8004914 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d112      	bne.n	80048e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	881a      	ldrh	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80048e6:	e015      	b.n	8004914 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e8:	f7fd fec6 	bl	8002678 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d803      	bhi.n	8004900 <HAL_SPI_Transmit+0x168>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d102      	bne.n	8004906 <HAL_SPI_Transmit+0x16e>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004912:	e07b      	b.n	8004a0c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ca      	bne.n	80048b4 <HAL_SPI_Transmit+0x11c>
 800491e:	e050      	b.n	80049c2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x196>
 8004928:	8afb      	ldrh	r3, [r7, #22]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d144      	bne.n	80049b8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004954:	e030      	b.n	80049b8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d113      	bne.n	800498c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	86da      	strh	r2, [r3, #54]	; 0x36
 800498a:	e015      	b.n	80049b8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498c:	f7fd fe74 	bl	8002678 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d803      	bhi.n	80049a4 <HAL_SPI_Transmit+0x20c>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d102      	bne.n	80049aa <HAL_SPI_Transmit+0x212>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049b6:	e029      	b.n	8004a0c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1c9      	bne.n	8004956 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fb80 	bl	80050cc <SPI_EndRxTxTransaction>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e003      	b.n	8004a0c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08c      	sub	sp, #48	; 0x30
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x26>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e198      	b.n	8004d76 <HAL_SPI_TransmitReceive+0x358>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fd fe14 	bl	8002678 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d00f      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x70>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a74:	d107      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x68>
 8004a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d003      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a8c:	e16d      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x82>
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aa6:	e160      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d003      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2205      	movs	r2, #5
 8004ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	887a      	ldrh	r2, [r7, #2]
 8004ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d007      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b18:	d17c      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x10a>
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d16a      	bne.n	8004bfe <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4c:	e057      	b.n	8004bfe <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d11b      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d113      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d119      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x1b8>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d014      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bd6:	f7fd fd4f 	bl	8002678 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d80b      	bhi.n	8004bfe <HAL_SPI_TransmitReceive+0x1e0>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d007      	beq.n	8004bfe <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004bfc:	e0b5      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1a2      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x130>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d19d      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x130>
 8004c12:	e080      	b.n	8004d16 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x204>
 8004c1c:	8b7b      	ldrh	r3, [r7, #26]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d16f      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c48:	e05b      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d11c      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x274>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d017      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x274>
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d114      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d119      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x2b6>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cd4:	f7fd fcd0 	bl	8002678 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d803      	bhi.n	8004cec <HAL_SPI_TransmitReceive+0x2ce>
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d4>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d107      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d00:	e033      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d19e      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x22c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d199      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f9d6 	bl	80050cc <SPI_EndRxTxTransaction>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d006      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d32:	e01a      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d60:	e003      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3730      	adds	r7, #48	; 0x30
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	099b      	lsrs	r3, r3, #6
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
    return;
 8004dc2:	e0d7      	b.n	8004f74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_SPI_IRQHandler+0x66>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	09db      	lsrs	r3, r3, #7
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
    return;
 8004de4:	e0c6      	b.n	8004f74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10c      	bne.n	8004e0c <HAL_SPI_IRQHandler+0x8c>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	099b      	lsrs	r3, r3, #6
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80b4 	beq.w	8004f74 <HAL_SPI_IRQHandler+0x1f4>
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80ad 	beq.w	8004f74 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d023      	beq.n	8004e6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d011      	beq.n	8004e56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f043 0204 	orr.w	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	e00b      	b.n	8004e6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	693b      	ldr	r3, [r7, #16]
        return;
 8004e6c:	e082      	b.n	8004f74 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d014      	beq.n	8004ea4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0208 	orr.w	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04f      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ee0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <HAL_SPI_IRQHandler+0x17e>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d034      	beq.n	8004f68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0203 	bic.w	r2, r2, #3
 8004f0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_SPI_IRQHandler+0x1fc>)
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd fdf3 	bl	8002b0e <HAL_DMA_Abort_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <HAL_SPI_IRQHandler+0x1fc>)
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fd fddd 	bl	8002b0e <HAL_DMA_Abort_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f66:	e003      	b.n	8004f70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f809 	bl	8004f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f6e:	e000      	b.n	8004f72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f70:	bf00      	nop
    return;
 8004f72:	bf00      	nop
  }
}
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08004f93 	.word	0x08004f93

08004f80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ffe7 	bl	8004f80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fcc:	f7fd fb54 	bl	8002678 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	4413      	add	r3, r2
 8004fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fdc:	f7fd fb4c 	bl	8002678 <HAL_GetTick>
 8004fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fe2:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	0d1b      	lsrs	r3, r3, #20
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff2:	e054      	b.n	800509e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d050      	beq.n	800509e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffc:	f7fd fb3c 	bl	8002678 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	429a      	cmp	r2, r3
 800500a:	d902      	bls.n	8005012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d13d      	bne.n	800508e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502a:	d111      	bne.n	8005050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	d004      	beq.n	8005040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	d107      	bne.n	8005050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d10f      	bne.n	800507a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e017      	b.n	80050be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3b01      	subs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d19b      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000004 	.word	0x20000004

080050cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <SPI_EndRxTxTransaction+0x7c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <SPI_EndRxTxTransaction+0x80>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0d5b      	lsrs	r3, r3, #21
 80050e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d112      	bne.n	800511e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	2180      	movs	r1, #128	; 0x80
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff ff5a 	bl	8004fbc <SPI_WaitFlagStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e00f      	b.n	800513e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3b01      	subs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005134:	2b80      	cmp	r3, #128	; 0x80
 8005136:	d0f2      	beq.n	800511e <SPI_EndRxTxTransaction+0x52>
 8005138:	e000      	b.n	800513c <SPI_EndRxTxTransaction+0x70>
        break;
 800513a:	bf00      	nop
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000004 	.word	0x20000004
 800514c:	165e9f81 	.word	0x165e9f81

08005150 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_TIM_OC_Start_IT+0x28>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e022      	b.n	80051be <HAL_TIM_OC_Start_IT+0x6e>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d109      	bne.n	8005192 <HAL_TIM_OC_Start_IT+0x42>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e015      	b.n	80051be <HAL_TIM_OC_Start_IT+0x6e>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d109      	bne.n	80051ac <HAL_TIM_OC_Start_IT+0x5c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e008      	b.n	80051be <HAL_TIM_OC_Start_IT+0x6e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e09c      	b.n	8005300 <HAL_TIM_OC_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_OC_Start_IT+0x86>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80051d4:	e013      	b.n	80051fe <HAL_TIM_OC_Start_IT+0xae>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_OC_Start_IT+0x96>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_OC_Start_IT+0xae>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_OC_Start_IT+0xa6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051f4:	e003      	b.n	80051fe <HAL_TIM_OC_Start_IT+0xae>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b0c      	cmp	r3, #12
 8005202:	d841      	bhi.n	8005288 <HAL_TIM_OC_Start_IT+0x138>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_TIM_OC_Start_IT+0xbc>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005241 	.word	0x08005241
 8005210:	08005289 	.word	0x08005289
 8005214:	08005289 	.word	0x08005289
 8005218:	08005289 	.word	0x08005289
 800521c:	08005253 	.word	0x08005253
 8005220:	08005289 	.word	0x08005289
 8005224:	08005289 	.word	0x08005289
 8005228:	08005289 	.word	0x08005289
 800522c:	08005265 	.word	0x08005265
 8005230:	08005289 	.word	0x08005289
 8005234:	08005289 	.word	0x08005289
 8005238:	08005289 	.word	0x08005289
 800523c:	08005277 	.word	0x08005277
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0202 	orr.w	r2, r2, #2
 800524e:	60da      	str	r2, [r3, #12]
      break;
 8005250:	e01d      	b.n	800528e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0204 	orr.w	r2, r2, #4
 8005260:	60da      	str	r2, [r3, #12]
      break;
 8005262:	e014      	b.n	800528e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	60da      	str	r2, [r3, #12]
      break;
 8005274:	e00b      	b.n	800528e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0210 	orr.w	r2, r2, #16
 8005284:	60da      	str	r2, [r3, #12]
      break;
 8005286:	e002      	b.n	800528e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      break;
 800528c:	bf00      	nop
  }

  if (status == HAL_OK)
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d134      	bne.n	80052fe <HAL_TIM_OC_Start_IT+0x1ae>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fb98 	bl	80059d2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d00e      	beq.n	80052ca <HAL_TIM_OC_Start_IT+0x17a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <HAL_TIM_OC_Start_IT+0x1b8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_OC_Start_IT+0x17a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a14      	ldr	r2, [pc, #80]	; (800530c <HAL_TIM_OC_Start_IT+0x1bc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_OC_Start_IT+0x17a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_TIM_OC_Start_IT+0x1c0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d111      	bne.n	80052ee <HAL_TIM_OC_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d010      	beq.n	80052fe <HAL_TIM_OC_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ec:	e007      	b.n	80052fe <HAL_TIM_OC_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40010800 	.word	0x40010800

08005314 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e031      	b.n	800538a <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc feba 	bl	80020b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 f9ba 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d122      	bne.n	80053ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d11b      	bne.n	80053ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0202 	mvn.w	r2, #2
 80053be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fc fa93 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 80053da:	e005      	b.n	80053e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f959 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f95f 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d122      	bne.n	8005442 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d11b      	bne.n	8005442 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0204 	mvn.w	r2, #4
 8005412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fc fa69 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 800542e:	e005      	b.n	800543c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f92f 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f935 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d122      	bne.n	8005496 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d11b      	bne.n	8005496 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0208 	mvn.w	r2, #8
 8005466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2204      	movs	r2, #4
 800546c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fc fa3f 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8005482:	e005      	b.n	8005490 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f905 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f90b 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d122      	bne.n	80054ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d11b      	bne.n	80054ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0210 	mvn.w	r2, #16
 80054ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2208      	movs	r2, #8
 80054c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fc fa15 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 80054d6:	e005      	b.n	80054e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8db 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8e1 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10e      	bne.n	8005516 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0201 	mvn.w	r2, #1
 800550e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8b6 	bl	8005682 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d10e      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d107      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f8bb 	bl	80056b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005564:	2302      	movs	r3, #2
 8005566:	e088      	b.n	800567a <HAL_TIM_IC_ConfigChannel+0x130>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11b      	bne.n	80055ae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f000 f911 	bl	80057ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 020c 	bic.w	r2, r2, #12
 8005598:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6999      	ldr	r1, [r3, #24]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
 80055ac:	e060      	b.n	8005670 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d11c      	bne.n	80055ee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f000 f952 	bl	800586c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
 80055ec:	e040      	b.n	8005670 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f000 f96e 	bl	80058e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 020c 	bic.w	r2, r2, #12
 8005616:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69d9      	ldr	r1, [r3, #28]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	61da      	str	r2, [r3, #28]
 800562a:	e021      	b.n	8005670 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b0c      	cmp	r3, #12
 8005630:	d11c      	bne.n	800566c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f000 f98a 	bl	800595a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005654:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	021a      	lsls	r2, r3, #8
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	61da      	str	r2, [r3, #28]
 800566a:	e001      	b.n	8005670 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
	...

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <TIM_Base_SetConfig+0xc8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <TIM_Base_SetConfig+0xcc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a29      	ldr	r2, [pc, #164]	; (800579c <TIM_Base_SetConfig+0xd0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <TIM_Base_SetConfig+0xd4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d017      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <TIM_Base_SetConfig+0xc8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <TIM_Base_SetConfig+0xcc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1a      	ldr	r2, [pc, #104]	; (800579c <TIM_Base_SetConfig+0xd0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <TIM_Base_SetConfig+0xd4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <TIM_Base_SetConfig+0xd8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_Base_SetConfig+0x82>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <TIM_Base_SetConfig+0xdc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	615a      	str	r2, [r3, #20]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010800 	.word	0x40010800
 80057a4:	40010c00 	.word	0x40010c00
 80057a8:	40011000 	.word	0x40011000

080057ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f023 0201 	bic.w	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d8:	d00f      	beq.n	80057fa <TIM_TI1_SetConfig+0x4e>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <TIM_TI1_SetConfig+0xb0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <TIM_TI1_SetConfig+0x4e>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <TIM_TI1_SetConfig+0xb4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_TI1_SetConfig+0x4e>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <TIM_TI1_SetConfig+0xb8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_TI1_SetConfig+0x4e>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <TIM_TI1_SetConfig+0xbc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <TIM_TI1_SetConfig+0x52>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <TIM_TI1_SetConfig+0x54>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0303 	bic.w	r3, r3, #3
 800580a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e003      	b.n	800581e <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	b2db      	uxtb	r3, r3
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f023 030a 	bic.w	r3, r3, #10
 8005838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f003 030a 	and.w	r3, r3, #10
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40010800 	.word	0x40010800

0800586c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f023 0210 	bic.w	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	031b      	lsls	r3, r3, #12
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f023 0303 	bic.w	r3, r3, #3
 8005910:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	b2db      	uxtb	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005934:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	621a      	str	r2, [r3, #32]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005998:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	b29b      	uxth	r3, r3
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	621a      	str	r2, [r3, #32]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2201      	movs	r2, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	401a      	ands	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e046      	b.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d00e      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10c      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40010800 	.word	0x40010800

08005ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e042      	b.n	8005b70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fb24 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 ff89 	bl	8006a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d16d      	bne.n	8005c74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Transmit+0x2c>
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e066      	b.n	8005c76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2221      	movs	r2, #33	; 0x21
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb6:	f7fc fd5f 	bl	8002678 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d108      	bne.n	8005be4 <HAL_UART_Transmit+0x6c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e003      	b.n	8005bec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bec:	e02a      	b.n	8005c44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2180      	movs	r1, #128	; 0x80
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fc51 	bl	80064a0 <UART_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e036      	b.n	8005c76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	3302      	adds	r3, #2
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e007      	b.n	8005c36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1cf      	bne.n	8005bee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2140      	movs	r1, #64	; 0x40
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fc21 	bl	80064a0 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e006      	b.n	8005c76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e000      	b.n	8005c76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b08c      	sub	sp, #48	; 0x30
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d14a      	bne.n	8005d2e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e043      	b.n	8005d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fc5e 	bl	800657c <UART_Start_Receive_DMA>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d12c      	bne.n	8005d28 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d125      	bne.n	8005d22 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f043 0310 	orr.w	r3, r3, #16
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d0e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005d20:	e002      	b.n	8005d28 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d2c:	e000      	b.n	8005d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b0ba      	sub	sp, #232	; 0xe8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_UART_IRQHandler+0x66>
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fd8e 	bl	80068b8 <UART_Receive_IT>
      return;
 8005d9c:	e25b      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80de 	beq.w	8005f64 <HAL_UART_IRQHandler+0x22c>
 8005da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80d1 	beq.w	8005f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xae>
 8005dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0xd2>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f043 0202 	orr.w	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_UART_IRQHandler+0xf6>
 8005e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f043 0204 	orr.w	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_UART_IRQHandler+0x126>
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0208 	orr.w	r2, r3, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 81f2 	beq.w	800624c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_UART_IRQHandler+0x14e>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fd19 	bl	80068b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x17a>
 8005eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04f      	beq.n	8005f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fc23 	bl	80066fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d141      	bne.n	8005f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1d9      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_UART_IRQHandler+0x3e0>)
 8005f20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc fdf1 	bl	8002b0e <HAL_DMA_Abort_IT>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	e00e      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9a5 	bl	8006292 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	e00a      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9a1 	bl	8006292 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e006      	b.n	8005f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f99d 	bl	8006292 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f5e:	e175      	b.n	800624c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	bf00      	nop
    return;
 8005f62:	e173      	b.n	800624c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 814f 	bne.w	800620c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8148 	beq.w	800620c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8141 	beq.w	800620c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	f040 80b6 	bne.w	800611c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8145 	beq.w	8006250 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f080 813e 	bcs.w	8006250 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	f000 8088 	beq.w	80060f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006006:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006014:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006018:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006020:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800602c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1d9      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006058:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800605c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006060:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800606a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e1      	bne.n	8006034 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006094:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006096:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800609a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e3      	bne.n	8006070 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c8:	f023 0310 	bic.w	r3, r3, #16
 80060cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060da:	65ba      	str	r2, [r7, #88]	; 0x58
 80060dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e3      	bne.n	80060b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fc fcce 	bl	8002a94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006106:	b29b      	uxth	r3, r3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fc16 	bl	8001940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006114:	e09c      	b.n	8006250 <HAL_UART_IRQHandler+0x518>
 8006116:	bf00      	nop
 8006118:	080067c3 	.word	0x080067c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 808e 	beq.w	8006254 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8089 	beq.w	8006254 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006166:	647a      	str	r2, [r7, #68]	; 0x44
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800616c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e3      	bne.n	8006142 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	623b      	str	r3, [r7, #32]
   return(result);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800619e:	633a      	str	r2, [r7, #48]	; 0x30
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e3      	bne.n	800617a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061e4:	61fa      	str	r2, [r7, #28]
 80061e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	69b9      	ldr	r1, [r7, #24]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	617b      	str	r3, [r7, #20]
   return(result);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e3      	bne.n	80061c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fb fb9b 	bl	8001940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800620a:	e023      	b.n	8006254 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_UART_IRQHandler+0x4f4>
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fae0 	bl	80067ea <UART_Transmit_IT>
    return;
 800622a:	e014      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <HAL_UART_IRQHandler+0x51e>
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb1f 	bl	8006888 <UART_EndTransmit_IT>
    return;
 800624a:	e004      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
    return;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
      return;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <HAL_UART_IRQHandler+0x51e>
      return;
 8006254:	bf00      	nop
  }
}
 8006256:	37e8      	adds	r7, #232	; 0xe8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b09c      	sub	sp, #112	; 0x70
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d172      	bne.n	80063a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	2200      	movs	r2, #0
 80062c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80062de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	330c      	adds	r3, #12
 80062e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80062e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	f023 0301 	bic.w	r3, r3, #1
 8006310:	667b      	str	r3, [r7, #100]	; 0x64
 8006312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800631a:	647a      	str	r2, [r7, #68]	; 0x44
 800631c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e5      	bne.n	80062fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	623b      	str	r3, [r7, #32]
   return(result);
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006344:	663b      	str	r3, [r7, #96]	; 0x60
 8006346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3314      	adds	r3, #20
 800634c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800634e:	633a      	str	r2, [r7, #48]	; 0x30
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	2b01      	cmp	r3, #1
 8006370:	d119      	bne.n	80063a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60fb      	str	r3, [r7, #12]
   return(result);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006392:	61fa      	str	r2, [r7, #28]
 8006394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	617b      	str	r3, [r7, #20]
   return(result);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	2200      	movs	r2, #0
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d106      	bne.n	80063c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b8:	4619      	mov	r1, r3
 80063ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063bc:	f7fb fac0 	bl	8001940 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063c0:	e002      	b.n	80063c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80063c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063c4:	f7ff ff53 	bl	800626e <HAL_UART_RxCpltCallback>
}
 80063c8:	bf00      	nop
 80063ca:	3770      	adds	r7, #112	; 0x70
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d108      	bne.n	80063fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7fb faa2 	bl	8001940 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063fc:	e002      	b.n	8006404 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff ff3e 	bl	8006280 <HAL_UART_RxHalfCpltCallback>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b21      	cmp	r3, #33	; 0x21
 800643e:	d108      	bne.n	8006452 <UART_DMAError+0x46>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800644c:	68b8      	ldr	r0, [r7, #8]
 800644e:	f000 f92f 	bl	80066b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b22      	cmp	r3, #34	; 0x22
 8006472:	d108      	bne.n	8006486 <UART_DMAError+0x7a>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2200      	movs	r2, #0
 800647e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006480:	68b8      	ldr	r0, [r7, #8]
 8006482:	f000 f93c 	bl	80066fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	f043 0210 	orr.w	r2, r3, #16
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f7ff fefd 	bl	8006292 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b090      	sub	sp, #64	; 0x40
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b0:	e050      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d04c      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c0:	f7fc f8da 	bl	8002678 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d241      	bcs.n	8006554 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064f0:	637a      	str	r2, [r7, #52]	; 0x34
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	613b      	str	r3, [r7, #16]
   return(result);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	63bb      	str	r3, [r7, #56]	; 0x38
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006524:	623a      	str	r2, [r7, #32]
 8006526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	61bb      	str	r3, [r7, #24]
   return(result);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e5      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e00f      	b.n	8006574 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	429a      	cmp	r2, r3
 8006570:	d09f      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3740      	adds	r7, #64	; 0x40
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b098      	sub	sp, #96	; 0x60
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2222      	movs	r2, #34	; 0x22
 80065a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a8:	4a3e      	ldr	r2, [pc, #248]	; (80066a4 <UART_Start_Receive_DMA+0x128>)
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b0:	4a3d      	ldr	r2, [pc, #244]	; (80066a8 <UART_Start_Receive_DMA+0x12c>)
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	4a3c      	ldr	r2, [pc, #240]	; (80066ac <UART_Start_Receive_DMA+0x130>)
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	2200      	movs	r2, #0
 80065c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	f7fc f9fa 	bl	80029d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d019      	beq.n	8006632 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800660e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006614:	65bb      	str	r3, [r7, #88]	; 0x58
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800661e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800662c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e5      	bne.n	80065fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3314      	adds	r3, #20
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	657b      	str	r3, [r7, #84]	; 0x54
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006652:	63ba      	str	r2, [r7, #56]	; 0x38
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	617b      	str	r3, [r7, #20]
   return(result);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3314      	adds	r3, #20
 8006684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006686:	627a      	str	r2, [r7, #36]	; 0x24
 8006688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6a39      	ldr	r1, [r7, #32]
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	61fb      	str	r3, [r7, #28]
   return(result);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3760      	adds	r7, #96	; 0x60
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	080062a5 	.word	0x080062a5
 80066a8:	080063d1 	.word	0x080063d1
 80066ac:	0800640d 	.word	0x0800640d

080066b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	61ba      	str	r2, [r7, #24]
 80066da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80066f4:	bf00      	nop
 80066f6:	3724      	adds	r7, #36	; 0x24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066fe:	b480      	push	{r7}
 8006700:	b095      	sub	sp, #84	; 0x54
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006726:	643a      	str	r2, [r7, #64]	; 0x40
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800672c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3314      	adds	r3, #20
 8006740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	61fb      	str	r3, [r7, #28]
   return(result);
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	2b01      	cmp	r3, #1
 8006774:	d119      	bne.n	80067aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	60bb      	str	r3, [r7, #8]
   return(result);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f023 0310 	bic.w	r3, r3, #16
 800678c:	647b      	str	r3, [r7, #68]	; 0x44
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006796:	61ba      	str	r2, [r7, #24]
 8006798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6979      	ldr	r1, [r7, #20]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	613b      	str	r3, [r7, #16]
   return(result);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067b8:	bf00      	nop
 80067ba:	3754      	adds	r7, #84	; 0x54
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff fd58 	bl	8006292 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b21      	cmp	r3, #33	; 0x21
 80067fc:	d13e      	bne.n	800687c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d114      	bne.n	8006832 <UART_Transmit_IT+0x48>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d110      	bne.n	8006832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]
 8006830:	e008      	b.n	8006844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6211      	str	r1, [r2, #32]
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4619      	mov	r1, r3
 8006852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10f      	bne.n	8006878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fcd7 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b22      	cmp	r3, #34	; 0x22
 80068ca:	f040 80ae 	bne.w	8006a2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	d117      	bne.n	8006908 <UART_Receive_IT+0x50>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	629a      	str	r2, [r3, #40]	; 0x28
 8006906:	e026      	b.n	8006956 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691a:	d007      	beq.n	800692c <UART_Receive_IT+0x74>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <UART_Receive_IT+0x82>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e008      	b.n	800694c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29b      	uxth	r3, r3
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006966:	2b00      	cmp	r3, #0
 8006968:	d15d      	bne.n	8006a26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0220 	bic.w	r2, r2, #32
 8006978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d135      	bne.n	8006a1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	613b      	str	r3, [r7, #16]
   return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	623a      	str	r2, [r7, #32]
 80069d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b10      	cmp	r3, #16
 80069f6:	d10a      	bne.n	8006a0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7fa ff93 	bl	8001940 <HAL_UARTEx_RxEventCallback>
 8006a1a:	e002      	b.n	8006a22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fc26 	bl	800626e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e002      	b.n	8006a2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a74:	f023 030c 	bic.w	r3, r3, #12
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a55      	ldr	r2, [pc, #340]	; (8006bf4 <UART_SetConfig+0x1c0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d103      	bne.n	8006aaa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006aa2:	f7fd f9a5 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	e002      	b.n	8006ab0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006aaa:	f7fd f98d 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8006aae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab8:	d14c      	bne.n	8006b54 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009a      	lsls	r2, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad0:	4a49      	ldr	r2, [pc, #292]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	0119      	lsls	r1, r3, #4
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009a      	lsls	r2, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006af0:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006af2:	fba3 0302 	umull	r0, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2064      	movs	r0, #100	; 0x64
 8006afa:	fb00 f303 	mul.w	r3, r0, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	3332      	adds	r3, #50	; 0x32
 8006b04:	4a3c      	ldr	r2, [pc, #240]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b12:	4419      	add	r1, r3
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009a      	lsls	r2, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b2a:	4b33      	ldr	r3, [pc, #204]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006b2c:	fba3 0302 	umull	r0, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2064      	movs	r0, #100	; 0x64
 8006b34:	fb00 f303 	mul.w	r3, r0, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	3332      	adds	r3, #50	; 0x32
 8006b3e:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 0207 	and.w	r2, r3, #7
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	440a      	add	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b52:	e04a      	b.n	8006bea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009a      	lsls	r2, r3, #2
 8006b5e:	441a      	add	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	0119      	lsls	r1, r3, #4
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009a      	lsls	r2, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	2064      	movs	r0, #100	; 0x64
 8006b94:	fb00 f303 	mul.w	r3, r0, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	3332      	adds	r3, #50	; 0x32
 8006b9e:	4a16      	ldr	r2, [pc, #88]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006baa:	4419      	add	r1, r3
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009a      	lsls	r2, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	2064      	movs	r0, #100	; 0x64
 8006bcc:	fb00 f303 	mul.w	r3, r0, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	3332      	adds	r3, #50	; 0x32
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <UART_SetConfig+0x1c4>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	440a      	add	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	51eb851f 	.word	0x51eb851f

08006bfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006c00:	4904      	ldr	r1, [pc, #16]	; (8006c14 <MX_FATFS_Init+0x18>)
 8006c02:	4805      	ldr	r0, [pc, #20]	; (8006c18 <MX_FATFS_Init+0x1c>)
 8006c04:	f003 fb1e 	bl	800a244 <FATFS_LinkDriver>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <MX_FATFS_Init+0x20>)
 8006c0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006c10:	bf00      	nop
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	2000083c 	.word	0x2000083c
 8006c18:	20000010 	.word	0x20000010
 8006c1c:	20000838 	.word	0x20000838

08006c20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006c24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	4603      	mov	r3, r0
 8006c36:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f004 f92e 	bl	800ae9c <SD_disk_initialize>
 8006c40:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status (pdrv);
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f004 fa0c 	bl	800b074 <SD_disk_status>
 8006c5c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 8006c76:	7bf8      	ldrb	r0, [r7, #15]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	f004 fa0d 	bl	800b09c <SD_disk_read>
 8006c82:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8006c9c:	7bf8      	ldrb	r0, [r7, #15]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	f004 fa64 	bl	800b170 <SD_disk_write>
 8006ca8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	603a      	str	r2, [r7, #0]
 8006cbc:	71fb      	strb	r3, [r7, #7]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8006cc2:	79b9      	ldrb	r1, [r7, #6]
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f004 fad5 	bl	800b278 <SD_disk_ioctl>
 8006cce:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <disk_status+0x30>)
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	4905      	ldr	r1, [pc, #20]	; (8006d08 <disk_status+0x30>)
 8006cf2:	440a      	add	r2, r1
 8006cf4:	7a12      	ldrb	r2, [r2, #8]
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000a68 	.word	0x20000a68

08006d0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	4a0d      	ldr	r2, [pc, #52]	; (8006d54 <disk_initialize+0x48>)
 8006d1e:	5cd3      	ldrb	r3, [r2, r3]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d111      	bne.n	8006d48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <disk_initialize+0x48>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <disk_initialize+0x48>)
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	79fa      	ldrb	r2, [r7, #7]
 8006d3a:	4906      	ldr	r1, [pc, #24]	; (8006d54 <disk_initialize+0x48>)
 8006d3c:	440a      	add	r2, r1
 8006d3e:	7a12      	ldrb	r2, [r2, #8]
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000a68 	.word	0x20000a68

08006d58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <disk_read+0x3c>)
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	689c      	ldr	r4, [r3, #8]
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <disk_read+0x3c>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	7a18      	ldrb	r0, [r3, #8]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	47a0      	blx	r4
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000a68 	.word	0x20000a68

08006d98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <disk_write+0x3c>)
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68dc      	ldr	r4, [r3, #12]
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	4a07      	ldr	r2, [pc, #28]	; (8006dd4 <disk_write+0x3c>)
 8006db8:	4413      	add	r3, r2
 8006dba:	7a18      	ldrb	r0, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	47a0      	blx	r4
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000a68 	.word	0x20000a68

08006dd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	603a      	str	r2, [r7, #0]
 8006de2:	71fb      	strb	r3, [r7, #7]
 8006de4:	460b      	mov	r3, r1
 8006de6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <disk_ioctl+0x38>)
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	79fa      	ldrb	r2, [r7, #7]
 8006df6:	4906      	ldr	r1, [pc, #24]	; (8006e10 <disk_ioctl+0x38>)
 8006df8:	440a      	add	r2, r1
 8006dfa:	7a10      	ldrb	r0, [r2, #8]
 8006dfc:	79b9      	ldrb	r1, [r7, #6]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4798      	blx	r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]
  return res;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000a68 	.word	0x20000a68

08006e14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	021b      	lsls	r3, r3, #8
 8006e28:	b21a      	sxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b21b      	sxth	r3, r3
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b21b      	sxth	r3, r3
 8006e34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006e36:	89fb      	ldrh	r3, [r7, #14]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	3202      	adds	r2, #2
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	3201      	adds	r2, #1
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	887a      	ldrh	r2, [r7, #2]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	887b      	ldrh	r3, [r7, #2]
 8006ea0:	0a1b      	lsrs	r3, r3, #8
 8006ea2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	0a1b      	lsrs	r3, r3, #8
 8006ed4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	1c53      	adds	r3, r2, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	6179      	str	r1, [r7, #20]
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f1      	bne.n	8006f2a <mem_cpy+0x1a>
	}
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	617a      	str	r2, [r7, #20]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f3      	bne.n	8006f60 <mem_set+0x10>
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f84:	b480      	push	{r7}
 8006f86:	b089      	sub	sp, #36	; 0x24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	61fa      	str	r2, [r7, #28]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	61ba      	str	r2, [r7, #24]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	1acb      	subs	r3, r1, r3
 8006fb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <mem_cmp+0x40>
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0eb      	beq.n	8006f9c <mem_cmp+0x18>

	return r;
 8006fc4:	697b      	ldr	r3, [r7, #20]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fda:	e002      	b.n	8006fe2 <chk_chr+0x12>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <chk_chr+0x26>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d1f2      	bne.n	8006fdc <chk_chr+0xc>
	return *str;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e029      	b.n	800706c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007018:	4a26      	ldr	r2, [pc, #152]	; (80070b4 <chk_lock+0xb0>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	4413      	add	r3, r2
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01d      	beq.n	8007062 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007026:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <chk_lock+0xb0>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	4413      	add	r3, r2
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d116      	bne.n	8007066 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007038:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <chk_lock+0xb0>)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	4413      	add	r3, r2
 8007040:	3304      	adds	r3, #4
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007048:	429a      	cmp	r2, r3
 800704a:	d10c      	bne.n	8007066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <chk_lock+0xb0>)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	4413      	add	r3, r2
 8007054:	3308      	adds	r3, #8
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800705c:	429a      	cmp	r2, r3
 800705e:	d102      	bne.n	8007066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007060:	e007      	b.n	8007072 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007062:	2301      	movs	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d9d2      	bls.n	8007018 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d109      	bne.n	800708c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <chk_lock+0x80>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d101      	bne.n	8007088 <chk_lock+0x84>
 8007084:	2300      	movs	r3, #0
 8007086:	e010      	b.n	80070aa <chk_lock+0xa6>
 8007088:	2312      	movs	r3, #18
 800708a:	e00e      	b.n	80070aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d108      	bne.n	80070a4 <chk_lock+0xa0>
 8007092:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <chk_lock+0xb0>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	4413      	add	r3, r2
 800709a:	330c      	adds	r3, #12
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d101      	bne.n	80070a8 <chk_lock+0xa4>
 80070a4:	2310      	movs	r3, #16
 80070a6:	e000      	b.n	80070aa <chk_lock+0xa6>
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	20000848 	.word	0x20000848

080070b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	e002      	b.n	80070ca <enq_lock+0x12>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3301      	adds	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d806      	bhi.n	80070de <enq_lock+0x26>
 80070d0:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <enq_lock+0x3c>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4413      	add	r3, r2
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f2      	bne.n	80070c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	20000848 	.word	0x20000848

080070f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e01f      	b.n	8007148 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007108:	4a41      	ldr	r2, [pc, #260]	; (8007210 <inc_lock+0x118>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	4413      	add	r3, r2
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d113      	bne.n	8007142 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800711a:	4a3d      	ldr	r2, [pc, #244]	; (8007210 <inc_lock+0x118>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	4413      	add	r3, r2
 8007122:	3304      	adds	r3, #4
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800712a:	429a      	cmp	r2, r3
 800712c:	d109      	bne.n	8007142 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800712e:	4a38      	ldr	r2, [pc, #224]	; (8007210 <inc_lock+0x118>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4413      	add	r3, r2
 8007136:	3308      	adds	r3, #8
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800713e:	429a      	cmp	r2, r3
 8007140:	d006      	beq.n	8007150 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d9dc      	bls.n	8007108 <inc_lock+0x10>
 800714e:	e000      	b.n	8007152 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007150:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d132      	bne.n	80071be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e002      	b.n	8007164 <inc_lock+0x6c>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d806      	bhi.n	8007178 <inc_lock+0x80>
 800716a:	4a29      	ldr	r2, [pc, #164]	; (8007210 <inc_lock+0x118>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	4413      	add	r3, r2
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f2      	bne.n	800715e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d101      	bne.n	8007182 <inc_lock+0x8a>
 800717e:	2300      	movs	r3, #0
 8007180:	e040      	b.n	8007204 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4922      	ldr	r1, [pc, #136]	; (8007210 <inc_lock+0x118>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	440b      	add	r3, r1
 800718e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	491e      	ldr	r1, [pc, #120]	; (8007210 <inc_lock+0x118>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	440b      	add	r3, r1
 800719c:	3304      	adds	r3, #4
 800719e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	491a      	ldr	r1, [pc, #104]	; (8007210 <inc_lock+0x118>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	440b      	add	r3, r1
 80071ac:	3308      	adds	r3, #8
 80071ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80071b0:	4a17      	ldr	r2, [pc, #92]	; (8007210 <inc_lock+0x118>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4413      	add	r3, r2
 80071b8:	330c      	adds	r3, #12
 80071ba:	2200      	movs	r2, #0
 80071bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <inc_lock+0xe0>
 80071c4:	4a12      	ldr	r2, [pc, #72]	; (8007210 <inc_lock+0x118>)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	4413      	add	r3, r2
 80071cc:	330c      	adds	r3, #12
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <inc_lock+0xe0>
 80071d4:	2300      	movs	r3, #0
 80071d6:	e015      	b.n	8007204 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <inc_lock+0xf8>
 80071de:	4a0c      	ldr	r2, [pc, #48]	; (8007210 <inc_lock+0x118>)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	4413      	add	r3, r2
 80071e6:	330c      	adds	r3, #12
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	e001      	b.n	80071f4 <inc_lock+0xfc>
 80071f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071f4:	4906      	ldr	r1, [pc, #24]	; (8007210 <inc_lock+0x118>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	440b      	add	r3, r1
 80071fc:	330c      	adds	r3, #12
 80071fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000848 	.word	0x20000848

08007214 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3b01      	subs	r3, #1
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d825      	bhi.n	8007274 <dec_lock+0x60>
		n = Files[i].ctr;
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <dec_lock+0x70>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	4413      	add	r3, r2
 8007230:	330c      	adds	r3, #12
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723c:	d101      	bne.n	8007242 <dec_lock+0x2e>
 800723e:	2300      	movs	r3, #0
 8007240:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007242:	89fb      	ldrh	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <dec_lock+0x3a>
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	3b01      	subs	r3, #1
 800724c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800724e:	4a0d      	ldr	r2, [pc, #52]	; (8007284 <dec_lock+0x70>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	4413      	add	r3, r2
 8007256:	330c      	adds	r3, #12
 8007258:	89fa      	ldrh	r2, [r7, #14]
 800725a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d105      	bne.n	800726e <dec_lock+0x5a>
 8007262:	4a08      	ldr	r2, [pc, #32]	; (8007284 <dec_lock+0x70>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4413      	add	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	737b      	strb	r3, [r7, #13]
 8007272:	e001      	b.n	8007278 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007274:	2302      	movs	r3, #2
 8007276:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007278:	7b7b      	ldrb	r3, [r7, #13]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr
 8007284:	20000848 	.word	0x20000848

08007288 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e010      	b.n	80072b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007296:	4a0d      	ldr	r2, [pc, #52]	; (80072cc <clear_lock+0x44>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	4413      	add	r3, r2
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d105      	bne.n	80072b2 <clear_lock+0x2a>
 80072a6:	4a09      	ldr	r2, [pc, #36]	; (80072cc <clear_lock+0x44>)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d9eb      	bls.n	8007296 <clear_lock+0xe>
	}
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000848 	.word	0x20000848

080072d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	78db      	ldrb	r3, [r3, #3]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d034      	beq.n	800734e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	7858      	ldrb	r0, [r3, #1]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072f4:	2301      	movs	r3, #1
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f7ff fd4e 	bl	8006d98 <disk_write>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007302:	2301      	movs	r3, #1
 8007304:	73fb      	strb	r3, [r7, #15]
 8007306:	e022      	b.n	800734e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	429a      	cmp	r2, r3
 800731c:	d217      	bcs.n	800734e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	789b      	ldrb	r3, [r3, #2]
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e010      	b.n	8007348 <sync_window+0x78>
					wsect += fs->fsize;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7858      	ldrb	r0, [r3, #1]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800733a:	2301      	movs	r3, #1
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	f7ff fd2b 	bl	8006d98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3b01      	subs	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d8eb      	bhi.n	8007326 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d01b      	beq.n	80073a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ffad 	bl	80072d0 <sync_window>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d113      	bne.n	80073a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	7858      	ldrb	r0, [r3, #1]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800738a:	2301      	movs	r3, #1
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f7ff fce3 	bl	8006d58 <disk_read>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007398:	f04f 33ff 	mov.w	r3, #4294967295
 800739c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff87 	bl	80072d0 <sync_window>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d159      	bne.n	8007480 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d149      	bne.n	8007468 <sync_fs+0xb4>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	791b      	ldrb	r3, [r3, #4]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d145      	bne.n	8007468 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	899b      	ldrh	r3, [r3, #12]
 80073e6:	461a      	mov	r2, r3
 80073e8:	2100      	movs	r1, #0
 80073ea:	f7ff fdb1 	bl	8006f50 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3338      	adds	r3, #56	; 0x38
 80073f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fd43 	bl	8006e86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3338      	adds	r3, #56	; 0x38
 8007404:	4921      	ldr	r1, [pc, #132]	; (800748c <sync_fs+0xd8>)
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fd57 	bl	8006eba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3338      	adds	r3, #56	; 0x38
 8007410:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007414:	491e      	ldr	r1, [pc, #120]	; (8007490 <sync_fs+0xdc>)
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fd4f 	bl	8006eba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3338      	adds	r3, #56	; 0x38
 8007420:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7ff fd45 	bl	8006eba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3338      	adds	r3, #56	; 0x38
 8007434:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7ff fd3b 	bl	8006eba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7858      	ldrb	r0, [r3, #1]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800745c:	2301      	movs	r3, #1
 800745e:	f7ff fc9b 	bl	8006d98 <disk_write>
			fs->fsi_flag = 0;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fcb1 	bl	8006dd8 <disk_ioctl>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <sync_fs+0xcc>
 800747c:	2301      	movs	r3, #1
 800747e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	41615252 	.word	0x41615252
 8007490:	61417272 	.word	0x61417272

08007494 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	3b02      	subs	r3, #2
 80074a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	3b02      	subs	r3, #2
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d301      	bcc.n	80074b4 <clust2sect+0x20>
 80074b0:	2300      	movs	r3, #0
 80074b2:	e008      	b.n	80074c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	895b      	ldrh	r3, [r3, #10]
 80074b8:	461a      	mov	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	fb03 f202 	mul.w	r2, r3, r2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	4413      	add	r3, r2
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d904      	bls.n	80074f0 <get_fat+0x20>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e0bb      	b.n	800766e <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074f6:	f04f 33ff 	mov.w	r3, #4294967295
 80074fa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b03      	cmp	r3, #3
 8007502:	f000 8083 	beq.w	800760c <get_fat+0x13c>
 8007506:	2b03      	cmp	r3, #3
 8007508:	f300 80a7 	bgt.w	800765a <get_fat+0x18a>
 800750c:	2b01      	cmp	r3, #1
 800750e:	d002      	beq.n	8007516 <get_fat+0x46>
 8007510:	2b02      	cmp	r3, #2
 8007512:	d056      	beq.n	80075c2 <get_fat+0xf2>
 8007514:	e0a1      	b.n	800765a <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	899b      	ldrh	r3, [r3, #12]
 800752c:	4619      	mov	r1, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	fbb3 f3f1 	udiv	r3, r3, r1
 8007534:	4413      	add	r3, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6938      	ldr	r0, [r7, #16]
 800753a:	f7ff ff0d 	bl	8007358 <move_window>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 808d 	bne.w	8007660 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	60fa      	str	r2, [r7, #12]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	8992      	ldrh	r2, [r2, #12]
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	fb01 f202 	mul.w	r2, r1, r2
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007562:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	899b      	ldrh	r3, [r3, #12]
 800756c:	4619      	mov	r1, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	fbb3 f3f1 	udiv	r3, r3, r1
 8007574:	4413      	add	r3, r2
 8007576:	4619      	mov	r1, r3
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7ff feed 	bl	8007358 <move_window>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d16f      	bne.n	8007664 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	899b      	ldrh	r3, [r3, #12]
 8007588:	461a      	mov	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007590:	fb01 f202 	mul.w	r2, r1, r2
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4413      	add	r3, r2
 800759a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	461a      	mov	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <get_fat+0xe8>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	091b      	lsrs	r3, r3, #4
 80075b6:	e002      	b.n	80075be <get_fat+0xee>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075be:	617b      	str	r3, [r7, #20]
			break;
 80075c0:	e055      	b.n	800766e <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	899b      	ldrh	r3, [r3, #12]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4619      	mov	r1, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075d6:	4413      	add	r3, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f7ff febc 	bl	8007358 <move_window>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d140      	bne.n	8007668 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	8992      	ldrh	r2, [r2, #12]
 80075f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80075f8:	fb00 f202 	mul.w	r2, r0, r2
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	440b      	add	r3, r1
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fc07 	bl	8006e14 <ld_word>
 8007606:	4603      	mov	r3, r0
 8007608:	617b      	str	r3, [r7, #20]
			break;
 800760a:	e030      	b.n	800766e <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	899b      	ldrh	r3, [r3, #12]
 8007614:	089b      	lsrs	r3, r3, #2
 8007616:	b29b      	uxth	r3, r3
 8007618:	4619      	mov	r1, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007620:	4413      	add	r3, r2
 8007622:	4619      	mov	r1, r3
 8007624:	6938      	ldr	r0, [r7, #16]
 8007626:	f7ff fe97 	bl	8007358 <move_window>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11d      	bne.n	800766c <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	8992      	ldrh	r2, [r2, #12]
 800763e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007642:	fb00 f202 	mul.w	r2, r0, r2
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	440b      	add	r3, r1
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fbf9 	bl	8006e42 <ld_dword>
 8007650:	4603      	mov	r3, r0
 8007652:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007656:	617b      	str	r3, [r7, #20]
			break;
 8007658:	e009      	b.n	800766e <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e006      	b.n	800766e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800766c:	bf00      	nop
		}
	}

	return val;
 800766e:	697b      	ldr	r3, [r7, #20]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007684:	2302      	movs	r3, #2
 8007686:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b01      	cmp	r3, #1
 800768c:	f240 8102 	bls.w	8007894 <put_fat+0x21c>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 80fc 	bcs.w	8007894 <put_fat+0x21c>
		switch (fs->fs_type) {
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	f000 80b6 	beq.w	8007812 <put_fat+0x19a>
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	f300 80fd 	bgt.w	80078a6 <put_fat+0x22e>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d003      	beq.n	80076b8 <put_fat+0x40>
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	f000 8083 	beq.w	80077bc <put_fat+0x144>
 80076b6:	e0f6      	b.n	80078a6 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	899b      	ldrh	r3, [r3, #12]
 80076ce:	4619      	mov	r1, r3
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d6:	4413      	add	r3, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fe3c 	bl	8007358 <move_window>
 80076e0:	4603      	mov	r3, r0
 80076e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 80d6 	bne.w	8007898 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	61ba      	str	r2, [r7, #24]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	8992      	ldrh	r2, [r2, #12]
 80076fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007700:	fb00 f202 	mul.w	r2, r0, r2
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	440b      	add	r3, r1
 8007708:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <put_fat+0xb8>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	b25b      	sxtb	r3, r3
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	b25a      	sxtb	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	b25b      	sxtb	r3, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	b25b      	sxtb	r3, r3
 800772c:	b2db      	uxtb	r3, r3
 800772e:	e001      	b.n	8007734 <put_fat+0xbc>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	899b      	ldrh	r3, [r3, #12]
 8007746:	4619      	mov	r1, r3
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	fbb3 f3f1 	udiv	r3, r3, r1
 800774e:	4413      	add	r3, r2
 8007750:	4619      	mov	r1, r3
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fe00 	bl	8007358 <move_window>
 8007758:	4603      	mov	r3, r0
 800775a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800775c:	7ffb      	ldrb	r3, [r7, #31]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 809c 	bne.w	800789c <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	899b      	ldrh	r3, [r3, #12]
 800776e:	461a      	mov	r2, r3
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	fbb3 f0f2 	udiv	r0, r3, r2
 8007776:	fb00 f202 	mul.w	r2, r0, r2
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	440b      	add	r3, r1
 800777e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <put_fat+0x11a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e00e      	b.n	80077b0 <put_fat+0x138>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b25b      	sxtb	r3, r3
 8007798:	f023 030f 	bic.w	r3, r3, #15
 800779c:	b25a      	sxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	b25b      	sxtb	r3, r3
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	70da      	strb	r2, [r3, #3]
			break;
 80077ba:	e074      	b.n	80078a6 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	899b      	ldrh	r3, [r3, #12]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4619      	mov	r1, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d0:	4413      	add	r3, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fdbf 	bl	8007358 <move_window>
 80077da:	4603      	mov	r3, r0
 80077dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077de:	7ffb      	ldrb	r3, [r7, #31]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d15d      	bne.n	80078a0 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	8992      	ldrh	r2, [r2, #12]
 80077f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80077f6:	fb00 f202 	mul.w	r2, r0, r2
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	440b      	add	r3, r1
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	b292      	uxth	r2, r2
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff fb3e 	bl	8006e86 <st_word>
			fs->wflag = 1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	70da      	strb	r2, [r3, #3]
			break;
 8007810:	e049      	b.n	80078a6 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	899b      	ldrh	r3, [r3, #12]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	b29b      	uxth	r3, r3
 800781e:	4619      	mov	r1, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	fbb3 f3f1 	udiv	r3, r3, r1
 8007826:	4413      	add	r3, r2
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff fd94 	bl	8007358 <move_window>
 8007830:	4603      	mov	r3, r0
 8007832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d134      	bne.n	80078a4 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	8992      	ldrh	r2, [r2, #12]
 800784e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007852:	fb00 f202 	mul.w	r2, r0, r2
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	440b      	add	r3, r1
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff faf1 	bl	8006e42 <ld_dword>
 8007860:	4603      	mov	r3, r0
 8007862:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007866:	4323      	orrs	r3, r4
 8007868:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	8992      	ldrh	r2, [r2, #12]
 8007878:	fbb3 f0f2 	udiv	r0, r3, r2
 800787c:	fb00 f202 	mul.w	r2, r0, r2
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	440b      	add	r3, r1
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fb17 	bl	8006eba <st_dword>
			fs->wflag = 1;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	70da      	strb	r2, [r3, #3]
			break;
 8007892:	e008      	b.n	80078a6 <put_fat+0x22e>
		}
	}
 8007894:	bf00      	nop
 8007896:	e006      	b.n	80078a6 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007898:	bf00      	nop
 800789a:	e004      	b.n	80078a6 <put_fat+0x22e>
			if (res != FR_OK) break;
 800789c:	bf00      	nop
 800789e:	e002      	b.n	80078a6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80078a0:	bf00      	nop
 80078a2:	e000      	b.n	80078a6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80078a4:	bf00      	nop
	return res;
 80078a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3724      	adds	r7, #36	; 0x24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd90      	pop	{r4, r7, pc}

080078b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d904      	bls.n	80078d6 <remove_chain+0x26>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d301      	bcc.n	80078da <remove_chain+0x2a>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e04b      	b.n	8007972 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	69b8      	ldr	r0, [r7, #24]
 80078e8:	f7ff fec6 	bl	8007678 <put_fat>
 80078ec:	4603      	mov	r3, r0
 80078ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80078f0:	7ffb      	ldrb	r3, [r7, #31]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <remove_chain+0x4a>
 80078f6:	7ffb      	ldrb	r3, [r7, #31]
 80078f8:	e03b      	b.n	8007972 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fde7 	bl	80074d0 <get_fat>
 8007902:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d031      	beq.n	800796e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <remove_chain+0x64>
 8007910:	2302      	movs	r3, #2
 8007912:	e02e      	b.n	8007972 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d101      	bne.n	8007920 <remove_chain+0x70>
 800791c:	2301      	movs	r3, #1
 800791e:	e028      	b.n	8007972 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007920:	2200      	movs	r2, #0
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	69b8      	ldr	r0, [r7, #24]
 8007926:	f7ff fea7 	bl	8007678 <put_fat>
 800792a:	4603      	mov	r3, r0
 800792c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800792e:	7ffb      	ldrb	r3, [r7, #31]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <remove_chain+0x88>
 8007934:	7ffb      	ldrb	r3, [r7, #31]
 8007936:	e01c      	b.n	8007972 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	3b02      	subs	r3, #2
 8007942:	429a      	cmp	r2, r3
 8007944:	d20b      	bcs.n	800795e <remove_chain+0xae>
			fs->free_clst++;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	b2da      	uxtb	r2, r3
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	d3c6      	bcc.n	80078fa <remove_chain+0x4a>
 800796c:	e000      	b.n	8007970 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800796e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b088      	sub	sp, #32
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <create_chain+0x2c>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d31b      	bcc.n	80079de <create_chain+0x64>
 80079a6:	2301      	movs	r3, #1
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e018      	b.n	80079de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fd8e 	bl	80074d0 <get_fat>
 80079b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d801      	bhi.n	80079c0 <create_chain+0x46>
 80079bc:	2301      	movs	r3, #1
 80079be:	e070      	b.n	8007aa2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d101      	bne.n	80079cc <create_chain+0x52>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	e06a      	b.n	8007aa2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d201      	bcs.n	80079da <create_chain+0x60>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	e063      	b.n	8007aa2 <create_chain+0x128>
		scl = clst;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d307      	bcc.n	8007a02 <create_chain+0x88>
				ncl = 2;
 80079f2:	2302      	movs	r3, #2
 80079f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d901      	bls.n	8007a02 <create_chain+0x88>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e04f      	b.n	8007aa2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a02:	69f9      	ldr	r1, [r7, #28]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fd63 	bl	80074d0 <get_fat>
 8007a0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00e      	beq.n	8007a30 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d003      	beq.n	8007a20 <create_chain+0xa6>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d101      	bne.n	8007a24 <create_chain+0xaa>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	e03e      	b.n	8007aa2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d1da      	bne.n	80079e2 <create_chain+0x68>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e038      	b.n	8007aa2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	69f9      	ldr	r1, [r7, #28]
 8007a38:	6938      	ldr	r0, [r7, #16]
 8007a3a:	f7ff fe1d 	bl	8007678 <put_fat>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <create_chain+0xe2>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6938      	ldr	r0, [r7, #16]
 8007a54:	f7ff fe10 	bl	8007678 <put_fat>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d116      	bne.n	8007a90 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	3b02      	subs	r3, #2
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d804      	bhi.n	8007a80 <create_chain+0x106>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	791b      	ldrb	r3, [r3, #4]
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	711a      	strb	r2, [r3, #4]
 8007a8e:	e007      	b.n	8007aa0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d102      	bne.n	8007a9c <create_chain+0x122>
 8007a96:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9a:	e000      	b.n	8007a9e <create_chain+0x124>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007aa0:	69fb      	ldr	r3, [r7, #28]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b087      	sub	sp, #28
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	3304      	adds	r3, #4
 8007ac0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	899b      	ldrh	r3, [r3, #12]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	8952      	ldrh	r2, [r2, #10]
 8007ad2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	613a      	str	r2, [r7, #16]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <clmt_clust+0x42>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e010      	b.n	8007b0e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d307      	bcc.n	8007b04 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	3304      	adds	r3, #4
 8007b00:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b02:	e7e9      	b.n	8007ad8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007b04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b2e:	d204      	bcs.n	8007b3a <dir_sdi+0x22>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	f003 031f 	and.w	r3, r3, #31
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e071      	b.n	8007c22 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <dir_sdi+0x46>
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d902      	bls.n	8007b5e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10c      	bne.n	8007b7e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	8912      	ldrh	r2, [r2, #8]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d301      	bcc.n	8007b74 <dir_sdi+0x5c>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e056      	b.n	8007c22 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
 8007b7c:	e02d      	b.n	8007bda <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	895b      	ldrh	r3, [r3, #10]
 8007b82:	461a      	mov	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	899b      	ldrh	r3, [r3, #12]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b8e:	e019      	b.n	8007bc4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6979      	ldr	r1, [r7, #20]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff fc9b 	bl	80074d0 <get_fat>
 8007b9a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d101      	bne.n	8007ba8 <dir_sdi+0x90>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e03c      	b.n	8007c22 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d904      	bls.n	8007bb8 <dir_sdi+0xa0>
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d301      	bcc.n	8007bbc <dir_sdi+0xa4>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e032      	b.n	8007c22 <dir_sdi+0x10a>
			ofs -= csz;
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d2e1      	bcs.n	8007b90 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007bcc:	6979      	ldr	r1, [r7, #20]
 8007bce:	6938      	ldr	r0, [r7, #16]
 8007bd0:	f7ff fc60 	bl	8007494 <clust2sect>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <dir_sdi+0xd4>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e01a      	b.n	8007c22 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	899b      	ldrh	r3, [r3, #12]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	899b      	ldrh	r3, [r3, #12]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c14:	fb00 f202 	mul.w	r2, r0, r2
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	18ca      	adds	r2, r1, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	3320      	adds	r3, #32
 8007c40:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <dir_next+0x28>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c50:	d301      	bcc.n	8007c56 <dir_next+0x2c>
 8007c52:	2304      	movs	r3, #4
 8007c54:	e0bb      	b.n	8007dce <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	899b      	ldrh	r3, [r3, #12]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c62:	fb01 f202 	mul.w	r2, r1, r2
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f040 809d 	bne.w	8007da8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	8912      	ldrh	r2, [r2, #8]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f0c0 808d 	bcc.w	8007da8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	61da      	str	r2, [r3, #28]
 8007c94:	2304      	movs	r3, #4
 8007c96:	e09a      	b.n	8007dce <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	899b      	ldrh	r3, [r3, #12]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	8952      	ldrh	r2, [r2, #10]
 8007ca8:	3a01      	subs	r2, #1
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d17b      	bne.n	8007da8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7ff fc09 	bl	80074d0 <get_fat>
 8007cbe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d801      	bhi.n	8007cca <dir_next+0xa0>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e081      	b.n	8007dce <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d101      	bne.n	8007cd6 <dir_next+0xac>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e07b      	b.n	8007dce <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d359      	bcc.n	8007d94 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	61da      	str	r2, [r3, #28]
 8007cec:	2304      	movs	r3, #4
 8007cee:	e06e      	b.n	8007dce <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7ff fe3e 	bl	800797a <create_chain>
 8007cfe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <dir_next+0xe0>
 8007d06:	2307      	movs	r3, #7
 8007d08:	e061      	b.n	8007dce <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <dir_next+0xea>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e05c      	b.n	8007dce <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d101      	bne.n	8007d20 <dir_next+0xf6>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e056      	b.n	8007dce <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fad5 	bl	80072d0 <sync_window>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <dir_next+0x106>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e04e      	b.n	8007dce <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	899b      	ldrh	r3, [r3, #12]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f7ff f907 	bl	8006f50 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d42:	2300      	movs	r3, #0
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fba3 	bl	8007494 <clust2sect>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	635a      	str	r2, [r3, #52]	; 0x34
 8007d54:	e012      	b.n	8007d7c <dir_next+0x152>
						fs->wflag = 1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff fab7 	bl	80072d0 <sync_window>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <dir_next+0x142>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e030      	b.n	8007dce <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	895b      	ldrh	r3, [r3, #10]
 8007d80:	461a      	mov	r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d3e6      	bcc.n	8007d56 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fb79 	bl	8007494 <clust2sect>
 8007da2:	4602      	mov	r2, r0
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	899b      	ldrh	r3, [r3, #12]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dc0:	fb00 f202 	mul.w	r2, r0, r2
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	18ca      	adds	r2, r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007de6:	2100      	movs	r1, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fe95 	bl	8007b18 <dir_sdi>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d12b      	bne.n	8007e50 <dir_alloc+0x7a>
		n = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4619      	mov	r1, r3
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff faa8 	bl	8007358 <move_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d11d      	bne.n	8007e4e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2be5      	cmp	r3, #229	; 0xe5
 8007e1a:	d004      	beq.n	8007e26 <dir_alloc+0x50>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d102      	bne.n	8007e3a <dir_alloc+0x64>
 8007e34:	e00c      	b.n	8007e50 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff fef4 	bl	8007c2a <dir_next>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0d7      	beq.n	8007dfc <dir_alloc+0x26>
 8007e4c:	e000      	b.n	8007e50 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e4e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d101      	bne.n	8007e5a <dir_alloc+0x84>
 8007e56:	2307      	movs	r3, #7
 8007e58:	75fb      	strb	r3, [r7, #23]
	return res;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	331a      	adds	r3, #26
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe ffce 	bl	8006e14 <ld_word>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d109      	bne.n	8007e98 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	3314      	adds	r3, #20
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe ffc3 	bl	8006e14 <ld_word>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e98:	68fb      	ldr	r3, [r7, #12]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	331a      	adds	r3, #26
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	b292      	uxth	r2, r2
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe ffe4 	bl	8006e86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d109      	bne.n	8007eda <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f103 0214 	add.w	r2, r3, #20
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fe ffd6 	bl	8006e86 <st_word>
	}
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	331a      	adds	r3, #26
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe ff8e 	bl	8006e14 <ld_word>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <cmp_lfn+0x1e>
 8007efe:	2300      	movs	r3, #0
 8007f00:	e059      	b.n	8007fb6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f0a:	1e5a      	subs	r2, r3, #1
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f18:	2301      	movs	r3, #1
 8007f1a:	81fb      	strh	r3, [r7, #14]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	e033      	b.n	8007f8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007f22:	4a27      	ldr	r2, [pc, #156]	; (8007fc0 <cmp_lfn+0xdc>)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	4413      	add	r3, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe ff6f 	bl	8006e14 <ld_word>
 8007f36:	4603      	mov	r3, r0
 8007f38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01a      	beq.n	8007f76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2bfe      	cmp	r3, #254	; 0xfe
 8007f44:	d812      	bhi.n	8007f6c <cmp_lfn+0x88>
 8007f46:	89bb      	ldrh	r3, [r7, #12]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f002 f9c5 	bl	800a2d8 <ff_wtoupper>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461c      	mov	r4, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	617a      	str	r2, [r7, #20]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 f9b9 	bl	800a2d8 <ff_wtoupper>
 8007f66:	4603      	mov	r3, r0
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	d001      	beq.n	8007f70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e022      	b.n	8007fb6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007f70:	89bb      	ldrh	r3, [r7, #12]
 8007f72:	81fb      	strh	r3, [r7, #14]
 8007f74:	e006      	b.n	8007f84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007f76:	89bb      	ldrh	r3, [r7, #12]
 8007f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d001      	beq.n	8007f84 <cmp_lfn+0xa0>
 8007f80:	2300      	movs	r3, #0
 8007f82:	e018      	b.n	8007fb6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	3301      	adds	r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b0c      	cmp	r3, #12
 8007f8e:	d9c8      	bls.n	8007f22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <cmp_lfn+0xd0>
 8007f9c:	89fb      	ldrh	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <cmp_lfn+0xd0>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <cmp_lfn+0xd0>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007fb4:	2301      	movs	r3, #1
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08011148 	.word	0x08011148

08007fc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	71fb      	strb	r3, [r7, #7]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	330d      	adds	r3, #13
 8007fde:	79ba      	ldrb	r2, [r7, #6]
 8007fe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	330b      	adds	r3, #11
 8007fe6:	220f      	movs	r2, #15
 8007fe8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	330c      	adds	r3, #12
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	331a      	adds	r3, #26
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe ff44 	bl	8006e86 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	1e5a      	subs	r2, r3, #1
 8008002:	4613      	mov	r3, r2
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	82fb      	strh	r3, [r7, #22]
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800801c:	4293      	cmp	r3, r2
 800801e:	d007      	beq.n	8008030 <put_lfn+0x6c>
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	61fa      	str	r2, [r7, #28]
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008030:	4a17      	ldr	r2, [pc, #92]	; (8008090 <put_lfn+0xcc>)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	8afa      	ldrh	r2, [r7, #22]
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe ff1f 	bl	8006e86 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008048:	8afb      	ldrh	r3, [r7, #22]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <put_lfn+0x90>
 800804e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008052:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	3301      	adds	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b0c      	cmp	r3, #12
 800805e:	d9da      	bls.n	8008016 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008060:	8afb      	ldrh	r3, [r7, #22]
 8008062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008066:	4293      	cmp	r3, r2
 8008068:	d006      	beq.n	8008078 <put_lfn+0xb4>
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <put_lfn+0xbc>
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	79fa      	ldrb	r2, [r7, #7]
 8008084:	701a      	strb	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	08011148 	.word	0x08011148

08008094 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	; 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80080a2:	220b      	movs	r2, #11
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7fe ff32 	bl	8006f10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d92b      	bls.n	800810a <gen_numname+0x76>
		sr = seq;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80080b6:	e022      	b.n	80080fe <gen_numname+0x6a>
			wc = *lfn++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80080c2:	2300      	movs	r3, #0
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	e017      	b.n	80080f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	005a      	lsls	r2, r3, #1
 80080cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	4413      	add	r3, r2
 80080d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80080d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <gen_numname+0x5e>
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80080ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80080f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	3301      	adds	r3, #1
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	2b0f      	cmp	r3, #15
 80080fc:	d9e4      	bls.n	80080c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d8      	bne.n	80080b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800810a:	2307      	movs	r3, #7
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	b2db      	uxtb	r3, r3
 8008118:	3330      	adds	r3, #48	; 0x30
 800811a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800811e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008122:	2b39      	cmp	r3, #57	; 0x39
 8008124:	d904      	bls.n	8008130 <gen_numname+0x9c>
 8008126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800812a:	3307      	adds	r3, #7
 800812c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	1e5a      	subs	r2, r3, #1
 8008134:	62ba      	str	r2, [r7, #40]	; 0x28
 8008136:	3330      	adds	r3, #48	; 0x30
 8008138:	443b      	add	r3, r7
 800813a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800813e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1df      	bne.n	800810e <gen_numname+0x7a>
	ns[i] = '~';
 800814e:	f107 0214 	add.w	r2, r7, #20
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	4413      	add	r3, r2
 8008156:	227e      	movs	r2, #126	; 0x7e
 8008158:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800815a:	2300      	movs	r3, #0
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e002      	b.n	8008166 <gen_numname+0xd2>
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	3301      	adds	r3, #1
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	429a      	cmp	r2, r3
 800816c:	d205      	bcs.n	800817a <gen_numname+0xe6>
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b20      	cmp	r3, #32
 8008178:	d1f2      	bne.n	8008160 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	2b07      	cmp	r3, #7
 800817e:	d807      	bhi.n	8008190 <gen_numname+0xfc>
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	62ba      	str	r2, [r7, #40]	; 0x28
 8008186:	3330      	adds	r3, #48	; 0x30
 8008188:	443b      	add	r3, r7
 800818a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800818e:	e000      	b.n	8008192 <gen_numname+0xfe>
 8008190:	2120      	movs	r1, #32
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	627a      	str	r2, [r7, #36]	; 0x24
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	460a      	mov	r2, r1
 800819e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	d9e9      	bls.n	800817a <gen_numname+0xe6>
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	3730      	adds	r7, #48	; 0x30
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80081bc:	230b      	movs	r3, #11
 80081be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	0852      	lsrs	r2, r2, #1
 80081c6:	01db      	lsls	r3, r3, #7
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	6079      	str	r1, [r7, #4]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	3b01      	subs	r3, #1
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1ed      	bne.n	80081c0 <sum_sfn+0x10>
	return sum;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80081fe:	2100      	movs	r1, #0
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fc89 	bl	8007b18 <dir_sdi>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <dir_find+0x24>
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	e0a9      	b.n	8008368 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008214:	23ff      	movs	r3, #255	; 0xff
 8008216:	753b      	strb	r3, [r7, #20]
 8008218:	7d3b      	ldrb	r3, [r7, #20]
 800821a:	757b      	strb	r3, [r7, #21]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	4619      	mov	r1, r3
 800822a:	6938      	ldr	r0, [r7, #16]
 800822c:	f7ff f894 	bl	8007358 <move_window>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 8090 	bne.w	800835c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008244:	7dbb      	ldrb	r3, [r7, #22]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <dir_find+0x60>
 800824a:	2304      	movs	r3, #4
 800824c:	75fb      	strb	r3, [r7, #23]
 800824e:	e08a      	b.n	8008366 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	330b      	adds	r3, #11
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800825c:	73fb      	strb	r3, [r7, #15]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7bfa      	ldrb	r2, [r7, #15]
 8008262:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008264:	7dbb      	ldrb	r3, [r7, #22]
 8008266:	2be5      	cmp	r3, #229	; 0xe5
 8008268:	d007      	beq.n	800827a <dir_find+0x8a>
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d009      	beq.n	8008288 <dir_find+0x98>
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d006      	beq.n	8008288 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800827a:	23ff      	movs	r3, #255	; 0xff
 800827c:	757b      	strb	r3, [r7, #21]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f04f 32ff 	mov.w	r2, #4294967295
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
 8008286:	e05e      	b.n	8008346 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2b0f      	cmp	r3, #15
 800828c:	d136      	bne.n	80082fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d154      	bne.n	8008346 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800829c:	7dbb      	ldrb	r3, [r7, #22]
 800829e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	7b5b      	ldrb	r3, [r3, #13]
 80082ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80082ae:	7dbb      	ldrb	r3, [r7, #22]
 80082b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b4:	75bb      	strb	r3, [r7, #22]
 80082b6:	7dbb      	ldrb	r3, [r7, #22]
 80082b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80082c2:	7dba      	ldrb	r2, [r7, #22]
 80082c4:	7d7b      	ldrb	r3, [r7, #21]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d115      	bne.n	80082f6 <dir_find+0x106>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	330d      	adds	r3, #13
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	7d3a      	ldrb	r2, [r7, #20]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d10e      	bne.n	80082f6 <dir_find+0x106>
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7ff fdfe 	bl	8007ee4 <cmp_lfn>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <dir_find+0x106>
 80082ee:	7d7b      	ldrb	r3, [r7, #21]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	e000      	b.n	80082f8 <dir_find+0x108>
 80082f6:	23ff      	movs	r3, #255	; 0xff
 80082f8:	757b      	strb	r3, [r7, #21]
 80082fa:	e024      	b.n	8008346 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80082fc:	7d7b      	ldrb	r3, [r7, #21]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <dir_find+0x126>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff ff52 	bl	80081b0 <sum_sfn>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	7d3b      	ldrb	r3, [r7, #20]
 8008312:	4293      	cmp	r3, r2
 8008314:	d024      	beq.n	8008360 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <dir_find+0x14a>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a18      	ldr	r0, [r3, #32]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	220b      	movs	r2, #11
 800832e:	4619      	mov	r1, r3
 8008330:	f7fe fe28 	bl	8006f84 <mem_cmp>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d014      	beq.n	8008364 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800833a:	23ff      	movs	r3, #255	; 0xff
 800833c:	757b      	strb	r3, [r7, #21]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f04f 32ff 	mov.w	r2, #4294967295
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fc6e 	bl	8007c2a <dir_next>
 800834e:	4603      	mov	r3, r0
 8008350:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f43f af65 	beq.w	8008224 <dir_find+0x34>
 800835a:	e004      	b.n	8008366 <dir_find+0x176>
		if (res != FR_OK) break;
 800835c:	bf00      	nop
 800835e:	e002      	b.n	8008366 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008360:	bf00      	nop
 8008362:	e000      	b.n	8008366 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008364:	bf00      	nop

	return res;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08c      	sub	sp, #48	; 0x30
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008384:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <dir_register+0x20>
 800838c:	2306      	movs	r3, #6
 800838e:	e0e0      	b.n	8008552 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008390:	2300      	movs	r3, #0
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
 8008394:	e002      	b.n	800839c <dir_register+0x2c>
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	3301      	adds	r3, #1
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f4      	bne.n	8008396 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	220c      	movs	r2, #12
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fda9 	bl	8006f10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d032      	beq.n	800842e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2240      	movs	r2, #64	; 0x40
 80083cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80083d0:	2301      	movs	r3, #1
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80083d4:	e016      	b.n	8008404 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	f107 010c 	add.w	r1, r7, #12
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	f7ff fe55 	bl	8008094 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ff00 	bl	80081f0 <dir_find>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80083f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	3301      	adds	r3, #1
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	2b63      	cmp	r3, #99	; 0x63
 8008408:	d9e5      	bls.n	80083d6 <dir_register+0x66>
 800840a:	e000      	b.n	800840e <dir_register+0x9e>
			if (res != FR_OK) break;
 800840c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	2b64      	cmp	r3, #100	; 0x64
 8008412:	d101      	bne.n	8008418 <dir_register+0xa8>
 8008414:	2307      	movs	r3, #7
 8008416:	e09c      	b.n	8008552 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800841c:	2b04      	cmp	r3, #4
 800841e:	d002      	beq.n	8008426 <dir_register+0xb6>
 8008420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008424:	e095      	b.n	8008552 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008426:	7dfa      	ldrb	r2, [r7, #23]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <dir_register+0xd8>
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	330c      	adds	r3, #12
 800843c:	4a47      	ldr	r2, [pc, #284]	; (800855c <dir_register+0x1ec>)
 800843e:	fba2 2303 	umull	r2, r3, r2, r3
 8008442:	089b      	lsrs	r3, r3, #2
 8008444:	3301      	adds	r3, #1
 8008446:	e000      	b.n	800844a <dir_register+0xda>
 8008448:	2301      	movs	r3, #1
 800844a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800844c:	6a39      	ldr	r1, [r7, #32]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff fcc1 	bl	8007dd6 <dir_alloc>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800845a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d148      	bne.n	80084f4 <dir_register+0x184>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	3b01      	subs	r3, #1
 8008466:	623b      	str	r3, [r7, #32]
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d042      	beq.n	80084f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695a      	ldr	r2, [r3, #20]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	015b      	lsls	r3, r3, #5
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7ff fb4c 	bl	8007b18 <dir_sdi>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d132      	bne.n	80084f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3324      	adds	r3, #36	; 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fe8c 	bl	80081b0 <sum_sfn>
 8008498:	4603      	mov	r3, r0
 800849a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	4619      	mov	r1, r3
 80084a2:	69f8      	ldr	r0, [r7, #28]
 80084a4:	f7fe ff58 	bl	8007358 <move_window>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80084ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d11d      	bne.n	80084f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	6918      	ldr	r0, [r3, #16]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a19      	ldr	r1, [r3, #32]
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	7efb      	ldrb	r3, [r7, #27]
 80084c4:	f7ff fd7e 	bl	8007fc4 <put_lfn>
				fs->wflag = 1;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2201      	movs	r2, #1
 80084cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff fbaa 	bl	8007c2a <dir_next>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80084dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d107      	bne.n	80084f4 <dir_register+0x184>
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	623b      	str	r3, [r7, #32]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1d5      	bne.n	800849c <dir_register+0x12c>
 80084f0:	e000      	b.n	80084f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80084f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80084f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d128      	bne.n	800854e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	4619      	mov	r1, r3
 8008502:	69f8      	ldr	r0, [r7, #28]
 8008504:	f7fe ff28 	bl	8007358 <move_window>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800850e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008512:	2b00      	cmp	r3, #0
 8008514:	d11b      	bne.n	800854e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	2220      	movs	r2, #32
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fd16 	bl	8006f50 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a18      	ldr	r0, [r3, #32]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	220b      	movs	r2, #11
 800852e:	4619      	mov	r1, r3
 8008530:	f7fe fcee 	bl	8006f10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	330c      	adds	r3, #12
 8008540:	f002 0218 	and.w	r2, r2, #24
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2201      	movs	r2, #1
 800854c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800854e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008552:	4618      	mov	r0, r3
 8008554:	3730      	adds	r7, #48	; 0x30
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	4ec4ec4f 	.word	0x4ec4ec4f

08008560 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	; 0x28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	61ba      	str	r2, [r7, #24]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800858e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008590:	2b1f      	cmp	r3, #31
 8008592:	d940      	bls.n	8008616 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008596:	2b2f      	cmp	r3, #47	; 0x2f
 8008598:	d006      	beq.n	80085a8 <create_name+0x48>
 800859a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800859c:	2b5c      	cmp	r3, #92	; 0x5c
 800859e:	d110      	bne.n	80085c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085a0:	e002      	b.n	80085a8 <create_name+0x48>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	3301      	adds	r3, #1
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	4413      	add	r3, r2
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b2f      	cmp	r3, #47	; 0x2f
 80085b2:	d0f6      	beq.n	80085a2 <create_name+0x42>
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	4413      	add	r3, r2
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b5c      	cmp	r3, #92	; 0x5c
 80085be:	d0f0      	beq.n	80085a2 <create_name+0x42>
			break;
 80085c0:	e02a      	b.n	8008618 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2bfe      	cmp	r3, #254	; 0xfe
 80085c6:	d901      	bls.n	80085cc <create_name+0x6c>
 80085c8:	2306      	movs	r3, #6
 80085ca:	e17d      	b.n	80088c8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80085cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80085d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085d4:	2101      	movs	r1, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fe44 	bl	800a264 <ff_convert>
 80085dc:	4603      	mov	r3, r0
 80085de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80085e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <create_name+0x8a>
 80085e6:	2306      	movs	r3, #6
 80085e8:	e16e      	b.n	80088c8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80085ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085ec:	2b7f      	cmp	r3, #127	; 0x7f
 80085ee:	d809      	bhi.n	8008604 <create_name+0xa4>
 80085f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085f2:	4619      	mov	r1, r3
 80085f4:	488d      	ldr	r0, [pc, #564]	; (800882c <create_name+0x2cc>)
 80085f6:	f7fe fceb 	bl	8006fd0 <chk_chr>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <create_name+0xa4>
 8008600:	2306      	movs	r3, #6
 8008602:	e161      	b.n	80088c8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	617a      	str	r2, [r7, #20]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008612:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008614:	e7b4      	b.n	8008580 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008616:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	441a      	add	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008624:	2b1f      	cmp	r3, #31
 8008626:	d801      	bhi.n	800862c <create_name+0xcc>
 8008628:	2304      	movs	r3, #4
 800862a:	e000      	b.n	800862e <create_name+0xce>
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008632:	e011      	b.n	8008658 <create_name+0xf8>
		w = lfn[di - 1];
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800863a:	3b01      	subs	r3, #1
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008648:	2b20      	cmp	r3, #32
 800864a:	d002      	beq.n	8008652 <create_name+0xf2>
 800864c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800864e:	2b2e      	cmp	r3, #46	; 0x2e
 8008650:	d106      	bne.n	8008660 <create_name+0x100>
		di--;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3b01      	subs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1ea      	bne.n	8008634 <create_name+0xd4>
 800865e:	e000      	b.n	8008662 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008660:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	2200      	movs	r2, #0
 800866c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <create_name+0x118>
 8008674:	2306      	movs	r3, #6
 8008676:	e127      	b.n	80088c8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	220b      	movs	r2, #11
 800867e:	2120      	movs	r1, #32
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fc65 	bl	8006f50 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e002      	b.n	8008692 <create_name+0x132>
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	3301      	adds	r3, #1
 8008690:	61bb      	str	r3, [r7, #24]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4413      	add	r3, r2
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	2b20      	cmp	r3, #32
 800869e:	d0f5      	beq.n	800868c <create_name+0x12c>
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	2b2e      	cmp	r3, #46	; 0x2e
 80086ac:	d0ee      	beq.n	800868c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d009      	beq.n	80086c8 <create_name+0x168>
 80086b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b8:	f043 0303 	orr.w	r3, r3, #3
 80086bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80086c0:	e002      	b.n	80086c8 <create_name+0x168>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <create_name+0x182>
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80086d4:	3b01      	subs	r3, #1
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	2b2e      	cmp	r3, #46	; 0x2e
 80086e0:	d1ef      	bne.n	80086c2 <create_name+0x162>

	i = b = 0; ni = 8;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086e8:	2300      	movs	r3, #0
 80086ea:	623b      	str	r3, [r7, #32]
 80086ec:	2308      	movs	r3, #8
 80086ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	61ba      	str	r2, [r7, #24]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4413      	add	r3, r2
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8090 	beq.w	8008828 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800870a:	2b20      	cmp	r3, #32
 800870c:	d006      	beq.n	800871c <create_name+0x1bc>
 800870e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008710:	2b2e      	cmp	r3, #46	; 0x2e
 8008712:	d10a      	bne.n	800872a <create_name+0x1ca>
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	429a      	cmp	r2, r3
 800871a:	d006      	beq.n	800872a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800871c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008720:	f043 0303 	orr.w	r3, r3, #3
 8008724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008728:	e07d      	b.n	8008826 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800872a:	6a3a      	ldr	r2, [r7, #32]
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	429a      	cmp	r2, r3
 8008730:	d203      	bcs.n	800873a <create_name+0x1da>
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	429a      	cmp	r2, r3
 8008738:	d123      	bne.n	8008782 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b0b      	cmp	r3, #11
 800873e:	d106      	bne.n	800874e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008744:	f043 0303 	orr.w	r3, r3, #3
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800874c:	e075      	b.n	800883a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	429a      	cmp	r2, r3
 8008754:	d005      	beq.n	8008762 <create_name+0x202>
 8008756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800875a:	f043 0303 	orr.w	r3, r3, #3
 800875e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	429a      	cmp	r2, r3
 8008768:	d866      	bhi.n	8008838 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	2308      	movs	r3, #8
 8008770:	623b      	str	r3, [r7, #32]
 8008772:	230b      	movs	r3, #11
 8008774:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008780:	e051      	b.n	8008826 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008784:	2b7f      	cmp	r3, #127	; 0x7f
 8008786:	d914      	bls.n	80087b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fd69 	bl	800a264 <ff_convert>
 8008792:	4603      	mov	r3, r0
 8008794:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <create_name+0x246>
 800879c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800879e:	3b80      	subs	r3, #128	; 0x80
 80087a0:	4a23      	ldr	r2, [pc, #140]	; (8008830 <create_name+0x2d0>)
 80087a2:	5cd3      	ldrb	r3, [r2, r3]
 80087a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80087a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087aa:	f043 0302 	orr.w	r3, r3, #2
 80087ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80087b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <create_name+0x268>
 80087b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087ba:	4619      	mov	r1, r3
 80087bc:	481d      	ldr	r0, [pc, #116]	; (8008834 <create_name+0x2d4>)
 80087be:	f7fe fc07 	bl	8006fd0 <chk_chr>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80087c8:	235f      	movs	r3, #95	; 0x5f
 80087ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80087cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d0:	f043 0303 	orr.w	r3, r3, #3
 80087d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087d8:	e01b      	b.n	8008812 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80087da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087dc:	2b40      	cmp	r3, #64	; 0x40
 80087de:	d909      	bls.n	80087f4 <create_name+0x294>
 80087e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087e2:	2b5a      	cmp	r3, #90	; 0x5a
 80087e4:	d806      	bhi.n	80087f4 <create_name+0x294>
					b |= 2;
 80087e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087ea:	f043 0302 	orr.w	r3, r3, #2
 80087ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80087f2:	e00e      	b.n	8008812 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80087f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f6:	2b60      	cmp	r3, #96	; 0x60
 80087f8:	d90b      	bls.n	8008812 <create_name+0x2b2>
 80087fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087fc:	2b7a      	cmp	r3, #122	; 0x7a
 80087fe:	d808      	bhi.n	8008812 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800880c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800880e:	3b20      	subs	r3, #32
 8008810:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	623a      	str	r2, [r7, #32]
 8008818:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800881a:	b2d1      	uxtb	r1, r2
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	460a      	mov	r2, r1
 8008822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008826:	e763      	b.n	80086f0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008828:	bf00      	nop
 800882a:	e006      	b.n	800883a <create_name+0x2da>
 800882c:	08010c9c 	.word	0x08010c9c
 8008830:	080110c8 	.word	0x080110c8
 8008834:	08010ca8 	.word	0x08010ca8
			if (si > di) break;			/* No extension */
 8008838:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008840:	2be5      	cmp	r3, #229	; 0xe5
 8008842:	d103      	bne.n	800884c <create_name+0x2ec>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2205      	movs	r2, #5
 8008848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d104      	bne.n	800885c <create_name+0x2fc>
 8008852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800885c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008860:	f003 030c 	and.w	r3, r3, #12
 8008864:	2b0c      	cmp	r3, #12
 8008866:	d005      	beq.n	8008874 <create_name+0x314>
 8008868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	2b03      	cmp	r3, #3
 8008872:	d105      	bne.n	8008880 <create_name+0x320>
 8008874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008878:	f043 0302 	orr.w	r3, r3, #2
 800887c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d117      	bne.n	80088bc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800888c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	2b01      	cmp	r3, #1
 8008896:	d105      	bne.n	80088a4 <create_name+0x344>
 8008898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800889c:	f043 0310 	orr.w	r3, r3, #16
 80088a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80088a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088a8:	f003 030c 	and.w	r3, r3, #12
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d105      	bne.n	80088bc <create_name+0x35c>
 80088b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b4:	f043 0308 	orr.w	r3, r3, #8
 80088b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80088c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80088c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3728      	adds	r7, #40	; 0x28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80088e4:	e002      	b.n	80088ec <follow_path+0x1c>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b2f      	cmp	r3, #47	; 0x2f
 80088f2:	d0f8      	beq.n	80088e6 <follow_path+0x16>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b5c      	cmp	r3, #92	; 0x5c
 80088fa:	d0f4      	beq.n	80088e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2200      	movs	r2, #0
 8008900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b1f      	cmp	r3, #31
 8008908:	d80a      	bhi.n	8008920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008912:	2100      	movs	r1, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f8ff 	bl	8007b18 <dir_sdi>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]
 800891e:	e048      	b.n	80089b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008920:	463b      	mov	r3, r7
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fe1b 	bl	8008560 <create_name>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d139      	bne.n	80089a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fc5b 	bl	80081f0 <dir_find>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	2b04      	cmp	r3, #4
 8008950:	d12c      	bne.n	80089ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d127      	bne.n	80089ac <follow_path+0xdc>
 800895c:	2305      	movs	r3, #5
 800895e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008960:	e024      	b.n	80089ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d121      	bne.n	80089b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	799b      	ldrb	r3, [r3, #6]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008978:	2305      	movs	r3, #5
 800897a:	75fb      	strb	r3, [r7, #23]
 800897c:	e019      	b.n	80089b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	8992      	ldrh	r2, [r2, #12]
 800898c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008990:	fb00 f202 	mul.w	r2, r0, r2
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	440b      	add	r3, r1
 8008998:	4619      	mov	r1, r3
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fa62 	bl	8007e64 <ld_clust>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089a6:	e7bb      	b.n	8008920 <follow_path+0x50>
			if (res != FR_OK) break;
 80089a8:	bf00      	nop
 80089aa:	e002      	b.n	80089b2 <follow_path+0xe2>
				break;
 80089ac:	bf00      	nop
 80089ae:	e000      	b.n	80089b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089b0:	bf00      	nop
			}
		}
	}

	return res;
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80089c4:	f04f 33ff 	mov.w	r3, #4294967295
 80089c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d031      	beq.n	8008a36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e002      	b.n	80089e0 <get_ldnumber+0x24>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	3301      	adds	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b1f      	cmp	r3, #31
 80089e6:	d903      	bls.n	80089f0 <get_ldnumber+0x34>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b3a      	cmp	r3, #58	; 0x3a
 80089ee:	d1f4      	bne.n	80089da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b3a      	cmp	r3, #58	; 0x3a
 80089f6:	d11c      	bne.n	8008a32 <get_ldnumber+0x76>
			tp = *path;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	60fa      	str	r2, [r7, #12]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	3b30      	subs	r3, #48	; 0x30
 8008a08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	d80e      	bhi.n	8008a2e <get_ldnumber+0x72>
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d10a      	bne.n	8008a2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d107      	bne.n	8008a2e <get_ldnumber+0x72>
					vol = (int)i;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	3301      	adds	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	e002      	b.n	8008a38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008a36:	693b      	ldr	r3, [r7, #16]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
	...

08008a44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	70da      	strb	r2, [r3, #3]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fe fc7a 	bl	8007358 <move_window>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <check_fs+0x2a>
 8008a6a:	2304      	movs	r3, #4
 8008a6c:	e038      	b.n	8008ae0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3338      	adds	r3, #56	; 0x38
 8008a72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe f9cc 	bl	8006e14 <ld_word>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d001      	beq.n	8008a8c <check_fs+0x48>
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e029      	b.n	8008ae0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a92:	2be9      	cmp	r3, #233	; 0xe9
 8008a94:	d009      	beq.n	8008aaa <check_fs+0x66>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a9c:	2beb      	cmp	r3, #235	; 0xeb
 8008a9e:	d11e      	bne.n	8008ade <check_fs+0x9a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008aa6:	2b90      	cmp	r3, #144	; 0x90
 8008aa8:	d119      	bne.n	8008ade <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3338      	adds	r3, #56	; 0x38
 8008aae:	3336      	adds	r3, #54	; 0x36
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe f9c6 	bl	8006e42 <ld_dword>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008abc:	4a0a      	ldr	r2, [pc, #40]	; (8008ae8 <check_fs+0xa4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d101      	bne.n	8008ac6 <check_fs+0x82>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e00c      	b.n	8008ae0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3338      	adds	r3, #56	; 0x38
 8008aca:	3352      	adds	r3, #82	; 0x52
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe f9b8 	bl	8006e42 <ld_dword>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	4a05      	ldr	r2, [pc, #20]	; (8008aec <check_fs+0xa8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d101      	bne.n	8008ade <check_fs+0x9a>
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008ade:	2302      	movs	r3, #2
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	00544146 	.word	0x00544146
 8008aec:	33544146 	.word	0x33544146

08008af0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b096      	sub	sp, #88	; 0x58
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff ff59 	bl	80089bc <get_ldnumber>
 8008b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da01      	bge.n	8008b16 <find_volume+0x26>
 8008b12:	230b      	movs	r3, #11
 8008b14:	e265      	b.n	8008fe2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b16:	4a9f      	ldr	r2, [pc, #636]	; (8008d94 <find_volume+0x2a4>)
 8008b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <find_volume+0x3a>
 8008b26:	230c      	movs	r3, #12
 8008b28:	e25b      	b.n	8008fe2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01a      	beq.n	8008b76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	785b      	ldrb	r3, [r3, #1]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe f8c7 	bl	8006cd8 <disk_status>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10c      	bne.n	8008b76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <find_volume+0x82>
 8008b62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008b6e:	230a      	movs	r3, #10
 8008b70:	e237      	b.n	8008fe2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008b72:	2300      	movs	r3, #0
 8008b74:	e235      	b.n	8008fe2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	2200      	movs	r2, #0
 8008b7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe f8bf 	bl	8006d0c <disk_initialize>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e21e      	b.n	8008fe2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <find_volume+0xca>
 8008baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	e213      	b.n	8008fe2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	7858      	ldrb	r0, [r3, #1]
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	f7fe f907 	bl	8006dd8 <disk_ioctl>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <find_volume+0xe4>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e206      	b.n	8008fe2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	899b      	ldrh	r3, [r3, #12]
 8008bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bdc:	d80d      	bhi.n	8008bfa <find_volume+0x10a>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	899b      	ldrh	r3, [r3, #12]
 8008be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be6:	d308      	bcc.n	8008bfa <find_volume+0x10a>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	899b      	ldrh	r3, [r3, #12]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	899b      	ldrh	r3, [r3, #12]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <find_volume+0x10e>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e1f1      	b.n	8008fe2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c06:	f7ff ff1d 	bl	8008a44 <check_fs>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d149      	bne.n	8008cac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c18:	2300      	movs	r3, #0
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c1c:	e01e      	b.n	8008c5c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c2c:	4413      	add	r3, r2
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	3304      	adds	r3, #4
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <find_volume+0x158>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe f8ff 	bl	8006e42 <ld_dword>
 8008c44:	4602      	mov	r2, r0
 8008c46:	e000      	b.n	8008c4a <find_volume+0x15a>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	3358      	adds	r3, #88	; 0x58
 8008c50:	443b      	add	r3, r7
 8008c52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c58:	3301      	adds	r3, #1
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d9dd      	bls.n	8008c1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008c62:	2300      	movs	r3, #0
 8008c64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <find_volume+0x182>
 8008c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	3358      	adds	r3, #88	; 0x58
 8008c78:	443b      	add	r3, r7
 8008c7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008c7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <find_volume+0x1a2>
 8008c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c8a:	f7ff fedb 	bl	8008a44 <check_fs>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	e000      	b.n	8008c94 <find_volume+0x1a4>
 8008c92:	2303      	movs	r3, #3
 8008c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d905      	bls.n	8008cac <find_volume+0x1bc>
 8008ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d9e2      	bls.n	8008c72 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d101      	bne.n	8008cb8 <find_volume+0x1c8>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e194      	b.n	8008fe2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d901      	bls.n	8008cc4 <find_volume+0x1d4>
 8008cc0:	230d      	movs	r3, #13
 8008cc2:	e18e      	b.n	8008fe2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	3338      	adds	r3, #56	; 0x38
 8008cc8:	330b      	adds	r3, #11
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe f8a2 	bl	8006e14 <ld_word>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	899b      	ldrh	r3, [r3, #12]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d001      	beq.n	8008ce0 <find_volume+0x1f0>
 8008cdc:	230d      	movs	r3, #13
 8008cde:	e180      	b.n	8008fe2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	3338      	adds	r3, #56	; 0x38
 8008ce4:	3316      	adds	r3, #22
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe f894 	bl	8006e14 <ld_word>
 8008cec:	4603      	mov	r3, r0
 8008cee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <find_volume+0x214>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	3338      	adds	r3, #56	; 0x38
 8008cfa:	3324      	adds	r3, #36	; 0x24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe f8a0 	bl	8006e42 <ld_dword>
 8008d02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	789b      	ldrb	r3, [r3, #2]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d005      	beq.n	8008d28 <find_volume+0x238>
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	789b      	ldrb	r3, [r3, #2]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d001      	beq.n	8008d28 <find_volume+0x238>
 8008d24:	230d      	movs	r3, #13
 8008d26:	e15c      	b.n	8008fe2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	789b      	ldrb	r3, [r3, #2]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	895b      	ldrh	r3, [r3, #10]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <find_volume+0x26c>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	895b      	ldrh	r3, [r3, #10]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	895b      	ldrh	r3, [r3, #10]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <find_volume+0x270>
 8008d5c:	230d      	movs	r3, #13
 8008d5e:	e140      	b.n	8008fe2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	3338      	adds	r3, #56	; 0x38
 8008d64:	3311      	adds	r3, #17
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe f854 	bl	8006e14 <ld_word>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	891b      	ldrh	r3, [r3, #8]
 8008d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7a:	8992      	ldrh	r2, [r2, #12]
 8008d7c:	0952      	lsrs	r2, r2, #5
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d84:	fb01 f202 	mul.w	r2, r1, r2
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <find_volume+0x2a8>
 8008d90:	230d      	movs	r3, #13
 8008d92:	e126      	b.n	8008fe2 <find_volume+0x4f2>
 8008d94:	20000840 	.word	0x20000840

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	3338      	adds	r3, #56	; 0x38
 8008d9c:	3313      	adds	r3, #19
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe f838 	bl	8006e14 <ld_word>
 8008da4:	4603      	mov	r3, r0
 8008da6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <find_volume+0x2cc>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	3338      	adds	r3, #56	; 0x38
 8008db2:	3320      	adds	r3, #32
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe f844 	bl	8006e42 <ld_dword>
 8008dba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	3338      	adds	r3, #56	; 0x38
 8008dc0:	330e      	adds	r3, #14
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe f826 	bl	8006e14 <ld_word>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <find_volume+0x2e6>
 8008dd2:	230d      	movs	r3, #13
 8008dd4:	e105      	b.n	8008fe2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dda:	4413      	add	r3, r2
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	8911      	ldrh	r1, [r2, #8]
 8008de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008de2:	8992      	ldrh	r2, [r2, #12]
 8008de4:	0952      	lsrs	r2, r2, #5
 8008de6:	b292      	uxth	r2, r2
 8008de8:	fbb1 f2f2 	udiv	r2, r1, r2
 8008dec:	b292      	uxth	r2, r2
 8008dee:	4413      	add	r3, r2
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d201      	bcs.n	8008dfe <find_volume+0x30e>
 8008dfa:	230d      	movs	r3, #13
 8008dfc:	e0f1      	b.n	8008fe2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e06:	8952      	ldrh	r2, [r2, #10]
 8008e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <find_volume+0x328>
 8008e14:	230d      	movs	r3, #13
 8008e16:	e0e4      	b.n	8008fe2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d802      	bhi.n	8008e2e <find_volume+0x33e>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d802      	bhi.n	8008e3e <find_volume+0x34e>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e50:	441a      	add	r2, r3
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008e56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	441a      	add	r2, r3
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d11e      	bne.n	8008ea6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	3338      	adds	r3, #56	; 0x38
 8008e6c:	332a      	adds	r3, #42	; 0x2a
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fd ffd0 	bl	8006e14 <ld_word>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <find_volume+0x38e>
 8008e7a:	230d      	movs	r3, #13
 8008e7c:	e0b1      	b.n	8008fe2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	891b      	ldrh	r3, [r3, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <find_volume+0x39a>
 8008e86:	230d      	movs	r3, #13
 8008e88:	e0ab      	b.n	8008fe2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	3338      	adds	r3, #56	; 0x38
 8008e8e:	332c      	adds	r3, #44	; 0x2c
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd ffd6 	bl	8006e42 <ld_dword>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea4:	e01f      	b.n	8008ee6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	891b      	ldrh	r3, [r3, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <find_volume+0x3c2>
 8008eae:	230d      	movs	r3, #13
 8008eb0:	e097      	b.n	8008fe2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb8:	441a      	add	r2, r3
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d103      	bne.n	8008ece <find_volume+0x3de>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	e00a      	b.n	8008ee4 <find_volume+0x3f4>
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4413      	add	r3, r2
 8008ed8:	085a      	lsrs	r2, r3, #1
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	6a1a      	ldr	r2, [r3, #32]
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	899b      	ldrh	r3, [r3, #12]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ef8:	8989      	ldrh	r1, [r1, #12]
 8008efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d201      	bcs.n	8008f06 <find_volume+0x416>
 8008f02:	230d      	movs	r3, #13
 8008f04:	e06d      	b.n	8008fe2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0c:	619a      	str	r2, [r3, #24]
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2280      	movs	r2, #128	; 0x80
 8008f1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d149      	bne.n	8008fb8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	3338      	adds	r3, #56	; 0x38
 8008f28:	3330      	adds	r3, #48	; 0x30
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd ff72 	bl	8006e14 <ld_word>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d140      	bne.n	8008fb8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f38:	3301      	adds	r3, #1
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f3e:	f7fe fa0b 	bl	8007358 <move_window>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d137      	bne.n	8008fb8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	3338      	adds	r3, #56	; 0x38
 8008f52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fd ff5c 	bl	8006e14 <ld_word>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d127      	bne.n	8008fb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	3338      	adds	r3, #56	; 0x38
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fd ff68 	bl	8006e42 <ld_dword>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <find_volume+0x4fc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d11e      	bne.n	8008fb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	3338      	adds	r3, #56	; 0x38
 8008f7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fd ff5d 	bl	8006e42 <ld_dword>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4a19      	ldr	r2, [pc, #100]	; (8008ff0 <find_volume+0x500>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d113      	bne.n	8008fb8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	3338      	adds	r3, #56	; 0x38
 8008f94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fd ff52 	bl	8006e42 <ld_dword>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	3338      	adds	r3, #56	; 0x38
 8008fa8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd ff48 	bl	8006e42 <ld_dword>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008fbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <find_volume+0x504>)
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <find_volume+0x504>)
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <find_volume+0x504>)
 8008fce:	881a      	ldrh	r2, [r3, #0]
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	4a08      	ldr	r2, [pc, #32]	; (8008ff8 <find_volume+0x508>)
 8008fd8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008fda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fdc:	f7fe f954 	bl	8007288 <clear_lock>
#endif
	return FR_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3758      	adds	r7, #88	; 0x58
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	41615252 	.word	0x41615252
 8008ff0:	61417272 	.word	0x61417272
 8008ff4:	20000844 	.word	0x20000844
 8008ff8:	20000868 	.word	0x20000868

08008ffc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009006:	2309      	movs	r3, #9
 8009008:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01c      	beq.n	800904a <validate+0x4e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d018      	beq.n	800904a <validate+0x4e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d013      	beq.n	800904a <validate+0x4e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	889a      	ldrh	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	88db      	ldrh	r3, [r3, #6]
 800902c:	429a      	cmp	r2, r3
 800902e:	d10c      	bne.n	800904a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	4618      	mov	r0, r3
 8009038:	f7fd fe4e 	bl	8006cd8 <disk_status>
 800903c:	4603      	mov	r3, r0
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <validate+0x4e>
			res = FR_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <validate+0x5a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	e000      	b.n	8009058 <validate+0x5c>
 8009056:	2300      	movs	r3, #0
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	6013      	str	r3, [r2, #0]
	return res;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800907a:	f107 0310 	add.w	r3, r7, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fc9c 	bl	80089bc <get_ldnumber>
 8009084:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	2b00      	cmp	r3, #0
 800908a:	da01      	bge.n	8009090 <f_mount+0x28>
 800908c:	230b      	movs	r3, #11
 800908e:	e02b      	b.n	80090e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009090:	4a17      	ldr	r2, [pc, #92]	; (80090f0 <f_mount+0x88>)
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009098:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090a0:	69b8      	ldr	r0, [r7, #24]
 80090a2:	f7fe f8f1 	bl	8007288 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2200      	movs	r2, #0
 80090aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	490d      	ldr	r1, [pc, #52]	; (80090f0 <f_mount+0x88>)
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <f_mount+0x66>
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d001      	beq.n	80090d2 <f_mount+0x6a>
 80090ce:	2300      	movs	r3, #0
 80090d0:	e00a      	b.n	80090e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090d2:	f107 010c 	add.w	r1, r7, #12
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	2200      	movs	r2, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fd07 	bl	8008af0 <find_volume>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20000840 	.word	0x20000840

080090f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b09a      	sub	sp, #104	; 0x68
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <f_open+0x18>
 8009108:	2309      	movs	r3, #9
 800910a:	e1bb      	b.n	8009484 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009112:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009114:	79fa      	ldrb	r2, [r7, #7]
 8009116:	f107 0114 	add.w	r1, r7, #20
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fce6 	bl	8008af0 <find_volume>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800912a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 819f 	bne.w	8009472 <f_open+0x37e>
		dj.obj.fs = fs;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	f107 0318 	add.w	r3, r7, #24
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fbc5 	bl	80088d0 <follow_path>
 8009146:	4603      	mov	r3, r0
 8009148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800914c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11a      	bne.n	800918a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009154:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009158:	b25b      	sxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	da03      	bge.n	8009166 <f_open+0x72>
				res = FR_INVALID_NAME;
 800915e:	2306      	movs	r3, #6
 8009160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009164:	e011      	b.n	800918a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	f107 0318 	add.w	r3, r7, #24
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd ff40 	bl	8007004 <chk_lock>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	f003 031c 	and.w	r3, r3, #28
 8009190:	2b00      	cmp	r3, #0
 8009192:	d07f      	beq.n	8009294 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009194:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009198:	2b00      	cmp	r3, #0
 800919a:	d017      	beq.n	80091cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800919c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d10e      	bne.n	80091c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80091a4:	f7fd ff88 	bl	80070b8 <enq_lock>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <f_open+0xc8>
 80091ae:	f107 0318 	add.w	r3, r7, #24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff f8dc 	bl	8008370 <dir_register>
 80091b8:	4603      	mov	r3, r0
 80091ba:	e000      	b.n	80091be <f_open+0xca>
 80091bc:	2312      	movs	r3, #18
 80091be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	f043 0308 	orr.w	r3, r3, #8
 80091c8:	71fb      	strb	r3, [r7, #7]
 80091ca:	e010      	b.n	80091ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091cc:	7fbb      	ldrb	r3, [r7, #30]
 80091ce:	f003 0311 	and.w	r3, r3, #17
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <f_open+0xea>
					res = FR_DENIED;
 80091d6:	2307      	movs	r3, #7
 80091d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80091dc:	e007      	b.n	80091ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <f_open+0xfa>
 80091e8:	2308      	movs	r3, #8
 80091ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80091ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d168      	bne.n	80092c8 <f_open+0x1d4>
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d063      	beq.n	80092c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009200:	f7fd fd0e 	bl	8006c20 <get_fattime>
 8009204:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	330e      	adds	r3, #14
 800920a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800920c:	4618      	mov	r0, r3
 800920e:	f7fd fe54 	bl	8006eba <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	3316      	adds	r3, #22
 8009216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009218:	4618      	mov	r0, r3
 800921a:	f7fd fe4e 	bl	8006eba <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	330b      	adds	r3, #11
 8009222:	2220      	movs	r2, #32
 8009224:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fe19 	bl	8007e64 <ld_clust>
 8009232:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009238:	2200      	movs	r2, #0
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe fe31 	bl	8007ea2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	331c      	adds	r3, #28
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f7fd fe37 	bl	8006eba <st_dword>
					fs->wflag = 1;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2201      	movs	r2, #1
 8009250:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009254:	2b00      	cmp	r3, #0
 8009256:	d037      	beq.n	80092c8 <f_open+0x1d4>
						dw = fs->winsect;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800925e:	f107 0318 	add.w	r3, r7, #24
 8009262:	2200      	movs	r2, #0
 8009264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fb22 	bl	80078b0 <remove_chain>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009276:	2b00      	cmp	r3, #0
 8009278:	d126      	bne.n	80092c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe f86a 	bl	8007358 <move_window>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800928e:	3a01      	subs	r2, #1
 8009290:	615a      	str	r2, [r3, #20]
 8009292:	e019      	b.n	80092c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009298:	2b00      	cmp	r3, #0
 800929a:	d115      	bne.n	80092c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800929c:	7fbb      	ldrb	r3, [r7, #30]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80092a6:	2304      	movs	r3, #4
 80092a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80092ac:	e00c      	b.n	80092c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d007      	beq.n	80092c8 <f_open+0x1d4>
 80092b8:	7fbb      	ldrb	r3, [r7, #30]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <f_open+0x1d4>
						res = FR_DENIED;
 80092c2:	2307      	movs	r3, #7
 80092c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80092c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d128      	bne.n	8009322 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80092ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	f023 0301 	bic.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	f107 0318 	add.w	r3, r7, #24
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd fef5 	bl	80070f8 <inc_lock>
 800930e:	4602      	mov	r2, r0
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <f_open+0x22e>
 800931c:	2302      	movs	r3, #2
 800931e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009326:	2b00      	cmp	r3, #0
 8009328:	f040 80a3 	bne.w	8009472 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fd96 	bl	8007e64 <ld_clust>
 8009338:	4602      	mov	r2, r0
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	331c      	adds	r3, #28
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fd7d 	bl	8006e42 <ld_dword>
 8009348:	4602      	mov	r2, r0
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	88da      	ldrh	r2, [r3, #6]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	79fa      	ldrb	r2, [r7, #7]
 8009366:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3330      	adds	r3, #48	; 0x30
 800937e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd fde3 	bl	8006f50 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d06e      	beq.n	8009472 <f_open+0x37e>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d06a      	beq.n	8009472 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	895b      	ldrh	r3, [r3, #10]
 80093a8:	461a      	mov	r2, r3
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	899b      	ldrh	r3, [r3, #12]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c0:	e016      	b.n	80093f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f882 	bl	80074d0 <get_fat>
 80093cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80093ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d802      	bhi.n	80093da <f_open+0x2e6>
 80093d4:	2302      	movs	r3, #2
 80093d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80093da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d102      	bne.n	80093e8 <f_open+0x2f4>
 80093e2:	2301      	movs	r3, #1
 80093e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d103      	bne.n	8009400 <f_open+0x30c>
 80093f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d8e0      	bhi.n	80093c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009404:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800940a:	2b00      	cmp	r3, #0
 800940c:	d131      	bne.n	8009472 <f_open+0x37e>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	899b      	ldrh	r3, [r3, #12]
 8009412:	461a      	mov	r2, r3
 8009414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009416:	fbb3 f1f2 	udiv	r1, r3, r2
 800941a:	fb01 f202 	mul.w	r2, r1, r2
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d026      	beq.n	8009472 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe f833 	bl	8007494 <clust2sect>
 800942e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d103      	bne.n	800943e <f_open+0x34a>
						res = FR_INT_ERR;
 8009436:	2302      	movs	r3, #2
 8009438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800943c:	e019      	b.n	8009472 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	899b      	ldrh	r3, [r3, #12]
 8009442:	461a      	mov	r2, r3
 8009444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009446:	fbb3 f2f2 	udiv	r2, r3, r2
 800944a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944c:	441a      	add	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	7858      	ldrb	r0, [r3, #1]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a1a      	ldr	r2, [r3, #32]
 8009460:	2301      	movs	r3, #1
 8009462:	f7fd fc79 	bl	8006d58 <disk_read>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <f_open+0x37e>
 800946c:	2301      	movs	r3, #1
 800946e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <f_open+0x38c>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009484:	4618      	mov	r0, r3
 8009486:	3768      	adds	r7, #104	; 0x68
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08c      	sub	sp, #48	; 0x30
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f107 0210 	add.w	r2, r7, #16
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fda5 	bl	8008ffc <validate>
 80094b2:	4603      	mov	r3, r0
 80094b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80094b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d107      	bne.n	80094d0 <f_write+0x44>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	7d5b      	ldrb	r3, [r3, #21]
 80094c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80094c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <f_write+0x4a>
 80094d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094d4:	e16a      	b.n	80097ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7d1b      	ldrb	r3, [r3, #20]
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <f_write+0x5a>
 80094e2:	2307      	movs	r3, #7
 80094e4:	e162      	b.n	80097ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	699a      	ldr	r2, [r3, #24]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	441a      	add	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f080 814c 	bcs.w	8009790 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	43db      	mvns	r3, r3
 80094fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009500:	e146      	b.n	8009790 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	8992      	ldrh	r2, [r2, #12]
 800950a:	fbb3 f1f2 	udiv	r1, r3, r2
 800950e:	fb01 f202 	mul.w	r2, r1, r2
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 80f1 	bne.w	80096fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	8992      	ldrh	r2, [r2, #12]
 8009522:	fbb3 f3f2 	udiv	r3, r3, r2
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	8952      	ldrh	r2, [r2, #10]
 800952a:	3a01      	subs	r2, #1
 800952c:	4013      	ands	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d143      	bne.n	80095be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d11a      	bne.n	8009580 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fa13 	bl	800797a <create_chain>
 8009554:	62b8      	str	r0, [r7, #40]	; 0x28
 8009556:	e013      	b.n	8009580 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	4619      	mov	r1, r3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7fe fa9f 	bl	8007aaa <clmt_clust>
 800956c:	62b8      	str	r0, [r7, #40]	; 0x28
 800956e:	e007      	b.n	8009580 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fe f9fe 	bl	800797a <create_chain>
 800957e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 8109 	beq.w	800979a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	2b01      	cmp	r3, #1
 800958c:	d104      	bne.n	8009598 <f_write+0x10c>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2202      	movs	r2, #2
 8009592:	755a      	strb	r2, [r3, #21]
 8009594:	2302      	movs	r3, #2
 8009596:	e109      	b.n	80097ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d104      	bne.n	80095aa <f_write+0x11e>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	755a      	strb	r2, [r3, #21]
 80095a6:	2301      	movs	r3, #1
 80095a8:	e100      	b.n	80097ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <f_write+0x132>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	7d1b      	ldrb	r3, [r3, #20]
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da18      	bge.n	80095fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	7858      	ldrb	r0, [r3, #1]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a1a      	ldr	r2, [r3, #32]
 80095d6:	2301      	movs	r3, #1
 80095d8:	f7fd fbde 	bl	8006d98 <disk_write>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d004      	beq.n	80095ec <f_write+0x160>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	755a      	strb	r2, [r3, #21]
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0df      	b.n	80097ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	7d1b      	ldrb	r3, [r3, #20]
 80095f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7fd ff46 	bl	8007494 <clust2sect>
 8009608:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <f_write+0x18e>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2202      	movs	r2, #2
 8009614:	755a      	strb	r2, [r3, #21]
 8009616:	2302      	movs	r3, #2
 8009618:	e0c8      	b.n	80097ac <f_write+0x320>
			sect += csect;
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	4413      	add	r3, r2
 8009620:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	899b      	ldrh	r3, [r3, #12]
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	fbb3 f3f2 	udiv	r3, r3, r2
 800962e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d043      	beq.n	80096be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	4413      	add	r3, r2
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	8952      	ldrh	r2, [r2, #10]
 8009640:	4293      	cmp	r3, r2
 8009642:	d905      	bls.n	8009650 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	895b      	ldrh	r3, [r3, #10]
 8009648:	461a      	mov	r2, r3
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	7858      	ldrb	r0, [r3, #1]
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	69f9      	ldr	r1, [r7, #28]
 800965a:	f7fd fb9d 	bl	8006d98 <disk_write>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <f_write+0x1e2>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2201      	movs	r2, #1
 8009668:	755a      	strb	r2, [r3, #21]
 800966a:	2301      	movs	r3, #1
 800966c:	e09e      	b.n	80097ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a1a      	ldr	r2, [r3, #32]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	6a3a      	ldr	r2, [r7, #32]
 8009678:	429a      	cmp	r2, r3
 800967a:	d918      	bls.n	80096ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a1a      	ldr	r2, [r3, #32]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	8992      	ldrh	r2, [r2, #12]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
 8009692:	69fa      	ldr	r2, [r7, #28]
 8009694:	18d1      	adds	r1, r2, r3
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	899b      	ldrh	r3, [r3, #12]
 800969a:	461a      	mov	r2, r3
 800969c:	f7fd fc38 	bl	8006f10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	7d1b      	ldrb	r3, [r3, #20]
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	899b      	ldrh	r3, [r3, #12]
 80096b2:	461a      	mov	r2, r3
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80096bc:	e04b      	b.n	8009756 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d016      	beq.n	80096f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	699a      	ldr	r2, [r3, #24]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d210      	bcs.n	80096f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	7858      	ldrb	r0, [r3, #1]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096de:	2301      	movs	r3, #1
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	f7fd fb39 	bl	8006d58 <disk_read>
 80096e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	755a      	strb	r2, [r3, #21]
 80096f2:	2301      	movs	r3, #1
 80096f4:	e05a      	b.n	80097ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	899b      	ldrh	r3, [r3, #12]
 8009700:	4618      	mov	r0, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	8992      	ldrh	r2, [r2, #12]
 800970a:	fbb3 f1f2 	udiv	r1, r3, r2
 800970e:	fb01 f202 	mul.w	r2, r1, r2
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	1ac3      	subs	r3, r0, r3
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	429a      	cmp	r2, r3
 800971e:	d901      	bls.n	8009724 <f_write+0x298>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	8992      	ldrh	r2, [r2, #12]
 8009732:	fbb3 f0f2 	udiv	r0, r3, r2
 8009736:	fb00 f202 	mul.w	r2, r0, r2
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	440b      	add	r3, r1
 800973e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009740:	69f9      	ldr	r1, [r7, #28]
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd fbe4 	bl	8006f10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7d1b      	ldrb	r3, [r3, #20]
 800974c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009750:	b2da      	uxtb	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	4413      	add	r3, r2
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699a      	ldr	r2, [r3, #24]
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	441a      	add	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	619a      	str	r2, [r3, #24]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	429a      	cmp	r2, r3
 8009774:	bf38      	it	cc
 8009776:	461a      	movcc	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	60da      	str	r2, [r3, #12]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	441a      	add	r2, r3
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	f47f aeb5 	bne.w	8009502 <f_write+0x76>
 8009798:	e000      	b.n	800979c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800979a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	7d1b      	ldrb	r3, [r3, #20]
 80097a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3730      	adds	r7, #48	; 0x30
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f107 0208 	add.w	r2, r7, #8
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fc19 	bl	8008ffc <validate>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d168      	bne.n	80098a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7d1b      	ldrb	r3, [r3, #20]
 80097d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d062      	beq.n	80098a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7d1b      	ldrb	r3, [r3, #20]
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da15      	bge.n	8009816 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	7858      	ldrb	r0, [r3, #1]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	2301      	movs	r3, #1
 80097fa:	f7fd facd 	bl	8006d98 <disk_write>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <f_sync+0x54>
 8009804:	2301      	movs	r3, #1
 8009806:	e04f      	b.n	80098a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	7d1b      	ldrb	r3, [r3, #20]
 800980c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009810:	b2da      	uxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009816:	f7fd fa03 	bl	8006c20 <get_fattime>
 800981a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7fd fd97 	bl	8007358 <move_window>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d138      	bne.n	80098a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	330b      	adds	r3, #11
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	330b      	adds	r3, #11
 8009844:	f042 0220 	orr.w	r2, r2, #32
 8009848:	b2d2      	uxtb	r2, r2
 800984a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	461a      	mov	r2, r3
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	f7fe fb23 	bl	8007ea2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f103 021c 	add.w	r2, r3, #28
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fd fb26 	bl	8006eba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3316      	adds	r3, #22
 8009872:	6939      	ldr	r1, [r7, #16]
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd fb20 	bl	8006eba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3312      	adds	r3, #18
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd fb00 	bl	8006e86 <st_word>
					fs->wflag = 1;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2201      	movs	r2, #1
 800988a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd fd90 	bl	80073b4 <sync_fs>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7d1b      	ldrb	r3, [r3, #20]
 800989c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff ff7b 	bl	80097b4 <f_sync>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d118      	bne.n	80098fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f107 0208 	add.w	r2, r7, #8
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fb93 	bl	8008ffc <validate>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10c      	bne.n	80098fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fd fc95 	bl	8007214 <dec_lock>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b092      	sub	sp, #72	; 0x48
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009910:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	2200      	movs	r2, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff f8e8 	bl	8008af0 <find_volume>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009926:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800992a:	2b00      	cmp	r3, #0
 800992c:	f040 8099 	bne.w	8009a62 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	699a      	ldr	r2, [r3, #24]
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	3b02      	subs	r3, #2
 8009940:	429a      	cmp	r2, r3
 8009942:	d804      	bhi.n	800994e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e089      	b.n	8009a62 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d128      	bne.n	80099ac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800995a:	2302      	movs	r3, #2
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009968:	4618      	mov	r0, r3
 800996a:	f7fd fdb1 	bl	80074d0 <get_fat>
 800996e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d103      	bne.n	8009980 <f_getfree+0x7c>
 8009978:	2301      	movs	r3, #1
 800997a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800997e:	e063      	b.n	8009a48 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	2b01      	cmp	r3, #1
 8009984:	d103      	bne.n	800998e <f_getfree+0x8a>
 8009986:	2302      	movs	r3, #2
 8009988:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800998c:	e05c      	b.n	8009a48 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <f_getfree+0x96>
 8009994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009996:	3301      	adds	r3, #1
 8009998:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800999a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999c:	3301      	adds	r3, #1
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d3db      	bcc.n	8009962 <f_getfree+0x5e>
 80099aa:	e04d      	b.n	8009a48 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34
 80099bc:	2300      	movs	r3, #0
 80099be:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80099c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d113      	bne.n	80099ee <f_getfree+0xea>
							res = move_window(fs, sect++);
 80099c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80099ce:	4619      	mov	r1, r3
 80099d0:	f7fd fcc2 	bl	8007358 <move_window>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80099da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d131      	bne.n	8009a46 <f_getfree+0x142>
							p = fs->win;
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	3338      	adds	r3, #56	; 0x38
 80099e6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	899b      	ldrh	r3, [r3, #12]
 80099ec:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d10f      	bne.n	8009a16 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80099f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099f8:	f7fd fa0c 	bl	8006e14 <ld_word>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <f_getfree+0x104>
 8009a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a04:	3301      	adds	r3, #1
 8009a06:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a10:	3b02      	subs	r3, #2
 8009a12:	637b      	str	r3, [r7, #52]	; 0x34
 8009a14:	e010      	b.n	8009a38 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a18:	f7fd fa13 	bl	8006e42 <ld_dword>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <f_getfree+0x128>
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	3301      	adds	r3, #1
 8009a2a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	3304      	adds	r3, #4
 8009a30:	633b      	str	r3, [r7, #48]	; 0x30
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	3b04      	subs	r3, #4
 8009a36:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1bd      	bne.n	80099c0 <f_getfree+0xbc>
 8009a44:	e000      	b.n	8009a48 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009a46:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a4c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a52:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	791a      	ldrb	r2, [r3, #4]
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009a62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3748      	adds	r7, #72	; 0x48
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b098      	sub	sp, #96	; 0x60
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009a76:	f107 010c 	add.w	r1, r7, #12
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff f836 	bl	8008af0 <find_volume>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8009a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 80f2 	bne.w	8009c7c <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	f107 0310 	add.w	r3, r7, #16
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe ff15 	bl	80088d0 <follow_path>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d102      	bne.n	8009aba <f_mkdir+0x4c>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	f040 80dc 	bne.w	8009c7c <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009ac4:	f107 0310 	add.w	r3, r7, #16
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd ff55 	bl	800797a <create_chain>
 8009ad0:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	895b      	ldrh	r3, [r3, #10]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	899b      	ldrh	r3, [r3, #12]
 8009adc:	fb02 f303 	mul.w	r3, r2, r3
 8009ae0:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d102      	bne.n	8009af4 <f_mkdir+0x86>
 8009aee:	2307      	movs	r3, #7
 8009af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d102      	bne.n	8009b00 <f_mkdir+0x92>
 8009afa:	2302      	movs	r3, #2
 8009afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d102      	bne.n	8009b0e <f_mkdir+0xa0>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <f_mkdir+0xb6>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fd fbd9 	bl	80072d0 <sync_window>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8009b24:	f7fd f87c 	bl	8006c20 <get_fattime>
 8009b28:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009b2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d16c      	bne.n	8009c0c <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fd fcac 	bl	8007494 <clust2sect>
 8009b3c:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3338      	adds	r3, #56	; 0x38
 8009b42:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	899b      	ldrh	r3, [r3, #12]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b4e:	f7fd f9ff 	bl	8006f50 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009b52:	220b      	movs	r2, #11
 8009b54:	2120      	movs	r1, #32
 8009b56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b58:	f7fd f9fa 	bl	8006f50 <mem_set>
					dir[DIR_Name] = '.';
 8009b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b5e:	222e      	movs	r2, #46	; 0x2e
 8009b60:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8009b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b64:	330b      	adds	r3, #11
 8009b66:	2210      	movs	r2, #16
 8009b68:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b6c:	3316      	adds	r3, #22
 8009b6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fd f9a2 	bl	8006eba <st_dword>
					st_clust(fs, dir, dcl);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fe f990 	bl	8007ea2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b84:	3320      	adds	r3, #32
 8009b86:	2220      	movs	r2, #32
 8009b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fd f9c0 	bl	8006f10 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b92:	3321      	adds	r3, #33	; 0x21
 8009b94:	222e      	movs	r2, #46	; 0x2e
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d106      	bne.n	8009bb2 <f_mkdir+0x144>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d101      	bne.n	8009bb2 <f_mkdir+0x144>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb6:	3320      	adds	r3, #32
 8009bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f7fe f971 	bl	8007ea2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bc6:	e01c      	b.n	8009c02 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	657a      	str	r2, [r7, #84]	; 0x54
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fd fb78 	bl	80072d0 <sync_window>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8009be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10d      	bne.n	8009c0a <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	899b      	ldrh	r3, [r3, #12]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009bf8:	f7fd f9aa 	bl	8006f50 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1df      	bne.n	8009bc8 <f_mkdir+0x15a>
 8009c08:	e000      	b.n	8009c0c <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009c0a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d107      	bne.n	8009c24 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009c14:	f107 0310 	add.w	r3, r7, #16
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe fba9 	bl	8008370 <dir_register>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8009c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d120      	bne.n	8009c6e <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c32:	3316      	adds	r3, #22
 8009c34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd f93f 	bl	8006eba <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe f92d 	bl	8007ea2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4a:	330b      	adds	r3, #11
 8009c4c:	2210      	movs	r2, #16
 8009c4e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10e      	bne.n	8009c7c <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fd fba7 	bl	80073b4 <sync_fs>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c6c:	e006      	b.n	8009c7c <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009c6e:	f107 0310 	add.w	r3, r7, #16
 8009c72:	2200      	movs	r2, #0
 8009c74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fe1a 	bl	80078b0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3760      	adds	r7, #96	; 0x60
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	2b0a      	cmp	r3, #10
 8009c98:	d103      	bne.n	8009ca2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009c9a:	210d      	movs	r1, #13
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fff3 	bl	8009c88 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	db25      	blt.n	8009cfa <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	60fa      	str	r2, [r7, #12]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	78fa      	ldrb	r2, [r7, #3]
 8009cba:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b3c      	cmp	r3, #60	; 0x3c
 8009cc0:	dd12      	ble.n	8009ce8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f103 010c 	add.w	r1, r3, #12
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	f7ff fbdb 	bl	800948c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d101      	bne.n	8009ce2 <putc_bfd+0x5a>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e001      	b.n	8009ce6 <putc_bfd+0x5e>
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	609a      	str	r2, [r3, #8]
 8009cf8:	e000      	b.n	8009cfc <putc_bfd+0x74>
	if (i < 0) return;
 8009cfa:	bf00      	nop
}
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	db16      	blt.n	8009d40 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 010c 	add.w	r1, r3, #12
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	461a      	mov	r2, r3
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	f7ff fbb1 	bl	800948c <f_write>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d107      	bne.n	8009d40 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d102      	bne.n	8009d40 <putc_flush+0x3e>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	e001      	b.n	8009d44 <putc_flush+0x42>
	return EOF;
 8009d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	605a      	str	r2, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	609a      	str	r2, [r3, #8]
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr

08009d74 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009d74:	b40e      	push	{r1, r2, r3}
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b0a7      	sub	sp, #156	; 0x9c
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8009d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff ffe1 	bl	8009d4c <putc_init>

	va_start(arp, fmt);
 8009d8a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009d8e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8009d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8009da0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 81f2 	beq.w	800a18e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8009daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dae:	2b25      	cmp	r3, #37	; 0x25
 8009db0:	d008      	beq.n	8009dc4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8009db2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff ff63 	bl	8009c88 <putc_bfd>
			continue;
 8009dc2:	e1e3      	b.n	800a18c <f_printf+0x418>
		}
		w = f = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009de0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d10b      	bne.n	8009e00 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009dfe:	e024      	b.n	8009e4a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009e00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e04:	2b2d      	cmp	r3, #45	; 0x2d
 8009e06:	d120      	bne.n	8009e4a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009e1e:	e014      	b.n	8009e4a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009e20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e32:	4413      	add	r3, r2
 8009e34:	3b30      	subs	r3, #48	; 0x30
 8009e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8009e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8009e4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e50:	d903      	bls.n	8009e5a <f_printf+0xe6>
 8009e52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e56:	2b39      	cmp	r3, #57	; 0x39
 8009e58:	d9e2      	bls.n	8009e20 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009e5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e5e:	2b6c      	cmp	r3, #108	; 0x6c
 8009e60:	d003      	beq.n	8009e6a <f_printf+0xf6>
 8009e62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e66:	2b4c      	cmp	r3, #76	; 0x4c
 8009e68:	d10d      	bne.n	8009e86 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009e6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e6e:	f043 0304 	orr.w	r3, r3, #4
 8009e72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009e86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8181 	beq.w	800a192 <f_printf+0x41e>
		d = c;
 8009e90:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009e94:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009e98:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e9c:	2b60      	cmp	r3, #96	; 0x60
 8009e9e:	d908      	bls.n	8009eb2 <f_printf+0x13e>
 8009ea0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009ea4:	2b7a      	cmp	r3, #122	; 0x7a
 8009ea6:	d804      	bhi.n	8009eb2 <f_printf+0x13e>
 8009ea8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009eac:	3b20      	subs	r3, #32
 8009eae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8009eb2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009eb6:	3b42      	subs	r3, #66	; 0x42
 8009eb8:	2b16      	cmp	r3, #22
 8009eba:	f200 8098 	bhi.w	8009fee <f_printf+0x27a>
 8009ebe:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <f_printf+0x150>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009fcf 	.word	0x08009fcf
 8009ec8:	08009fb7 	.word	0x08009fb7
 8009ecc:	08009fdf 	.word	0x08009fdf
 8009ed0:	08009fef 	.word	0x08009fef
 8009ed4:	08009fef 	.word	0x08009fef
 8009ed8:	08009fef 	.word	0x08009fef
 8009edc:	08009fef 	.word	0x08009fef
 8009ee0:	08009fef 	.word	0x08009fef
 8009ee4:	08009fef 	.word	0x08009fef
 8009ee8:	08009fef 	.word	0x08009fef
 8009eec:	08009fef 	.word	0x08009fef
 8009ef0:	08009fef 	.word	0x08009fef
 8009ef4:	08009fef 	.word	0x08009fef
 8009ef8:	08009fd7 	.word	0x08009fd7
 8009efc:	08009fef 	.word	0x08009fef
 8009f00:	08009fef 	.word	0x08009fef
 8009f04:	08009fef 	.word	0x08009fef
 8009f08:	08009f21 	.word	0x08009f21
 8009f0c:	08009fef 	.word	0x08009fef
 8009f10:	08009fdf 	.word	0x08009fdf
 8009f14:	08009fef 	.word	0x08009fef
 8009f18:	08009fef 	.word	0x08009fef
 8009f1c:	08009fe7 	.word	0x08009fe7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f22:	1d1a      	adds	r2, r3, #4
 8009f24:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f30:	e004      	b.n	8009f3c <f_printf+0x1c8>
 8009f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f36:	3301      	adds	r3, #1
 8009f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f42:	4413      	add	r3, r2
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1f3      	bne.n	8009f32 <f_printf+0x1be>
			if (!(f & 2)) {
 8009f4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d11a      	bne.n	8009f8c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8009f56:	e005      	b.n	8009f64 <f_printf+0x1f0>
 8009f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f5c:	2120      	movs	r1, #32
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff fe92 	bl	8009c88 <putc_bfd>
 8009f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d8f0      	bhi.n	8009f58 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009f76:	e009      	b.n	8009f8c <f_printf+0x218>
 8009f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f7e:	781a      	ldrb	r2, [r3, #0]
 8009f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f84:	4611      	mov	r1, r2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fe7e 	bl	8009c88 <putc_bfd>
 8009f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1f1      	bne.n	8009f78 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009f94:	e005      	b.n	8009fa2 <f_printf+0x22e>
 8009f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f9a:	2120      	movs	r1, #32
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fe73 	bl	8009c88 <putc_bfd>
 8009fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009fac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d8f0      	bhi.n	8009f96 <f_printf+0x222>
			continue;
 8009fb4:	e0ea      	b.n	800a18c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	67ba      	str	r2, [r7, #120]	; 0x78
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fe5e 	bl	8009c88 <putc_bfd>
 8009fcc:	e0de      	b.n	800a18c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009fd4:	e014      	b.n	800a000 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009fd6:	2308      	movs	r3, #8
 8009fd8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009fdc:	e010      	b.n	800a000 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009fde:	230a      	movs	r3, #10
 8009fe0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009fe4:	e00c      	b.n	800a000 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009fe6:	2310      	movs	r3, #16
 8009fe8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009fec:	e008      	b.n	800a000 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009fee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff fe45 	bl	8009c88 <putc_bfd>
 8009ffe:	e0c5      	b.n	800a18c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a000:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <f_printf+0x2a2>
 800a00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	67ba      	str	r2, [r7, #120]	; 0x78
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	e00c      	b.n	800a030 <f_printf+0x2bc>
 800a016:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a01a:	2b44      	cmp	r3, #68	; 0x44
 800a01c:	d104      	bne.n	800a028 <f_printf+0x2b4>
 800a01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	67ba      	str	r2, [r7, #120]	; 0x78
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	e003      	b.n	800a030 <f_printf+0x2bc>
 800a028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a02a:	1d1a      	adds	r2, r3, #4
 800a02c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a034:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a038:	2b44      	cmp	r3, #68	; 0x44
 800a03a:	d10e      	bne.n	800a05a <f_printf+0x2e6>
 800a03c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0a      	bge.n	800a05a <f_printf+0x2e6>
			v = 0 - v;
 800a044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a048:	425b      	negs	r3, r3
 800a04a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a04e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a052:	f043 0308 	orr.w	r3, r3, #8
 800a056:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a060:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a068:	fbb3 f1f2 	udiv	r1, r3, r2
 800a06c:	fb01 f202 	mul.w	r2, r1, r2
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a076:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a07a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a086:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a08a:	2b09      	cmp	r3, #9
 800a08c:	d90b      	bls.n	800a0a6 <f_printf+0x332>
 800a08e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a092:	2b78      	cmp	r3, #120	; 0x78
 800a094:	d101      	bne.n	800a09a <f_printf+0x326>
 800a096:	2227      	movs	r2, #39	; 0x27
 800a098:	e000      	b.n	800a09c <f_printf+0x328>
 800a09a:	2207      	movs	r2, #7
 800a09c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a0a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a0b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a0b4:	3230      	adds	r2, #48	; 0x30
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	3398      	adds	r3, #152	; 0x98
 800a0ba:	443b      	add	r3, r7
 800a0bc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a0c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <f_printf+0x35c>
 800a0c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0cc:	2b1f      	cmp	r3, #31
 800a0ce:	d9c7      	bls.n	800a060 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a0d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <f_printf+0x37c>
 800a0dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a0e6:	3398      	adds	r3, #152	; 0x98
 800a0e8:	443b      	add	r3, r7
 800a0ea:	222d      	movs	r2, #45	; 0x2d
 800a0ec:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a0f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <f_printf+0x394>
 800a104:	2330      	movs	r3, #48	; 0x30
 800a106:	e000      	b.n	800a10a <f_printf+0x396>
 800a108:	2320      	movs	r3, #32
 800a10a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a10e:	e007      	b.n	800a120 <f_printf+0x3ac>
 800a110:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff fdb4 	bl	8009c88 <putc_bfd>
 800a120:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d108      	bne.n	800a13e <f_printf+0x3ca>
 800a12c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a136:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d8e8      	bhi.n	800a110 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800a13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a142:	3b01      	subs	r3, #1
 800a144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a148:	f107 020c 	add.w	r2, r7, #12
 800a14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a150:	4413      	add	r3, r2
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fd94 	bl	8009c88 <putc_bfd>
		} while (i);
 800a160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1ea      	bne.n	800a13e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800a168:	e007      	b.n	800a17a <f_printf+0x406>
 800a16a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a16e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a172:	4611      	mov	r1, r2
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fd87 	bl	8009c88 <putc_bfd>
 800a17a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a184:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a188:	429a      	cmp	r2, r3
 800a18a:	d8ee      	bhi.n	800a16a <f_printf+0x3f6>
		c = *fmt++;
 800a18c:	e600      	b.n	8009d90 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a18e:	bf00      	nop
 800a190:	e000      	b.n	800a194 <f_printf+0x420>
		if (!c) break;
 800a192:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fdb2 	bl	8009d02 <putc_flush>
 800a19e:	4603      	mov	r3, r0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	379c      	adds	r7, #156	; 0x9c
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1aa:	b003      	add	sp, #12
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop

0800a1b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1c8:	7a5b      	ldrb	r3, [r3, #9]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d131      	bne.n	800a234 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1d0:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1d2:	7a5b      	ldrb	r3, [r3, #9]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	4b19      	ldr	r3, [pc, #100]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1da:	2100      	movs	r1, #0
 800a1dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1de:	4b18      	ldr	r3, [pc, #96]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1e0:	7a5b      	ldrb	r3, [r3, #9]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	4a16      	ldr	r2, [pc, #88]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1f0:	7a5b      	ldrb	r3, [r3, #9]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b12      	ldr	r3, [pc, #72]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a1f8:	4413      	add	r3, r2
 800a1fa:	79fa      	ldrb	r2, [r7, #7]
 800a1fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1fe:	4b10      	ldr	r3, [pc, #64]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a200:	7a5b      	ldrb	r3, [r3, #9]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	b2d1      	uxtb	r1, r2
 800a208:	4a0d      	ldr	r2, [pc, #52]	; (800a240 <FATFS_LinkDriverEx+0x90>)
 800a20a:	7251      	strb	r1, [r2, #9]
 800a20c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a20e:	7dbb      	ldrb	r3, [r7, #22]
 800a210:	3330      	adds	r3, #48	; 0x30
 800a212:	b2da      	uxtb	r2, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	3301      	adds	r3, #1
 800a21c:	223a      	movs	r2, #58	; 0x3a
 800a21e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3302      	adds	r3, #2
 800a224:	222f      	movs	r2, #47	; 0x2f
 800a226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	3303      	adds	r3, #3
 800a22c:	2200      	movs	r2, #0
 800a22e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bc80      	pop	{r7}
 800a23e:	4770      	bx	lr
 800a240:	20000a68 	.word	0x20000a68

0800a244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a24e:	2200      	movs	r2, #0
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff ffac 	bl	800a1b0 <FATFS_LinkDriverEx>
 800a258:	4603      	mov	r3, r0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	2b7f      	cmp	r3, #127	; 0x7f
 800a274:	d802      	bhi.n	800a27c <ff_convert+0x18>
		c = chr;
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	81fb      	strh	r3, [r7, #14]
 800a27a:	e025      	b.n	800a2c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	2bff      	cmp	r3, #255	; 0xff
 800a286:	d805      	bhi.n	800a294 <ff_convert+0x30>
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	3b80      	subs	r3, #128	; 0x80
 800a28c:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <ff_convert+0x70>)
 800a28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a292:	e000      	b.n	800a296 <ff_convert+0x32>
 800a294:	2300      	movs	r3, #0
 800a296:	81fb      	strh	r3, [r7, #14]
 800a298:	e016      	b.n	800a2c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a29a:	2300      	movs	r3, #0
 800a29c:	81fb      	strh	r3, [r7, #14]
 800a29e:	e009      	b.n	800a2b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <ff_convert+0x70>)
 800a2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d006      	beq.n	800a2bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a2ae:	89fb      	ldrh	r3, [r7, #14]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	81fb      	strh	r3, [r7, #14]
 800a2b4:	89fb      	ldrh	r3, [r7, #14]
 800a2b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2b8:	d9f2      	bls.n	800a2a0 <ff_convert+0x3c>
 800a2ba:	e000      	b.n	800a2be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a2bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a2be:	89fb      	ldrh	r3, [r7, #14]
 800a2c0:	3380      	adds	r3, #128	; 0x80
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a2c8:	89fb      	ldrh	r3, [r7, #14]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bc80      	pop	{r7}
 800a2d2:	4770      	bx	lr
 800a2d4:	08011158 	.word	0x08011158

0800a2d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a2e2:	88fb      	ldrh	r3, [r7, #6]
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e8:	d201      	bcs.n	800a2ee <ff_wtoupper+0x16>
 800a2ea:	4b3d      	ldr	r3, [pc, #244]	; (800a3e0 <ff_wtoupper+0x108>)
 800a2ec:	e000      	b.n	800a2f0 <ff_wtoupper+0x18>
 800a2ee:	4b3d      	ldr	r3, [pc, #244]	; (800a3e4 <ff_wtoupper+0x10c>)
 800a2f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1c9a      	adds	r2, r3, #2
 800a2f6:	617a      	str	r2, [r7, #20]
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a2fc:	8a7b      	ldrh	r3, [r7, #18]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d068      	beq.n	800a3d4 <ff_wtoupper+0xfc>
 800a302:	88fa      	ldrh	r2, [r7, #6]
 800a304:	8a7b      	ldrh	r3, [r7, #18]
 800a306:	429a      	cmp	r2, r3
 800a308:	d364      	bcc.n	800a3d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	1c9a      	adds	r2, r3, #2
 800a30e:	617a      	str	r2, [r7, #20]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	823b      	strh	r3, [r7, #16]
 800a314:	8a3b      	ldrh	r3, [r7, #16]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	81fb      	strh	r3, [r7, #14]
 800a31a:	8a3b      	ldrh	r3, [r7, #16]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a320:	88fa      	ldrh	r2, [r7, #6]
 800a322:	8a79      	ldrh	r1, [r7, #18]
 800a324:	8a3b      	ldrh	r3, [r7, #16]
 800a326:	440b      	add	r3, r1
 800a328:	429a      	cmp	r2, r3
 800a32a:	da49      	bge.n	800a3c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a32c:	89fb      	ldrh	r3, [r7, #14]
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d84f      	bhi.n	800a3d2 <ff_wtoupper+0xfa>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <ff_wtoupper+0x60>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a35d 	.word	0x0800a35d
 800a33c:	0800a36f 	.word	0x0800a36f
 800a340:	0800a385 	.word	0x0800a385
 800a344:	0800a38d 	.word	0x0800a38d
 800a348:	0800a395 	.word	0x0800a395
 800a34c:	0800a39d 	.word	0x0800a39d
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a3ad 	.word	0x0800a3ad
 800a358:	0800a3b5 	.word	0x0800a3b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a35c:	88fa      	ldrh	r2, [r7, #6]
 800a35e:	8a7b      	ldrh	r3, [r7, #18]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4413      	add	r3, r2
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	80fb      	strh	r3, [r7, #6]
 800a36c:	e027      	b.n	800a3be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a36e:	88fa      	ldrh	r2, [r7, #6]
 800a370:	8a7b      	ldrh	r3, [r7, #18]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	88fa      	ldrh	r2, [r7, #6]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	80fb      	strh	r3, [r7, #6]
 800a382:	e01c      	b.n	800a3be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	3b10      	subs	r3, #16
 800a388:	80fb      	strh	r3, [r7, #6]
 800a38a:	e018      	b.n	800a3be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	3b20      	subs	r3, #32
 800a390:	80fb      	strh	r3, [r7, #6]
 800a392:	e014      	b.n	800a3be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a394:	88fb      	ldrh	r3, [r7, #6]
 800a396:	3b30      	subs	r3, #48	; 0x30
 800a398:	80fb      	strh	r3, [r7, #6]
 800a39a:	e010      	b.n	800a3be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	3b1a      	subs	r3, #26
 800a3a0:	80fb      	strh	r3, [r7, #6]
 800a3a2:	e00c      	b.n	800a3be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	80fb      	strh	r3, [r7, #6]
 800a3aa:	e008      	b.n	800a3be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
 800a3ae:	3b50      	subs	r3, #80	; 0x50
 800a3b0:	80fb      	strh	r3, [r7, #6]
 800a3b2:	e004      	b.n	800a3be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a3b4:	88fb      	ldrh	r3, [r7, #6]
 800a3b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a3ba:	80fb      	strh	r3, [r7, #6]
 800a3bc:	bf00      	nop
			}
			break;
 800a3be:	e008      	b.n	800a3d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d195      	bne.n	800a2f2 <ff_wtoupper+0x1a>
 800a3c6:	8a3b      	ldrh	r3, [r7, #16]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a3d0:	e78f      	b.n	800a2f2 <ff_wtoupper+0x1a>
			break;
 800a3d2:	bf00      	nop
	}

	return chr;
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr
 800a3e0:	08011258 	.word	0x08011258
 800a3e4:	0801144c 	.word	0x0801144c

0800a3e8 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800a3f0:	4a03      	ldr	r2, [pc, #12]	; (800a400 <Paint_SelectImage+0x18>)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6013      	str	r3, [r2, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr
 800a400:	20000a74 	.word	0x20000a74

0800a404 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800a404:	b480      	push	{r7}
 800a406:	b08b      	sub	sp, #44	; 0x2c
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	80fb      	strh	r3, [r7, #6]
 800a40e:	460b      	mov	r3, r1
 800a410:	80bb      	strh	r3, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	807b      	strh	r3, [r7, #2]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800a416:	4ba0      	ldr	r3, [pc, #640]	; (800a698 <Paint_SetPixel+0x294>)
 800a418:	889b      	ldrh	r3, [r3, #4]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	f200 812f 	bhi.w	800a680 <Paint_SetPixel+0x27c>
 800a422:	4b9d      	ldr	r3, [pc, #628]	; (800a698 <Paint_SetPixel+0x294>)
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	88ba      	ldrh	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	f200 8129 	bhi.w	800a680 <Paint_SetPixel+0x27c>
        // Debug("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800a42e:	4b9a      	ldr	r3, [pc, #616]	; (800a698 <Paint_SetPixel+0x294>)
 800a430:	89db      	ldrh	r3, [r3, #14]
 800a432:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a436:	d02b      	beq.n	800a490 <Paint_SetPixel+0x8c>
 800a438:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a43c:	f300 8122 	bgt.w	800a684 <Paint_SetPixel+0x280>
 800a440:	2bb4      	cmp	r3, #180	; 0xb4
 800a442:	d016      	beq.n	800a472 <Paint_SetPixel+0x6e>
 800a444:	2bb4      	cmp	r3, #180	; 0xb4
 800a446:	f300 811d 	bgt.w	800a684 <Paint_SetPixel+0x280>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <Paint_SetPixel+0x50>
 800a44e:	2b5a      	cmp	r3, #90	; 0x5a
 800a450:	d005      	beq.n	800a45e <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800a452:	e117      	b.n	800a684 <Paint_SetPixel+0x280>
        X = Xpoint;
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 800a458:	88bb      	ldrh	r3, [r7, #4]
 800a45a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a45c:	e022      	b.n	800a4a4 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 800a45e:	4b8e      	ldr	r3, [pc, #568]	; (800a698 <Paint_SetPixel+0x294>)
 800a460:	891a      	ldrh	r2, [r3, #8]
 800a462:	88bb      	ldrh	r3, [r7, #4]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a470:	e018      	b.n	800a4a4 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 800a472:	4b89      	ldr	r3, [pc, #548]	; (800a698 <Paint_SetPixel+0x294>)
 800a474:	891a      	ldrh	r2, [r3, #8]
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800a480:	4b85      	ldr	r3, [pc, #532]	; (800a698 <Paint_SetPixel+0x294>)
 800a482:	895a      	ldrh	r2, [r3, #10]
 800a484:	88bb      	ldrh	r3, [r7, #4]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a48e:	e009      	b.n	800a4a4 <Paint_SetPixel+0xa0>
        X = Ypoint;
 800a490:	88bb      	ldrh	r3, [r7, #4]
 800a492:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800a494:	4b80      	ldr	r3, [pc, #512]	; (800a698 <Paint_SetPixel+0x294>)
 800a496:	895a      	ldrh	r2, [r3, #10]
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a4a2:	bf00      	nop
    }

    switch (Paint.Mirror)
 800a4a4:	4b7c      	ldr	r3, [pc, #496]	; (800a698 <Paint_SetPixel+0x294>)
 800a4a6:	8a1b      	ldrh	r3, [r3, #16]
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	f200 80ed 	bhi.w	800a688 <Paint_SetPixel+0x284>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <Paint_SetPixel+0xb0>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a503 	.word	0x0800a503
 800a4b8:	0800a4c5 	.word	0x0800a4c5
 800a4bc:	0800a4d5 	.word	0x0800a4d5
 800a4c0:	0800a4e5 	.word	0x0800a4e5
    {
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800a4c4:	4b74      	ldr	r3, [pc, #464]	; (800a698 <Paint_SetPixel+0x294>)
 800a4c6:	891a      	ldrh	r2, [r3, #8]
 800a4c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800a4d2:	e017      	b.n	800a504 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800a4d4:	4b70      	ldr	r3, [pc, #448]	; (800a698 <Paint_SetPixel+0x294>)
 800a4d6:	895a      	ldrh	r2, [r3, #10]
 800a4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a4e2:	e00f      	b.n	800a504 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800a4e4:	4b6c      	ldr	r3, [pc, #432]	; (800a698 <Paint_SetPixel+0x294>)
 800a4e6:	891a      	ldrh	r2, [r3, #8]
 800a4e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800a4f2:	4b69      	ldr	r3, [pc, #420]	; (800a698 <Paint_SetPixel+0x294>)
 800a4f4:	895a      	ldrh	r2, [r3, #10]
 800a4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800a500:	e000      	b.n	800a504 <Paint_SetPixel+0x100>
        break;
 800a502:	bf00      	nop
    default:
        return;
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800a504:	4b64      	ldr	r3, [pc, #400]	; (800a698 <Paint_SetPixel+0x294>)
 800a506:	891b      	ldrh	r3, [r3, #8]
 800a508:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f200 80be 	bhi.w	800a68c <Paint_SetPixel+0x288>
 800a510:	4b61      	ldr	r3, [pc, #388]	; (800a698 <Paint_SetPixel+0x294>)
 800a512:	895b      	ldrh	r3, [r3, #10]
 800a514:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a516:	429a      	cmp	r2, r3
 800a518:	f200 80b8 	bhi.w	800a68c <Paint_SetPixel+0x288>
    {
        // Debug("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800a51c:	4b5e      	ldr	r3, [pc, #376]	; (800a698 <Paint_SetPixel+0x294>)
 800a51e:	8adb      	ldrh	r3, [r3, #22]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d139      	bne.n	800a598 <Paint_SetPixel+0x194>
    {
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800a524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a526:	08db      	lsrs	r3, r3, #3
 800a528:	b29b      	uxth	r3, r3
 800a52a:	4619      	mov	r1, r3
 800a52c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a52e:	4a5a      	ldr	r2, [pc, #360]	; (800a698 <Paint_SetPixel+0x294>)
 800a530:	8a52      	ldrh	r2, [r2, #18]
 800a532:	fb02 f303 	mul.w	r3, r2, r3
 800a536:	440b      	add	r3, r1
 800a538:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800a53a:	4b57      	ldr	r3, [pc, #348]	; (800a698 <Paint_SetPixel+0x294>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	4413      	add	r3, r2
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	73fb      	strb	r3, [r7, #15]
        if (Color == BLACK)
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d113      	bne.n	800a574 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800a54c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	fa42 f303 	asr.w	r3, r2, r3
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	43db      	mvns	r3, r3
 800a55c:	b25a      	sxtb	r2, r3
 800a55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a562:	4013      	ands	r3, r2
 800a564:	b259      	sxtb	r1, r3
 800a566:	4b4c      	ldr	r3, [pc, #304]	; (800a698 <Paint_SetPixel+0x294>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	b2ca      	uxtb	r2, r1
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	e08c      	b.n	800a68e <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800a574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2280      	movs	r2, #128	; 0x80
 800a57c:	fa42 f303 	asr.w	r3, r2, r3
 800a580:	b25a      	sxtb	r2, r3
 800a582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a586:	4313      	orrs	r3, r2
 800a588:	b259      	sxtb	r1, r3
 800a58a:	4b43      	ldr	r3, [pc, #268]	; (800a698 <Paint_SetPixel+0x294>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	4413      	add	r3, r2
 800a592:	b2ca      	uxtb	r2, r1
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	e07a      	b.n	800a68e <Paint_SetPixel+0x28a>
    }
    else if (Paint.Scale == 4)
 800a598:	4b3f      	ldr	r3, [pc, #252]	; (800a698 <Paint_SetPixel+0x294>)
 800a59a:	8adb      	ldrh	r3, [r3, #22]
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d137      	bne.n	800a610 <Paint_SetPixel+0x20c>
    {
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800a5a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5a2:	089b      	lsrs	r3, r3, #2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5aa:	4a3b      	ldr	r2, [pc, #236]	; (800a698 <Paint_SetPixel+0x294>)
 800a5ac:	8a52      	ldrh	r2, [r2, #18]
 800a5ae:	fb02 f303 	mul.w	r3, r2, r3
 800a5b2:	440b      	add	r3, r1
 800a5b4:	61bb      	str	r3, [r7, #24]
        Color = Color % 4; // Guaranteed color scale is 4  --- 0~3
 800a5b6:	887b      	ldrh	r3, [r7, #2]
 800a5b8:	f003 0303 	and.w	r3, r3, #3
 800a5bc:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800a5be:	4b36      	ldr	r3, [pc, #216]	; (800a698 <Paint_SetPixel+0x294>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800a5ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5cc:	f003 0303 	and.w	r3, r3, #3
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	22c0      	movs	r2, #192	; 0xc0
 800a5d4:	fa42 f303 	asr.w	r3, r2, r3
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	43db      	mvns	r3, r3
 800a5dc:	b25a      	sxtb	r2, r3
 800a5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	b25b      	sxtb	r3, r3
 800a5e6:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800a5e8:	887b      	ldrh	r3, [r7, #2]
 800a5ea:	019a      	lsls	r2, r3, #6
 800a5ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ee:	f003 0303 	and.w	r3, r3, #3
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	fa42 f303 	asr.w	r3, r2, r3
 800a5f8:	b25a      	sxtb	r2, r3
 800a5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	b259      	sxtb	r1, r3
 800a602:	4b25      	ldr	r3, [pc, #148]	; (800a698 <Paint_SetPixel+0x294>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	4413      	add	r3, r2
 800a60a:	b2ca      	uxtb	r2, r1
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	e03e      	b.n	800a68e <Paint_SetPixel+0x28a>
    }
    else if (Paint.Scale == 7)
 800a610:	4b21      	ldr	r3, [pc, #132]	; (800a698 <Paint_SetPixel+0x294>)
 800a612:	8adb      	ldrh	r3, [r3, #22]
 800a614:	2b07      	cmp	r3, #7
 800a616:	d13a      	bne.n	800a68e <Paint_SetPixel+0x28a>
    {
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800a618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a61a:	085b      	lsrs	r3, r3, #1
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	4619      	mov	r1, r3
 800a620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a622:	4a1d      	ldr	r2, [pc, #116]	; (800a698 <Paint_SetPixel+0x294>)
 800a624:	8a52      	ldrh	r2, [r2, #18]
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	440b      	add	r3, r1
 800a62c:	623b      	str	r3, [r7, #32]
        UBYTE Rdata = Paint.Image[Addr];
 800a62e:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <Paint_SetPixel+0x294>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	4413      	add	r3, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	77fb      	strb	r3, [r7, #31]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800a63a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	22f0      	movs	r2, #240	; 0xf0
 800a644:	fa42 f303 	asr.w	r3, r2, r3
 800a648:	b25b      	sxtb	r3, r3
 800a64a:	43db      	mvns	r3, r3
 800a64c:	b25a      	sxtb	r2, r3
 800a64e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a652:	4013      	ands	r3, r2
 800a654:	b25b      	sxtb	r3, r3
 800a656:	77fb      	strb	r3, [r7, #31]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800a658:	887b      	ldrh	r3, [r7, #2]
 800a65a:	011a      	lsls	r2, r3, #4
 800a65c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	fa42 f303 	asr.w	r3, r2, r3
 800a668:	b25a      	sxtb	r2, r3
 800a66a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a66e:	4313      	orrs	r3, r2
 800a670:	b259      	sxtb	r1, r3
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <Paint_SetPixel+0x294>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	4413      	add	r3, r2
 800a67a:	b2ca      	uxtb	r2, r1
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e006      	b.n	800a68e <Paint_SetPixel+0x28a>
        return;
 800a680:	bf00      	nop
 800a682:	e004      	b.n	800a68e <Paint_SetPixel+0x28a>
        return;
 800a684:	bf00      	nop
 800a686:	e002      	b.n	800a68e <Paint_SetPixel+0x28a>
        return;
 800a688:	bf00      	nop
 800a68a:	e000      	b.n	800a68e <Paint_SetPixel+0x28a>
        return;
 800a68c:	bf00      	nop
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800a68e:	372c      	adds	r7, #44	; 0x2c
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000a74 	.word	0x20000a74

0800a69c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b089      	sub	sp, #36	; 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	80fb      	strh	r3, [r7, #6]
    if (Paint.Scale == 2)
 800a6a6:	4b4c      	ldr	r3, [pc, #304]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6a8:	8adb      	ldrh	r3, [r3, #22]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d125      	bne.n	800a6fa <Paint_Clear+0x5e>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	83fb      	strh	r3, [r7, #30]
 800a6b2:	e01c      	b.n	800a6ee <Paint_Clear+0x52>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	83bb      	strh	r3, [r7, #28]
 800a6b8:	e011      	b.n	800a6de <Paint_Clear+0x42>
            { // 8 pixel =  1 byte
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a6ba:	8bba      	ldrh	r2, [r7, #28]
 800a6bc:	8bfb      	ldrh	r3, [r7, #30]
 800a6be:	4946      	ldr	r1, [pc, #280]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6c0:	8a49      	ldrh	r1, [r1, #18]
 800a6c2:	fb01 f303 	mul.w	r3, r1, r3
 800a6c6:	4413      	add	r3, r2
 800a6c8:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800a6ca:	4b43      	ldr	r3, [pc, #268]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	b2d2      	uxtb	r2, r2
 800a6d6:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a6d8:	8bbb      	ldrh	r3, [r7, #28]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	83bb      	strh	r3, [r7, #28]
 800a6de:	4b3e      	ldr	r3, [pc, #248]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6e0:	8a5b      	ldrh	r3, [r3, #18]
 800a6e2:	8bba      	ldrh	r2, [r7, #28]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d3e8      	bcc.n	800a6ba <Paint_Clear+0x1e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a6e8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	83fb      	strh	r3, [r7, #30]
 800a6ee:	4b3a      	ldr	r3, [pc, #232]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6f0:	8a9b      	ldrh	r3, [r3, #20]
 800a6f2:	8bfa      	ldrh	r2, [r7, #30]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d3dd      	bcc.n	800a6b4 <Paint_Clear+0x18>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
                Paint.Image[Addr] = (Color << 4) | Color;
            }
        }
    }
}
 800a6f8:	e068      	b.n	800a7cc <Paint_Clear+0x130>
    else if (Paint.Scale == 4)
 800a6fa:	4b37      	ldr	r3, [pc, #220]	; (800a7d8 <Paint_Clear+0x13c>)
 800a6fc:	8adb      	ldrh	r3, [r3, #22]
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d135      	bne.n	800a76e <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a702:	2300      	movs	r3, #0
 800a704:	837b      	strh	r3, [r7, #26]
 800a706:	e02c      	b.n	800a762 <Paint_Clear+0xc6>
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a708:	2300      	movs	r3, #0
 800a70a:	833b      	strh	r3, [r7, #24]
 800a70c:	e021      	b.n	800a752 <Paint_Clear+0xb6>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a70e:	8b3a      	ldrh	r2, [r7, #24]
 800a710:	8b7b      	ldrh	r3, [r7, #26]
 800a712:	4931      	ldr	r1, [pc, #196]	; (800a7d8 <Paint_Clear+0x13c>)
 800a714:	8a49      	ldrh	r1, [r1, #18]
 800a716:	fb01 f303 	mul.w	r3, r1, r3
 800a71a:	4413      	add	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
                Paint.Image[Addr] = (Color << 6) | (Color << 4) | (Color << 2) | Color;
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	019b      	lsls	r3, r3, #6
 800a722:	b25a      	sxtb	r2, r3
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	011b      	lsls	r3, r3, #4
 800a728:	b25b      	sxtb	r3, r3
 800a72a:	4313      	orrs	r3, r2
 800a72c:	b25a      	sxtb	r2, r3
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	b25b      	sxtb	r3, r3
 800a734:	4313      	orrs	r3, r2
 800a736:	b25a      	sxtb	r2, r3
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	b25b      	sxtb	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b259      	sxtb	r1, r3
 800a740:	4b25      	ldr	r3, [pc, #148]	; (800a7d8 <Paint_Clear+0x13c>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	b2ca      	uxtb	r2, r1
 800a74a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a74c:	8b3b      	ldrh	r3, [r7, #24]
 800a74e:	3301      	adds	r3, #1
 800a750:	833b      	strh	r3, [r7, #24]
 800a752:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <Paint_Clear+0x13c>)
 800a754:	8a5b      	ldrh	r3, [r3, #18]
 800a756:	8b3a      	ldrh	r2, [r7, #24]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d3d8      	bcc.n	800a70e <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a75c:	8b7b      	ldrh	r3, [r7, #26]
 800a75e:	3301      	adds	r3, #1
 800a760:	837b      	strh	r3, [r7, #26]
 800a762:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <Paint_Clear+0x13c>)
 800a764:	8a9b      	ldrh	r3, [r3, #20]
 800a766:	8b7a      	ldrh	r2, [r7, #26]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d3cd      	bcc.n	800a708 <Paint_Clear+0x6c>
}
 800a76c:	e02e      	b.n	800a7cc <Paint_Clear+0x130>
    else if (Paint.Scale == 7)
 800a76e:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <Paint_Clear+0x13c>)
 800a770:	8adb      	ldrh	r3, [r3, #22]
 800a772:	2b07      	cmp	r3, #7
 800a774:	d12a      	bne.n	800a7cc <Paint_Clear+0x130>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a776:	2300      	movs	r3, #0
 800a778:	82fb      	strh	r3, [r7, #22]
 800a77a:	e022      	b.n	800a7c2 <Paint_Clear+0x126>
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	82bb      	strh	r3, [r7, #20]
 800a780:	e017      	b.n	800a7b2 <Paint_Clear+0x116>
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800a782:	8aba      	ldrh	r2, [r7, #20]
 800a784:	8afb      	ldrh	r3, [r7, #22]
 800a786:	4914      	ldr	r1, [pc, #80]	; (800a7d8 <Paint_Clear+0x13c>)
 800a788:	8a49      	ldrh	r1, [r1, #18]
 800a78a:	fb01 f303 	mul.w	r3, r1, r3
 800a78e:	4413      	add	r3, r2
 800a790:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = (Color << 4) | Color;
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	b25a      	sxtb	r2, r3
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	b25b      	sxtb	r3, r3
 800a79c:	4313      	orrs	r3, r2
 800a79e:	b259      	sxtb	r1, r3
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <Paint_Clear+0x13c>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	b2ca      	uxtb	r2, r1
 800a7aa:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800a7ac:	8abb      	ldrh	r3, [r7, #20]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	82bb      	strh	r3, [r7, #20]
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <Paint_Clear+0x13c>)
 800a7b4:	8a5b      	ldrh	r3, [r3, #18]
 800a7b6:	8aba      	ldrh	r2, [r7, #20]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d3e2      	bcc.n	800a782 <Paint_Clear+0xe6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800a7bc:	8afb      	ldrh	r3, [r7, #22]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	82fb      	strh	r3, [r7, #22]
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <Paint_Clear+0x13c>)
 800a7c4:	8a9b      	ldrh	r3, [r3, #20]
 800a7c6:	8afa      	ldrh	r2, [r7, #22]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d3d7      	bcc.n	800a77c <Paint_Clear+0xe0>
}
 800a7cc:	bf00      	nop
 800a7ce:	3724      	adds	r7, #36	; 0x24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20000a74 	.word	0x20000a74

0800a7dc <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	607b      	str	r3, [r7, #4]
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	81fb      	strh	r3, [r7, #14]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	81bb      	strh	r3, [r7, #12]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800a7f0:	4b4c      	ldr	r3, [pc, #304]	; (800a924 <Paint_DrawChar+0x148>)
 800a7f2:	889b      	ldrh	r3, [r3, #4]
 800a7f4:	89fa      	ldrh	r2, [r7, #14]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d804      	bhi.n	800a804 <Paint_DrawChar+0x28>
 800a7fa:	4b4a      	ldr	r3, [pc, #296]	; (800a924 <Paint_DrawChar+0x148>)
 800a7fc:	88db      	ldrh	r3, [r3, #6]
 800a7fe:	89ba      	ldrh	r2, [r7, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	d903      	bls.n	800a80c <Paint_DrawChar+0x30>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800a804:	4848      	ldr	r0, [pc, #288]	; (800a928 <Paint_DrawChar+0x14c>)
 800a806:	f002 fc91 	bl	800d12c <puts>
        return;
 800a80a:	e087      	b.n	800a91c <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	3b20      	subs	r3, #32
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	88d2      	ldrh	r2, [r2, #6]
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	8892      	ldrh	r2, [r2, #4]
 800a81c:	08d2      	lsrs	r2, r2, #3
 800a81e:	b292      	uxth	r2, r2
 800a820:	4611      	mov	r1, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	8892      	ldrh	r2, [r2, #4]
 800a826:	f002 0207 	and.w	r2, r2, #7
 800a82a:	b292      	uxth	r2, r2
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	bf14      	ite	ne
 800a830:	2201      	movne	r2, #1
 800a832:	2200      	moveq	r2, #0
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	440a      	add	r2, r1
 800a838:	fb02 f303 	mul.w	r3, r2, r3
 800a83c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	4413      	add	r3, r2
 800a846:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page++)
 800a848:	2300      	movs	r3, #0
 800a84a:	83fb      	strh	r3, [r7, #30]
 800a84c:	e061      	b.n	800a912 <Paint_DrawChar+0x136>
    {
        for (Column = 0; Column < Font->Width; Column++)
 800a84e:	2300      	movs	r3, #0
 800a850:	83bb      	strh	r3, [r7, #28]
 800a852:	e04c      	b.n	800a8ee <Paint_DrawChar+0x112>
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
 800a854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a856:	2bff      	cmp	r3, #255	; 0xff
 800a858:	d118      	bne.n	800a88c <Paint_DrawChar+0xb0>
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	8bbb      	ldrh	r3, [r7, #28]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	2280      	movs	r2, #128	; 0x80
 800a868:	fa42 f303 	asr.w	r3, r2, r3
 800a86c:	400b      	ands	r3, r1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d031      	beq.n	800a8d6 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a872:	89fa      	ldrh	r2, [r7, #14]
 800a874:	8bbb      	ldrh	r3, [r7, #28]
 800a876:	4413      	add	r3, r2
 800a878:	b298      	uxth	r0, r3
 800a87a:	89ba      	ldrh	r2, [r7, #12]
 800a87c:	8bfb      	ldrh	r3, [r7, #30]
 800a87e:	4413      	add	r3, r2
 800a880:	b29b      	uxth	r3, r3
 800a882:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a884:	4619      	mov	r1, r3
 800a886:	f7ff fdbd 	bl	800a404 <Paint_SetPixel>
 800a88a:	e024      	b.n	800a8d6 <Paint_DrawChar+0xfa>
                // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	4619      	mov	r1, r3
 800a892:	8bbb      	ldrh	r3, [r7, #28]
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	2280      	movs	r2, #128	; 0x80
 800a89a:	fa42 f303 	asr.w	r3, r2, r3
 800a89e:	400b      	ands	r3, r1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00c      	beq.n	800a8be <Paint_DrawChar+0xe2>
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800a8a4:	89fa      	ldrh	r2, [r7, #14]
 800a8a6:	8bbb      	ldrh	r3, [r7, #28]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b298      	uxth	r0, r3
 800a8ac:	89ba      	ldrh	r2, [r7, #12]
 800a8ae:	8bfb      	ldrh	r3, [r7, #30]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f7ff fda4 	bl	800a404 <Paint_SetPixel>
 800a8bc:	e00b      	b.n	800a8d6 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
                else
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800a8be:	89fa      	ldrh	r2, [r7, #14]
 800a8c0:	8bbb      	ldrh	r3, [r7, #28]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	b298      	uxth	r0, r3
 800a8c6:	89ba      	ldrh	r2, [r7, #12]
 800a8c8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7ff fd97 	bl	800a404 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
 800a8d6:	8bbb      	ldrh	r3, [r7, #28]
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	2b07      	cmp	r3, #7
 800a8e0:	d102      	bne.n	800a8e8 <Paint_DrawChar+0x10c>
                ptr++;
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column++)
 800a8e8:	8bbb      	ldrh	r3, [r7, #28]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	83bb      	strh	r3, [r7, #28]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	889b      	ldrh	r3, [r3, #4]
 800a8f2:	8bba      	ldrh	r2, [r7, #28]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3ad      	bcc.n	800a854 <Paint_DrawChar+0x78>
        } // Write a line
        if (Font->Width % 8 != 0)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	889b      	ldrh	r3, [r3, #4]
 800a8fc:	f003 0307 	and.w	r3, r3, #7
 800a900:	b29b      	uxth	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <Paint_DrawChar+0x130>
            ptr++;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	3301      	adds	r3, #1
 800a90a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page++)
 800a90c:	8bfb      	ldrh	r3, [r7, #30]
 800a90e:	3301      	adds	r3, #1
 800a910:	83fb      	strh	r3, [r7, #30]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	88db      	ldrh	r3, [r3, #6]
 800a916:	8bfa      	ldrh	r2, [r7, #30]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d398      	bcc.n	800a84e <Paint_DrawChar+0x72>
    } // Write all
}
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000a74 	.word	0x20000a74
 800a928:	08010d24 	.word	0x08010d24

0800a92c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         sFONT *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af02      	add	r7, sp, #8
 800a932:	60ba      	str	r2, [r7, #8]
 800a934:	607b      	str	r3, [r7, #4]
 800a936:	4603      	mov	r3, r0
 800a938:	81fb      	strh	r3, [r7, #14]
 800a93a:	460b      	mov	r3, r1
 800a93c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800a93e:	89fb      	ldrh	r3, [r7, #14]
 800a940:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800a942:	89bb      	ldrh	r3, [r7, #12]
 800a944:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800a946:	4b21      	ldr	r3, [pc, #132]	; (800a9cc <Paint_DrawString_EN+0xa0>)
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	89fa      	ldrh	r2, [r7, #14]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d804      	bhi.n	800a95a <Paint_DrawString_EN+0x2e>
 800a950:	4b1e      	ldr	r3, [pc, #120]	; (800a9cc <Paint_DrawString_EN+0xa0>)
 800a952:	88db      	ldrh	r3, [r3, #6]
 800a954:	89ba      	ldrh	r2, [r7, #12]
 800a956:	429a      	cmp	r2, r3
 800a958:	d931      	bls.n	800a9be <Paint_DrawString_EN+0x92>
    {
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800a95a:	481d      	ldr	r0, [pc, #116]	; (800a9d0 <Paint_DrawString_EN+0xa4>)
 800a95c:	f002 fbe6 	bl	800d12c <puts>
        return;
 800a960:	e031      	b.n	800a9c6 <Paint_DrawString_EN+0x9a>
    }

    while (*pString != '\0')
    {
        // if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width) > Paint.Width)
 800a962:	8afb      	ldrh	r3, [r7, #22]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	8892      	ldrh	r2, [r2, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	4a18      	ldr	r2, [pc, #96]	; (800a9cc <Paint_DrawString_EN+0xa0>)
 800a96c:	8892      	ldrh	r2, [r2, #4]
 800a96e:	4293      	cmp	r3, r2
 800a970:	dd06      	ble.n	800a980 <Paint_DrawString_EN+0x54>
        {
            Xpoint = Xstart;
 800a972:	89fb      	ldrh	r3, [r7, #14]
 800a974:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	88da      	ldrh	r2, [r3, #6]
 800a97a:	8abb      	ldrh	r3, [r7, #20]
 800a97c:	4413      	add	r3, r2
 800a97e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint + Font->Height) > Paint.Height)
 800a980:	8abb      	ldrh	r3, [r7, #20]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	88d2      	ldrh	r2, [r2, #6]
 800a986:	4413      	add	r3, r2
 800a988:	4a10      	ldr	r2, [pc, #64]	; (800a9cc <Paint_DrawString_EN+0xa0>)
 800a98a:	88d2      	ldrh	r2, [r2, #6]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	dd03      	ble.n	800a998 <Paint_DrawString_EN+0x6c>
        {
            Xpoint = Xstart;
 800a990:	89fb      	ldrh	r3, [r7, #14]
 800a992:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800a994:	89bb      	ldrh	r3, [r7, #12]
 800a996:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	8ab9      	ldrh	r1, [r7, #20]
 800a99e:	8af8      	ldrh	r0, [r7, #22]
 800a9a0:	8c3b      	ldrh	r3, [r7, #32]
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f7ff ff17 	bl	800a7dc <Paint_DrawChar>

        // The next character of the address
        pString++;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	60bb      	str	r3, [r7, #8]

        // The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	889a      	ldrh	r2, [r3, #4]
 800a9b8:	8afb      	ldrh	r3, [r7, #22]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	82fb      	strh	r3, [r7, #22]
    while (*pString != '\0')
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1cd      	bne.n	800a962 <Paint_DrawString_EN+0x36>
    }
}
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000a74 	.word	0x20000a74
 800a9d0:	08010d64 	.word	0x08010d64

0800a9d4 <DEV_SPI_WriteByte>:
 * The function writes a single byte of data to a SPI device using the HAL_SPI_Transmit function.
 *
 * @param value The byte value to be transmitted over SPI.
 */
void DEV_SPI_WriteByte(UBYTE value)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 100);
 800a9de:	1df9      	adds	r1, r7, #7
 800a9e0:	2364      	movs	r3, #100	; 0x64
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	4803      	ldr	r0, [pc, #12]	; (800a9f4 <DEV_SPI_WriteByte+0x20>)
 800a9e6:	f7f9 fed7 	bl	8004798 <HAL_SPI_Transmit>
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000248 	.word	0x20000248

0800a9f8 <DISPLAY_SendData>:
 *
 * @param Data Data is a variable of type UBYTE (unsigned byte) that represents the data to be sent
 * over SPI (Serial Peripheral Interface) communication.
 */
void DISPLAY_SendData(UBYTE Data)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800aa02:	2201      	movs	r2, #1
 800aa04:	2108      	movs	r1, #8
 800aa06:	480a      	ldr	r0, [pc, #40]	; (800aa30 <DISPLAY_SendData+0x38>)
 800aa08:	f7f8 fc82 	bl	8003310 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2180      	movs	r1, #128	; 0x80
 800aa10:	4807      	ldr	r0, [pc, #28]	; (800aa30 <DISPLAY_SendData+0x38>)
 800aa12:	f7f8 fc7d 	bl	8003310 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff ffdb 	bl	800a9d4 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800aa1e:	2201      	movs	r2, #1
 800aa20:	2180      	movs	r1, #128	; 0x80
 800aa22:	4803      	ldr	r0, [pc, #12]	; (800aa30 <DISPLAY_SendData+0x38>)
 800aa24:	f7f8 fc74 	bl	8003310 <HAL_GPIO_WritePin>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40020400 	.word	0x40020400

0800aa34 <DISPLAY_SendCommand>:
 * be sent to the display. This function sends the command to the display using SPI communication
 * protocol. The EPD_DC_PIN and EPD_CS_PIN are digital pins used for data/command selection and chip
 * select respectively
 */
void DISPLAY_SendCommand(UBYTE Reg)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	71fb      	strb	r3, [r7, #7]

    DEV_Digital_Write(EPD_DC_PIN, 0);
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2108      	movs	r1, #8
 800aa42:	480a      	ldr	r0, [pc, #40]	; (800aa6c <DISPLAY_SendCommand+0x38>)
 800aa44:	f7f8 fc64 	bl	8003310 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2180      	movs	r1, #128	; 0x80
 800aa4c:	4807      	ldr	r0, [pc, #28]	; (800aa6c <DISPLAY_SendCommand+0x38>)
 800aa4e:	f7f8 fc5f 	bl	8003310 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff ffbd 	bl	800a9d4 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	2180      	movs	r1, #128	; 0x80
 800aa5e:	4803      	ldr	r0, [pc, #12]	; (800aa6c <DISPLAY_SendCommand+0x38>)
 800aa60:	f7f8 fc56 	bl	8003310 <HAL_GPIO_WritePin>
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40020400 	.word	0x40020400

0800aa70 <DISPLAY_ReadBusy>:
/**
 * This function checks if the e-Paper display is busy and waits until it is not busy before
 * continuing.
 */
void DISPLAY_ReadBusy(void)
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
    //     DISPLAY_SendCommand(0x71);
    //     busy = DEV_Digital_Read(EPD_BUSY_PIN);
    //     busy = !(busy);
    // } while (busy);
    //displayDelay(200);
}
 800aa74:	bf00      	nop
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <DISPLAY_Display>:
 * displayed on the e-paper display.
 * @param ryimage The parameter "ryimage" is a pointer to an array of unsigned bytes that represents
 * the red and yellow image data to be displayed on the screen.
 */
void DISPLAY_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (DISPLAY_WIDTH % 8 == 0) ? (DISPLAY_WIDTH / 8) : (DISPLAY_WIDTH / 8 + 1);
 800aa86:	2310      	movs	r3, #16
 800aa88:	81fb      	strh	r3, [r7, #14]
    Height = DISPLAY_HEIGHT;
 800aa8a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800aa8e:	81bb      	strh	r3, [r7, #12]
    DISPLAY_SendCommand(0x10);
 800aa90:	2010      	movs	r0, #16
 800aa92:	f7ff ffcf 	bl	800aa34 <DISPLAY_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	82fb      	strh	r3, [r7, #22]
 800aa9a:	e019      	b.n	800aad0 <DISPLAY_Display+0x54>
    {
        for (UWORD i = 0; i < Width; i++)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	82bb      	strh	r3, [r7, #20]
 800aaa0:	e00f      	b.n	800aac2 <DISPLAY_Display+0x46>
        {
            DISPLAY_SendData(blackimage[i + j * Width]);
 800aaa2:	8aba      	ldrh	r2, [r7, #20]
 800aaa4:	8afb      	ldrh	r3, [r7, #22]
 800aaa6:	89f9      	ldrh	r1, [r7, #14]
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	4413      	add	r3, r2
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ff9e 	bl	800a9f8 <DISPLAY_SendData>
        for (UWORD i = 0; i < Width; i++)
 800aabc:	8abb      	ldrh	r3, [r7, #20]
 800aabe:	3301      	adds	r3, #1
 800aac0:	82bb      	strh	r3, [r7, #20]
 800aac2:	8aba      	ldrh	r2, [r7, #20]
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d3eb      	bcc.n	800aaa2 <DISPLAY_Display+0x26>
    for (UWORD j = 0; j < Height; j++)
 800aaca:	8afb      	ldrh	r3, [r7, #22]
 800aacc:	3301      	adds	r3, #1
 800aace:	82fb      	strh	r3, [r7, #22]
 800aad0:	8afa      	ldrh	r2, [r7, #22]
 800aad2:	89bb      	ldrh	r3, [r7, #12]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d3e1      	bcc.n	800aa9c <DISPLAY_Display+0x20>
        }
    }
    //DISPLAY_SendCommand(0x92);

    DISPLAY_SendCommand(0x13);
 800aad8:	2013      	movs	r0, #19
 800aada:	f7ff ffab 	bl	800aa34 <DISPLAY_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800aade:	2300      	movs	r3, #0
 800aae0:	827b      	strh	r3, [r7, #18]
 800aae2:	e019      	b.n	800ab18 <DISPLAY_Display+0x9c>
    {
        for (UWORD i = 0; i < Width; i++)
 800aae4:	2300      	movs	r3, #0
 800aae6:	823b      	strh	r3, [r7, #16]
 800aae8:	e00f      	b.n	800ab0a <DISPLAY_Display+0x8e>
        {
            DISPLAY_SendData(ryimage[i + j * Width]);
 800aaea:	8a3a      	ldrh	r2, [r7, #16]
 800aaec:	8a7b      	ldrh	r3, [r7, #18]
 800aaee:	89f9      	ldrh	r1, [r7, #14]
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff ff7a 	bl	800a9f8 <DISPLAY_SendData>
        for (UWORD i = 0; i < Width; i++)
 800ab04:	8a3b      	ldrh	r3, [r7, #16]
 800ab06:	3301      	adds	r3, #1
 800ab08:	823b      	strh	r3, [r7, #16]
 800ab0a:	8a3a      	ldrh	r2, [r7, #16]
 800ab0c:	89fb      	ldrh	r3, [r7, #14]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3eb      	bcc.n	800aaea <DISPLAY_Display+0x6e>
    for (UWORD j = 0; j < Height; j++)
 800ab12:	8a7b      	ldrh	r3, [r7, #18]
 800ab14:	3301      	adds	r3, #1
 800ab16:	827b      	strh	r3, [r7, #18]
 800ab18:	8a7a      	ldrh	r2, [r7, #18]
 800ab1a:	89bb      	ldrh	r3, [r7, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3e1      	bcc.n	800aae4 <DISPLAY_Display+0x68>
        }
    }
    //DISPLAY_SendCommand(0x92);
    DISPLAY_SendCommand(0x12);
 800ab20:	2012      	movs	r0, #18
 800ab22:	f7ff ff87 	bl	800aa34 <DISPLAY_SendCommand>
    DISPLAY_ReadBusy();
 800ab26:	f7ff ffa3 	bl	800aa70 <DISPLAY_ReadBusy>
}
 800ab2a:	bf00      	nop
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2104      	movs	r1, #4
 800ab3c:	4803      	ldr	r0, [pc, #12]	; (800ab4c <SELECT+0x18>)
 800ab3e:	f7f8 fbe7 	bl	8003310 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ab42:	2001      	movs	r0, #1
 800ab44:	f7f7 fda2 	bl	800268c <HAL_Delay>
}
 800ab48:	bf00      	nop
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40020c00 	.word	0x40020c00

0800ab50 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ab54:	2201      	movs	r2, #1
 800ab56:	2104      	movs	r1, #4
 800ab58:	4803      	ldr	r0, [pc, #12]	; (800ab68 <DESELECT+0x18>)
 800ab5a:	f7f8 fbd9 	bl	8003310 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ab5e:	2001      	movs	r0, #1
 800ab60:	f7f7 fd94 	bl	800268c <HAL_Delay>
}
 800ab64:	bf00      	nop
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	40020c00 	.word	0x40020c00

0800ab6c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800ab76:	bf00      	nop
 800ab78:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <SPI_TxByte+0x30>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d1f8      	bne.n	800ab78 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ab86:	1df9      	adds	r1, r7, #7
 800ab88:	2364      	movs	r3, #100	; 0x64
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	4803      	ldr	r0, [pc, #12]	; (800ab9c <SPI_TxByte+0x30>)
 800ab8e:	f7f9 fe03 	bl	8004798 <HAL_SPI_Transmit>
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200002a0 	.word	0x200002a0

0800aba0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	807b      	strh	r3, [r7, #2]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800abac:	bf00      	nop
 800abae:	4b08      	ldr	r3, [pc, #32]	; (800abd0 <SPI_TxBuffer+0x30>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d1f8      	bne.n	800abae <SPI_TxBuffer+0xe>
		;
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800abbc:	887a      	ldrh	r2, [r7, #2]
 800abbe:	2364      	movs	r3, #100	; 0x64
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	4803      	ldr	r0, [pc, #12]	; (800abd0 <SPI_TxBuffer+0x30>)
 800abc4:	f7f9 fde8 	bl	8004798 <HAL_SPI_Transmit>
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	200002a0 	.word	0x200002a0

0800abd4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800abda:	23ff      	movs	r3, #255	; 0xff
 800abdc:	71fb      	strb	r3, [r7, #7]

	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800abde:	bf00      	nop
 800abe0:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <SPI_RxByte+0x34>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0302 	and.w	r3, r3, #2
 800abea:	2b02      	cmp	r3, #2
 800abec:	d1f8      	bne.n	800abe0 <SPI_RxByte+0xc>
		;
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800abee:	1dba      	adds	r2, r7, #6
 800abf0:	1df9      	adds	r1, r7, #7
 800abf2:	2364      	movs	r3, #100	; 0x64
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	2301      	movs	r3, #1
 800abf8:	4803      	ldr	r0, [pc, #12]	; (800ac08 <SPI_RxByte+0x34>)
 800abfa:	f7f9 ff10 	bl	8004a1e <HAL_SPI_TransmitReceive>

	return data;
 800abfe:	79bb      	ldrb	r3, [r7, #6]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	200002a0 	.word	0x200002a0

0800ac0c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800ac14:	f7ff ffde 	bl	800abd4 <SPI_RxByte>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	701a      	strb	r2, [r3, #0]
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <SD_ReadyWait+0x30>)
 800ac30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ac34:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do
	{
		res = SPI_RxByte();
 800ac36:	f7ff ffcd 	bl	800abd4 <SPI_RxByte>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	2bff      	cmp	r3, #255	; 0xff
 800ac42:	d004      	beq.n	800ac4e <SD_ReadyWait+0x26>
 800ac44:	4b04      	ldr	r3, [pc, #16]	; (800ac58 <SD_ReadyWait+0x30>)
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1f3      	bne.n	800ac36 <SD_ReadyWait+0xe>

	return res;
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000815 	.word	0x20000815

0800ac5c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800ac62:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ac66:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800ac68:	f7ff ff72 	bl	800ab50 <DESELECT>
	for (int i = 0; i < 10; i++)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
 800ac70:	e005      	b.n	800ac7e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800ac72:	20ff      	movs	r0, #255	; 0xff
 800ac74:	f7ff ff7a 	bl	800ab6c <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	60bb      	str	r3, [r7, #8]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	ddf6      	ble.n	800ac72 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800ac84:	f7ff ff56 	bl	800ab34 <SELECT>

	/* make idle state */
	args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95; /* CRC */
 800ac9c:	2395      	movs	r3, #149	; 0x95
 800ac9e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800aca0:	463b      	mov	r3, r7
 800aca2:	2106      	movs	r1, #6
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7ff ff7b 	bl	800aba0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800acaa:	e002      	b.n	800acb2 <SD_PowerOn+0x56>
	{
		cnt--;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3b01      	subs	r3, #1
 800acb0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800acb2:	f7ff ff8f 	bl	800abd4 <SPI_RxByte>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d002      	beq.n	800acc2 <SD_PowerOn+0x66>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f4      	bne.n	800acac <SD_PowerOn+0x50>
	}

	DESELECT();
 800acc2:	f7ff ff45 	bl	800ab50 <DESELECT>
	SPI_TxByte(0XFF);
 800acc6:	20ff      	movs	r0, #255	; 0xff
 800acc8:	f7ff ff50 	bl	800ab6c <SPI_TxByte>

	PowerFlag = 1;
 800accc:	4b03      	ldr	r3, [pc, #12]	; (800acdc <SD_PowerOn+0x80>)
 800acce:	2201      	movs	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000a8d 	.word	0x20000a8d

0800ace0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800ace4:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <SD_PowerOff+0x14>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
}
 800acea:	bf00      	nop
 800acec:	46bd      	mov	sp, r7
 800acee:	bc80      	pop	{r7}
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000a8d 	.word	0x20000a8d

0800acf8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
	return PowerFlag;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <SD_CheckPower+0x10>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bc80      	pop	{r7}
 800ad06:	4770      	bx	lr
 800ad08:	20000a8d 	.word	0x20000a8d

0800ad0c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800ad16:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <SD_RxDataBlock+0x5c>)
 800ad18:	22c8      	movs	r2, #200	; 0xc8
 800ad1a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do
	{
		token = SPI_RxByte();
 800ad1c:	f7ff ff5a 	bl	800abd4 <SPI_RxByte>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2bff      	cmp	r3, #255	; 0xff
 800ad28:	d104      	bne.n	800ad34 <SD_RxDataBlock+0x28>
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <SD_RxDataBlock+0x5c>)
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1f3      	bne.n	800ad1c <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2bfe      	cmp	r3, #254	; 0xfe
 800ad38:	d001      	beq.n	800ad3e <SD_RxDataBlock+0x32>
		return FALSE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e00f      	b.n	800ad5e <SD_RxDataBlock+0x52>

	/* receive data */
	do
	{
		SPI_RxBytePtr(buff++);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff ff61 	bl	800ac0c <SPI_RxBytePtr>
	} while (len--);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	1e5a      	subs	r2, r3, #1
 800ad4e:	603a      	str	r2, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f4      	bne.n	800ad3e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800ad54:	f7ff ff3e 	bl	800abd4 <SPI_RxByte>
	SPI_RxByte();
 800ad58:	f7ff ff3c 	bl	800abd4 <SPI_RxByte>

	return TRUE;
 800ad5c:	2301      	movs	r3, #1
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000814 	.word	0x20000814

0800ad6c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800ad7c:	f7ff ff54 	bl	800ac28 <SD_ReadyWait>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2bff      	cmp	r3, #255	; 0xff
 800ad84:	d001      	beq.n	800ad8a <SD_TxDataBlock+0x1e>
		return FALSE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	e02f      	b.n	800adea <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff feed 	bl	800ab6c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	2bfd      	cmp	r3, #253	; 0xfd
 800ad96:	d020      	beq.n	800adda <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t *)buff, 512);
 800ad98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff feff 	bl	800aba0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800ada2:	f7ff ff17 	bl	800abd4 <SPI_RxByte>
		SPI_RxByte();
 800ada6:	f7ff ff15 	bl	800abd4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800adaa:	e00b      	b.n	800adc4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800adac:	f7ff ff12 	bl	800abd4 <SPI_RxByte>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05)
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	f003 031f 	and.w	r3, r3, #31
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d006      	beq.n	800adcc <SD_TxDataBlock+0x60>
				break;
			i++;
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	3301      	adds	r3, #1
 800adc2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	d9f0      	bls.n	800adac <SD_TxDataBlock+0x40>
 800adca:	e000      	b.n	800adce <SD_TxDataBlock+0x62>
				break;
 800adcc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0)
 800adce:	bf00      	nop
 800add0:	f7ff ff00 	bl	800abd4 <SPI_RxByte>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0fa      	beq.n	800add0 <SD_TxDataBlock+0x64>
			;
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05)
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	f003 031f 	and.w	r3, r3, #31
 800ade0:	2b05      	cmp	r3, #5
 800ade2:	d101      	bne.n	800ade8 <SD_TxDataBlock+0x7c>
		return TRUE;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <SD_TxDataBlock+0x7e>

	return FALSE;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	4603      	mov	r3, r0
 800adfa:	6039      	str	r1, [r7, #0]
 800adfc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800adfe:	f7ff ff13 	bl	800ac28 <SD_ReadyWait>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2bff      	cmp	r3, #255	; 0xff
 800ae06:	d001      	beq.n	800ae0c <SD_SendCmd+0x1a>
		return 0xFF;
 800ae08:	23ff      	movs	r3, #255	; 0xff
 800ae0a:	e042      	b.n	800ae92 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd);				  /* Command */
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff feac 	bl	800ab6c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); /* Argument[31..24] */
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	0e1b      	lsrs	r3, r3, #24
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fea6 	bl	800ab6c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); /* Argument[23..16] */
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff fea0 	bl	800ab6c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fe9a 	bl	800ab6c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg);		  /* Argument[7..0] */
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fe95 	bl	800ab6c <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	2b40      	cmp	r3, #64	; 0x40
 800ae46:	d102      	bne.n	800ae4e <SD_SendCmd+0x5c>
		crc = 0x95; /* CRC for CMD0(0) */
 800ae48:	2395      	movs	r3, #149	; 0x95
 800ae4a:	73fb      	strb	r3, [r7, #15]
 800ae4c:	e007      	b.n	800ae5e <SD_SendCmd+0x6c>
	else if (cmd == CMD8)
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	2b48      	cmp	r3, #72	; 0x48
 800ae52:	d102      	bne.n	800ae5a <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 800ae54:	2387      	movs	r3, #135	; 0x87
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	e001      	b.n	800ae5e <SD_SendCmd+0x6c>
	else
		crc = 1;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fe83 	bl	800ab6c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	2b4c      	cmp	r3, #76	; 0x4c
 800ae6a:	d101      	bne.n	800ae70 <SD_SendCmd+0x7e>
		SPI_RxByte();
 800ae6c:	f7ff feb2 	bl	800abd4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800ae70:	230a      	movs	r3, #10
 800ae72:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 800ae74:	f7ff feae 	bl	800abd4 <SPI_RxByte>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800ae7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	da05      	bge.n	800ae90 <SD_SendCmd+0x9e>
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	73bb      	strb	r3, [r7, #14]
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f1      	bne.n	800ae74 <SD_SendCmd+0x82>

	return res;
 800ae90:	7b7b      	ldrb	r3, [r7, #13]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv)
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e0d6      	b.n	800b05e <SD_disk_initialize+0x1c2>

	/* no disk */
	if (Stat & STA_NODISK)
 800aeb0:	4b6d      	ldr	r3, [pc, #436]	; (800b068 <SD_disk_initialize+0x1cc>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <SD_disk_initialize+0x2a>
		return Stat;
 800aebe:	4b6a      	ldr	r3, [pc, #424]	; (800b068 <SD_disk_initialize+0x1cc>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	e0cb      	b.n	800b05e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800aec6:	f7ff fec9 	bl	800ac5c <SD_PowerOn>

	/* slave select */
	SELECT();
 800aeca:	f7ff fe33 	bl	800ab34 <SELECT>

	/* check disk type */
	type = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800aed2:	2100      	movs	r1, #0
 800aed4:	2040      	movs	r0, #64	; 0x40
 800aed6:	f7ff ff8c 	bl	800adf2 <SD_SendCmd>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b01      	cmp	r3, #1
 800aede:	f040 80a6 	bne.w	800b02e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800aee2:	4b62      	ldr	r3, [pc, #392]	; (800b06c <SD_disk_initialize+0x1d0>)
 800aee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aee8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800aeea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aeee:	2048      	movs	r0, #72	; 0x48
 800aef0:	f7ff ff7f 	bl	800adf2 <SD_SendCmd>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d158      	bne.n	800afac <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]
 800aefe:	e00c      	b.n	800af1a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800af00:	7bfc      	ldrb	r4, [r7, #15]
 800af02:	f7ff fe67 	bl	800abd4 <SPI_RxByte>
 800af06:	4603      	mov	r3, r0
 800af08:	461a      	mov	r2, r3
 800af0a:	f104 0310 	add.w	r3, r4, #16
 800af0e:	443b      	add	r3, r7
 800af10:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	3301      	adds	r3, #1
 800af18:	73fb      	strb	r3, [r7, #15]
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d9ef      	bls.n	800af00 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800af20:	7abb      	ldrb	r3, [r7, #10]
 800af22:	2b01      	cmp	r3, #1
 800af24:	f040 8083 	bne.w	800b02e <SD_disk_initialize+0x192>
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	2baa      	cmp	r3, #170	; 0xaa
 800af2c:	d17f      	bne.n	800b02e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800af2e:	2100      	movs	r1, #0
 800af30:	2077      	movs	r0, #119	; 0x77
 800af32:	f7ff ff5e 	bl	800adf2 <SD_SendCmd>
 800af36:	4603      	mov	r3, r0
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d807      	bhi.n	800af4c <SD_disk_initialize+0xb0>
 800af3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800af40:	2069      	movs	r0, #105	; 0x69
 800af42:	f7ff ff56 	bl	800adf2 <SD_SendCmd>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <SD_disk_initialize+0xbc>
						break;
				} while (Timer1);
 800af4c:	4b47      	ldr	r3, [pc, #284]	; (800b06c <SD_disk_initialize+0x1d0>)
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1eb      	bne.n	800af2e <SD_disk_initialize+0x92>
 800af56:	e000      	b.n	800af5a <SD_disk_initialize+0xbe>
						break;
 800af58:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800af5a:	4b44      	ldr	r3, [pc, #272]	; (800b06c <SD_disk_initialize+0x1d0>)
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d064      	beq.n	800b02e <SD_disk_initialize+0x192>
 800af64:	2100      	movs	r1, #0
 800af66:	207a      	movs	r0, #122	; 0x7a
 800af68:	f7ff ff43 	bl	800adf2 <SD_SendCmd>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d15d      	bne.n	800b02e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800af72:	2300      	movs	r3, #0
 800af74:	73fb      	strb	r3, [r7, #15]
 800af76:	e00c      	b.n	800af92 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800af78:	7bfc      	ldrb	r4, [r7, #15]
 800af7a:	f7ff fe2b 	bl	800abd4 <SPI_RxByte>
 800af7e:	4603      	mov	r3, r0
 800af80:	461a      	mov	r2, r3
 800af82:	f104 0310 	add.w	r3, r4, #16
 800af86:	443b      	add	r3, r7
 800af88:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	3301      	adds	r3, #1
 800af90:	73fb      	strb	r3, [r7, #15]
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d9ef      	bls.n	800af78 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800af98:	7a3b      	ldrb	r3, [r7, #8]
 800af9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <SD_disk_initialize+0x10a>
 800afa2:	230c      	movs	r3, #12
 800afa4:	e000      	b.n	800afa8 <SD_disk_initialize+0x10c>
 800afa6:	2304      	movs	r3, #4
 800afa8:	73bb      	strb	r3, [r7, #14]
 800afaa:	e040      	b.n	800b02e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800afac:	2100      	movs	r1, #0
 800afae:	2077      	movs	r0, #119	; 0x77
 800afb0:	f7ff ff1f 	bl	800adf2 <SD_SendCmd>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d808      	bhi.n	800afcc <SD_disk_initialize+0x130>
 800afba:	2100      	movs	r1, #0
 800afbc:	2069      	movs	r0, #105	; 0x69
 800afbe:	f7ff ff18 	bl	800adf2 <SD_SendCmd>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d801      	bhi.n	800afcc <SD_disk_initialize+0x130>
 800afc8:	2302      	movs	r3, #2
 800afca:	e000      	b.n	800afce <SD_disk_initialize+0x132>
 800afcc:	2301      	movs	r3, #1
 800afce:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d10e      	bne.n	800aff4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800afd6:	2100      	movs	r1, #0
 800afd8:	2077      	movs	r0, #119	; 0x77
 800afda:	f7ff ff0a 	bl	800adf2 <SD_SendCmd>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d80e      	bhi.n	800b002 <SD_disk_initialize+0x166>
 800afe4:	2100      	movs	r1, #0
 800afe6:	2069      	movs	r0, #105	; 0x69
 800afe8:	f7ff ff03 	bl	800adf2 <SD_SendCmd>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d107      	bne.n	800b002 <SD_disk_initialize+0x166>
						break; /* ACMD41 */
 800aff2:	e00d      	b.n	800b010 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 800aff4:	2100      	movs	r1, #0
 800aff6:	2041      	movs	r0, #65	; 0x41
 800aff8:	f7ff fefb 	bl	800adf2 <SD_SendCmd>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d005      	beq.n	800b00e <SD_disk_initialize+0x172>
						break; /* CMD1 */
				}

			} while (Timer1);
 800b002:	4b1a      	ldr	r3, [pc, #104]	; (800b06c <SD_disk_initialize+0x1d0>)
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	b29b      	uxth	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e1      	bne.n	800afd0 <SD_disk_initialize+0x134>
 800b00c:	e000      	b.n	800b010 <SD_disk_initialize+0x174>
						break; /* CMD1 */
 800b00e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800b010:	4b16      	ldr	r3, [pc, #88]	; (800b06c <SD_disk_initialize+0x1d0>)
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	b29b      	uxth	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <SD_disk_initialize+0x18e>
 800b01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b01e:	2050      	movs	r0, #80	; 0x50
 800b020:	f7ff fee7 	bl	800adf2 <SD_SendCmd>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <SD_disk_initialize+0x192>
				type = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800b02e:	4a10      	ldr	r2, [pc, #64]	; (800b070 <SD_disk_initialize+0x1d4>)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800b034:	f7ff fd8c 	bl	800ab50 <DESELECT>
	SPI_RxByte();
 800b038:	f7ff fdcc 	bl	800abd4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d008      	beq.n	800b054 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <SD_disk_initialize+0x1cc>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f023 0301 	bic.w	r3, r3, #1
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	4b06      	ldr	r3, [pc, #24]	; (800b068 <SD_disk_initialize+0x1cc>)
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	e001      	b.n	800b058 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800b054:	f7ff fe44 	bl	800ace0 <SD_PowerOff>
	}

	return Stat;
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <SD_disk_initialize+0x1cc>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	b2db      	uxtb	r3, r3
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	bd90      	pop	{r4, r7, pc}
 800b066:	bf00      	nop
 800b068:	2000002c 	.word	0x2000002c
 800b06c:	20000814 	.word	0x20000814
 800b070:	20000a8c 	.word	0x20000a8c

0800b074 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <SD_disk_status+0x14>
		return STA_NOINIT;
 800b084:	2301      	movs	r3, #1
 800b086:	e002      	b.n	800b08e <SD_disk_status+0x1a>
	return Stat;
 800b088:	4b03      	ldr	r3, [pc, #12]	; (800b098 <SD_disk_status+0x24>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	b2db      	uxtb	r3, r3
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr
 800b098:	2000002c 	.word	0x2000002c

0800b09c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <SD_disk_read+0x1c>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <SD_disk_read+0x20>
		return RES_PARERR;
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	e051      	b.n	800b160 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT)
 800b0bc:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <SD_disk_read+0xcc>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <SD_disk_read+0x32>
		return RES_NOTRDY;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e048      	b.n	800b160 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800b0ce:	4b27      	ldr	r3, [pc, #156]	; (800b16c <SD_disk_read+0xd0>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 0304 	and.w	r3, r3, #4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d102      	bne.n	800b0e0 <SD_disk_read+0x44>
		sector *= 512;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	025b      	lsls	r3, r3, #9
 800b0de:	607b      	str	r3, [r7, #4]

	SELECT();
 800b0e0:	f7ff fd28 	bl	800ab34 <SELECT>

	if (count == 1)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d111      	bne.n	800b10e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	2051      	movs	r0, #81	; 0x51
 800b0ee:	f7ff fe80 	bl	800adf2 <SD_SendCmd>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d129      	bne.n	800b14c <SD_disk_read+0xb0>
 800b0f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0fc:	68b8      	ldr	r0, [r7, #8]
 800b0fe:	f7ff fe05 	bl	800ad0c <SD_RxDataBlock>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d021      	beq.n	800b14c <SD_disk_read+0xb0>
			count = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	e01e      	b.n	800b14c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	2052      	movs	r0, #82	; 0x52
 800b112:	f7ff fe6e 	bl	800adf2 <SD_SendCmd>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d117      	bne.n	800b14c <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 800b11c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b120:	68b8      	ldr	r0, [r7, #8]
 800b122:	f7ff fdf3 	bl	800ad0c <SD_RxDataBlock>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <SD_disk_read+0xa6>
					break;
				buff += 512;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b132:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	3b01      	subs	r3, #1
 800b138:	603b      	str	r3, [r7, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1ed      	bne.n	800b11c <SD_disk_read+0x80>
 800b140:	e000      	b.n	800b144 <SD_disk_read+0xa8>
					break;
 800b142:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800b144:	2100      	movs	r1, #0
 800b146:	204c      	movs	r0, #76	; 0x4c
 800b148:	f7ff fe53 	bl	800adf2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800b14c:	f7ff fd00 	bl	800ab50 <DESELECT>
	SPI_RxByte();
 800b150:	f7ff fd40 	bl	800abd4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	bf14      	ite	ne
 800b15a:	2301      	movne	r3, #1
 800b15c:	2300      	moveq	r3, #0
 800b15e:	b2db      	uxtb	r3, r3
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	2000002c 	.word	0x2000002c
 800b16c:	20000a8c 	.word	0x20000a8c

0800b170 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d102      	bne.n	800b18c <SD_disk_write+0x1c>
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <SD_disk_write+0x20>
		return RES_PARERR;
 800b18c:	2304      	movs	r3, #4
 800b18e:	e06b      	b.n	800b268 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT)
 800b190:	4b37      	ldr	r3, [pc, #220]	; (800b270 <SD_disk_write+0x100>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	b2db      	uxtb	r3, r3
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <SD_disk_write+0x32>
		return RES_NOTRDY;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e062      	b.n	800b268 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT)
 800b1a2:	4b33      	ldr	r3, [pc, #204]	; (800b270 <SD_disk_write+0x100>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SD_disk_write+0x44>
		return RES_WRPRT;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e059      	b.n	800b268 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800b1b4:	4b2f      	ldr	r3, [pc, #188]	; (800b274 <SD_disk_write+0x104>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <SD_disk_write+0x56>
		sector *= 512;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	025b      	lsls	r3, r3, #9
 800b1c4:	607b      	str	r3, [r7, #4]

	SELECT();
 800b1c6:	f7ff fcb5 	bl	800ab34 <SELECT>

	if (count == 1)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d110      	bne.n	800b1f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	2058      	movs	r0, #88	; 0x58
 800b1d4:	f7ff fe0d 	bl	800adf2 <SD_SendCmd>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d13a      	bne.n	800b254 <SD_disk_write+0xe4>
 800b1de:	21fe      	movs	r1, #254	; 0xfe
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f7ff fdc3 	bl	800ad6c <SD_TxDataBlock>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d033      	beq.n	800b254 <SD_disk_write+0xe4>
			count = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	e030      	b.n	800b254 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800b1f2:	4b20      	ldr	r3, [pc, #128]	; (800b274 <SD_disk_write+0x104>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800b1fe:	2100      	movs	r1, #0
 800b200:	2077      	movs	r0, #119	; 0x77
 800b202:	f7ff fdf6 	bl	800adf2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	2057      	movs	r0, #87	; 0x57
 800b20a:	f7ff fdf2 	bl	800adf2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	2059      	movs	r0, #89	; 0x59
 800b212:	f7ff fdee 	bl	800adf2 <SD_SendCmd>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d11b      	bne.n	800b254 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 800b21c:	21fc      	movs	r1, #252	; 0xfc
 800b21e:	68b8      	ldr	r0, [r7, #8]
 800b220:	f7ff fda4 	bl	800ad6c <SD_TxDataBlock>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <SD_disk_write+0xd0>
					break;
				buff += 512;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b230:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	3b01      	subs	r3, #1
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ee      	bne.n	800b21c <SD_disk_write+0xac>
 800b23e:	e000      	b.n	800b242 <SD_disk_write+0xd2>
					break;
 800b240:	bf00      	nop

			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD))
 800b242:	21fd      	movs	r1, #253	; 0xfd
 800b244:	2000      	movs	r0, #0
 800b246:	f7ff fd91 	bl	800ad6c <SD_TxDataBlock>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <SD_disk_write+0xe4>
			{
				count = 1;
 800b250:	2301      	movs	r3, #1
 800b252:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800b254:	f7ff fc7c 	bl	800ab50 <DESELECT>
	SPI_RxByte();
 800b258:	f7ff fcbc 	bl	800abd4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bf14      	ite	ne
 800b262:	2301      	movne	r3, #1
 800b264:	2300      	moveq	r3, #0
 800b266:	b2db      	uxtb	r3, r3
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	2000002c 	.word	0x2000002c
 800b274:	20000a8c 	.word	0x20000a8c

0800b278 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b08b      	sub	sp, #44	; 0x2c
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	603a      	str	r2, [r7, #0]
 800b282:	71fb      	strb	r3, [r7, #7]
 800b284:	460b      	mov	r3, r1
 800b286:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv)
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 800b292:	2304      	movs	r3, #4
 800b294:	e115      	b.n	800b4c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800b29c:	79bb      	ldrb	r3, [r7, #6]
 800b29e:	2b05      	cmp	r3, #5
 800b2a0:	d124      	bne.n	800b2ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d012      	beq.n	800b2d0 <SD_disk_ioctl+0x58>
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	dc1a      	bgt.n	800b2e4 <SD_disk_ioctl+0x6c>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <SD_disk_ioctl+0x40>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d006      	beq.n	800b2c4 <SD_disk_ioctl+0x4c>
 800b2b6:	e015      	b.n	800b2e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff(); /* Power Off */
 800b2b8:	f7ff fd12 	bl	800ace0 <SD_PowerOff>
			res = RES_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b2c2:	e0fc      	b.n	800b4be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn(); /* Power On */
 800b2c4:	f7ff fcca 	bl	800ac5c <SD_PowerOn>
			res = RES_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b2ce:	e0f6      	b.n	800b4be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	1c5c      	adds	r4, r3, #1
 800b2d4:	f7ff fd10 	bl	800acf8 <SD_CheckPower>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b2e2:	e0ec      	b.n	800b4be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800b2e4:	2304      	movs	r3, #4
 800b2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2ea:	e0e8      	b.n	800b4be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT)
 800b2ec:	4b77      	ldr	r3, [pc, #476]	; (800b4cc <SD_disk_ioctl+0x254>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <SD_disk_ioctl+0x86>
			return RES_NOTRDY;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e0e1      	b.n	800b4c2 <SD_disk_ioctl+0x24a>

		SELECT();
 800b2fe:	f7ff fc19 	bl	800ab34 <SELECT>

		switch (ctrl)
 800b302:	79bb      	ldrb	r3, [r7, #6]
 800b304:	2b0d      	cmp	r3, #13
 800b306:	f200 80cb 	bhi.w	800b4a0 <SD_disk_ioctl+0x228>
 800b30a:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <SD_disk_ioctl+0x98>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b40b 	.word	0x0800b40b
 800b314:	0800b349 	.word	0x0800b349
 800b318:	0800b3fb 	.word	0x0800b3fb
 800b31c:	0800b4a1 	.word	0x0800b4a1
 800b320:	0800b4a1 	.word	0x0800b4a1
 800b324:	0800b4a1 	.word	0x0800b4a1
 800b328:	0800b4a1 	.word	0x0800b4a1
 800b32c:	0800b4a1 	.word	0x0800b4a1
 800b330:	0800b4a1 	.word	0x0800b4a1
 800b334:	0800b4a1 	.word	0x0800b4a1
 800b338:	0800b4a1 	.word	0x0800b4a1
 800b33c:	0800b41d 	.word	0x0800b41d
 800b340:	0800b441 	.word	0x0800b441
 800b344:	0800b465 	.word	0x0800b465
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b348:	2100      	movs	r1, #0
 800b34a:	2049      	movs	r0, #73	; 0x49
 800b34c:	f7ff fd51 	bl	800adf2 <SD_SendCmd>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 80a8 	bne.w	800b4a8 <SD_disk_ioctl+0x230>
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	2110      	movs	r1, #16
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fcd4 	bl	800ad0c <SD_RxDataBlock>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 809e 	beq.w	800b4a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800b36c:	7b3b      	ldrb	r3, [r7, #12]
 800b36e:	099b      	lsrs	r3, r3, #6
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b01      	cmp	r3, #1
 800b374:	d10e      	bne.n	800b394 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 800b376:	7d7b      	ldrb	r3, [r7, #21]
 800b378:	b29a      	uxth	r2, r3
 800b37a:	7d3b      	ldrb	r3, [r7, #20]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	b29b      	uxth	r3, r3
 800b382:	4413      	add	r3, r2
 800b384:	b29b      	uxth	r3, r3
 800b386:	3301      	adds	r3, #1
 800b388:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << 10;
 800b38a:	8bfb      	ldrh	r3, [r7, #30]
 800b38c:	029a      	lsls	r2, r3, #10
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	e02e      	b.n	800b3f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b394:	7c7b      	ldrb	r3, [r7, #17]
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	7dbb      	ldrb	r3, [r7, #22]
 800b39e:	09db      	lsrs	r3, r3, #7
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	7d7b      	ldrb	r3, [r7, #21]
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0306 	and.w	r3, r3, #6
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	3302      	adds	r3, #2
 800b3b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b3bc:	7d3b      	ldrb	r3, [r7, #20]
 800b3be:	099b      	lsrs	r3, r3, #6
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	7cfb      	ldrb	r3, [r7, #19]
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	7cbb      	ldrb	r3, [r7, #18]
 800b3d2:	029b      	lsls	r3, r3, #10
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << (n - 9);
 800b3e4:	8bfa      	ldrh	r2, [r7, #30]
 800b3e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3ea:	3b09      	subs	r3, #9
 800b3ec:	409a      	lsls	r2, r3
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800b3f8:	e056      	b.n	800b4a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD *)buff = 512;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b400:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b408:	e055      	b.n	800b4b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF)
 800b40a:	f7ff fc0d 	bl	800ac28 <SD_ReadyWait>
 800b40e:	4603      	mov	r3, r0
 800b410:	2bff      	cmp	r3, #255	; 0xff
 800b412:	d14b      	bne.n	800b4ac <SD_disk_ioctl+0x234>
				res = RES_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b41a:	e047      	b.n	800b4ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800b41c:	2100      	movs	r1, #0
 800b41e:	2049      	movs	r0, #73	; 0x49
 800b420:	f7ff fce7 	bl	800adf2 <SD_SendCmd>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d142      	bne.n	800b4b0 <SD_disk_ioctl+0x238>
 800b42a:	2110      	movs	r1, #16
 800b42c:	6a38      	ldr	r0, [r7, #32]
 800b42e:	f7ff fc6d 	bl	800ad0c <SD_RxDataBlock>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d03b      	beq.n	800b4b0 <SD_disk_ioctl+0x238>
				res = RES_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b43e:	e037      	b.n	800b4b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800b440:	2100      	movs	r1, #0
 800b442:	204a      	movs	r0, #74	; 0x4a
 800b444:	f7ff fcd5 	bl	800adf2 <SD_SendCmd>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d132      	bne.n	800b4b4 <SD_disk_ioctl+0x23c>
 800b44e:	2110      	movs	r1, #16
 800b450:	6a38      	ldr	r0, [r7, #32]
 800b452:	f7ff fc5b 	bl	800ad0c <SD_RxDataBlock>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d02b      	beq.n	800b4b4 <SD_disk_ioctl+0x23c>
				res = RES_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b462:	e027      	b.n	800b4b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800b464:	2100      	movs	r1, #0
 800b466:	207a      	movs	r0, #122	; 0x7a
 800b468:	f7ff fcc3 	bl	800adf2 <SD_SendCmd>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d116      	bne.n	800b4a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800b472:	2300      	movs	r3, #0
 800b474:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b478:	e00b      	b.n	800b492 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800b47a:	6a3c      	ldr	r4, [r7, #32]
 800b47c:	1c63      	adds	r3, r4, #1
 800b47e:	623b      	str	r3, [r7, #32]
 800b480:	f7ff fba8 	bl	800abd4 <SPI_RxByte>
 800b484:	4603      	mov	r3, r0
 800b486:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800b488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b48c:	3301      	adds	r3, #1
 800b48e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b496:	2b03      	cmp	r3, #3
 800b498:	d9ef      	bls.n	800b47a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4a6:	e006      	b.n	800b4b6 <SD_disk_ioctl+0x23e>
			break;
 800b4a8:	bf00      	nop
 800b4aa:	e004      	b.n	800b4b6 <SD_disk_ioctl+0x23e>
			break;
 800b4ac:	bf00      	nop
 800b4ae:	e002      	b.n	800b4b6 <SD_disk_ioctl+0x23e>
			break;
 800b4b0:	bf00      	nop
 800b4b2:	e000      	b.n	800b4b6 <SD_disk_ioctl+0x23e>
			break;
 800b4b4:	bf00      	nop
		}

		DESELECT();
 800b4b6:	f7ff fb4b 	bl	800ab50 <DESELECT>
		SPI_RxByte();
 800b4ba:	f7ff fb8b 	bl	800abd4 <SPI_RxByte>
	}

	return res;
 800b4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	372c      	adds	r7, #44	; 0x2c
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd90      	pop	{r4, r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	2000002c 	.word	0x2000002c

0800b4d0 <clear_buffer>:
        i++;
    return i;
}

void clear_buffer(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE; i++)
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	e007      	b.n	800b4ec <clear_buffer+0x1c>
        buffer[i] = '\0';
 800b4dc:	4a08      	ldr	r2, [pc, #32]	; (800b500 <clear_buffer+0x30>)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	607b      	str	r3, [r7, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b4f0:	ddf4      	ble.n	800b4dc <clear_buffer+0xc>
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bc80      	pop	{r7}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	2000130c 	.word	0x2000130c

0800b504 <sd_mount>:

SD_CARD sd_mount()
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
    SD_CARD status = SD_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	71fb      	strb	r3, [r7, #7]
    fresult = f_mount(&fs, "", 1);
 800b50e:	2201      	movs	r2, #1
 800b510:	490a      	ldr	r1, [pc, #40]	; (800b53c <sd_mount+0x38>)
 800b512:	480b      	ldr	r0, [pc, #44]	; (800b540 <sd_mount+0x3c>)
 800b514:	f7fd fda8 	bl	8009068 <f_mount>
 800b518:	4603      	mov	r3, r0
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b09      	ldr	r3, [pc, #36]	; (800b544 <sd_mount+0x40>)
 800b51e:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK)
 800b520:	4b08      	ldr	r3, [pc, #32]	; (800b544 <sd_mount+0x40>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <sd_mount+0x2a>
        status = SD_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	71fb      	strb	r3, [r7, #7]
 800b52c:	e001      	b.n	800b532 <sd_mount+0x2e>
    else
        status = SD_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	71fb      	strb	r3, [r7, #7]
    return status;
 800b532:	79fb      	ldrb	r3, [r7, #7]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	08010df0 	.word	0x08010df0
 800b540:	20000a90 	.word	0x20000a90
 800b544:	200012f8 	.word	0x200012f8

0800b548 <sd_check_space>:

char sd_check_space()
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	af00      	add	r7, sp, #0
    clear_buffer();
 800b54c:	f7ff ffc0 	bl	800b4d0 <clear_buffer>
    f_getfree("", &fre_clust, &pfs);
 800b550:	4a25      	ldr	r2, [pc, #148]	; (800b5e8 <sd_check_space+0xa0>)
 800b552:	4926      	ldr	r1, [pc, #152]	; (800b5ec <sd_check_space+0xa4>)
 800b554:	4826      	ldr	r0, [pc, #152]	; (800b5f0 <sd_check_space+0xa8>)
 800b556:	f7fe f9d5 	bl	8009904 <f_getfree>
    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800b55a:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <sd_check_space+0xa0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	3b02      	subs	r3, #2
 800b562:	4a21      	ldr	r2, [pc, #132]	; (800b5e8 <sd_check_space+0xa0>)
 800b564:	6812      	ldr	r2, [r2, #0]
 800b566:	8952      	ldrh	r2, [r2, #10]
 800b568:	fb02 f303 	mul.w	r3, r2, r3
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7f4 ff51 	bl	8000414 <__aeabi_ui2d>
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <sd_check_space+0xac>)
 800b578:	f7f4 ffc6 	bl	8000508 <__aeabi_dmul>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4610      	mov	r0, r2
 800b582:	4619      	mov	r1, r3
 800b584:	f7f5 fa98 	bl	8000ab8 <__aeabi_d2uiz>
 800b588:	4603      	mov	r3, r0
 800b58a:	4a1b      	ldr	r2, [pc, #108]	; (800b5f8 <sd_check_space+0xb0>)
 800b58c:	6013      	str	r3, [r2, #0]
    sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 800b58e:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <sd_check_space+0xb0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	4919      	ldr	r1, [pc, #100]	; (800b5fc <sd_check_space+0xb4>)
 800b596:	481a      	ldr	r0, [pc, #104]	; (800b600 <sd_check_space+0xb8>)
 800b598:	f001 fde4 	bl	800d164 <siprintf>
    //send_uart(buffer);
    clear_buffer();
 800b59c:	f7ff ff98 	bl	800b4d0 <clear_buffer>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800b5a0:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <sd_check_space+0xa0>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	4b10      	ldr	r3, [pc, #64]	; (800b5ec <sd_check_space+0xa4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	fb02 f303 	mul.w	r3, r2, r3
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7f4 ff2f 	bl	8000414 <__aeabi_ui2d>
 800b5b6:	f04f 0200 	mov.w	r2, #0
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <sd_check_space+0xac>)
 800b5bc:	f7f4 ffa4 	bl	8000508 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	f7f5 fa76 	bl	8000ab8 <__aeabi_d2uiz>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	4a0d      	ldr	r2, [pc, #52]	; (800b604 <sd_check_space+0xbc>)
 800b5d0:	6013      	str	r3, [r2, #0]
    sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 800b5d2:	4b0c      	ldr	r3, [pc, #48]	; (800b604 <sd_check_space+0xbc>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	490b      	ldr	r1, [pc, #44]	; (800b608 <sd_check_space+0xc0>)
 800b5da:	4809      	ldr	r0, [pc, #36]	; (800b600 <sd_check_space+0xb8>)
 800b5dc:	f001 fdc2 	bl	800d164 <siprintf>
    //send_uart(buffer);
    return buffer;
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <sd_check_space+0xb8>)
 800b5e2:	b2db      	uxtb	r3, r3
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200012fc 	.word	0x200012fc
 800b5ec:	20001300 	.word	0x20001300
 800b5f0:	08010df0 	.word	0x08010df0
 800b5f4:	3fe00000 	.word	0x3fe00000
 800b5f8:	20001304 	.word	0x20001304
 800b5fc:	08010df4 	.word	0x08010df4
 800b600:	2000130c 	.word	0x2000130c
 800b604:	20001308 	.word	0x20001308
 800b608:	08010e10 	.word	0x08010e10

0800b60c <SD_creat_file>:

SD_CARD SD_creat_file(char *fileName)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    SD_CARD status = SD_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	73fb      	strb	r3, [r7, #15]
    fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 800b618:	2212      	movs	r2, #18
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	480c      	ldr	r0, [pc, #48]	; (800b650 <SD_creat_file+0x44>)
 800b61e:	f7fd fd69 	bl	80090f4 <f_open>
 800b622:	4603      	mov	r3, r0
 800b624:	461a      	mov	r2, r3
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <SD_creat_file+0x48>)
 800b628:	701a      	strb	r2, [r3, #0]

    fresult = f_close(&fil);
 800b62a:	4809      	ldr	r0, [pc, #36]	; (800b650 <SD_creat_file+0x44>)
 800b62c:	f7fe f940 	bl	80098b0 <f_close>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	4b07      	ldr	r3, [pc, #28]	; (800b654 <SD_creat_file+0x48>)
 800b636:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800b638:	4b06      	ldr	r3, [pc, #24]	; (800b654 <SD_creat_file+0x48>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <SD_creat_file+0x38>
        status = SD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]
    return status;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
};
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20000ec8 	.word	0x20000ec8
 800b654:	200012f8 	.word	0x200012f8

0800b658 <SD_sendData>:
    }

    return status;
};

SD_CARD SD_sendData(char *fileName, char *data){
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
    clear_buffer();
 800b662:	f7ff ff35 	bl	800b4d0 <clear_buffer>
    SD_CARD status = SD_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	73fb      	strb	r3, [r7, #15]
    fresult = f_open(&fil, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 800b66a:	220a      	movs	r2, #10
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	4809      	ldr	r0, [pc, #36]	; (800b694 <SD_sendData+0x3c>)
 800b670:	f7fd fd40 	bl	80090f4 <f_open>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	4b07      	ldr	r3, [pc, #28]	; (800b698 <SD_sendData+0x40>)
 800b67a:	701a      	strb	r2, [r3, #0]
    f_printf(&fil, data);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	4805      	ldr	r0, [pc, #20]	; (800b694 <SD_sendData+0x3c>)
 800b680:	f7fe fb78 	bl	8009d74 <f_printf>
    f_close(&fil);
 800b684:	4803      	ldr	r0, [pc, #12]	; (800b694 <SD_sendData+0x3c>)
 800b686:	f7fe f913 	bl	80098b0 <f_close>
    return status;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
};
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000ec8 	.word	0x20000ec8
 800b698:	200012f8 	.word	0x200012f8

0800b69c <SIM7600_init>:
 *
 * @param sim a pointer to a SIM7600 struct, which likely contains information about the SIM7600 module
 * being used.
 */
void SIM7600_init(SIM7600 *sim)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
    sim->UART = &huart1;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <SIM7600_init+0x24>)
 800b6a8:	605a      	str	r2, [r3, #4]
    sim->HDMA = &hdma_usart1_rx;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a05      	ldr	r2, [pc, #20]	; (800b6c4 <SIM7600_init+0x28>)
 800b6ae:	609a      	str	r2, [r3, #8]
    sim->rxFlag = SIMFALSE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	701a      	strb	r2, [r3, #0]
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr
 800b6c0:	20000338 	.word	0x20000338
 800b6c4:	20000380 	.word	0x20000380

0800b6c8 <sendATcommand>:
 *
 * @return a value of type SIM_StatusTypeDef.
 */
SIM_StatusTypeDef sendATcommand(SIM7600 *sim, const char *ATCommand,
                                const char *Response, const char *unexpect, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	603b      	str	r3, [r7, #0]
    SIM_StatusTypeDef status = SIM_BUSY;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	75fb      	strb	r3, [r7, #23]
    HAL_UARTEx_ReceiveToIdle_DMA(sim->UART, sim->rxBuffer, SIM_BUFFER_SIZE);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6858      	ldr	r0, [r3, #4]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	330c      	adds	r3, #12
 800b6e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f7fa fac9 	bl	8005c7e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(sim->HDMA, DMA_IT_HT);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f022 0204 	bic.w	r2, r2, #4
 800b6fe:	601a      	str	r2, [r3, #0]
    //-----------------------------------------------------------------------
    memset((char *)sim->rxBuffer, 0, SIM_BUFFER_SIZE);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	330c      	adds	r3, #12
 800b704:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fd4e 	bl	800c1ac <memset>
    memset((char *)sim->txBuffer, 0, SIM_TX_BUFFER_SIZE);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fd45 	bl	800c1ac <memset>
    sprintf((char *)sim->txBuffer, "%s\r\n", ATCommand);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4926      	ldr	r1, [pc, #152]	; (800b7c4 <sendATcommand+0xfc>)
 800b72c:	4618      	mov	r0, r3
 800b72e:	f001 fd19 	bl	800d164 <siprintf>
    uint16_t len = strlen((char *)sim->txBuffer);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b738:	4618      	mov	r0, r3
 800b73a:	f7f4 fd21 	bl	8000180 <strlen>
 800b73e:	4603      	mov	r3, r0
 800b740:	82bb      	strh	r3, [r7, #20]
    HAL_UART_Transmit(sim->UART, (uint8_t *)sim->txBuffer, len, HAL_MAX_DELAY);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6858      	ldr	r0, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f503 7100 	add.w	r1, r3, #512	; 0x200
 800b74c:	8aba      	ldrh	r2, [r7, #20]
 800b74e:	f04f 33ff 	mov.w	r3, #4294967295
 800b752:	f7fa fa11 	bl	8005b78 <HAL_UART_Transmit>
    //-----------------------------------------------------------------------
    uint32_t tickStart = HAL_GetTick();
 800b756:	f7f6 ff8f 	bl	8002678 <HAL_GetTick>
 800b75a:	6138      	str	r0, [r7, #16]
    while (status == SIM_BUSY)
 800b75c:	e026      	b.n	800b7ac <sendATcommand+0xe4>
    {
        if ((HAL_GetTick() - tickStart >= Timeout))
 800b75e:	f7f6 ff8b 	bl	8002678 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d802      	bhi.n	800b774 <sendATcommand+0xac>
        {
            status = SIM_TIMEOUT;
 800b76e:	2302      	movs	r3, #2
 800b770:	75fb      	strb	r3, [r7, #23]
            break;
 800b772:	e01e      	b.n	800b7b2 <sendATcommand+0xea>
        }
        if (sim->rxFlag == SIMTRUE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d117      	bne.n	800b7ac <sendATcommand+0xe4>
        {
            if (strstr((char *)sim->rxBuffer, Response) != NULL)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	330c      	adds	r3, #12
 800b780:	6879      	ldr	r1, [r7, #4]
 800b782:	4618      	mov	r0, r3
 800b784:	f001 fd0e 	bl	800d1a4 <strstr>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <sendATcommand+0xcc>
            {
                status = SIM_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
                break;
 800b792:	e00e      	b.n	800b7b2 <sendATcommand+0xea>
            }
            else if (strstr((char *)sim->rxBuffer, unexpect) != NULL)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	330c      	adds	r3, #12
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 fd02 	bl	800d1a4 <strstr>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <sendATcommand+0xe4>
            {
                status = SIM_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	75fb      	strb	r3, [r7, #23]
                break;
 800b7aa:	e002      	b.n	800b7b2 <sendATcommand+0xea>
    while (status == SIM_BUSY)
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d0d5      	beq.n	800b75e <sendATcommand+0x96>
            }
        }
    }
    sim->rxFlag = SIMFALSE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	701a      	strb	r2, [r3, #0]
    return status;
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	08010e2c 	.word	0x08010e2c

0800b7c8 <SIM7600_Start>:
 * type that represents the status of the SIM7600 module. The actual value being returned depends on
 * the result of the `sendATcommand` function, which is called with the parameters `sim`, `"AT"`,
 * `"OK"`, `"ERROR"`, and `1200`.
 */
SIM_StatusTypeDef SIM7600_Start(SIM7600 *sim)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	6078      	str	r0, [r7, #4]
    SIM_StatusTypeDef status = SIM_BUSY;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	73fb      	strb	r3, [r7, #15]
    if (sendATcommand(sim, "AT", "OK", "ERROR", 1200) == SIM_OK)
 800b7d4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <SIM7600_Start+0x94>)
 800b7dc:	4a20      	ldr	r2, [pc, #128]	; (800b860 <SIM7600_Start+0x98>)
 800b7de:	4921      	ldr	r1, [pc, #132]	; (800b864 <SIM7600_Start+0x9c>)
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ff71 	bl	800b6c8 <sendATcommand>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d131      	bne.n	800b850 <SIM7600_Start+0x88>
        if (sendATcommand(sim, "AT+CPIN?", "OK", "ERROR", 1200) == SIM_OK)
 800b7ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4b1a      	ldr	r3, [pc, #104]	; (800b85c <SIM7600_Start+0x94>)
 800b7f4:	4a1a      	ldr	r2, [pc, #104]	; (800b860 <SIM7600_Start+0x98>)
 800b7f6:	491c      	ldr	r1, [pc, #112]	; (800b868 <SIM7600_Start+0xa0>)
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ff65 	bl	800b6c8 <sendATcommand>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d125      	bne.n	800b850 <SIM7600_Start+0x88>
            if (sendATcommand(sim, "AT+CSQ", "OK", "ERROR", 1200) == SIM_OK)
 800b804:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	4b14      	ldr	r3, [pc, #80]	; (800b85c <SIM7600_Start+0x94>)
 800b80c:	4a14      	ldr	r2, [pc, #80]	; (800b860 <SIM7600_Start+0x98>)
 800b80e:	4917      	ldr	r1, [pc, #92]	; (800b86c <SIM7600_Start+0xa4>)
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ff59 	bl	800b6c8 <sendATcommand>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d119      	bne.n	800b850 <SIM7600_Start+0x88>
                if (sendATcommand(sim, "AT+CGMR", "OK", "ERROR", 1200) == SIM_OK)
 800b81c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	4b0e      	ldr	r3, [pc, #56]	; (800b85c <SIM7600_Start+0x94>)
 800b824:	4a0e      	ldr	r2, [pc, #56]	; (800b860 <SIM7600_Start+0x98>)
 800b826:	4912      	ldr	r1, [pc, #72]	; (800b870 <SIM7600_Start+0xa8>)
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ff4d 	bl	800b6c8 <sendATcommand>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10d      	bne.n	800b850 <SIM7600_Start+0x88>
                    if (sendATcommand(sim, "AT+CTZU=1", "OK", "ERROR", 1200) == SIM_OK)
 800b834:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	4b08      	ldr	r3, [pc, #32]	; (800b85c <SIM7600_Start+0x94>)
 800b83c:	4a08      	ldr	r2, [pc, #32]	; (800b860 <SIM7600_Start+0x98>)
 800b83e:	490d      	ldr	r1, [pc, #52]	; (800b874 <SIM7600_Start+0xac>)
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff ff41 	bl	800b6c8 <sendATcommand>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <SIM7600_Start+0x88>
                        status = SIM_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]
    return status;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
};
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	08010e34 	.word	0x08010e34
 800b860:	08010e3c 	.word	0x08010e3c
 800b864:	08010e40 	.word	0x08010e40
 800b868:	08010e44 	.word	0x08010e44
 800b86c:	08010e50 	.word	0x08010e50
 800b870:	08010e58 	.word	0x08010e58
 800b874:	08010e60 	.word	0x08010e60

0800b878 <SIM7600_httpStart>:
 * @return The function `SIM7600_httpStart` is returning a `SIM_StatusTypeDef` which is the result of
 * calling the `sendATcommand` function with the parameters `sim`, `"AT+HTTPINIT"`, `"OK"`, `"ERROR"`,
 * and `1200`.
 */
SIM_StatusTypeDef SIM7600_httpStart(SIM7600 *sim)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	6078      	str	r0, [r7, #4]
    SIM7600_httpStop(sim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f815 	bl	800b8b0 <SIM7600_httpStop>
    return sendATcommand(sim, "AT+HTTPINIT", "OK", "ERROR", 1200);
 800b886:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <SIM7600_httpStart+0x2c>)
 800b88e:	4a06      	ldr	r2, [pc, #24]	; (800b8a8 <SIM7600_httpStart+0x30>)
 800b890:	4906      	ldr	r1, [pc, #24]	; (800b8ac <SIM7600_httpStart+0x34>)
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ff18 	bl	800b6c8 <sendATcommand>
 800b898:	4603      	mov	r3, r0
};
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	08010e34 	.word	0x08010e34
 800b8a8:	08010e3c 	.word	0x08010e3c
 800b8ac:	08010e6c 	.word	0x08010e6c

0800b8b0 <SIM7600_httpStop>:
 * data type that represents the status of the SIM7600 module. The return value depends on the success
 * or failure of the `sendATcommand` function which sends an AT command to the module and waits for a
 * response. If the response contains "OK", the function returns `SIM_SUCCESS`
 */
SIM_StatusTypeDef SIM7600_httpStop(SIM7600 *sim)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af02      	add	r7, sp, #8
 800b8b6:	6078      	str	r0, [r7, #4]
    return sendATcommand(sim, "AT+HTTPTERM", "OK", "ERROR", 500);
 800b8b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <SIM7600_httpStop+0x24>)
 800b8c0:	4a05      	ldr	r2, [pc, #20]	; (800b8d8 <SIM7600_httpStop+0x28>)
 800b8c2:	4906      	ldr	r1, [pc, #24]	; (800b8dc <SIM7600_httpStop+0x2c>)
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff feff 	bl	800b6c8 <sendATcommand>
 800b8ca:	4603      	mov	r3, r0
};
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	08010e34 	.word	0x08010e34
 800b8d8:	08010e3c 	.word	0x08010e3c
 800b8dc:	08010e78 	.word	0x08010e78

0800b8e0 <SIM7600_setUrl>:
 *
 * @return a SIM_StatusTypeDef, which is likely an enumerated type indicating the success or failure of
 * the operation.
 */
SIM_StatusTypeDef SIM7600_setUrl(SIM7600 *sim, const char *url)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b09e      	sub	sp, #120	; 0x78
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
    if (SIM7600_httpStart(sim) == SIM_OK)
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff ffc4 	bl	800b878 <SIM7600_httpStart>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d11b      	bne.n	800b92e <SIM7600_setUrl+0x4e>
    {
        uint8_t cmd[100] = {0};
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	f107 0310 	add.w	r3, r7, #16
 800b8fe:	2260      	movs	r2, #96	; 0x60
 800b900:	2100      	movs	r1, #0
 800b902:	4618      	mov	r0, r3
 800b904:	f000 fc52 	bl	800c1ac <memset>
        sprintf((char *)cmd, "AT+HTTPPARA=\"URL\",\"%s\"", url);
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	490a      	ldr	r1, [pc, #40]	; (800b938 <SIM7600_setUrl+0x58>)
 800b910:	4618      	mov	r0, r3
 800b912:	f001 fc27 	bl	800d164 <siprintf>
        return sendATcommand(sim, (char *)cmd, "OK", "ERROR", 12000);
 800b916:	f107 010c 	add.w	r1, r7, #12
 800b91a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	4b06      	ldr	r3, [pc, #24]	; (800b93c <SIM7600_setUrl+0x5c>)
 800b922:	4a07      	ldr	r2, [pc, #28]	; (800b940 <SIM7600_setUrl+0x60>)
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff fecf 	bl	800b6c8 <sendATcommand>
 800b92a:	4603      	mov	r3, r0
 800b92c:	e7ff      	b.n	800b92e <SIM7600_setUrl+0x4e>
    }
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3770      	adds	r7, #112	; 0x70
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	08010e84 	.word	0x08010e84
 800b93c:	08010e34 	.word	0x08010e34
 800b940:	08010e3c 	.word	0x08010e3c

0800b944 <SIM7600_httpPost>:
 *
 * @return a SIM_StatusTypeDef, which is likely an enumerated type indicating the status of the HTTP
 * POST request.
 */
SIM_StatusTypeDef SIM7600_httpPost(SIM7600 *sim, const char *data)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08c      	sub	sp, #48	; 0x30
 800b948:	af02      	add	r7, sp, #8
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
    // sendATcommand(sim, "AT+HTTPPARA=\"CONTENT\",\"application/json\"", "OK", "ERROR", 12000);
    uint8_t cmd[30] = {0};
 800b94e:	2300      	movs	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]
 800b952:	f107 030c 	add.w	r3, r7, #12
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
 800b95a:	605a      	str	r2, [r3, #4]
 800b95c:	609a      	str	r2, [r3, #8]
 800b95e:	60da      	str	r2, [r3, #12]
 800b960:	611a      	str	r2, [r3, #16]
 800b962:	615a      	str	r2, [r3, #20]
 800b964:	831a      	strh	r2, [r3, #24]
    uint8_t len = strlen(data);
 800b966:	6838      	ldr	r0, [r7, #0]
 800b968:	f7f4 fc0a 	bl	8000180 <strlen>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    sprintf((char *)cmd, "AT+HTTPDATA=%d,%d", len, 12000);
 800b972:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b976:	f107 0008 	add.w	r0, r7, #8
 800b97a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b97e:	491f      	ldr	r1, [pc, #124]	; (800b9fc <SIM7600_httpPost+0xb8>)
 800b980:	f001 fbf0 	bl	800d164 <siprintf>
    if (sendATcommand(sim, "AT+HTTPACTION=1", "+HTTPACTION: 1,400", "ERROR", 12000) == SIM_OK)
 800b984:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <SIM7600_httpPost+0xbc>)
 800b98c:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <SIM7600_httpPost+0xc0>)
 800b98e:	491e      	ldr	r1, [pc, #120]	; (800ba08 <SIM7600_httpPost+0xc4>)
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff fe99 	bl	800b6c8 <sendATcommand>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d121      	bne.n	800b9e0 <SIM7600_httpPost+0x9c>
    {
        if (sendATcommand(sim, (char *)cmd, "DOWNLOAD", "ERROR", 12000) != SIM_OK)
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	4b16      	ldr	r3, [pc, #88]	; (800ba00 <SIM7600_httpPost+0xbc>)
 800b9a8:	4a18      	ldr	r2, [pc, #96]	; (800ba0c <SIM7600_httpPost+0xc8>)
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fe8c 	bl	800b6c8 <sendATcommand>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00b      	beq.n	800b9ce <SIM7600_httpPost+0x8a>
        {
            return sendATcommand(sim, (char *)cmd, "DOWNLOAD", "ERROR", 12000);
 800b9b6:	f107 0108 	add.w	r1, r7, #8
 800b9ba:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <SIM7600_httpPost+0xbc>)
 800b9c2:	4a12      	ldr	r2, [pc, #72]	; (800ba0c <SIM7600_httpPost+0xc8>)
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff fe7f 	bl	800b6c8 <sendATcommand>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	e012      	b.n	800b9f4 <SIM7600_httpPost+0xb0>
        }
        else
        {
            sendATcommand(sim, data, "OK", "ERROR", 12000);
 800b9ce:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <SIM7600_httpPost+0xbc>)
 800b9d6:	4a0e      	ldr	r2, [pc, #56]	; (800ba10 <SIM7600_httpPost+0xcc>)
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff fe74 	bl	800b6c8 <sendATcommand>
        }
    }
    return sendATcommand(sim, "AT+HTTPACTION=1", "+HTTPACTION: 1,200", "ERROR", 12000);
 800b9e0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <SIM7600_httpPost+0xbc>)
 800b9e8:	4a0a      	ldr	r2, [pc, #40]	; (800ba14 <SIM7600_httpPost+0xd0>)
 800b9ea:	4907      	ldr	r1, [pc, #28]	; (800ba08 <SIM7600_httpPost+0xc4>)
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fe6b 	bl	800b6c8 <sendATcommand>
 800b9f2:	4603      	mov	r3, r0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3728      	adds	r7, #40	; 0x28
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	08010ebc 	.word	0x08010ebc
 800ba00:	08010e34 	.word	0x08010e34
 800ba04:	08010ed0 	.word	0x08010ed0
 800ba08:	08010ee4 	.word	0x08010ee4
 800ba0c:	08010ef4 	.word	0x08010ef4
 800ba10:	08010e3c 	.word	0x08010e3c
 800ba14:	08010f00 	.word	0x08010f00

0800ba18 <SIM7600_getTime>:
 * @param sim A pointer to the SIM7600 object, which contains information about the SIM7600 module.
 *
 * @return a SIM_StatusTypeDef, which is an enumerated type. It can either return SIM_OK or SIM_ERROR.
 */
SIM_StatusTypeDef SIM7600_getTime(SIM7600 *sim)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	6078      	str	r0, [r7, #4]
    if (sendATcommand(sim, "AT+CCLK=?", "OK", "ERROR", 12000) == SIM_OK)
 800ba20:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <SIM7600_getTime+0x48>)
 800ba28:	4a0e      	ldr	r2, [pc, #56]	; (800ba64 <SIM7600_getTime+0x4c>)
 800ba2a:	490f      	ldr	r1, [pc, #60]	; (800ba68 <SIM7600_getTime+0x50>)
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff fe4b 	bl	800b6c8 <sendATcommand>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10d      	bne.n	800ba54 <SIM7600_getTime+0x3c>
        if (sendATcommand(sim, "AT+CCLK?", "OK", "ERROR", 12000) == SIM_OK)
 800ba38:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <SIM7600_getTime+0x48>)
 800ba40:	4a08      	ldr	r2, [pc, #32]	; (800ba64 <SIM7600_getTime+0x4c>)
 800ba42:	490a      	ldr	r1, [pc, #40]	; (800ba6c <SIM7600_getTime+0x54>)
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fe3f 	bl	800b6c8 <sendATcommand>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <SIM7600_getTime+0x3c>
            return SIM_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	e000      	b.n	800ba56 <SIM7600_getTime+0x3e>
    return SIM_ERROR;
 800ba54:	2301      	movs	r3, #1
};
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	08010e34 	.word	0x08010e34
 800ba64:	08010e3c 	.word	0x08010e3c
 800ba68:	08010f14 	.word	0x08010f14
 800ba6c:	08010f20 	.word	0x08010f20

0800ba70 <initCounter>:
/**
 * The function initializes the values of a struct called DATA to zero.
 *
 * @param data a pointer to a struct of type DATA.
 */
void initCounter(){
 800ba70:	b480      	push	{r7}
 800ba72:	af00      	add	r7, sp, #0
	data.Distance_high = 10.00;
 800ba74:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <initCounter+0x18>)
 800ba76:	4a05      	ldr	r2, [pc, #20]	; (800ba8c <initCounter+0x1c>)
 800ba78:	61da      	str	r2, [r3, #28]
	data.Distance = 0.2;
 800ba7a:	4b03      	ldr	r3, [pc, #12]	; (800ba88 <initCounter+0x18>)
 800ba7c:	4a04      	ldr	r2, [pc, #16]	; (800ba90 <initCounter+0x20>)
 800ba7e:	621a      	str	r2, [r3, #32]
}
 800ba80:	bf00      	nop
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bc80      	pop	{r7}
 800ba86:	4770      	bx	lr
 800ba88:	200003c8 	.word	0x200003c8
 800ba8c:	41200000 	.word	0x41200000
 800ba90:	3e4ccccd 	.word	0x3e4ccccd

0800ba94 <dataInit>:
void dataInit()
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
	data.count = 0;
 800ba98:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <dataInit+0x24>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
	data.hour = 0;
 800ba9e:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <dataInit+0x24>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	605a      	str	r2, [r3, #4]
	data.minute = 0;
 800baa4:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <dataInit+0x24>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	609a      	str	r2, [r3, #8]
	data.second = 0;
 800baaa:	4b03      	ldr	r3, [pc, #12]	; (800bab8 <dataInit+0x24>)
 800baac:	2200      	movs	r2, #0
 800baae:	60da      	str	r2, [r3, #12]
};
 800bab0:	bf00      	nop
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc80      	pop	{r7}
 800bab6:	4770      	bx	lr
 800bab8:	200003c8 	.word	0x200003c8

0800babc <evenMode>:
 * @param status The TIM_STATUS variable that is being passed as a parameter to the function.
 *
 * @return the TIM_STATUS variable named "status".
 */
TIM_STATUS evenMode(DATA *data, TIM_STATUS status)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
	return status;
 800bac8:	78fb      	ldrb	r3, [r7, #3]
};
 800baca:	4618      	mov	r0, r3
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	bc80      	pop	{r7}
 800bad2:	4770      	bx	lr

0800bad4 <countTime>:
 * @param status The status of a timer, which is of type TIM_STATUS.
 *
 * @return the TIM_STATUS variable named "status".
 */
TIM_STATUS countTime(DATA *data, TIM_STATUS status)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
	return status;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
};
 800bae2:	4618      	mov	r0, r3
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bc80      	pop	{r7}
 800baea:	4770      	bx	lr

0800baec <dataGetTime>:
 * @param data A pointer to a structure of type DATA, which contains various data fields and variables.
 *
 * @return a variable of type DATA_STATUS.
 */
DATA_STATUS dataGetTime(DATA *data)
{
 800baec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
	DATA_STATUS status = DATA_WAITE;
 800baf6:	2302      	movs	r3, #2
 800baf8:	73fb      	strb	r3, [r7, #15]
	while (data->countTime == RUN_TIME)
 800bafa:	e095      	b.n	800bc28 <dataGetTime+0x13c>
	{
		if (data->count == 0)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d112      	bne.n	800bb2a <dataGetTime+0x3e>
		{
			HAL_RTC_Init(&hrtc);
 800bb04:	484e      	ldr	r0, [pc, #312]	; (800bc40 <dataGetTime+0x154>)
 800bb06:	f7f8 fab5 	bl	8004074 <HAL_RTC_Init>
			HTime.Hours = 0;
 800bb0a:	4b4e      	ldr	r3, [pc, #312]	; (800bc44 <dataGetTime+0x158>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	701a      	strb	r2, [r3, #0]
			HTime.Minutes = 0;
 800bb10:	4b4c      	ldr	r3, [pc, #304]	; (800bc44 <dataGetTime+0x158>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	705a      	strb	r2, [r3, #1]
			HTime.Seconds = 0;
 800bb16:	4b4b      	ldr	r3, [pc, #300]	; (800bc44 <dataGetTime+0x158>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4949      	ldr	r1, [pc, #292]	; (800bc44 <dataGetTime+0x158>)
 800bb20:	4847      	ldr	r0, [pc, #284]	; (800bc40 <dataGetTime+0x154>)
 800bb22:	f7f8 fb2a 	bl	800417a <HAL_RTC_SetTime>
			status = DATA_RUN;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
		}

		HAL_RTC_GetTime(&hrtc, &HTime, RTC_FORMAT_BIN);
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4945      	ldr	r1, [pc, #276]	; (800bc44 <dataGetTime+0x158>)
 800bb2e:	4844      	ldr	r0, [pc, #272]	; (800bc40 <dataGetTime+0x154>)
 800bb30:	f7f8 fbbd 	bl	80042ae <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &HDate, RTC_FORMAT_BIN);
 800bb34:	2200      	movs	r2, #0
 800bb36:	4944      	ldr	r1, [pc, #272]	; (800bc48 <dataGetTime+0x15c>)
 800bb38:	4841      	ldr	r0, [pc, #260]	; (800bc40 <dataGetTime+0x154>)
 800bb3a:	f7f8 fc9a 	bl	8004472 <HAL_RTC_GetDate>
		if (data->evenMode == RUN_COUNT)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d132      	bne.n	800bbae <dataGetTime+0xc2>
		{
			gettick_count = HAL_GetTick();
 800bb48:	f7f6 fd96 	bl	8002678 <HAL_GetTick>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4698      	mov	r8, r3
 800bb52:	4691      	mov	r9, r2
 800bb54:	4b3d      	ldr	r3, [pc, #244]	; (800bc4c <dataGetTime+0x160>)
 800bb56:	e9c3 8900 	strd	r8, r9, [r3]
			if (gettick_count - timCutCount > 50)
 800bb5a:	4b3c      	ldr	r3, [pc, #240]	; (800bc4c <dataGetTime+0x160>)
 800bb5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb60:	4b3b      	ldr	r3, [pc, #236]	; (800bc50 <dataGetTime+0x164>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	1a84      	subs	r4, r0, r2
 800bb68:	eb61 0503 	sbc.w	r5, r1, r3
 800bb6c:	2c33      	cmp	r4, #51	; 0x33
 800bb6e:	f175 0300 	sbcs.w	r3, r5, #0
 800bb72:	d31c      	bcc.n	800bbae <dataGetTime+0xc2>
			{
				data->count++;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
				data->hour = HTime.Hours;
 800bb7e:	4b31      	ldr	r3, [pc, #196]	; (800bc44 <dataGetTime+0x158>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]
				data->minute = HTime.Minutes;
 800bb88:	4b2e      	ldr	r3, [pc, #184]	; (800bc44 <dataGetTime+0x158>)
 800bb8a:	785b      	ldrb	r3, [r3, #1]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	609a      	str	r2, [r3, #8]
				data->second = HTime.Seconds;
 800bb92:	4b2c      	ldr	r3, [pc, #176]	; (800bc44 <dataGetTime+0x158>)
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	461a      	mov	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60da      	str	r2, [r3, #12]
				timCutCount = HAL_GetTick();
 800bb9c:	f7f6 fd6c 	bl	8002678 <HAL_GetTick>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2200      	movs	r2, #0
 800bba4:	469a      	mov	sl, r3
 800bba6:	4693      	mov	fp, r2
 800bba8:	4b29      	ldr	r3, [pc, #164]	; (800bc50 <dataGetTime+0x164>)
 800bbaa:	e9c3 ab00 	strd	sl, fp, [r3]
				//count_moniter(data);
			}
		}
		data->evenMode = STOP_COUNT;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		data->time_count_second = data->hour * 3600 + data->minute * 60 + data->second;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	011b      	lsls	r3, r3, #4
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	0109      	lsls	r1, r1, #4
 800bbca:	1acb      	subs	r3, r1, r3
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	4413      	add	r3, r2
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	769a      	strb	r2, [r3, #26]
		data->real_time = HTime.Hours * 3600 + HTime.Minutes * 60 + HTime.Seconds;
 800bbe2:	4b18      	ldr	r3, [pc, #96]	; (800bc44 <dataGetTime+0x158>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	011b      	lsls	r3, r3, #4
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <dataGetTime+0x158>)
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	0109      	lsls	r1, r1, #4
 800bbf2:	1acb      	subs	r3, r1, r3
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <dataGetTime+0x158>)
 800bbfe:	789b      	ldrb	r3, [r3, #2]
 800bc00:	4413      	add	r3, r2
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	76da      	strb	r2, [r3, #27]
		if ((data->real_time - data->time_count_second > 40))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	7edb      	ldrb	r3, [r3, #27]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7e9b      	ldrb	r3, [r3, #26]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	2b28      	cmp	r3, #40	; 0x28
 800bc16:	dd07      	ble.n	800bc28 <dataGetTime+0x13c>
		{
			data->countTime = STOP_TIME;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			status = DATA_STOP;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
			return status;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	e006      	b.n	800bc36 <dataGetTime+0x14a>
	while (data->countTime == RUN_TIME)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	f43f af64 	beq.w	800bafc <dataGetTime+0x10>
		}
	}
	return status;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc40:	20000228 	.word	0x20000228
 800bc44:	200013a0 	.word	0x200013a0
 800bc48:	200013b4 	.word	0x200013b4
 800bc4c:	20001390 	.word	0x20001390
 800bc50:	20001398 	.word	0x20001398

0800bc54 <handleData>:
 * The function "handleData" calculates the flow water and percentage based on the given data.
 *
 * @param data A pointer to a structure of type DATA.
 */
void handleData()
{
 800bc54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc58:	af00      	add	r7, sp, #0
	data.Flow_warter = data.Distance_high / ((data.hour * 60.0) + (data.minute * 1.0) + (data.second / 60.0))	;
 800bc5a:	4b31      	ldr	r3, [pc, #196]	; (800bd20 <handleData+0xcc>)
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f4 fbfa 	bl	8000458 <__aeabi_f2d>
 800bc64:	4604      	mov	r4, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <handleData+0xcc>)
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f4 fbd1 	bl	8000414 <__aeabi_ui2d>
 800bc72:	f04f 0200 	mov.w	r2, #0
 800bc76:	4b2b      	ldr	r3, [pc, #172]	; (800bd24 <handleData+0xd0>)
 800bc78:	f7f4 fc46 	bl	8000508 <__aeabi_dmul>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4690      	mov	r8, r2
 800bc82:	4699      	mov	r9, r3
 800bc84:	4b26      	ldr	r3, [pc, #152]	; (800bd20 <handleData+0xcc>)
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f4 fbc3 	bl	8000414 <__aeabi_ui2d>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	f7f4 fa81 	bl	800019c <__adddf3>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4690      	mov	r8, r2
 800bca0:	4699      	mov	r9, r3
 800bca2:	4b1f      	ldr	r3, [pc, #124]	; (800bd20 <handleData+0xcc>)
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7f4 fbb4 	bl	8000414 <__aeabi_ui2d>
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	4b1c      	ldr	r3, [pc, #112]	; (800bd24 <handleData+0xd0>)
 800bcb2:	f7f4 fd53 	bl	800075c <__aeabi_ddiv>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	f7f4 fa6d 	bl	800019c <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fd47 	bl	800075c <__aeabi_ddiv>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7f4 ff0f 	bl	8000af8 <__aeabi_d2f>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	4a10      	ldr	r2, [pc, #64]	; (800bd20 <handleData+0xcc>)
 800bcde:	6253      	str	r3, [r2, #36]	; 0x24
	data.percent = ((data.Distance * data.count) / data.Distance_high) * 100;
 800bce0:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <handleData+0xcc>)
 800bce2:	6a1c      	ldr	r4, [r3, #32]
 800bce4:	4b0e      	ldr	r3, [pc, #56]	; (800bd20 <handleData+0xcc>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f5 f80b 	bl	8000d04 <__aeabi_ui2f>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f7f5 f85e 	bl	8000db4 <__aeabi_fmul>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	4b08      	ldr	r3, [pc, #32]	; (800bd20 <handleData+0xcc>)
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f7f5 f90a 	bl	8000f1c <__aeabi_fdiv>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	4907      	ldr	r1, [pc, #28]	; (800bd28 <handleData+0xd4>)
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f5 f851 	bl	8000db4 <__aeabi_fmul>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <handleData+0xcc>)
 800bd18:	629a      	str	r2, [r3, #40]	; 0x28
	// if (data->percent > 100)
	// {
	// 	data->percent = 100 - data->percent;
	// 	data->percent = 0 - data->percent;
	// }
 800bd1a:	bf00      	nop
 800bd1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bd20:	200003c8 	.word	0x200003c8
 800bd24:	404e0000 	.word	0x404e0000
 800bd28:	42c80000 	.word	0x42c80000

0800bd2c <deviceInformatio>:
    DISPLAY_Display(BlackImage, RYImage);
};


void deviceInformatio(DEVICE *device)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	6078      	str	r0, [r7, #4]
    Paint_SelectImage(BlackImage);
 800bd34:	4b17      	ldr	r3, [pc, #92]	; (800bd94 <deviceInformatio+0x68>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fb55 	bl	800a3e8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800bd3e:	20ff      	movs	r0, #255	; 0xff
 800bd40:	f7fe fcac 	bl	800a69c <Paint_Clear>

    Paint_DrawString_EN(20, 20, "DEVICE ID: ", &Font16, WHITE, BLACK);
 800bd44:	2300      	movs	r3, #0
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	23ff      	movs	r3, #255	; 0xff
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4b12      	ldr	r3, [pc, #72]	; (800bd98 <deviceInformatio+0x6c>)
 800bd4e:	4a13      	ldr	r2, [pc, #76]	; (800bd9c <deviceInformatio+0x70>)
 800bd50:	2114      	movs	r1, #20
 800bd52:	2014      	movs	r0, #20
 800bd54:	f7fe fdea 	bl	800a92c <Paint_DrawString_EN>
    Paint_DrawString_EN(140, 20, (char *)&device->id, &Font16, WHITE, BLACK);
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	23ff      	movs	r3, #255	; 0xff
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	4b0d      	ldr	r3, [pc, #52]	; (800bd98 <deviceInformatio+0x6c>)
 800bd64:	2114      	movs	r1, #20
 800bd66:	208c      	movs	r0, #140	; 0x8c
 800bd68:	f7fe fde0 	bl	800a92c <Paint_DrawString_EN>

    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <deviceInformatio+0x74>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe fb39 	bl	800a3e8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800bd76:	20ff      	movs	r0, #255	; 0xff
 800bd78:	f7fe fc90 	bl	800a69c <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800bd7c:	4b05      	ldr	r3, [pc, #20]	; (800bd94 <deviceInformatio+0x68>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a07      	ldr	r2, [pc, #28]	; (800bda0 <deviceInformatio+0x74>)
 800bd82:	6812      	ldr	r2, [r2, #0]
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fe78 	bl	800aa7c <DISPLAY_Display>
};
 800bd8c:	bf00      	nop
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200013b8 	.word	0x200013b8
 800bd98:	20000024 	.word	0x20000024
 800bd9c:	08011060 	.word	0x08011060
 800bda0:	200013bc 	.word	0x200013bc

0800bda4 <dataConfigure>:


void dataConfigure(DATA *data)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b09e      	sub	sp, #120	; 0x78
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	6078      	str	r0, [r7, #4]
    char distanceHight[50];
    memset(distanceHight, 0, 50);
 800bdac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bdb0:	2232      	movs	r2, #50	; 0x32
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 f9f9 	bl	800c1ac <memset>
    sprintf(distanceHight, "%.2f", data->Distance_high);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f4 fb4a 	bl	8000458 <__aeabi_f2d>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800bdcc:	492d      	ldr	r1, [pc, #180]	; (800be84 <dataConfigure+0xe0>)
 800bdce:	f001 f9c9 	bl	800d164 <siprintf>
    char distance[50];
    memset(distance, 0, 50);
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	2232      	movs	r2, #50	; 0x32
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f9e6 	bl	800c1ac <memset>
    sprintf(distance, "%.2f", data->Distance);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7f4 fb37 	bl	8000458 <__aeabi_f2d>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	f107 0008 	add.w	r0, r7, #8
 800bdf2:	4924      	ldr	r1, [pc, #144]	; (800be84 <dataConfigure+0xe0>)
 800bdf4:	f001 f9b6 	bl	800d164 <siprintf>


    Paint_SelectImage(BlackImage);
 800bdf8:	4b23      	ldr	r3, [pc, #140]	; (800be88 <dataConfigure+0xe4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe faf3 	bl	800a3e8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800be02:	20ff      	movs	r0, #255	; 0xff
 800be04:	f7fe fc4a 	bl	800a69c <Paint_Clear>

    Paint_DrawString_EN(20, 20, "DISTANCE HIGH: ", &Font16, WHITE, BLACK);
 800be08:	2300      	movs	r3, #0
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	23ff      	movs	r3, #255	; 0xff
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4b1e      	ldr	r3, [pc, #120]	; (800be8c <dataConfigure+0xe8>)
 800be12:	4a1f      	ldr	r2, [pc, #124]	; (800be90 <dataConfigure+0xec>)
 800be14:	2114      	movs	r1, #20
 800be16:	2014      	movs	r0, #20
 800be18:	f7fe fd88 	bl	800a92c <Paint_DrawString_EN>
    Paint_DrawString_EN(185, 20, distanceHight, &Font16, WHITE, BLACK);
 800be1c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800be20:	2300      	movs	r3, #0
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	23ff      	movs	r3, #255	; 0xff
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	4b18      	ldr	r3, [pc, #96]	; (800be8c <dataConfigure+0xe8>)
 800be2a:	2114      	movs	r1, #20
 800be2c:	20b9      	movs	r0, #185	; 0xb9
 800be2e:	f7fe fd7d 	bl	800a92c <Paint_DrawString_EN>

    Paint_DrawString_EN(20, 40, "DISTANCE: ", &Font16, WHITE, BLACK);
 800be32:	2300      	movs	r3, #0
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	23ff      	movs	r3, #255	; 0xff
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	4b14      	ldr	r3, [pc, #80]	; (800be8c <dataConfigure+0xe8>)
 800be3c:	4a15      	ldr	r2, [pc, #84]	; (800be94 <dataConfigure+0xf0>)
 800be3e:	2128      	movs	r1, #40	; 0x28
 800be40:	2014      	movs	r0, #20
 800be42:	f7fe fd73 	bl	800a92c <Paint_DrawString_EN>
    Paint_DrawString_EN(120, 40, distance, &Font16, WHITE, BLACK);
 800be46:	f107 0208 	add.w	r2, r7, #8
 800be4a:	2300      	movs	r3, #0
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	23ff      	movs	r3, #255	; 0xff
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <dataConfigure+0xe8>)
 800be54:	2128      	movs	r1, #40	; 0x28
 800be56:	2078      	movs	r0, #120	; 0x78
 800be58:	f7fe fd68 	bl	800a92c <Paint_DrawString_EN>


    // 2.Draw red image
    Paint_SelectImage(RYImage);
 800be5c:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <dataConfigure+0xf4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fac1 	bl	800a3e8 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800be66:	20ff      	movs	r0, #255	; 0xff
 800be68:	f7fe fc18 	bl	800a69c <Paint_Clear>

    DISPLAY_Display(BlackImage, RYImage);
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <dataConfigure+0xe4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a09      	ldr	r2, [pc, #36]	; (800be98 <dataConfigure+0xf4>)
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fe00 	bl	800aa7c <DISPLAY_Display>
 800be7c:	bf00      	nop
 800be7e:	3770      	adds	r7, #112	; 0x70
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	08010fe8 	.word	0x08010fe8
 800be88:	200013b8 	.word	0x200013b8
 800be8c:	20000024 	.word	0x20000024
 800be90:	0801106c 	.word	0x0801106c
 800be94:	0801107c 	.word	0x0801107c
 800be98:	200013bc 	.word	0x200013bc

0800be9c <SD_Init>:

#include "sd.h"
#include <stdio.h>

SD_CARD_STATUS SD_Init()
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
    SD_CARD_STATUS status = SD_CARD_BUSY;
 800bea2:	2302      	movs	r3, #2
 800bea4:	71fb      	strb	r3, [r7, #7]
    if (sd_mount() == SD_OK)
 800bea6:	f7ff fb2d 	bl	800b504 <sd_mount>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <SD_Init+0x18>
    {
        return SD_CARD_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e000      	b.n	800beb6 <SD_Init+0x1a>
    }
    else
    {
        return SD_CARD_ERROR;
 800beb4:	2301      	movs	r3, #1
    }
    return status;
};
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <SD_CreatFile>:

SD_CARD_STATUS SD_CreatFile(char *newForder, char *newFile, char *data)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b09e      	sub	sp, #120	; 0x78
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
    char forderPath[50];
    char filePath[50];
    memset(forderPath, 0, 50);
 800becc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bed0:	2232      	movs	r2, #50	; 0x32
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 f969 	bl	800c1ac <memset>
    sprintf(forderPath, "%s", newForder);
 800beda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	491a      	ldr	r1, [pc, #104]	; (800bf4c <SD_CreatFile+0x8c>)
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 f93e 	bl	800d164 <siprintf>
    memset(filePath, 0, 50);
 800bee8:	f107 0310 	add.w	r3, r7, #16
 800beec:	2232      	movs	r2, #50	; 0x32
 800beee:	2100      	movs	r1, #0
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 f95b 	bl	800c1ac <memset>
    sprintf(filePath, "%s\\%s.csv", newForder, newFile);
 800bef6:	f107 0010 	add.w	r0, r7, #16
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4914      	ldr	r1, [pc, #80]	; (800bf50 <SD_CreatFile+0x90>)
 800bf00:	f001 f930 	bl	800d164 <siprintf>

    if (sd_mount() == SD_OK)
 800bf04:	f7ff fafe 	bl	800b504 <sd_mount>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d118      	bne.n	800bf40 <SD_CreatFile+0x80>
    {
        f_mkdir(forderPath);
 800bf0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fd fdab 	bl	8009a6e <f_mkdir>
        sd_check_space();
 800bf18:	f7ff fb16 	bl	800b548 <sd_check_space>
        if (SD_creat_file(filePath) != SD_OK)
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7ff fb73 	bl	800b60c <SD_creat_file>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <SD_CreatFile+0x70>
        {
            return SD_CARD_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e008      	b.n	800bf42 <SD_CreatFile+0x82>
        }
        SD_sendData(filePath, data);
 800bf30:	f107 0310 	add.w	r3, r7, #16
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff fb8e 	bl	800b658 <SD_sendData>
        return SD_CARD_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e000      	b.n	800bf42 <SD_CreatFile+0x82>
    }
    return SD_CARD_ERROR;
 800bf40:	2301      	movs	r3, #1
};
 800bf42:	4618      	mov	r0, r3
 800bf44:	3778      	adds	r7, #120	; 0x78
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	08011088 	.word	0x08011088
 800bf50:	0801108c 	.word	0x0801108c

0800bf54 <startSIM>:
extern SIM7600 sim;
extern REALTIME realtimedata;
extern DEVICE device;

SIM startSIM()
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FLIGHTMODE, SET);
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf5e:	4806      	ldr	r0, [pc, #24]	; (800bf78 <startSIM+0x24>)
 800bf60:	f7f7 f9d6 	bl	8003310 <HAL_GPIO_WritePin>
    // HAL_GPIO_WritePin(RESETSIM, SET);
    // HAL_Delay(1500);
    // HAL_GPIO_WritePin(RESETSIM, RESET);
    // HAL_Delay(1500);
    HAL_GPIO_WritePin(PWRKEY, SET);
 800bf64:	2201      	movs	r2, #1
 800bf66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf6a:	4803      	ldr	r0, [pc, #12]	; (800bf78 <startSIM+0x24>)
 800bf6c:	f7f7 f9d0 	bl	8003310 <HAL_GPIO_WritePin>
    // HAL_Delay(15000);
};
 800bf70:	bf00      	nop
 800bf72:	4618      	mov	r0, r3
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	40020400 	.word	0x40020400

0800bf7c <simInit>:

SIM simInit()
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
    SIM status = SIM_STATUS_BUSY;
 800bf82:	2302      	movs	r3, #2
 800bf84:	71fb      	strb	r3, [r7, #7]
    SIM7600_init(&sim);
 800bf86:	4816      	ldr	r0, [pc, #88]	; (800bfe0 <simInit+0x64>)
 800bf88:	f7ff fb88 	bl	800b69c <SIM7600_init>

    while (SIM7600_Start(&sim) != SIM_OK)
 800bf8c:	e003      	b.n	800bf96 <simInit+0x1a>
        HAL_Delay(1000);
 800bf8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bf92:	f7f6 fb7b 	bl	800268c <HAL_Delay>
    while (SIM7600_Start(&sim) != SIM_OK)
 800bf96:	4812      	ldr	r0, [pc, #72]	; (800bfe0 <simInit+0x64>)
 800bf98:	f7ff fc16 	bl	800b7c8 <SIM7600_Start>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f5      	bne.n	800bf8e <simInit+0x12>

    if (SIM7600_Start(&sim) == SIM_OK)
 800bfa2:	480f      	ldr	r0, [pc, #60]	; (800bfe0 <simInit+0x64>)
 800bfa4:	f7ff fc10 	bl	800b7c8 <SIM7600_Start>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <simInit+0x40>

        status = SIM_STATUS_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	71fb      	strb	r3, [r7, #7]

    while (SIM7600_httpStart(&sim) != SIM_OK)
 800bfb2:	e003      	b.n	800bfbc <simInit+0x40>
        HAL_Delay(1000);
 800bfb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bfb8:	f7f6 fb68 	bl	800268c <HAL_Delay>
    while (SIM7600_httpStart(&sim) != SIM_OK)
 800bfbc:	4808      	ldr	r0, [pc, #32]	; (800bfe0 <simInit+0x64>)
 800bfbe:	f7ff fc5b 	bl	800b878 <SIM7600_httpStart>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f5      	bne.n	800bfb4 <simInit+0x38>
    
    SIM7600_httpStart(&sim);
 800bfc8:	4805      	ldr	r0, [pc, #20]	; (800bfe0 <simInit+0x64>)
 800bfca:	f7ff fc55 	bl	800b878 <SIM7600_httpStart>

    SIM7600_setUrl(&sim, device.url);
 800bfce:	4905      	ldr	r1, [pc, #20]	; (800bfe4 <simInit+0x68>)
 800bfd0:	4803      	ldr	r0, [pc, #12]	; (800bfe0 <simInit+0x64>)
 800bfd2:	f7ff fc85 	bl	800b8e0 <SIM7600_setUrl>

    return status;
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	200003f8 	.word	0x200003f8
 800bfe4:	20000733 	.word	0x20000733

0800bfe8 <getDateTime>:

char getDateTime(REALTIME *realtimedata)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08e      	sub	sp, #56	; 0x38
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	6078      	str	r0, [r7, #4]
    memset((char *)realtimedata->dateTime, 0, 500);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bff6:	2100      	movs	r1, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 f8d7 	bl	800c1ac <memset>
    SIM7600_getTime(&sim);
 800bffe:	481b      	ldr	r0, [pc, #108]	; (800c06c <getDateTime+0x84>)
 800c000:	f7ff fd0a 	bl	800ba18 <SIM7600_getTime>
    char year[10];
    char month[10];
    char day[10];
    memset(year, 0, 10);
 800c004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c008:	220a      	movs	r2, #10
 800c00a:	2100      	movs	r1, #0
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f8cd 	bl	800c1ac <memset>
    memset(month, 0, 10);
 800c012:	f107 0318 	add.w	r3, r7, #24
 800c016:	220a      	movs	r2, #10
 800c018:	2100      	movs	r1, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f8c6 	bl	800c1ac <memset>
    memset(day, 0, 10);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	220a      	movs	r2, #10
 800c026:	2100      	movs	r1, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 f8bf 	bl	800c1ac <memset>
 800c02e:	4b0f      	ldr	r3, [pc, #60]	; (800c06c <getDateTime+0x84>)
 800c030:	f8b3 301f 	ldrh.w	r3, [r3, #31]
 800c034:	b29b      	uxth	r3, r3
    memcpy(year, (char *)&sim.rxBuffer[19], 2);
 800c036:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c038:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <getDateTime+0x84>)
 800c03a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    memcpy(month, (char *)&sim.rxBuffer[22], 2);
 800c03c:	833b      	strh	r3, [r7, #24]
 800c03e:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <getDateTime+0x84>)
 800c040:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 800c044:	b29b      	uxth	r3, r3
    memcpy(day, (char *)&sim.rxBuffer[25], 2);
 800c046:	81bb      	strh	r3, [r7, #12]
    sprintf((char *)realtimedata->dateTime, "%s %s %s", year, month, day);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f107 0118 	add.w	r1, r7, #24
 800c04e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c052:	f107 030c 	add.w	r3, r7, #12
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	460b      	mov	r3, r1
 800c05a:	4905      	ldr	r1, [pc, #20]	; (800c070 <getDateTime+0x88>)
 800c05c:	f001 f882 	bl	800d164 <siprintf>
    return (char *)realtimedata->dateTime;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	b2db      	uxtb	r3, r3
};
 800c064:	4618      	mov	r0, r3
 800c066:	3730      	adds	r7, #48	; 0x30
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	200003f8 	.word	0x200003f8
 800c070:	08011098 	.word	0x08011098

0800c074 <getRealTime>:
 * character array.
 *
 * @return a character array (string) containing the real-time value.
 */
char getRealTime(REALTIME *realtimedata)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08e      	sub	sp, #56	; 0x38
 800c078:	af02      	add	r7, sp, #8
 800c07a:	6078      	str	r0, [r7, #4]
    memset((char *)realtimedata->realTime, 0, 500);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	330a      	adds	r3, #10
 800c080:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c084:	2100      	movs	r1, #0
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f890 	bl	800c1ac <memset>
    SIM7600_getTime(&sim);
 800c08c:	481b      	ldr	r0, [pc, #108]	; (800c0fc <getRealTime+0x88>)
 800c08e:	f7ff fcc3 	bl	800ba18 <SIM7600_getTime>
    char hour[10];
    char minute[10];
    char second[10];
    memset(hour, 0, 10);
 800c092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c096:	220a      	movs	r2, #10
 800c098:	2100      	movs	r1, #0
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 f886 	bl	800c1ac <memset>
    memset(minute, 0, 10);
 800c0a0:	f107 0318 	add.w	r3, r7, #24
 800c0a4:	220a      	movs	r2, #10
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f87f 	bl	800c1ac <memset>
    memset(second, 0, 10);
 800c0ae:	f107 030c 	add.w	r3, r7, #12
 800c0b2:	220a      	movs	r2, #10
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 f878 	bl	800c1ac <memset>
 800c0bc:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <getRealTime+0x88>)
 800c0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    memcpy(hour, (char *)&sim.rxBuffer[28], 2);
 800c0c0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c0c2:	4b0e      	ldr	r3, [pc, #56]	; (800c0fc <getRealTime+0x88>)
 800c0c4:	f8b3 302b 	ldrh.w	r3, [r3, #43]	; 0x2b
 800c0c8:	b29b      	uxth	r3, r3
    memcpy(minute, (char *)&sim.rxBuffer[31], 2);
 800c0ca:	833b      	strh	r3, [r7, #24]
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <getRealTime+0x88>)
 800c0ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    memcpy(second, (char *)&sim.rxBuffer[34], 2);
 800c0d0:	81bb      	strh	r3, [r7, #12]
    sprintf((char *)realtimedata->realTime, "%s %s %s", hour, minute, second);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f103 000a 	add.w	r0, r3, #10
 800c0d8:	f107 0118 	add.w	r1, r7, #24
 800c0dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c0e0:	f107 030c 	add.w	r3, r7, #12
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4905      	ldr	r1, [pc, #20]	; (800c100 <getRealTime+0x8c>)
 800c0ea:	f001 f83b 	bl	800d164 <siprintf>
    return (char *)realtimedata->realTime;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	330a      	adds	r3, #10
 800c0f2:	b2db      	uxtb	r3, r3
};
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3730      	adds	r7, #48	; 0x30
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	200003f8 	.word	0x200003f8
 800c100:	08011098 	.word	0x08011098

0800c104 <sendDataFirebase>:
 * Firebase.
 *
 * @return a SIM status, which can be either SIM_STATUS_OK or SIM_STATUS_ERROR.
 */
SIM sendDataFirebase(char *data)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    if (SIM7600_httpPost(&sim, data) == SIM_OK)
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4806      	ldr	r0, [pc, #24]	; (800c128 <sendDataFirebase+0x24>)
 800c110:	f7ff fc18 	bl	800b944 <SIM7600_httpPost>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <sendDataFirebase+0x1a>
        return SIM_STATUS_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e000      	b.n	800c120 <sendDataFirebase+0x1c>
    return SIM_STATUS_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	200003f8 	.word	0x200003f8

0800c12c <__errno>:
 800c12c:	4b01      	ldr	r3, [pc, #4]	; (800c134 <__errno+0x8>)
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20000030 	.word	0x20000030

0800c138 <__libc_init_array>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	2600      	movs	r6, #0
 800c13c:	4d0c      	ldr	r5, [pc, #48]	; (800c170 <__libc_init_array+0x38>)
 800c13e:	4c0d      	ldr	r4, [pc, #52]	; (800c174 <__libc_init_array+0x3c>)
 800c140:	1b64      	subs	r4, r4, r5
 800c142:	10a4      	asrs	r4, r4, #2
 800c144:	42a6      	cmp	r6, r4
 800c146:	d109      	bne.n	800c15c <__libc_init_array+0x24>
 800c148:	f004 fcdc 	bl	8010b04 <_init>
 800c14c:	2600      	movs	r6, #0
 800c14e:	4d0a      	ldr	r5, [pc, #40]	; (800c178 <__libc_init_array+0x40>)
 800c150:	4c0a      	ldr	r4, [pc, #40]	; (800c17c <__libc_init_array+0x44>)
 800c152:	1b64      	subs	r4, r4, r5
 800c154:	10a4      	asrs	r4, r4, #2
 800c156:	42a6      	cmp	r6, r4
 800c158:	d105      	bne.n	800c166 <__libc_init_array+0x2e>
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c160:	4798      	blx	r3
 800c162:	3601      	adds	r6, #1
 800c164:	e7ee      	b.n	800c144 <__libc_init_array+0xc>
 800c166:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16a:	4798      	blx	r3
 800c16c:	3601      	adds	r6, #1
 800c16e:	e7f2      	b.n	800c156 <__libc_init_array+0x1e>
 800c170:	0801259c 	.word	0x0801259c
 800c174:	0801259c 	.word	0x0801259c
 800c178:	0801259c 	.word	0x0801259c
 800c17c:	080125a0 	.word	0x080125a0

0800c180 <malloc>:
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <malloc+0xc>)
 800c182:	4601      	mov	r1, r0
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	f000 b881 	b.w	800c28c <_malloc_r>
 800c18a:	bf00      	nop
 800c18c:	20000030 	.word	0x20000030

0800c190 <memcpy>:
 800c190:	440a      	add	r2, r1
 800c192:	4291      	cmp	r1, r2
 800c194:	f100 33ff 	add.w	r3, r0, #4294967295
 800c198:	d100      	bne.n	800c19c <memcpy+0xc>
 800c19a:	4770      	bx	lr
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	4291      	cmp	r1, r2
 800c1a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a8:	d1f9      	bne.n	800c19e <memcpy+0xe>
 800c1aa:	bd10      	pop	{r4, pc}

0800c1ac <memset>:
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	4402      	add	r2, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <_free_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4605      	mov	r5, r0
 800c1c0:	2900      	cmp	r1, #0
 800c1c2:	d040      	beq.n	800c246 <_free_r+0x8a>
 800c1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c8:	1f0c      	subs	r4, r1, #4
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfb8      	it	lt
 800c1ce:	18e4      	addlt	r4, r4, r3
 800c1d0:	f003 fb6e 	bl	800f8b0 <__malloc_lock>
 800c1d4:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <_free_r+0x8c>)
 800c1d6:	6813      	ldr	r3, [r2, #0]
 800c1d8:	b933      	cbnz	r3, 800c1e8 <_free_r+0x2c>
 800c1da:	6063      	str	r3, [r4, #4]
 800c1dc:	6014      	str	r4, [r2, #0]
 800c1de:	4628      	mov	r0, r5
 800c1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e4:	f003 bb6a 	b.w	800f8bc <__malloc_unlock>
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d908      	bls.n	800c1fe <_free_r+0x42>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	1821      	adds	r1, r4, r0
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	bf01      	itttt	eq
 800c1f4:	6819      	ldreq	r1, [r3, #0]
 800c1f6:	685b      	ldreq	r3, [r3, #4]
 800c1f8:	1809      	addeq	r1, r1, r0
 800c1fa:	6021      	streq	r1, [r4, #0]
 800c1fc:	e7ed      	b.n	800c1da <_free_r+0x1e>
 800c1fe:	461a      	mov	r2, r3
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	b10b      	cbz	r3, 800c208 <_free_r+0x4c>
 800c204:	42a3      	cmp	r3, r4
 800c206:	d9fa      	bls.n	800c1fe <_free_r+0x42>
 800c208:	6811      	ldr	r1, [r2, #0]
 800c20a:	1850      	adds	r0, r2, r1
 800c20c:	42a0      	cmp	r0, r4
 800c20e:	d10b      	bne.n	800c228 <_free_r+0x6c>
 800c210:	6820      	ldr	r0, [r4, #0]
 800c212:	4401      	add	r1, r0
 800c214:	1850      	adds	r0, r2, r1
 800c216:	4283      	cmp	r3, r0
 800c218:	6011      	str	r1, [r2, #0]
 800c21a:	d1e0      	bne.n	800c1de <_free_r+0x22>
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	4401      	add	r1, r0
 800c222:	6011      	str	r1, [r2, #0]
 800c224:	6053      	str	r3, [r2, #4]
 800c226:	e7da      	b.n	800c1de <_free_r+0x22>
 800c228:	d902      	bls.n	800c230 <_free_r+0x74>
 800c22a:	230c      	movs	r3, #12
 800c22c:	602b      	str	r3, [r5, #0]
 800c22e:	e7d6      	b.n	800c1de <_free_r+0x22>
 800c230:	6820      	ldr	r0, [r4, #0]
 800c232:	1821      	adds	r1, r4, r0
 800c234:	428b      	cmp	r3, r1
 800c236:	bf01      	itttt	eq
 800c238:	6819      	ldreq	r1, [r3, #0]
 800c23a:	685b      	ldreq	r3, [r3, #4]
 800c23c:	1809      	addeq	r1, r1, r0
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	6054      	str	r4, [r2, #4]
 800c244:	e7cb      	b.n	800c1de <_free_r+0x22>
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	200013c0 	.word	0x200013c0

0800c24c <sbrk_aligned>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	4e0e      	ldr	r6, [pc, #56]	; (800c288 <sbrk_aligned+0x3c>)
 800c250:	460c      	mov	r4, r1
 800c252:	6831      	ldr	r1, [r6, #0]
 800c254:	4605      	mov	r5, r0
 800c256:	b911      	cbnz	r1, 800c25e <sbrk_aligned+0x12>
 800c258:	f000 ff70 	bl	800d13c <_sbrk_r>
 800c25c:	6030      	str	r0, [r6, #0]
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f000 ff6b 	bl	800d13c <_sbrk_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d00a      	beq.n	800c280 <sbrk_aligned+0x34>
 800c26a:	1cc4      	adds	r4, r0, #3
 800c26c:	f024 0403 	bic.w	r4, r4, #3
 800c270:	42a0      	cmp	r0, r4
 800c272:	d007      	beq.n	800c284 <sbrk_aligned+0x38>
 800c274:	1a21      	subs	r1, r4, r0
 800c276:	4628      	mov	r0, r5
 800c278:	f000 ff60 	bl	800d13c <_sbrk_r>
 800c27c:	3001      	adds	r0, #1
 800c27e:	d101      	bne.n	800c284 <sbrk_aligned+0x38>
 800c280:	f04f 34ff 	mov.w	r4, #4294967295
 800c284:	4620      	mov	r0, r4
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	200013c4 	.word	0x200013c4

0800c28c <_malloc_r>:
 800c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c290:	1ccd      	adds	r5, r1, #3
 800c292:	f025 0503 	bic.w	r5, r5, #3
 800c296:	3508      	adds	r5, #8
 800c298:	2d0c      	cmp	r5, #12
 800c29a:	bf38      	it	cc
 800c29c:	250c      	movcc	r5, #12
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	db01      	blt.n	800c2a8 <_malloc_r+0x1c>
 800c2a4:	42a9      	cmp	r1, r5
 800c2a6:	d905      	bls.n	800c2b4 <_malloc_r+0x28>
 800c2a8:	230c      	movs	r3, #12
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b4:	4e2e      	ldr	r6, [pc, #184]	; (800c370 <_malloc_r+0xe4>)
 800c2b6:	f003 fafb 	bl	800f8b0 <__malloc_lock>
 800c2ba:	6833      	ldr	r3, [r6, #0]
 800c2bc:	461c      	mov	r4, r3
 800c2be:	bb34      	cbnz	r4, 800c30e <_malloc_r+0x82>
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f7ff ffc2 	bl	800c24c <sbrk_aligned>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	d14d      	bne.n	800c36a <_malloc_r+0xde>
 800c2ce:	6834      	ldr	r4, [r6, #0]
 800c2d0:	4626      	mov	r6, r4
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	d140      	bne.n	800c358 <_malloc_r+0xcc>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4638      	mov	r0, r7
 800c2dc:	eb04 0803 	add.w	r8, r4, r3
 800c2e0:	f000 ff2c 	bl	800d13c <_sbrk_r>
 800c2e4:	4580      	cmp	r8, r0
 800c2e6:	d13a      	bne.n	800c35e <_malloc_r+0xd2>
 800c2e8:	6821      	ldr	r1, [r4, #0]
 800c2ea:	3503      	adds	r5, #3
 800c2ec:	1a6d      	subs	r5, r5, r1
 800c2ee:	f025 0503 	bic.w	r5, r5, #3
 800c2f2:	3508      	adds	r5, #8
 800c2f4:	2d0c      	cmp	r5, #12
 800c2f6:	bf38      	it	cc
 800c2f8:	250c      	movcc	r5, #12
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7ff ffa5 	bl	800c24c <sbrk_aligned>
 800c302:	3001      	adds	r0, #1
 800c304:	d02b      	beq.n	800c35e <_malloc_r+0xd2>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	442b      	add	r3, r5
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	e00e      	b.n	800c32c <_malloc_r+0xa0>
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	1b52      	subs	r2, r2, r5
 800c312:	d41e      	bmi.n	800c352 <_malloc_r+0xc6>
 800c314:	2a0b      	cmp	r2, #11
 800c316:	d916      	bls.n	800c346 <_malloc_r+0xba>
 800c318:	1961      	adds	r1, r4, r5
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	bf18      	it	ne
 800c320:	6059      	strne	r1, [r3, #4]
 800c322:	6863      	ldr	r3, [r4, #4]
 800c324:	bf08      	it	eq
 800c326:	6031      	streq	r1, [r6, #0]
 800c328:	5162      	str	r2, [r4, r5]
 800c32a:	604b      	str	r3, [r1, #4]
 800c32c:	4638      	mov	r0, r7
 800c32e:	f104 060b 	add.w	r6, r4, #11
 800c332:	f003 fac3 	bl	800f8bc <__malloc_unlock>
 800c336:	f026 0607 	bic.w	r6, r6, #7
 800c33a:	1d23      	adds	r3, r4, #4
 800c33c:	1af2      	subs	r2, r6, r3
 800c33e:	d0b6      	beq.n	800c2ae <_malloc_r+0x22>
 800c340:	1b9b      	subs	r3, r3, r6
 800c342:	50a3      	str	r3, [r4, r2]
 800c344:	e7b3      	b.n	800c2ae <_malloc_r+0x22>
 800c346:	6862      	ldr	r2, [r4, #4]
 800c348:	42a3      	cmp	r3, r4
 800c34a:	bf0c      	ite	eq
 800c34c:	6032      	streq	r2, [r6, #0]
 800c34e:	605a      	strne	r2, [r3, #4]
 800c350:	e7ec      	b.n	800c32c <_malloc_r+0xa0>
 800c352:	4623      	mov	r3, r4
 800c354:	6864      	ldr	r4, [r4, #4]
 800c356:	e7b2      	b.n	800c2be <_malloc_r+0x32>
 800c358:	4634      	mov	r4, r6
 800c35a:	6876      	ldr	r6, [r6, #4]
 800c35c:	e7b9      	b.n	800c2d2 <_malloc_r+0x46>
 800c35e:	230c      	movs	r3, #12
 800c360:	4638      	mov	r0, r7
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	f003 faaa 	bl	800f8bc <__malloc_unlock>
 800c368:	e7a1      	b.n	800c2ae <_malloc_r+0x22>
 800c36a:	6025      	str	r5, [r4, #0]
 800c36c:	e7de      	b.n	800c32c <_malloc_r+0xa0>
 800c36e:	bf00      	nop
 800c370:	200013c0 	.word	0x200013c0

0800c374 <__cvt>:
 800c374:	2b00      	cmp	r3, #0
 800c376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c37a:	461f      	mov	r7, r3
 800c37c:	bfbb      	ittet	lt
 800c37e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c382:	461f      	movlt	r7, r3
 800c384:	2300      	movge	r3, #0
 800c386:	232d      	movlt	r3, #45	; 0x2d
 800c388:	b088      	sub	sp, #32
 800c38a:	4614      	mov	r4, r2
 800c38c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c38e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c394:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c398:	f023 0820 	bic.w	r8, r3, #32
 800c39c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3a0:	d005      	beq.n	800c3ae <__cvt+0x3a>
 800c3a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c3a6:	d100      	bne.n	800c3aa <__cvt+0x36>
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e000      	b.n	800c3b0 <__cvt+0x3c>
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	aa07      	add	r2, sp, #28
 800c3b2:	9204      	str	r2, [sp, #16]
 800c3b4:	aa06      	add	r2, sp, #24
 800c3b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c3ba:	e9cd 3500 	strd	r3, r5, [sp]
 800c3be:	4622      	mov	r2, r4
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	f001 fee1 	bl	800e188 <_dtoa_r>
 800c3c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	d102      	bne.n	800c3d4 <__cvt+0x60>
 800c3ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3d0:	07db      	lsls	r3, r3, #31
 800c3d2:	d522      	bpl.n	800c41a <__cvt+0xa6>
 800c3d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3d8:	eb06 0905 	add.w	r9, r6, r5
 800c3dc:	d110      	bne.n	800c400 <__cvt+0x8c>
 800c3de:	7833      	ldrb	r3, [r6, #0]
 800c3e0:	2b30      	cmp	r3, #48	; 0x30
 800c3e2:	d10a      	bne.n	800c3fa <__cvt+0x86>
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f4 faf4 	bl	80009d8 <__aeabi_dcmpeq>
 800c3f0:	b918      	cbnz	r0, 800c3fa <__cvt+0x86>
 800c3f2:	f1c5 0501 	rsb	r5, r5, #1
 800c3f6:	f8ca 5000 	str.w	r5, [sl]
 800c3fa:	f8da 3000 	ldr.w	r3, [sl]
 800c3fe:	4499      	add	r9, r3
 800c400:	2200      	movs	r2, #0
 800c402:	2300      	movs	r3, #0
 800c404:	4620      	mov	r0, r4
 800c406:	4639      	mov	r1, r7
 800c408:	f7f4 fae6 	bl	80009d8 <__aeabi_dcmpeq>
 800c40c:	b108      	cbz	r0, 800c412 <__cvt+0x9e>
 800c40e:	f8cd 901c 	str.w	r9, [sp, #28]
 800c412:	2230      	movs	r2, #48	; 0x30
 800c414:	9b07      	ldr	r3, [sp, #28]
 800c416:	454b      	cmp	r3, r9
 800c418:	d307      	bcc.n	800c42a <__cvt+0xb6>
 800c41a:	4630      	mov	r0, r6
 800c41c:	9b07      	ldr	r3, [sp, #28]
 800c41e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c420:	1b9b      	subs	r3, r3, r6
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	b008      	add	sp, #32
 800c426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42a:	1c59      	adds	r1, r3, #1
 800c42c:	9107      	str	r1, [sp, #28]
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	e7f0      	b.n	800c414 <__cvt+0xa0>

0800c432 <__exponent>:
 800c432:	4603      	mov	r3, r0
 800c434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c436:	2900      	cmp	r1, #0
 800c438:	f803 2b02 	strb.w	r2, [r3], #2
 800c43c:	bfb6      	itet	lt
 800c43e:	222d      	movlt	r2, #45	; 0x2d
 800c440:	222b      	movge	r2, #43	; 0x2b
 800c442:	4249      	neglt	r1, r1
 800c444:	2909      	cmp	r1, #9
 800c446:	7042      	strb	r2, [r0, #1]
 800c448:	dd2b      	ble.n	800c4a2 <__exponent+0x70>
 800c44a:	f10d 0407 	add.w	r4, sp, #7
 800c44e:	46a4      	mov	ip, r4
 800c450:	270a      	movs	r7, #10
 800c452:	fb91 f6f7 	sdiv	r6, r1, r7
 800c456:	460a      	mov	r2, r1
 800c458:	46a6      	mov	lr, r4
 800c45a:	fb07 1516 	mls	r5, r7, r6, r1
 800c45e:	2a63      	cmp	r2, #99	; 0x63
 800c460:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c464:	4631      	mov	r1, r6
 800c466:	f104 34ff 	add.w	r4, r4, #4294967295
 800c46a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c46e:	dcf0      	bgt.n	800c452 <__exponent+0x20>
 800c470:	3130      	adds	r1, #48	; 0x30
 800c472:	f1ae 0502 	sub.w	r5, lr, #2
 800c476:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c47a:	4629      	mov	r1, r5
 800c47c:	1c44      	adds	r4, r0, #1
 800c47e:	4561      	cmp	r1, ip
 800c480:	d30a      	bcc.n	800c498 <__exponent+0x66>
 800c482:	f10d 0209 	add.w	r2, sp, #9
 800c486:	eba2 020e 	sub.w	r2, r2, lr
 800c48a:	4565      	cmp	r5, ip
 800c48c:	bf88      	it	hi
 800c48e:	2200      	movhi	r2, #0
 800c490:	4413      	add	r3, r2
 800c492:	1a18      	subs	r0, r3, r0
 800c494:	b003      	add	sp, #12
 800c496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c4a0:	e7ed      	b.n	800c47e <__exponent+0x4c>
 800c4a2:	2330      	movs	r3, #48	; 0x30
 800c4a4:	3130      	adds	r1, #48	; 0x30
 800c4a6:	7083      	strb	r3, [r0, #2]
 800c4a8:	70c1      	strb	r1, [r0, #3]
 800c4aa:	1d03      	adds	r3, r0, #4
 800c4ac:	e7f1      	b.n	800c492 <__exponent+0x60>
	...

0800c4b0 <_printf_float>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	b091      	sub	sp, #68	; 0x44
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c4bc:	4616      	mov	r6, r2
 800c4be:	461f      	mov	r7, r3
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	f003 f969 	bl	800f798 <_localeconv_r>
 800c4c6:	6803      	ldr	r3, [r0, #0]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c4cc:	f7f3 fe58 	bl	8000180 <strlen>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d8:	900a      	str	r0, [sp, #40]	; 0x28
 800c4da:	3307      	adds	r3, #7
 800c4dc:	f023 0307 	bic.w	r3, r3, #7
 800c4e0:	f103 0208 	add.w	r2, r3, #8
 800c4e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c4e8:	f8d4 b000 	ldr.w	fp, [r4]
 800c4ec:	f8c8 2000 	str.w	r2, [r8]
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c4fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c500:	930b      	str	r3, [sp, #44]	; 0x2c
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
 800c506:	4640      	mov	r0, r8
 800c508:	4b9c      	ldr	r3, [pc, #624]	; (800c77c <_printf_float+0x2cc>)
 800c50a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c50c:	f7f4 fa96 	bl	8000a3c <__aeabi_dcmpun>
 800c510:	bb70      	cbnz	r0, 800c570 <_printf_float+0xc0>
 800c512:	f04f 32ff 	mov.w	r2, #4294967295
 800c516:	4640      	mov	r0, r8
 800c518:	4b98      	ldr	r3, [pc, #608]	; (800c77c <_printf_float+0x2cc>)
 800c51a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c51c:	f7f4 fa70 	bl	8000a00 <__aeabi_dcmple>
 800c520:	bb30      	cbnz	r0, 800c570 <_printf_float+0xc0>
 800c522:	2200      	movs	r2, #0
 800c524:	2300      	movs	r3, #0
 800c526:	4640      	mov	r0, r8
 800c528:	4651      	mov	r1, sl
 800c52a:	f7f4 fa5f 	bl	80009ec <__aeabi_dcmplt>
 800c52e:	b110      	cbz	r0, 800c536 <_printf_float+0x86>
 800c530:	232d      	movs	r3, #45	; 0x2d
 800c532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c536:	4b92      	ldr	r3, [pc, #584]	; (800c780 <_printf_float+0x2d0>)
 800c538:	4892      	ldr	r0, [pc, #584]	; (800c784 <_printf_float+0x2d4>)
 800c53a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c53e:	bf94      	ite	ls
 800c540:	4698      	movls	r8, r3
 800c542:	4680      	movhi	r8, r0
 800c544:	2303      	movs	r3, #3
 800c546:	f04f 0a00 	mov.w	sl, #0
 800c54a:	6123      	str	r3, [r4, #16]
 800c54c:	f02b 0304 	bic.w	r3, fp, #4
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	4633      	mov	r3, r6
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	9700      	str	r7, [sp, #0]
 800c55a:	aa0f      	add	r2, sp, #60	; 0x3c
 800c55c:	f000 f9d4 	bl	800c908 <_printf_common>
 800c560:	3001      	adds	r0, #1
 800c562:	f040 8090 	bne.w	800c686 <_printf_float+0x1d6>
 800c566:	f04f 30ff 	mov.w	r0, #4294967295
 800c56a:	b011      	add	sp, #68	; 0x44
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c570:	4642      	mov	r2, r8
 800c572:	4653      	mov	r3, sl
 800c574:	4640      	mov	r0, r8
 800c576:	4651      	mov	r1, sl
 800c578:	f7f4 fa60 	bl	8000a3c <__aeabi_dcmpun>
 800c57c:	b148      	cbz	r0, 800c592 <_printf_float+0xe2>
 800c57e:	f1ba 0f00 	cmp.w	sl, #0
 800c582:	bfb8      	it	lt
 800c584:	232d      	movlt	r3, #45	; 0x2d
 800c586:	4880      	ldr	r0, [pc, #512]	; (800c788 <_printf_float+0x2d8>)
 800c588:	bfb8      	it	lt
 800c58a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c58e:	4b7f      	ldr	r3, [pc, #508]	; (800c78c <_printf_float+0x2dc>)
 800c590:	e7d3      	b.n	800c53a <_printf_float+0x8a>
 800c592:	6863      	ldr	r3, [r4, #4]
 800c594:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	d142      	bne.n	800c622 <_printf_float+0x172>
 800c59c:	2306      	movs	r3, #6
 800c59e:	6063      	str	r3, [r4, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	9206      	str	r2, [sp, #24]
 800c5a4:	aa0e      	add	r2, sp, #56	; 0x38
 800c5a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c5aa:	aa0d      	add	r2, sp, #52	; 0x34
 800c5ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c5b0:	9203      	str	r2, [sp, #12]
 800c5b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c5b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	6863      	ldr	r3, [r4, #4]
 800c5be:	4642      	mov	r2, r8
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	4653      	mov	r3, sl
 800c5c6:	910b      	str	r1, [sp, #44]	; 0x2c
 800c5c8:	f7ff fed4 	bl	800c374 <__cvt>
 800c5cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	2947      	cmp	r1, #71	; 0x47
 800c5d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c5d4:	d108      	bne.n	800c5e8 <_printf_float+0x138>
 800c5d6:	1cc8      	adds	r0, r1, #3
 800c5d8:	db02      	blt.n	800c5e0 <_printf_float+0x130>
 800c5da:	6863      	ldr	r3, [r4, #4]
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	dd40      	ble.n	800c662 <_printf_float+0x1b2>
 800c5e0:	f1a9 0902 	sub.w	r9, r9, #2
 800c5e4:	fa5f f989 	uxtb.w	r9, r9
 800c5e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c5ec:	d81f      	bhi.n	800c62e <_printf_float+0x17e>
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	3901      	subs	r1, #1
 800c5f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5f6:	910d      	str	r1, [sp, #52]	; 0x34
 800c5f8:	f7ff ff1b 	bl	800c432 <__exponent>
 800c5fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5fe:	4682      	mov	sl, r0
 800c600:	1813      	adds	r3, r2, r0
 800c602:	2a01      	cmp	r2, #1
 800c604:	6123      	str	r3, [r4, #16]
 800c606:	dc02      	bgt.n	800c60e <_printf_float+0x15e>
 800c608:	6822      	ldr	r2, [r4, #0]
 800c60a:	07d2      	lsls	r2, r2, #31
 800c60c:	d501      	bpl.n	800c612 <_printf_float+0x162>
 800c60e:	3301      	adds	r3, #1
 800c610:	6123      	str	r3, [r4, #16]
 800c612:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c616:	2b00      	cmp	r3, #0
 800c618:	d09b      	beq.n	800c552 <_printf_float+0xa2>
 800c61a:	232d      	movs	r3, #45	; 0x2d
 800c61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c620:	e797      	b.n	800c552 <_printf_float+0xa2>
 800c622:	2947      	cmp	r1, #71	; 0x47
 800c624:	d1bc      	bne.n	800c5a0 <_printf_float+0xf0>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1ba      	bne.n	800c5a0 <_printf_float+0xf0>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e7b7      	b.n	800c59e <_printf_float+0xee>
 800c62e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c632:	d118      	bne.n	800c666 <_printf_float+0x1b6>
 800c634:	2900      	cmp	r1, #0
 800c636:	6863      	ldr	r3, [r4, #4]
 800c638:	dd0b      	ble.n	800c652 <_printf_float+0x1a2>
 800c63a:	6121      	str	r1, [r4, #16]
 800c63c:	b913      	cbnz	r3, 800c644 <_printf_float+0x194>
 800c63e:	6822      	ldr	r2, [r4, #0]
 800c640:	07d0      	lsls	r0, r2, #31
 800c642:	d502      	bpl.n	800c64a <_printf_float+0x19a>
 800c644:	3301      	adds	r3, #1
 800c646:	440b      	add	r3, r1
 800c648:	6123      	str	r3, [r4, #16]
 800c64a:	f04f 0a00 	mov.w	sl, #0
 800c64e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c650:	e7df      	b.n	800c612 <_printf_float+0x162>
 800c652:	b913      	cbnz	r3, 800c65a <_printf_float+0x1aa>
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	07d2      	lsls	r2, r2, #31
 800c658:	d501      	bpl.n	800c65e <_printf_float+0x1ae>
 800c65a:	3302      	adds	r3, #2
 800c65c:	e7f4      	b.n	800c648 <_printf_float+0x198>
 800c65e:	2301      	movs	r3, #1
 800c660:	e7f2      	b.n	800c648 <_printf_float+0x198>
 800c662:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c668:	4299      	cmp	r1, r3
 800c66a:	db05      	blt.n	800c678 <_printf_float+0x1c8>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	6121      	str	r1, [r4, #16]
 800c670:	07d8      	lsls	r0, r3, #31
 800c672:	d5ea      	bpl.n	800c64a <_printf_float+0x19a>
 800c674:	1c4b      	adds	r3, r1, #1
 800c676:	e7e7      	b.n	800c648 <_printf_float+0x198>
 800c678:	2900      	cmp	r1, #0
 800c67a:	bfcc      	ite	gt
 800c67c:	2201      	movgt	r2, #1
 800c67e:	f1c1 0202 	rsble	r2, r1, #2
 800c682:	4413      	add	r3, r2
 800c684:	e7e0      	b.n	800c648 <_printf_float+0x198>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	055a      	lsls	r2, r3, #21
 800c68a:	d407      	bmi.n	800c69c <_printf_float+0x1ec>
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	4642      	mov	r2, r8
 800c690:	4631      	mov	r1, r6
 800c692:	4628      	mov	r0, r5
 800c694:	47b8      	blx	r7
 800c696:	3001      	adds	r0, #1
 800c698:	d12b      	bne.n	800c6f2 <_printf_float+0x242>
 800c69a:	e764      	b.n	800c566 <_printf_float+0xb6>
 800c69c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6a0:	f240 80dd 	bls.w	800c85e <_printf_float+0x3ae>
 800c6a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f7f4 f994 	bl	80009d8 <__aeabi_dcmpeq>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d033      	beq.n	800c71c <_printf_float+0x26c>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	4a35      	ldr	r2, [pc, #212]	; (800c790 <_printf_float+0x2e0>)
 800c6bc:	47b8      	blx	r7
 800c6be:	3001      	adds	r0, #1
 800c6c0:	f43f af51 	beq.w	800c566 <_printf_float+0xb6>
 800c6c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	db02      	blt.n	800c6d2 <_printf_float+0x222>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	07d8      	lsls	r0, r3, #31
 800c6d0:	d50f      	bpl.n	800c6f2 <_printf_float+0x242>
 800c6d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	f43f af42 	beq.w	800c566 <_printf_float+0xb6>
 800c6e2:	f04f 0800 	mov.w	r8, #0
 800c6e6:	f104 091a 	add.w	r9, r4, #26
 800c6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	4543      	cmp	r3, r8
 800c6f0:	dc09      	bgt.n	800c706 <_printf_float+0x256>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	079b      	lsls	r3, r3, #30
 800c6f6:	f100 8102 	bmi.w	800c8fe <_printf_float+0x44e>
 800c6fa:	68e0      	ldr	r0, [r4, #12]
 800c6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6fe:	4298      	cmp	r0, r3
 800c700:	bfb8      	it	lt
 800c702:	4618      	movlt	r0, r3
 800c704:	e731      	b.n	800c56a <_printf_float+0xba>
 800c706:	2301      	movs	r3, #1
 800c708:	464a      	mov	r2, r9
 800c70a:	4631      	mov	r1, r6
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b8      	blx	r7
 800c710:	3001      	adds	r0, #1
 800c712:	f43f af28 	beq.w	800c566 <_printf_float+0xb6>
 800c716:	f108 0801 	add.w	r8, r8, #1
 800c71a:	e7e6      	b.n	800c6ea <_printf_float+0x23a>
 800c71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dc38      	bgt.n	800c794 <_printf_float+0x2e4>
 800c722:	2301      	movs	r3, #1
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	4a19      	ldr	r2, [pc, #100]	; (800c790 <_printf_float+0x2e0>)
 800c72a:	47b8      	blx	r7
 800c72c:	3001      	adds	r0, #1
 800c72e:	f43f af1a 	beq.w	800c566 <_printf_float+0xb6>
 800c732:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c736:	4313      	orrs	r3, r2
 800c738:	d102      	bne.n	800c740 <_printf_float+0x290>
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	07d9      	lsls	r1, r3, #31
 800c73e:	d5d8      	bpl.n	800c6f2 <_printf_float+0x242>
 800c740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	f43f af0b 	beq.w	800c566 <_printf_float+0xb6>
 800c750:	f04f 0900 	mov.w	r9, #0
 800c754:	f104 0a1a 	add.w	sl, r4, #26
 800c758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c75a:	425b      	negs	r3, r3
 800c75c:	454b      	cmp	r3, r9
 800c75e:	dc01      	bgt.n	800c764 <_printf_float+0x2b4>
 800c760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c762:	e794      	b.n	800c68e <_printf_float+0x1de>
 800c764:	2301      	movs	r3, #1
 800c766:	4652      	mov	r2, sl
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f43f aef9 	beq.w	800c566 <_printf_float+0xb6>
 800c774:	f109 0901 	add.w	r9, r9, #1
 800c778:	e7ee      	b.n	800c758 <_printf_float+0x2a8>
 800c77a:	bf00      	nop
 800c77c:	7fefffff 	.word	0x7fefffff
 800c780:	080120ec 	.word	0x080120ec
 800c784:	080120f0 	.word	0x080120f0
 800c788:	080120f8 	.word	0x080120f8
 800c78c:	080120f4 	.word	0x080120f4
 800c790:	080120fc 	.word	0x080120fc
 800c794:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c798:	429a      	cmp	r2, r3
 800c79a:	bfa8      	it	ge
 800c79c:	461a      	movge	r2, r3
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	4691      	mov	r9, r2
 800c7a2:	dc37      	bgt.n	800c814 <_printf_float+0x364>
 800c7a4:	f04f 0b00 	mov.w	fp, #0
 800c7a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ac:	f104 021a 	add.w	r2, r4, #26
 800c7b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c7b4:	ebaa 0309 	sub.w	r3, sl, r9
 800c7b8:	455b      	cmp	r3, fp
 800c7ba:	dc33      	bgt.n	800c824 <_printf_float+0x374>
 800c7bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	db3b      	blt.n	800c83c <_printf_float+0x38c>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	07da      	lsls	r2, r3, #31
 800c7c8:	d438      	bmi.n	800c83c <_printf_float+0x38c>
 800c7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c7ce:	eba3 020a 	sub.w	r2, r3, sl
 800c7d2:	eba3 0901 	sub.w	r9, r3, r1
 800c7d6:	4591      	cmp	r9, r2
 800c7d8:	bfa8      	it	ge
 800c7da:	4691      	movge	r9, r2
 800c7dc:	f1b9 0f00 	cmp.w	r9, #0
 800c7e0:	dc34      	bgt.n	800c84c <_printf_float+0x39c>
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ea:	f104 0a1a 	add.w	sl, r4, #26
 800c7ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7f2:	1a9b      	subs	r3, r3, r2
 800c7f4:	eba3 0309 	sub.w	r3, r3, r9
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	f77f af7a 	ble.w	800c6f2 <_printf_float+0x242>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4652      	mov	r2, sl
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	f43f aeac 	beq.w	800c566 <_printf_float+0xb6>
 800c80e:	f108 0801 	add.w	r8, r8, #1
 800c812:	e7ec      	b.n	800c7ee <_printf_float+0x33e>
 800c814:	4613      	mov	r3, r2
 800c816:	4631      	mov	r1, r6
 800c818:	4642      	mov	r2, r8
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	d1c0      	bne.n	800c7a4 <_printf_float+0x2f4>
 800c822:	e6a0      	b.n	800c566 <_printf_float+0xb6>
 800c824:	2301      	movs	r3, #1
 800c826:	4631      	mov	r1, r6
 800c828:	4628      	mov	r0, r5
 800c82a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	f43f ae99 	beq.w	800c566 <_printf_float+0xb6>
 800c834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c836:	f10b 0b01 	add.w	fp, fp, #1
 800c83a:	e7b9      	b.n	800c7b0 <_printf_float+0x300>
 800c83c:	4631      	mov	r1, r6
 800c83e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c842:	4628      	mov	r0, r5
 800c844:	47b8      	blx	r7
 800c846:	3001      	adds	r0, #1
 800c848:	d1bf      	bne.n	800c7ca <_printf_float+0x31a>
 800c84a:	e68c      	b.n	800c566 <_printf_float+0xb6>
 800c84c:	464b      	mov	r3, r9
 800c84e:	4631      	mov	r1, r6
 800c850:	4628      	mov	r0, r5
 800c852:	eb08 020a 	add.w	r2, r8, sl
 800c856:	47b8      	blx	r7
 800c858:	3001      	adds	r0, #1
 800c85a:	d1c2      	bne.n	800c7e2 <_printf_float+0x332>
 800c85c:	e683      	b.n	800c566 <_printf_float+0xb6>
 800c85e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c860:	2a01      	cmp	r2, #1
 800c862:	dc01      	bgt.n	800c868 <_printf_float+0x3b8>
 800c864:	07db      	lsls	r3, r3, #31
 800c866:	d537      	bpl.n	800c8d8 <_printf_float+0x428>
 800c868:	2301      	movs	r3, #1
 800c86a:	4642      	mov	r2, r8
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f ae77 	beq.w	800c566 <_printf_float+0xb6>
 800c878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c87c:	4631      	mov	r1, r6
 800c87e:	4628      	mov	r0, r5
 800c880:	47b8      	blx	r7
 800c882:	3001      	adds	r0, #1
 800c884:	f43f ae6f 	beq.w	800c566 <_printf_float+0xb6>
 800c888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c88c:	2200      	movs	r2, #0
 800c88e:	2300      	movs	r3, #0
 800c890:	f7f4 f8a2 	bl	80009d8 <__aeabi_dcmpeq>
 800c894:	b9d8      	cbnz	r0, 800c8ce <_printf_float+0x41e>
 800c896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c898:	f108 0201 	add.w	r2, r8, #1
 800c89c:	3b01      	subs	r3, #1
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d10e      	bne.n	800c8c6 <_printf_float+0x416>
 800c8a8:	e65d      	b.n	800c566 <_printf_float+0xb6>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	464a      	mov	r2, r9
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	f43f ae56 	beq.w	800c566 <_printf_float+0xb6>
 800c8ba:	f108 0801 	add.w	r8, r8, #1
 800c8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	4543      	cmp	r3, r8
 800c8c4:	dcf1      	bgt.n	800c8aa <_printf_float+0x3fa>
 800c8c6:	4653      	mov	r3, sl
 800c8c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8cc:	e6e0      	b.n	800c690 <_printf_float+0x1e0>
 800c8ce:	f04f 0800 	mov.w	r8, #0
 800c8d2:	f104 091a 	add.w	r9, r4, #26
 800c8d6:	e7f2      	b.n	800c8be <_printf_float+0x40e>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4642      	mov	r2, r8
 800c8dc:	e7df      	b.n	800c89e <_printf_float+0x3ee>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	464a      	mov	r2, r9
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	47b8      	blx	r7
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	f43f ae3c 	beq.w	800c566 <_printf_float+0xb6>
 800c8ee:	f108 0801 	add.w	r8, r8, #1
 800c8f2:	68e3      	ldr	r3, [r4, #12]
 800c8f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8f6:	1a5b      	subs	r3, r3, r1
 800c8f8:	4543      	cmp	r3, r8
 800c8fa:	dcf0      	bgt.n	800c8de <_printf_float+0x42e>
 800c8fc:	e6fd      	b.n	800c6fa <_printf_float+0x24a>
 800c8fe:	f04f 0800 	mov.w	r8, #0
 800c902:	f104 0919 	add.w	r9, r4, #25
 800c906:	e7f4      	b.n	800c8f2 <_printf_float+0x442>

0800c908 <_printf_common>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	4616      	mov	r6, r2
 800c90e:	4699      	mov	r9, r3
 800c910:	688a      	ldr	r2, [r1, #8]
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	4607      	mov	r7, r0
 800c916:	4293      	cmp	r3, r2
 800c918:	bfb8      	it	lt
 800c91a:	4613      	movlt	r3, r2
 800c91c:	6033      	str	r3, [r6, #0]
 800c91e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c922:	460c      	mov	r4, r1
 800c924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c928:	b10a      	cbz	r2, 800c92e <_printf_common+0x26>
 800c92a:	3301      	adds	r3, #1
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	0699      	lsls	r1, r3, #26
 800c932:	bf42      	ittt	mi
 800c934:	6833      	ldrmi	r3, [r6, #0]
 800c936:	3302      	addmi	r3, #2
 800c938:	6033      	strmi	r3, [r6, #0]
 800c93a:	6825      	ldr	r5, [r4, #0]
 800c93c:	f015 0506 	ands.w	r5, r5, #6
 800c940:	d106      	bne.n	800c950 <_printf_common+0x48>
 800c942:	f104 0a19 	add.w	sl, r4, #25
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	6832      	ldr	r2, [r6, #0]
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	42ab      	cmp	r3, r5
 800c94e:	dc28      	bgt.n	800c9a2 <_printf_common+0x9a>
 800c950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c954:	1e13      	subs	r3, r2, #0
 800c956:	6822      	ldr	r2, [r4, #0]
 800c958:	bf18      	it	ne
 800c95a:	2301      	movne	r3, #1
 800c95c:	0692      	lsls	r2, r2, #26
 800c95e:	d42d      	bmi.n	800c9bc <_printf_common+0xb4>
 800c960:	4649      	mov	r1, r9
 800c962:	4638      	mov	r0, r7
 800c964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c968:	47c0      	blx	r8
 800c96a:	3001      	adds	r0, #1
 800c96c:	d020      	beq.n	800c9b0 <_printf_common+0xa8>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	68e5      	ldr	r5, [r4, #12]
 800c972:	f003 0306 	and.w	r3, r3, #6
 800c976:	2b04      	cmp	r3, #4
 800c978:	bf18      	it	ne
 800c97a:	2500      	movne	r5, #0
 800c97c:	6832      	ldr	r2, [r6, #0]
 800c97e:	f04f 0600 	mov.w	r6, #0
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	bf08      	it	eq
 800c986:	1aad      	subeq	r5, r5, r2
 800c988:	6922      	ldr	r2, [r4, #16]
 800c98a:	bf08      	it	eq
 800c98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c990:	4293      	cmp	r3, r2
 800c992:	bfc4      	itt	gt
 800c994:	1a9b      	subgt	r3, r3, r2
 800c996:	18ed      	addgt	r5, r5, r3
 800c998:	341a      	adds	r4, #26
 800c99a:	42b5      	cmp	r5, r6
 800c99c:	d11a      	bne.n	800c9d4 <_printf_common+0xcc>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e008      	b.n	800c9b4 <_printf_common+0xac>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	47c0      	blx	r8
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_printf_common+0xb0>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	e7c4      	b.n	800c946 <_printf_common+0x3e>
 800c9bc:	2030      	movs	r0, #48	; 0x30
 800c9be:	18e1      	adds	r1, r4, r3
 800c9c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9ca:	4422      	add	r2, r4
 800c9cc:	3302      	adds	r3, #2
 800c9ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9d2:	e7c5      	b.n	800c960 <_printf_common+0x58>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4638      	mov	r0, r7
 800c9dc:	47c0      	blx	r8
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d0e6      	beq.n	800c9b0 <_printf_common+0xa8>
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7d9      	b.n	800c99a <_printf_common+0x92>
	...

0800c9e8 <_printf_i>:
 800c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	7e0f      	ldrb	r7, [r1, #24]
 800c9ee:	4691      	mov	r9, r2
 800c9f0:	2f78      	cmp	r7, #120	; 0x78
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	469a      	mov	sl, r3
 800c9f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fe:	d807      	bhi.n	800ca10 <_printf_i+0x28>
 800ca00:	2f62      	cmp	r7, #98	; 0x62
 800ca02:	d80a      	bhi.n	800ca1a <_printf_i+0x32>
 800ca04:	2f00      	cmp	r7, #0
 800ca06:	f000 80d9 	beq.w	800cbbc <_printf_i+0x1d4>
 800ca0a:	2f58      	cmp	r7, #88	; 0x58
 800ca0c:	f000 80a4 	beq.w	800cb58 <_printf_i+0x170>
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca18:	e03a      	b.n	800ca90 <_printf_i+0xa8>
 800ca1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1e:	2b15      	cmp	r3, #21
 800ca20:	d8f6      	bhi.n	800ca10 <_printf_i+0x28>
 800ca22:	a101      	add	r1, pc, #4	; (adr r1, 800ca28 <_printf_i+0x40>)
 800ca24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca28:	0800ca81 	.word	0x0800ca81
 800ca2c:	0800ca95 	.word	0x0800ca95
 800ca30:	0800ca11 	.word	0x0800ca11
 800ca34:	0800ca11 	.word	0x0800ca11
 800ca38:	0800ca11 	.word	0x0800ca11
 800ca3c:	0800ca11 	.word	0x0800ca11
 800ca40:	0800ca95 	.word	0x0800ca95
 800ca44:	0800ca11 	.word	0x0800ca11
 800ca48:	0800ca11 	.word	0x0800ca11
 800ca4c:	0800ca11 	.word	0x0800ca11
 800ca50:	0800ca11 	.word	0x0800ca11
 800ca54:	0800cba3 	.word	0x0800cba3
 800ca58:	0800cac5 	.word	0x0800cac5
 800ca5c:	0800cb85 	.word	0x0800cb85
 800ca60:	0800ca11 	.word	0x0800ca11
 800ca64:	0800ca11 	.word	0x0800ca11
 800ca68:	0800cbc5 	.word	0x0800cbc5
 800ca6c:	0800ca11 	.word	0x0800ca11
 800ca70:	0800cac5 	.word	0x0800cac5
 800ca74:	0800ca11 	.word	0x0800ca11
 800ca78:	0800ca11 	.word	0x0800ca11
 800ca7c:	0800cb8d 	.word	0x0800cb8d
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	602a      	str	r2, [r5, #0]
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca90:	2301      	movs	r3, #1
 800ca92:	e0a4      	b.n	800cbde <_printf_i+0x1f6>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	6829      	ldr	r1, [r5, #0]
 800ca98:	0606      	lsls	r6, r0, #24
 800ca9a:	f101 0304 	add.w	r3, r1, #4
 800ca9e:	d50a      	bpl.n	800cab6 <_printf_i+0xce>
 800caa0:	680e      	ldr	r6, [r1, #0]
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	2e00      	cmp	r6, #0
 800caa6:	da03      	bge.n	800cab0 <_printf_i+0xc8>
 800caa8:	232d      	movs	r3, #45	; 0x2d
 800caaa:	4276      	negs	r6, r6
 800caac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab0:	230a      	movs	r3, #10
 800cab2:	485e      	ldr	r0, [pc, #376]	; (800cc2c <_printf_i+0x244>)
 800cab4:	e019      	b.n	800caea <_printf_i+0x102>
 800cab6:	680e      	ldr	r6, [r1, #0]
 800cab8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cabc:	602b      	str	r3, [r5, #0]
 800cabe:	bf18      	it	ne
 800cac0:	b236      	sxthne	r6, r6
 800cac2:	e7ef      	b.n	800caa4 <_printf_i+0xbc>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	6029      	str	r1, [r5, #0]
 800cacc:	0601      	lsls	r1, r0, #24
 800cace:	d501      	bpl.n	800cad4 <_printf_i+0xec>
 800cad0:	681e      	ldr	r6, [r3, #0]
 800cad2:	e002      	b.n	800cada <_printf_i+0xf2>
 800cad4:	0646      	lsls	r6, r0, #25
 800cad6:	d5fb      	bpl.n	800cad0 <_printf_i+0xe8>
 800cad8:	881e      	ldrh	r6, [r3, #0]
 800cada:	2f6f      	cmp	r7, #111	; 0x6f
 800cadc:	bf0c      	ite	eq
 800cade:	2308      	moveq	r3, #8
 800cae0:	230a      	movne	r3, #10
 800cae2:	4852      	ldr	r0, [pc, #328]	; (800cc2c <_printf_i+0x244>)
 800cae4:	2100      	movs	r1, #0
 800cae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caea:	6865      	ldr	r5, [r4, #4]
 800caec:	2d00      	cmp	r5, #0
 800caee:	bfa8      	it	ge
 800caf0:	6821      	ldrge	r1, [r4, #0]
 800caf2:	60a5      	str	r5, [r4, #8]
 800caf4:	bfa4      	itt	ge
 800caf6:	f021 0104 	bicge.w	r1, r1, #4
 800cafa:	6021      	strge	r1, [r4, #0]
 800cafc:	b90e      	cbnz	r6, 800cb02 <_printf_i+0x11a>
 800cafe:	2d00      	cmp	r5, #0
 800cb00:	d04d      	beq.n	800cb9e <_printf_i+0x1b6>
 800cb02:	4615      	mov	r5, r2
 800cb04:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb08:	fb03 6711 	mls	r7, r3, r1, r6
 800cb0c:	5dc7      	ldrb	r7, [r0, r7]
 800cb0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb12:	4637      	mov	r7, r6
 800cb14:	42bb      	cmp	r3, r7
 800cb16:	460e      	mov	r6, r1
 800cb18:	d9f4      	bls.n	800cb04 <_printf_i+0x11c>
 800cb1a:	2b08      	cmp	r3, #8
 800cb1c:	d10b      	bne.n	800cb36 <_printf_i+0x14e>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	07de      	lsls	r6, r3, #31
 800cb22:	d508      	bpl.n	800cb36 <_printf_i+0x14e>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	6861      	ldr	r1, [r4, #4]
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	bfde      	ittt	le
 800cb2c:	2330      	movle	r3, #48	; 0x30
 800cb2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb36:	1b52      	subs	r2, r2, r5
 800cb38:	6122      	str	r2, [r4, #16]
 800cb3a:	464b      	mov	r3, r9
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f8cd a000 	str.w	sl, [sp]
 800cb44:	aa03      	add	r2, sp, #12
 800cb46:	f7ff fedf 	bl	800c908 <_printf_common>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d14c      	bne.n	800cbe8 <_printf_i+0x200>
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	b004      	add	sp, #16
 800cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb58:	4834      	ldr	r0, [pc, #208]	; (800cc2c <_printf_i+0x244>)
 800cb5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb5e:	6829      	ldr	r1, [r5, #0]
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb66:	6029      	str	r1, [r5, #0]
 800cb68:	061d      	lsls	r5, r3, #24
 800cb6a:	d514      	bpl.n	800cb96 <_printf_i+0x1ae>
 800cb6c:	07df      	lsls	r7, r3, #31
 800cb6e:	bf44      	itt	mi
 800cb70:	f043 0320 	orrmi.w	r3, r3, #32
 800cb74:	6023      	strmi	r3, [r4, #0]
 800cb76:	b91e      	cbnz	r6, 800cb80 <_printf_i+0x198>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	f023 0320 	bic.w	r3, r3, #32
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	2310      	movs	r3, #16
 800cb82:	e7af      	b.n	800cae4 <_printf_i+0xfc>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	f043 0320 	orr.w	r3, r3, #32
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	2378      	movs	r3, #120	; 0x78
 800cb8e:	4828      	ldr	r0, [pc, #160]	; (800cc30 <_printf_i+0x248>)
 800cb90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb94:	e7e3      	b.n	800cb5e <_printf_i+0x176>
 800cb96:	0659      	lsls	r1, r3, #25
 800cb98:	bf48      	it	mi
 800cb9a:	b2b6      	uxthmi	r6, r6
 800cb9c:	e7e6      	b.n	800cb6c <_printf_i+0x184>
 800cb9e:	4615      	mov	r5, r2
 800cba0:	e7bb      	b.n	800cb1a <_printf_i+0x132>
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	6826      	ldr	r6, [r4, #0]
 800cba6:	1d18      	adds	r0, r3, #4
 800cba8:	6961      	ldr	r1, [r4, #20]
 800cbaa:	6028      	str	r0, [r5, #0]
 800cbac:	0635      	lsls	r5, r6, #24
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	d501      	bpl.n	800cbb6 <_printf_i+0x1ce>
 800cbb2:	6019      	str	r1, [r3, #0]
 800cbb4:	e002      	b.n	800cbbc <_printf_i+0x1d4>
 800cbb6:	0670      	lsls	r0, r6, #25
 800cbb8:	d5fb      	bpl.n	800cbb2 <_printf_i+0x1ca>
 800cbba:	8019      	strh	r1, [r3, #0]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4615      	mov	r5, r2
 800cbc0:	6123      	str	r3, [r4, #16]
 800cbc2:	e7ba      	b.n	800cb3a <_printf_i+0x152>
 800cbc4:	682b      	ldr	r3, [r5, #0]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	1d1a      	adds	r2, r3, #4
 800cbca:	602a      	str	r2, [r5, #0]
 800cbcc:	681d      	ldr	r5, [r3, #0]
 800cbce:	6862      	ldr	r2, [r4, #4]
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f002 fe5f 	bl	800f894 <memchr>
 800cbd6:	b108      	cbz	r0, 800cbdc <_printf_i+0x1f4>
 800cbd8:	1b40      	subs	r0, r0, r5
 800cbda:	6060      	str	r0, [r4, #4]
 800cbdc:	6863      	ldr	r3, [r4, #4]
 800cbde:	6123      	str	r3, [r4, #16]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe6:	e7a8      	b.n	800cb3a <_printf_i+0x152>
 800cbe8:	462a      	mov	r2, r5
 800cbea:	4649      	mov	r1, r9
 800cbec:	4640      	mov	r0, r8
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	47d0      	blx	sl
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d0ab      	beq.n	800cb4e <_printf_i+0x166>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	079b      	lsls	r3, r3, #30
 800cbfa:	d413      	bmi.n	800cc24 <_printf_i+0x23c>
 800cbfc:	68e0      	ldr	r0, [r4, #12]
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	4298      	cmp	r0, r3
 800cc02:	bfb8      	it	lt
 800cc04:	4618      	movlt	r0, r3
 800cc06:	e7a4      	b.n	800cb52 <_printf_i+0x16a>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	4632      	mov	r2, r6
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	4640      	mov	r0, r8
 800cc10:	47d0      	blx	sl
 800cc12:	3001      	adds	r0, #1
 800cc14:	d09b      	beq.n	800cb4e <_printf_i+0x166>
 800cc16:	3501      	adds	r5, #1
 800cc18:	68e3      	ldr	r3, [r4, #12]
 800cc1a:	9903      	ldr	r1, [sp, #12]
 800cc1c:	1a5b      	subs	r3, r3, r1
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	dcf2      	bgt.n	800cc08 <_printf_i+0x220>
 800cc22:	e7eb      	b.n	800cbfc <_printf_i+0x214>
 800cc24:	2500      	movs	r5, #0
 800cc26:	f104 0619 	add.w	r6, r4, #25
 800cc2a:	e7f5      	b.n	800cc18 <_printf_i+0x230>
 800cc2c:	080120fe 	.word	0x080120fe
 800cc30:	0801210f 	.word	0x0801210f

0800cc34 <_scanf_float>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	b087      	sub	sp, #28
 800cc3a:	9303      	str	r3, [sp, #12]
 800cc3c:	688b      	ldr	r3, [r1, #8]
 800cc3e:	4617      	mov	r7, r2
 800cc40:	1e5a      	subs	r2, r3, #1
 800cc42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc46:	bf85      	ittet	hi
 800cc48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc4c:	195b      	addhi	r3, r3, r5
 800cc4e:	2300      	movls	r3, #0
 800cc50:	9302      	strhi	r3, [sp, #8]
 800cc52:	bf88      	it	hi
 800cc54:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc58:	468b      	mov	fp, r1
 800cc5a:	f04f 0500 	mov.w	r5, #0
 800cc5e:	bf8c      	ite	hi
 800cc60:	608b      	strhi	r3, [r1, #8]
 800cc62:	9302      	strls	r3, [sp, #8]
 800cc64:	680b      	ldr	r3, [r1, #0]
 800cc66:	4680      	mov	r8, r0
 800cc68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cc6c:	f84b 3b1c 	str.w	r3, [fp], #28
 800cc70:	460c      	mov	r4, r1
 800cc72:	465e      	mov	r6, fp
 800cc74:	46aa      	mov	sl, r5
 800cc76:	46a9      	mov	r9, r5
 800cc78:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cc7c:	9501      	str	r5, [sp, #4]
 800cc7e:	68a2      	ldr	r2, [r4, #8]
 800cc80:	b152      	cbz	r2, 800cc98 <_scanf_float+0x64>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b4e      	cmp	r3, #78	; 0x4e
 800cc88:	d864      	bhi.n	800cd54 <_scanf_float+0x120>
 800cc8a:	2b40      	cmp	r3, #64	; 0x40
 800cc8c:	d83c      	bhi.n	800cd08 <_scanf_float+0xd4>
 800cc8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cc92:	b2c8      	uxtb	r0, r1
 800cc94:	280e      	cmp	r0, #14
 800cc96:	d93a      	bls.n	800cd0e <_scanf_float+0xda>
 800cc98:	f1b9 0f00 	cmp.w	r9, #0
 800cc9c:	d003      	beq.n	800cca6 <_scanf_float+0x72>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccaa:	f1ba 0f01 	cmp.w	sl, #1
 800ccae:	f200 8113 	bhi.w	800ced8 <_scanf_float+0x2a4>
 800ccb2:	455e      	cmp	r6, fp
 800ccb4:	f200 8105 	bhi.w	800cec2 <_scanf_float+0x28e>
 800ccb8:	2501      	movs	r5, #1
 800ccba:	4628      	mov	r0, r5
 800ccbc:	b007      	add	sp, #28
 800ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ccc6:	2a0d      	cmp	r2, #13
 800ccc8:	d8e6      	bhi.n	800cc98 <_scanf_float+0x64>
 800ccca:	a101      	add	r1, pc, #4	; (adr r1, 800ccd0 <_scanf_float+0x9c>)
 800cccc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ccd0:	0800ce0f 	.word	0x0800ce0f
 800ccd4:	0800cc99 	.word	0x0800cc99
 800ccd8:	0800cc99 	.word	0x0800cc99
 800ccdc:	0800cc99 	.word	0x0800cc99
 800cce0:	0800ce6f 	.word	0x0800ce6f
 800cce4:	0800ce47 	.word	0x0800ce47
 800cce8:	0800cc99 	.word	0x0800cc99
 800ccec:	0800cc99 	.word	0x0800cc99
 800ccf0:	0800ce1d 	.word	0x0800ce1d
 800ccf4:	0800cc99 	.word	0x0800cc99
 800ccf8:	0800cc99 	.word	0x0800cc99
 800ccfc:	0800cc99 	.word	0x0800cc99
 800cd00:	0800cc99 	.word	0x0800cc99
 800cd04:	0800cdd5 	.word	0x0800cdd5
 800cd08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cd0c:	e7db      	b.n	800ccc6 <_scanf_float+0x92>
 800cd0e:	290e      	cmp	r1, #14
 800cd10:	d8c2      	bhi.n	800cc98 <_scanf_float+0x64>
 800cd12:	a001      	add	r0, pc, #4	; (adr r0, 800cd18 <_scanf_float+0xe4>)
 800cd14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cd18:	0800cdc7 	.word	0x0800cdc7
 800cd1c:	0800cc99 	.word	0x0800cc99
 800cd20:	0800cdc7 	.word	0x0800cdc7
 800cd24:	0800ce5b 	.word	0x0800ce5b
 800cd28:	0800cc99 	.word	0x0800cc99
 800cd2c:	0800cd75 	.word	0x0800cd75
 800cd30:	0800cdb1 	.word	0x0800cdb1
 800cd34:	0800cdb1 	.word	0x0800cdb1
 800cd38:	0800cdb1 	.word	0x0800cdb1
 800cd3c:	0800cdb1 	.word	0x0800cdb1
 800cd40:	0800cdb1 	.word	0x0800cdb1
 800cd44:	0800cdb1 	.word	0x0800cdb1
 800cd48:	0800cdb1 	.word	0x0800cdb1
 800cd4c:	0800cdb1 	.word	0x0800cdb1
 800cd50:	0800cdb1 	.word	0x0800cdb1
 800cd54:	2b6e      	cmp	r3, #110	; 0x6e
 800cd56:	d809      	bhi.n	800cd6c <_scanf_float+0x138>
 800cd58:	2b60      	cmp	r3, #96	; 0x60
 800cd5a:	d8b2      	bhi.n	800ccc2 <_scanf_float+0x8e>
 800cd5c:	2b54      	cmp	r3, #84	; 0x54
 800cd5e:	d077      	beq.n	800ce50 <_scanf_float+0x21c>
 800cd60:	2b59      	cmp	r3, #89	; 0x59
 800cd62:	d199      	bne.n	800cc98 <_scanf_float+0x64>
 800cd64:	2d07      	cmp	r5, #7
 800cd66:	d197      	bne.n	800cc98 <_scanf_float+0x64>
 800cd68:	2508      	movs	r5, #8
 800cd6a:	e029      	b.n	800cdc0 <_scanf_float+0x18c>
 800cd6c:	2b74      	cmp	r3, #116	; 0x74
 800cd6e:	d06f      	beq.n	800ce50 <_scanf_float+0x21c>
 800cd70:	2b79      	cmp	r3, #121	; 0x79
 800cd72:	e7f6      	b.n	800cd62 <_scanf_float+0x12e>
 800cd74:	6821      	ldr	r1, [r4, #0]
 800cd76:	05c8      	lsls	r0, r1, #23
 800cd78:	d51a      	bpl.n	800cdb0 <_scanf_float+0x17c>
 800cd7a:	9b02      	ldr	r3, [sp, #8]
 800cd7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cd80:	6021      	str	r1, [r4, #0]
 800cd82:	f109 0901 	add.w	r9, r9, #1
 800cd86:	b11b      	cbz	r3, 800cd90 <_scanf_float+0x15c>
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	3201      	adds	r2, #1
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	60a2      	str	r2, [r4, #8]
 800cd90:	68a3      	ldr	r3, [r4, #8]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	607b      	str	r3, [r7, #4]
 800cda4:	f340 8084 	ble.w	800ceb0 <_scanf_float+0x27c>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	603b      	str	r3, [r7, #0]
 800cdae:	e766      	b.n	800cc7e <_scanf_float+0x4a>
 800cdb0:	eb1a 0f05 	cmn.w	sl, r5
 800cdb4:	f47f af70 	bne.w	800cc98 <_scanf_float+0x64>
 800cdb8:	6822      	ldr	r2, [r4, #0]
 800cdba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cdbe:	6022      	str	r2, [r4, #0]
 800cdc0:	f806 3b01 	strb.w	r3, [r6], #1
 800cdc4:	e7e4      	b.n	800cd90 <_scanf_float+0x15c>
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	0610      	lsls	r0, r2, #24
 800cdca:	f57f af65 	bpl.w	800cc98 <_scanf_float+0x64>
 800cdce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdd2:	e7f4      	b.n	800cdbe <_scanf_float+0x18a>
 800cdd4:	f1ba 0f00 	cmp.w	sl, #0
 800cdd8:	d10e      	bne.n	800cdf8 <_scanf_float+0x1c4>
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d10e      	bne.n	800cdfe <_scanf_float+0x1ca>
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cde6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cdea:	d108      	bne.n	800cdfe <_scanf_float+0x1ca>
 800cdec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cdf0:	f04f 0a01 	mov.w	sl, #1
 800cdf4:	6022      	str	r2, [r4, #0]
 800cdf6:	e7e3      	b.n	800cdc0 <_scanf_float+0x18c>
 800cdf8:	f1ba 0f02 	cmp.w	sl, #2
 800cdfc:	d055      	beq.n	800ceaa <_scanf_float+0x276>
 800cdfe:	2d01      	cmp	r5, #1
 800ce00:	d002      	beq.n	800ce08 <_scanf_float+0x1d4>
 800ce02:	2d04      	cmp	r5, #4
 800ce04:	f47f af48 	bne.w	800cc98 <_scanf_float+0x64>
 800ce08:	3501      	adds	r5, #1
 800ce0a:	b2ed      	uxtb	r5, r5
 800ce0c:	e7d8      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce0e:	f1ba 0f01 	cmp.w	sl, #1
 800ce12:	f47f af41 	bne.w	800cc98 <_scanf_float+0x64>
 800ce16:	f04f 0a02 	mov.w	sl, #2
 800ce1a:	e7d1      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce1c:	b97d      	cbnz	r5, 800ce3e <_scanf_float+0x20a>
 800ce1e:	f1b9 0f00 	cmp.w	r9, #0
 800ce22:	f47f af3c 	bne.w	800cc9e <_scanf_float+0x6a>
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ce30:	f47f af39 	bne.w	800cca6 <_scanf_float+0x72>
 800ce34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce38:	2501      	movs	r5, #1
 800ce3a:	6022      	str	r2, [r4, #0]
 800ce3c:	e7c0      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce3e:	2d03      	cmp	r5, #3
 800ce40:	d0e2      	beq.n	800ce08 <_scanf_float+0x1d4>
 800ce42:	2d05      	cmp	r5, #5
 800ce44:	e7de      	b.n	800ce04 <_scanf_float+0x1d0>
 800ce46:	2d02      	cmp	r5, #2
 800ce48:	f47f af26 	bne.w	800cc98 <_scanf_float+0x64>
 800ce4c:	2503      	movs	r5, #3
 800ce4e:	e7b7      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce50:	2d06      	cmp	r5, #6
 800ce52:	f47f af21 	bne.w	800cc98 <_scanf_float+0x64>
 800ce56:	2507      	movs	r5, #7
 800ce58:	e7b2      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	0591      	lsls	r1, r2, #22
 800ce5e:	f57f af1b 	bpl.w	800cc98 <_scanf_float+0x64>
 800ce62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ce66:	6022      	str	r2, [r4, #0]
 800ce68:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce6c:	e7a8      	b.n	800cdc0 <_scanf_float+0x18c>
 800ce6e:	6822      	ldr	r2, [r4, #0]
 800ce70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ce74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ce78:	d006      	beq.n	800ce88 <_scanf_float+0x254>
 800ce7a:	0550      	lsls	r0, r2, #21
 800ce7c:	f57f af0c 	bpl.w	800cc98 <_scanf_float+0x64>
 800ce80:	f1b9 0f00 	cmp.w	r9, #0
 800ce84:	f43f af0f 	beq.w	800cca6 <_scanf_float+0x72>
 800ce88:	0591      	lsls	r1, r2, #22
 800ce8a:	bf58      	it	pl
 800ce8c:	9901      	ldrpl	r1, [sp, #4]
 800ce8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce92:	bf58      	it	pl
 800ce94:	eba9 0101 	subpl.w	r1, r9, r1
 800ce98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ce9c:	f04f 0900 	mov.w	r9, #0
 800cea0:	bf58      	it	pl
 800cea2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cea6:	6022      	str	r2, [r4, #0]
 800cea8:	e78a      	b.n	800cdc0 <_scanf_float+0x18c>
 800ceaa:	f04f 0a03 	mov.w	sl, #3
 800ceae:	e787      	b.n	800cdc0 <_scanf_float+0x18c>
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ceb8:	4798      	blx	r3
 800ceba:	2800      	cmp	r0, #0
 800cebc:	f43f aedf 	beq.w	800cc7e <_scanf_float+0x4a>
 800cec0:	e6ea      	b.n	800cc98 <_scanf_float+0x64>
 800cec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cec6:	463a      	mov	r2, r7
 800cec8:	4640      	mov	r0, r8
 800ceca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cece:	4798      	blx	r3
 800ced0:	6923      	ldr	r3, [r4, #16]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	6123      	str	r3, [r4, #16]
 800ced6:	e6ec      	b.n	800ccb2 <_scanf_float+0x7e>
 800ced8:	1e6b      	subs	r3, r5, #1
 800ceda:	2b06      	cmp	r3, #6
 800cedc:	d825      	bhi.n	800cf2a <_scanf_float+0x2f6>
 800cede:	2d02      	cmp	r5, #2
 800cee0:	d836      	bhi.n	800cf50 <_scanf_float+0x31c>
 800cee2:	455e      	cmp	r6, fp
 800cee4:	f67f aee8 	bls.w	800ccb8 <_scanf_float+0x84>
 800cee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ceec:	463a      	mov	r2, r7
 800ceee:	4640      	mov	r0, r8
 800cef0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cef4:	4798      	blx	r3
 800cef6:	6923      	ldr	r3, [r4, #16]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	6123      	str	r3, [r4, #16]
 800cefc:	e7f1      	b.n	800cee2 <_scanf_float+0x2ae>
 800cefe:	9802      	ldr	r0, [sp, #8]
 800cf00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cf08:	463a      	mov	r2, r7
 800cf0a:	9002      	str	r0, [sp, #8]
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	4798      	blx	r3
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	6123      	str	r3, [r4, #16]
 800cf16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf1a:	fa5f fa8a 	uxtb.w	sl, sl
 800cf1e:	f1ba 0f02 	cmp.w	sl, #2
 800cf22:	d1ec      	bne.n	800cefe <_scanf_float+0x2ca>
 800cf24:	3d03      	subs	r5, #3
 800cf26:	b2ed      	uxtb	r5, r5
 800cf28:	1b76      	subs	r6, r6, r5
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	05da      	lsls	r2, r3, #23
 800cf2e:	d52f      	bpl.n	800cf90 <_scanf_float+0x35c>
 800cf30:	055b      	lsls	r3, r3, #21
 800cf32:	d510      	bpl.n	800cf56 <_scanf_float+0x322>
 800cf34:	455e      	cmp	r6, fp
 800cf36:	f67f aebf 	bls.w	800ccb8 <_scanf_float+0x84>
 800cf3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf3e:	463a      	mov	r2, r7
 800cf40:	4640      	mov	r0, r8
 800cf42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf46:	4798      	blx	r3
 800cf48:	6923      	ldr	r3, [r4, #16]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	e7f1      	b.n	800cf34 <_scanf_float+0x300>
 800cf50:	46aa      	mov	sl, r5
 800cf52:	9602      	str	r6, [sp, #8]
 800cf54:	e7df      	b.n	800cf16 <_scanf_float+0x2e2>
 800cf56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	2965      	cmp	r1, #101	; 0x65
 800cf5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf62:	f106 35ff 	add.w	r5, r6, #4294967295
 800cf66:	6123      	str	r3, [r4, #16]
 800cf68:	d00c      	beq.n	800cf84 <_scanf_float+0x350>
 800cf6a:	2945      	cmp	r1, #69	; 0x45
 800cf6c:	d00a      	beq.n	800cf84 <_scanf_float+0x350>
 800cf6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf72:	463a      	mov	r2, r7
 800cf74:	4640      	mov	r0, r8
 800cf76:	4798      	blx	r3
 800cf78:	6923      	ldr	r3, [r4, #16]
 800cf7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	1eb5      	subs	r5, r6, #2
 800cf82:	6123      	str	r3, [r4, #16]
 800cf84:	463a      	mov	r2, r7
 800cf86:	4640      	mov	r0, r8
 800cf88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf8c:	4798      	blx	r3
 800cf8e:	462e      	mov	r6, r5
 800cf90:	6825      	ldr	r5, [r4, #0]
 800cf92:	f015 0510 	ands.w	r5, r5, #16
 800cf96:	d155      	bne.n	800d044 <_scanf_float+0x410>
 800cf98:	7035      	strb	r5, [r6, #0]
 800cf9a:	6823      	ldr	r3, [r4, #0]
 800cf9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cfa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfa4:	d11b      	bne.n	800cfde <_scanf_float+0x3aa>
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	454b      	cmp	r3, r9
 800cfaa:	eba3 0209 	sub.w	r2, r3, r9
 800cfae:	d123      	bne.n	800cff8 <_scanf_float+0x3c4>
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	4659      	mov	r1, fp
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	f000 ff17 	bl	800dde8 <_strtod_r>
 800cfba:	6822      	ldr	r2, [r4, #0]
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	f012 0f02 	tst.w	r2, #2
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	460f      	mov	r7, r1
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	d021      	beq.n	800d00e <_scanf_float+0x3da>
 800cfca:	1d1a      	adds	r2, r3, #4
 800cfcc:	9903      	ldr	r1, [sp, #12]
 800cfce:	600a      	str	r2, [r1, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	e9c3 6700 	strd	r6, r7, [r3]
 800cfd6:	68e3      	ldr	r3, [r4, #12]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	60e3      	str	r3, [r4, #12]
 800cfdc:	e66d      	b.n	800ccba <_scanf_float+0x86>
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0e5      	beq.n	800cfb0 <_scanf_float+0x37c>
 800cfe4:	9905      	ldr	r1, [sp, #20]
 800cfe6:	230a      	movs	r3, #10
 800cfe8:	462a      	mov	r2, r5
 800cfea:	4640      	mov	r0, r8
 800cfec:	3101      	adds	r1, #1
 800cfee:	f000 ff7d 	bl	800deec <_strtol_r>
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	9e05      	ldr	r6, [sp, #20]
 800cff6:	1ac2      	subs	r2, r0, r3
 800cff8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cffc:	429e      	cmp	r6, r3
 800cffe:	bf28      	it	cs
 800d000:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d004:	4630      	mov	r0, r6
 800d006:	4910      	ldr	r1, [pc, #64]	; (800d048 <_scanf_float+0x414>)
 800d008:	f000 f8ac 	bl	800d164 <siprintf>
 800d00c:	e7d0      	b.n	800cfb0 <_scanf_float+0x37c>
 800d00e:	f012 0f04 	tst.w	r2, #4
 800d012:	f103 0204 	add.w	r2, r3, #4
 800d016:	d1d9      	bne.n	800cfcc <_scanf_float+0x398>
 800d018:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d01c:	f8cc 2000 	str.w	r2, [ip]
 800d020:	f8d3 8000 	ldr.w	r8, [r3]
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	f7f3 fd08 	bl	8000a3c <__aeabi_dcmpun>
 800d02c:	b128      	cbz	r0, 800d03a <_scanf_float+0x406>
 800d02e:	4807      	ldr	r0, [pc, #28]	; (800d04c <_scanf_float+0x418>)
 800d030:	f000 f894 	bl	800d15c <nanf>
 800d034:	f8c8 0000 	str.w	r0, [r8]
 800d038:	e7cd      	b.n	800cfd6 <_scanf_float+0x3a2>
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 fd5b 	bl	8000af8 <__aeabi_d2f>
 800d042:	e7f7      	b.n	800d034 <_scanf_float+0x400>
 800d044:	2500      	movs	r5, #0
 800d046:	e638      	b.n	800ccba <_scanf_float+0x86>
 800d048:	08012120 	.word	0x08012120
 800d04c:	08012590 	.word	0x08012590

0800d050 <_puts_r>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	460e      	mov	r6, r1
 800d054:	4605      	mov	r5, r0
 800d056:	b118      	cbz	r0, 800d060 <_puts_r+0x10>
 800d058:	6983      	ldr	r3, [r0, #24]
 800d05a:	b90b      	cbnz	r3, 800d060 <_puts_r+0x10>
 800d05c:	f001 ff98 	bl	800ef90 <__sinit>
 800d060:	69ab      	ldr	r3, [r5, #24]
 800d062:	68ac      	ldr	r4, [r5, #8]
 800d064:	b913      	cbnz	r3, 800d06c <_puts_r+0x1c>
 800d066:	4628      	mov	r0, r5
 800d068:	f001 ff92 	bl	800ef90 <__sinit>
 800d06c:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <_puts_r+0xd0>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d120      	bne.n	800d0b4 <_puts_r+0x64>
 800d072:	686c      	ldr	r4, [r5, #4]
 800d074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d076:	07db      	lsls	r3, r3, #31
 800d078:	d405      	bmi.n	800d086 <_puts_r+0x36>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	0598      	lsls	r0, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_puts_r+0x36>
 800d080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d082:	f002 fb8e 	bl	800f7a2 <__retarget_lock_acquire_recursive>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	0719      	lsls	r1, r3, #28
 800d08a:	d51d      	bpl.n	800d0c8 <_puts_r+0x78>
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	b1db      	cbz	r3, 800d0c8 <_puts_r+0x78>
 800d090:	3e01      	subs	r6, #1
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d098:	3b01      	subs	r3, #1
 800d09a:	60a3      	str	r3, [r4, #8]
 800d09c:	bb39      	cbnz	r1, 800d0ee <_puts_r+0x9e>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	da38      	bge.n	800d114 <_puts_r+0xc4>
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	210a      	movs	r1, #10
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f000 ff22 	bl	800def0 <__swbuf_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d011      	beq.n	800d0d4 <_puts_r+0x84>
 800d0b0:	250a      	movs	r5, #10
 800d0b2:	e011      	b.n	800d0d8 <_puts_r+0x88>
 800d0b4:	4b1b      	ldr	r3, [pc, #108]	; (800d124 <_puts_r+0xd4>)
 800d0b6:	429c      	cmp	r4, r3
 800d0b8:	d101      	bne.n	800d0be <_puts_r+0x6e>
 800d0ba:	68ac      	ldr	r4, [r5, #8]
 800d0bc:	e7da      	b.n	800d074 <_puts_r+0x24>
 800d0be:	4b1a      	ldr	r3, [pc, #104]	; (800d128 <_puts_r+0xd8>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	bf08      	it	eq
 800d0c4:	68ec      	ldreq	r4, [r5, #12]
 800d0c6:	e7d5      	b.n	800d074 <_puts_r+0x24>
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f000 ff62 	bl	800df94 <__swsetup_r>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0dd      	beq.n	800d090 <_puts_r+0x40>
 800d0d4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0da:	07da      	lsls	r2, r3, #31
 800d0dc:	d405      	bmi.n	800d0ea <_puts_r+0x9a>
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	059b      	lsls	r3, r3, #22
 800d0e2:	d402      	bmi.n	800d0ea <_puts_r+0x9a>
 800d0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0e6:	f002 fb5d 	bl	800f7a4 <__retarget_lock_release_recursive>
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	bd70      	pop	{r4, r5, r6, pc}
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	da04      	bge.n	800d0fc <_puts_r+0xac>
 800d0f2:	69a2      	ldr	r2, [r4, #24]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	dc06      	bgt.n	800d106 <_puts_r+0xb6>
 800d0f8:	290a      	cmp	r1, #10
 800d0fa:	d004      	beq.n	800d106 <_puts_r+0xb6>
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	6022      	str	r2, [r4, #0]
 800d102:	7019      	strb	r1, [r3, #0]
 800d104:	e7c5      	b.n	800d092 <_puts_r+0x42>
 800d106:	4622      	mov	r2, r4
 800d108:	4628      	mov	r0, r5
 800d10a:	f000 fef1 	bl	800def0 <__swbuf_r>
 800d10e:	3001      	adds	r0, #1
 800d110:	d1bf      	bne.n	800d092 <_puts_r+0x42>
 800d112:	e7df      	b.n	800d0d4 <_puts_r+0x84>
 800d114:	250a      	movs	r5, #10
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	701d      	strb	r5, [r3, #0]
 800d11e:	e7db      	b.n	800d0d8 <_puts_r+0x88>
 800d120:	0801232c 	.word	0x0801232c
 800d124:	0801234c 	.word	0x0801234c
 800d128:	0801230c 	.word	0x0801230c

0800d12c <puts>:
 800d12c:	4b02      	ldr	r3, [pc, #8]	; (800d138 <puts+0xc>)
 800d12e:	4601      	mov	r1, r0
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	f7ff bf8d 	b.w	800d050 <_puts_r>
 800d136:	bf00      	nop
 800d138:	20000030 	.word	0x20000030

0800d13c <_sbrk_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	2300      	movs	r3, #0
 800d140:	4d05      	ldr	r5, [pc, #20]	; (800d158 <_sbrk_r+0x1c>)
 800d142:	4604      	mov	r4, r0
 800d144:	4608      	mov	r0, r1
 800d146:	602b      	str	r3, [r5, #0]
 800d148:	f7f5 f9c2 	bl	80024d0 <_sbrk>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_sbrk_r+0x1a>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_sbrk_r+0x1a>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	200013cc 	.word	0x200013cc

0800d15c <nanf>:
 800d15c:	4800      	ldr	r0, [pc, #0]	; (800d160 <nanf+0x4>)
 800d15e:	4770      	bx	lr
 800d160:	7fc00000 	.word	0x7fc00000

0800d164 <siprintf>:
 800d164:	b40e      	push	{r1, r2, r3}
 800d166:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d16a:	b500      	push	{lr}
 800d16c:	b09c      	sub	sp, #112	; 0x70
 800d16e:	ab1d      	add	r3, sp, #116	; 0x74
 800d170:	9002      	str	r0, [sp, #8]
 800d172:	9006      	str	r0, [sp, #24]
 800d174:	9107      	str	r1, [sp, #28]
 800d176:	9104      	str	r1, [sp, #16]
 800d178:	4808      	ldr	r0, [pc, #32]	; (800d19c <siprintf+0x38>)
 800d17a:	4909      	ldr	r1, [pc, #36]	; (800d1a0 <siprintf+0x3c>)
 800d17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d180:	9105      	str	r1, [sp, #20]
 800d182:	6800      	ldr	r0, [r0, #0]
 800d184:	a902      	add	r1, sp, #8
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	f003 f8c6 	bl	8010318 <_svfiprintf_r>
 800d18c:	2200      	movs	r2, #0
 800d18e:	9b02      	ldr	r3, [sp, #8]
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	b01c      	add	sp, #112	; 0x70
 800d194:	f85d eb04 	ldr.w	lr, [sp], #4
 800d198:	b003      	add	sp, #12
 800d19a:	4770      	bx	lr
 800d19c:	20000030 	.word	0x20000030
 800d1a0:	ffff0208 	.word	0xffff0208

0800d1a4 <strstr>:
 800d1a4:	780a      	ldrb	r2, [r1, #0]
 800d1a6:	b570      	push	{r4, r5, r6, lr}
 800d1a8:	b96a      	cbnz	r2, 800d1c6 <strstr+0x22>
 800d1aa:	bd70      	pop	{r4, r5, r6, pc}
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d109      	bne.n	800d1c4 <strstr+0x20>
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d0f6      	beq.n	800d1aa <strstr+0x6>
 800d1bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d1c0:	429e      	cmp	r6, r3
 800d1c2:	d0f7      	beq.n	800d1b4 <strstr+0x10>
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	7803      	ldrb	r3, [r0, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1ef      	bne.n	800d1ac <strstr+0x8>
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	e7ec      	b.n	800d1aa <strstr+0x6>

0800d1d0 <sulp>:
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	4690      	mov	r8, r2
 800d1d8:	f002 fee6 	bl	800ffa8 <__ulp>
 800d1dc:	4604      	mov	r4, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	f1b8 0f00 	cmp.w	r8, #0
 800d1e4:	d011      	beq.n	800d20a <sulp+0x3a>
 800d1e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d1ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	dd0b      	ble.n	800d20a <sulp+0x3a>
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	051b      	lsls	r3, r3, #20
 800d1f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d1fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d1fe:	4622      	mov	r2, r4
 800d200:	462b      	mov	r3, r5
 800d202:	f7f3 f981 	bl	8000508 <__aeabi_dmul>
 800d206:	4604      	mov	r4, r0
 800d208:	460d      	mov	r5, r1
 800d20a:	4620      	mov	r0, r4
 800d20c:	4629      	mov	r1, r5
 800d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d212:	0000      	movs	r0, r0
 800d214:	0000      	movs	r0, r0
	...

0800d218 <_strtod_l>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	469b      	mov	fp, r3
 800d21e:	2300      	movs	r3, #0
 800d220:	b09f      	sub	sp, #124	; 0x7c
 800d222:	931a      	str	r3, [sp, #104]	; 0x68
 800d224:	4b9e      	ldr	r3, [pc, #632]	; (800d4a0 <_strtod_l+0x288>)
 800d226:	4682      	mov	sl, r0
 800d228:	681f      	ldr	r7, [r3, #0]
 800d22a:	460e      	mov	r6, r1
 800d22c:	4638      	mov	r0, r7
 800d22e:	9215      	str	r2, [sp, #84]	; 0x54
 800d230:	f7f2 ffa6 	bl	8000180 <strlen>
 800d234:	f04f 0800 	mov.w	r8, #0
 800d238:	4604      	mov	r4, r0
 800d23a:	f04f 0900 	mov.w	r9, #0
 800d23e:	9619      	str	r6, [sp, #100]	; 0x64
 800d240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d242:	781a      	ldrb	r2, [r3, #0]
 800d244:	2a2b      	cmp	r2, #43	; 0x2b
 800d246:	d04c      	beq.n	800d2e2 <_strtod_l+0xca>
 800d248:	d83a      	bhi.n	800d2c0 <_strtod_l+0xa8>
 800d24a:	2a0d      	cmp	r2, #13
 800d24c:	d833      	bhi.n	800d2b6 <_strtod_l+0x9e>
 800d24e:	2a08      	cmp	r2, #8
 800d250:	d833      	bhi.n	800d2ba <_strtod_l+0xa2>
 800d252:	2a00      	cmp	r2, #0
 800d254:	d03d      	beq.n	800d2d2 <_strtod_l+0xba>
 800d256:	2300      	movs	r3, #0
 800d258:	930a      	str	r3, [sp, #40]	; 0x28
 800d25a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d25c:	782b      	ldrb	r3, [r5, #0]
 800d25e:	2b30      	cmp	r3, #48	; 0x30
 800d260:	f040 80aa 	bne.w	800d3b8 <_strtod_l+0x1a0>
 800d264:	786b      	ldrb	r3, [r5, #1]
 800d266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d26a:	2b58      	cmp	r3, #88	; 0x58
 800d26c:	d166      	bne.n	800d33c <_strtod_l+0x124>
 800d26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d270:	4650      	mov	r0, sl
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	ab1a      	add	r3, sp, #104	; 0x68
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	4a8a      	ldr	r2, [pc, #552]	; (800d4a4 <_strtod_l+0x28c>)
 800d27a:	f8cd b008 	str.w	fp, [sp, #8]
 800d27e:	ab1b      	add	r3, sp, #108	; 0x6c
 800d280:	a919      	add	r1, sp, #100	; 0x64
 800d282:	f001 ff8b 	bl	800f19c <__gethex>
 800d286:	f010 0607 	ands.w	r6, r0, #7
 800d28a:	4604      	mov	r4, r0
 800d28c:	d005      	beq.n	800d29a <_strtod_l+0x82>
 800d28e:	2e06      	cmp	r6, #6
 800d290:	d129      	bne.n	800d2e6 <_strtod_l+0xce>
 800d292:	2300      	movs	r3, #0
 800d294:	3501      	adds	r5, #1
 800d296:	9519      	str	r5, [sp, #100]	; 0x64
 800d298:	930a      	str	r3, [sp, #40]	; 0x28
 800d29a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f040 858a 	bne.w	800ddb6 <_strtod_l+0xb9e>
 800d2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a4:	b1d3      	cbz	r3, 800d2dc <_strtod_l+0xc4>
 800d2a6:	4642      	mov	r2, r8
 800d2a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	b01f      	add	sp, #124	; 0x7c
 800d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b6:	2a20      	cmp	r2, #32
 800d2b8:	d1cd      	bne.n	800d256 <_strtod_l+0x3e>
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	9319      	str	r3, [sp, #100]	; 0x64
 800d2be:	e7bf      	b.n	800d240 <_strtod_l+0x28>
 800d2c0:	2a2d      	cmp	r2, #45	; 0x2d
 800d2c2:	d1c8      	bne.n	800d256 <_strtod_l+0x3e>
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	920a      	str	r2, [sp, #40]	; 0x28
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	9219      	str	r2, [sp, #100]	; 0x64
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1c3      	bne.n	800d25a <_strtod_l+0x42>
 800d2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2d4:	9619      	str	r6, [sp, #100]	; 0x64
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f040 856b 	bne.w	800ddb2 <_strtod_l+0xb9a>
 800d2dc:	4642      	mov	r2, r8
 800d2de:	464b      	mov	r3, r9
 800d2e0:	e7e4      	b.n	800d2ac <_strtod_l+0x94>
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	e7ef      	b.n	800d2c6 <_strtod_l+0xae>
 800d2e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d2e8:	b13a      	cbz	r2, 800d2fa <_strtod_l+0xe2>
 800d2ea:	2135      	movs	r1, #53	; 0x35
 800d2ec:	a81c      	add	r0, sp, #112	; 0x70
 800d2ee:	f002 ff5f 	bl	80101b0 <__copybits>
 800d2f2:	4650      	mov	r0, sl
 800d2f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d2f6:	f002 fb27 	bl	800f948 <_Bfree>
 800d2fa:	3e01      	subs	r6, #1
 800d2fc:	2e04      	cmp	r6, #4
 800d2fe:	d806      	bhi.n	800d30e <_strtod_l+0xf6>
 800d300:	e8df f006 	tbb	[pc, r6]
 800d304:	1714030a 	.word	0x1714030a
 800d308:	0a          	.byte	0x0a
 800d309:	00          	.byte	0x00
 800d30a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800d30e:	0721      	lsls	r1, r4, #28
 800d310:	d5c3      	bpl.n	800d29a <_strtod_l+0x82>
 800d312:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800d316:	e7c0      	b.n	800d29a <_strtod_l+0x82>
 800d318:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d31a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800d31e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d322:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d326:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d32a:	e7f0      	b.n	800d30e <_strtod_l+0xf6>
 800d32c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d4a8 <_strtod_l+0x290>
 800d330:	e7ed      	b.n	800d30e <_strtod_l+0xf6>
 800d332:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d336:	f04f 38ff 	mov.w	r8, #4294967295
 800d33a:	e7e8      	b.n	800d30e <_strtod_l+0xf6>
 800d33c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d33e:	1c5a      	adds	r2, r3, #1
 800d340:	9219      	str	r2, [sp, #100]	; 0x64
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	2b30      	cmp	r3, #48	; 0x30
 800d346:	d0f9      	beq.n	800d33c <_strtod_l+0x124>
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0a6      	beq.n	800d29a <_strtod_l+0x82>
 800d34c:	2301      	movs	r3, #1
 800d34e:	9307      	str	r3, [sp, #28]
 800d350:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d352:	220a      	movs	r2, #10
 800d354:	9308      	str	r3, [sp, #32]
 800d356:	2300      	movs	r3, #0
 800d358:	469b      	mov	fp, r3
 800d35a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d35e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d360:	7805      	ldrb	r5, [r0, #0]
 800d362:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d366:	b2d9      	uxtb	r1, r3
 800d368:	2909      	cmp	r1, #9
 800d36a:	d927      	bls.n	800d3bc <_strtod_l+0x1a4>
 800d36c:	4622      	mov	r2, r4
 800d36e:	4639      	mov	r1, r7
 800d370:	f003 f91b 	bl	80105aa <strncmp>
 800d374:	2800      	cmp	r0, #0
 800d376:	d033      	beq.n	800d3e0 <_strtod_l+0x1c8>
 800d378:	2000      	movs	r0, #0
 800d37a:	462a      	mov	r2, r5
 800d37c:	465c      	mov	r4, fp
 800d37e:	4603      	mov	r3, r0
 800d380:	9004      	str	r0, [sp, #16]
 800d382:	2a65      	cmp	r2, #101	; 0x65
 800d384:	d001      	beq.n	800d38a <_strtod_l+0x172>
 800d386:	2a45      	cmp	r2, #69	; 0x45
 800d388:	d114      	bne.n	800d3b4 <_strtod_l+0x19c>
 800d38a:	b91c      	cbnz	r4, 800d394 <_strtod_l+0x17c>
 800d38c:	9a07      	ldr	r2, [sp, #28]
 800d38e:	4302      	orrs	r2, r0
 800d390:	d09f      	beq.n	800d2d2 <_strtod_l+0xba>
 800d392:	2400      	movs	r4, #0
 800d394:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d396:	1c72      	adds	r2, r6, #1
 800d398:	9219      	str	r2, [sp, #100]	; 0x64
 800d39a:	7872      	ldrb	r2, [r6, #1]
 800d39c:	2a2b      	cmp	r2, #43	; 0x2b
 800d39e:	d079      	beq.n	800d494 <_strtod_l+0x27c>
 800d3a0:	2a2d      	cmp	r2, #45	; 0x2d
 800d3a2:	f000 8083 	beq.w	800d4ac <_strtod_l+0x294>
 800d3a6:	2700      	movs	r7, #0
 800d3a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d3ac:	2909      	cmp	r1, #9
 800d3ae:	f240 8083 	bls.w	800d4b8 <_strtod_l+0x2a0>
 800d3b2:	9619      	str	r6, [sp, #100]	; 0x64
 800d3b4:	2500      	movs	r5, #0
 800d3b6:	e09f      	b.n	800d4f8 <_strtod_l+0x2e0>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e7c8      	b.n	800d34e <_strtod_l+0x136>
 800d3bc:	f1bb 0f08 	cmp.w	fp, #8
 800d3c0:	bfd5      	itete	le
 800d3c2:	9906      	ldrle	r1, [sp, #24]
 800d3c4:	9905      	ldrgt	r1, [sp, #20]
 800d3c6:	fb02 3301 	mlale	r3, r2, r1, r3
 800d3ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d3ce:	f100 0001 	add.w	r0, r0, #1
 800d3d2:	bfd4      	ite	le
 800d3d4:	9306      	strle	r3, [sp, #24]
 800d3d6:	9305      	strgt	r3, [sp, #20]
 800d3d8:	f10b 0b01 	add.w	fp, fp, #1
 800d3dc:	9019      	str	r0, [sp, #100]	; 0x64
 800d3de:	e7be      	b.n	800d35e <_strtod_l+0x146>
 800d3e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3e2:	191a      	adds	r2, r3, r4
 800d3e4:	9219      	str	r2, [sp, #100]	; 0x64
 800d3e6:	5d1a      	ldrb	r2, [r3, r4]
 800d3e8:	f1bb 0f00 	cmp.w	fp, #0
 800d3ec:	d036      	beq.n	800d45c <_strtod_l+0x244>
 800d3ee:	465c      	mov	r4, fp
 800d3f0:	9004      	str	r0, [sp, #16]
 800d3f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d3f6:	2b09      	cmp	r3, #9
 800d3f8:	d912      	bls.n	800d420 <_strtod_l+0x208>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e7c1      	b.n	800d382 <_strtod_l+0x16a>
 800d3fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d400:	3001      	adds	r0, #1
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	9219      	str	r2, [sp, #100]	; 0x64
 800d406:	785a      	ldrb	r2, [r3, #1]
 800d408:	2a30      	cmp	r2, #48	; 0x30
 800d40a:	d0f8      	beq.n	800d3fe <_strtod_l+0x1e6>
 800d40c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d410:	2b08      	cmp	r3, #8
 800d412:	f200 84d5 	bhi.w	800ddc0 <_strtod_l+0xba8>
 800d416:	9004      	str	r0, [sp, #16]
 800d418:	2000      	movs	r0, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d41e:	9308      	str	r3, [sp, #32]
 800d420:	3a30      	subs	r2, #48	; 0x30
 800d422:	f100 0301 	add.w	r3, r0, #1
 800d426:	d013      	beq.n	800d450 <_strtod_l+0x238>
 800d428:	9904      	ldr	r1, [sp, #16]
 800d42a:	1905      	adds	r5, r0, r4
 800d42c:	4419      	add	r1, r3
 800d42e:	9104      	str	r1, [sp, #16]
 800d430:	4623      	mov	r3, r4
 800d432:	210a      	movs	r1, #10
 800d434:	42ab      	cmp	r3, r5
 800d436:	d113      	bne.n	800d460 <_strtod_l+0x248>
 800d438:	1823      	adds	r3, r4, r0
 800d43a:	2b08      	cmp	r3, #8
 800d43c:	f104 0401 	add.w	r4, r4, #1
 800d440:	4404      	add	r4, r0
 800d442:	dc1b      	bgt.n	800d47c <_strtod_l+0x264>
 800d444:	230a      	movs	r3, #10
 800d446:	9906      	ldr	r1, [sp, #24]
 800d448:	fb03 2301 	mla	r3, r3, r1, r2
 800d44c:	9306      	str	r3, [sp, #24]
 800d44e:	2300      	movs	r3, #0
 800d450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d452:	4618      	mov	r0, r3
 800d454:	1c51      	adds	r1, r2, #1
 800d456:	9119      	str	r1, [sp, #100]	; 0x64
 800d458:	7852      	ldrb	r2, [r2, #1]
 800d45a:	e7ca      	b.n	800d3f2 <_strtod_l+0x1da>
 800d45c:	4658      	mov	r0, fp
 800d45e:	e7d3      	b.n	800d408 <_strtod_l+0x1f0>
 800d460:	2b08      	cmp	r3, #8
 800d462:	dc04      	bgt.n	800d46e <_strtod_l+0x256>
 800d464:	9f06      	ldr	r7, [sp, #24]
 800d466:	434f      	muls	r7, r1
 800d468:	9706      	str	r7, [sp, #24]
 800d46a:	3301      	adds	r3, #1
 800d46c:	e7e2      	b.n	800d434 <_strtod_l+0x21c>
 800d46e:	1c5f      	adds	r7, r3, #1
 800d470:	2f10      	cmp	r7, #16
 800d472:	bfde      	ittt	le
 800d474:	9f05      	ldrle	r7, [sp, #20]
 800d476:	434f      	mulle	r7, r1
 800d478:	9705      	strle	r7, [sp, #20]
 800d47a:	e7f6      	b.n	800d46a <_strtod_l+0x252>
 800d47c:	2c10      	cmp	r4, #16
 800d47e:	bfdf      	itttt	le
 800d480:	230a      	movle	r3, #10
 800d482:	9905      	ldrle	r1, [sp, #20]
 800d484:	fb03 2301 	mlale	r3, r3, r1, r2
 800d488:	9305      	strle	r3, [sp, #20]
 800d48a:	e7e0      	b.n	800d44e <_strtod_l+0x236>
 800d48c:	2300      	movs	r3, #0
 800d48e:	9304      	str	r3, [sp, #16]
 800d490:	2301      	movs	r3, #1
 800d492:	e77b      	b.n	800d38c <_strtod_l+0x174>
 800d494:	2700      	movs	r7, #0
 800d496:	1cb2      	adds	r2, r6, #2
 800d498:	9219      	str	r2, [sp, #100]	; 0x64
 800d49a:	78b2      	ldrb	r2, [r6, #2]
 800d49c:	e784      	b.n	800d3a8 <_strtod_l+0x190>
 800d49e:	bf00      	nop
 800d4a0:	080123d4 	.word	0x080123d4
 800d4a4:	08012128 	.word	0x08012128
 800d4a8:	7ff00000 	.word	0x7ff00000
 800d4ac:	2701      	movs	r7, #1
 800d4ae:	e7f2      	b.n	800d496 <_strtod_l+0x27e>
 800d4b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4b2:	1c51      	adds	r1, r2, #1
 800d4b4:	9119      	str	r1, [sp, #100]	; 0x64
 800d4b6:	7852      	ldrb	r2, [r2, #1]
 800d4b8:	2a30      	cmp	r2, #48	; 0x30
 800d4ba:	d0f9      	beq.n	800d4b0 <_strtod_l+0x298>
 800d4bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d4c0:	2908      	cmp	r1, #8
 800d4c2:	f63f af77 	bhi.w	800d3b4 <_strtod_l+0x19c>
 800d4c6:	f04f 0e0a 	mov.w	lr, #10
 800d4ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d4ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4d4:	1c51      	adds	r1, r2, #1
 800d4d6:	9119      	str	r1, [sp, #100]	; 0x64
 800d4d8:	7852      	ldrb	r2, [r2, #1]
 800d4da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800d4de:	2d09      	cmp	r5, #9
 800d4e0:	d935      	bls.n	800d54e <_strtod_l+0x336>
 800d4e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d4e4:	1b49      	subs	r1, r1, r5
 800d4e6:	2908      	cmp	r1, #8
 800d4e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800d4ec:	dc02      	bgt.n	800d4f4 <_strtod_l+0x2dc>
 800d4ee:	4565      	cmp	r5, ip
 800d4f0:	bfa8      	it	ge
 800d4f2:	4665      	movge	r5, ip
 800d4f4:	b107      	cbz	r7, 800d4f8 <_strtod_l+0x2e0>
 800d4f6:	426d      	negs	r5, r5
 800d4f8:	2c00      	cmp	r4, #0
 800d4fa:	d14c      	bne.n	800d596 <_strtod_l+0x37e>
 800d4fc:	9907      	ldr	r1, [sp, #28]
 800d4fe:	4301      	orrs	r1, r0
 800d500:	f47f aecb 	bne.w	800d29a <_strtod_l+0x82>
 800d504:	2b00      	cmp	r3, #0
 800d506:	f47f aee4 	bne.w	800d2d2 <_strtod_l+0xba>
 800d50a:	2a69      	cmp	r2, #105	; 0x69
 800d50c:	d026      	beq.n	800d55c <_strtod_l+0x344>
 800d50e:	dc23      	bgt.n	800d558 <_strtod_l+0x340>
 800d510:	2a49      	cmp	r2, #73	; 0x49
 800d512:	d023      	beq.n	800d55c <_strtod_l+0x344>
 800d514:	2a4e      	cmp	r2, #78	; 0x4e
 800d516:	f47f aedc 	bne.w	800d2d2 <_strtod_l+0xba>
 800d51a:	499d      	ldr	r1, [pc, #628]	; (800d790 <_strtod_l+0x578>)
 800d51c:	a819      	add	r0, sp, #100	; 0x64
 800d51e:	f002 f88b 	bl	800f638 <__match>
 800d522:	2800      	cmp	r0, #0
 800d524:	f43f aed5 	beq.w	800d2d2 <_strtod_l+0xba>
 800d528:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	2b28      	cmp	r3, #40	; 0x28
 800d52e:	d12c      	bne.n	800d58a <_strtod_l+0x372>
 800d530:	4998      	ldr	r1, [pc, #608]	; (800d794 <_strtod_l+0x57c>)
 800d532:	aa1c      	add	r2, sp, #112	; 0x70
 800d534:	a819      	add	r0, sp, #100	; 0x64
 800d536:	f002 f893 	bl	800f660 <__hexnan>
 800d53a:	2805      	cmp	r0, #5
 800d53c:	d125      	bne.n	800d58a <_strtod_l+0x372>
 800d53e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d540:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d544:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d548:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d54c:	e6a5      	b.n	800d29a <_strtod_l+0x82>
 800d54e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800d552:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800d556:	e7bc      	b.n	800d4d2 <_strtod_l+0x2ba>
 800d558:	2a6e      	cmp	r2, #110	; 0x6e
 800d55a:	e7dc      	b.n	800d516 <_strtod_l+0x2fe>
 800d55c:	498e      	ldr	r1, [pc, #568]	; (800d798 <_strtod_l+0x580>)
 800d55e:	a819      	add	r0, sp, #100	; 0x64
 800d560:	f002 f86a 	bl	800f638 <__match>
 800d564:	2800      	cmp	r0, #0
 800d566:	f43f aeb4 	beq.w	800d2d2 <_strtod_l+0xba>
 800d56a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d56c:	498b      	ldr	r1, [pc, #556]	; (800d79c <_strtod_l+0x584>)
 800d56e:	3b01      	subs	r3, #1
 800d570:	a819      	add	r0, sp, #100	; 0x64
 800d572:	9319      	str	r3, [sp, #100]	; 0x64
 800d574:	f002 f860 	bl	800f638 <__match>
 800d578:	b910      	cbnz	r0, 800d580 <_strtod_l+0x368>
 800d57a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d57c:	3301      	adds	r3, #1
 800d57e:	9319      	str	r3, [sp, #100]	; 0x64
 800d580:	f04f 0800 	mov.w	r8, #0
 800d584:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800d7a0 <_strtod_l+0x588>
 800d588:	e687      	b.n	800d29a <_strtod_l+0x82>
 800d58a:	4886      	ldr	r0, [pc, #536]	; (800d7a4 <_strtod_l+0x58c>)
 800d58c:	f002 ffc4 	bl	8010518 <nan>
 800d590:	4680      	mov	r8, r0
 800d592:	4689      	mov	r9, r1
 800d594:	e681      	b.n	800d29a <_strtod_l+0x82>
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	f1bb 0f00 	cmp.w	fp, #0
 800d59c:	bf08      	it	eq
 800d59e:	46a3      	moveq	fp, r4
 800d5a0:	1aeb      	subs	r3, r5, r3
 800d5a2:	2c10      	cmp	r4, #16
 800d5a4:	9806      	ldr	r0, [sp, #24]
 800d5a6:	4626      	mov	r6, r4
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	bfa8      	it	ge
 800d5ac:	2610      	movge	r6, #16
 800d5ae:	f7f2 ff31 	bl	8000414 <__aeabi_ui2d>
 800d5b2:	2c09      	cmp	r4, #9
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	4689      	mov	r9, r1
 800d5b8:	dd13      	ble.n	800d5e2 <_strtod_l+0x3ca>
 800d5ba:	4b7b      	ldr	r3, [pc, #492]	; (800d7a8 <_strtod_l+0x590>)
 800d5bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d5c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d5c4:	f7f2 ffa0 	bl	8000508 <__aeabi_dmul>
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	9805      	ldr	r0, [sp, #20]
 800d5cc:	4689      	mov	r9, r1
 800d5ce:	f7f2 ff21 	bl	8000414 <__aeabi_ui2d>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f2 fddf 	bl	800019c <__adddf3>
 800d5de:	4680      	mov	r8, r0
 800d5e0:	4689      	mov	r9, r1
 800d5e2:	2c0f      	cmp	r4, #15
 800d5e4:	dc36      	bgt.n	800d654 <_strtod_l+0x43c>
 800d5e6:	9b07      	ldr	r3, [sp, #28]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f43f ae56 	beq.w	800d29a <_strtod_l+0x82>
 800d5ee:	dd22      	ble.n	800d636 <_strtod_l+0x41e>
 800d5f0:	2b16      	cmp	r3, #22
 800d5f2:	dc09      	bgt.n	800d608 <_strtod_l+0x3f0>
 800d5f4:	496c      	ldr	r1, [pc, #432]	; (800d7a8 <_strtod_l+0x590>)
 800d5f6:	4642      	mov	r2, r8
 800d5f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5fc:	464b      	mov	r3, r9
 800d5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d602:	f7f2 ff81 	bl	8000508 <__aeabi_dmul>
 800d606:	e7c3      	b.n	800d590 <_strtod_l+0x378>
 800d608:	9a07      	ldr	r2, [sp, #28]
 800d60a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d60e:	4293      	cmp	r3, r2
 800d610:	db20      	blt.n	800d654 <_strtod_l+0x43c>
 800d612:	4d65      	ldr	r5, [pc, #404]	; (800d7a8 <_strtod_l+0x590>)
 800d614:	f1c4 040f 	rsb	r4, r4, #15
 800d618:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d61c:	4642      	mov	r2, r8
 800d61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d622:	464b      	mov	r3, r9
 800d624:	f7f2 ff70 	bl	8000508 <__aeabi_dmul>
 800d628:	9b07      	ldr	r3, [sp, #28]
 800d62a:	1b1c      	subs	r4, r3, r4
 800d62c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d630:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d634:	e7e5      	b.n	800d602 <_strtod_l+0x3ea>
 800d636:	9b07      	ldr	r3, [sp, #28]
 800d638:	3316      	adds	r3, #22
 800d63a:	db0b      	blt.n	800d654 <_strtod_l+0x43c>
 800d63c:	9b04      	ldr	r3, [sp, #16]
 800d63e:	4640      	mov	r0, r8
 800d640:	1b5d      	subs	r5, r3, r5
 800d642:	4b59      	ldr	r3, [pc, #356]	; (800d7a8 <_strtod_l+0x590>)
 800d644:	4649      	mov	r1, r9
 800d646:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d64a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d64e:	f7f3 f885 	bl	800075c <__aeabi_ddiv>
 800d652:	e79d      	b.n	800d590 <_strtod_l+0x378>
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	1ba6      	subs	r6, r4, r6
 800d658:	441e      	add	r6, r3
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	dd74      	ble.n	800d748 <_strtod_l+0x530>
 800d65e:	f016 030f 	ands.w	r3, r6, #15
 800d662:	d00a      	beq.n	800d67a <_strtod_l+0x462>
 800d664:	4950      	ldr	r1, [pc, #320]	; (800d7a8 <_strtod_l+0x590>)
 800d666:	4642      	mov	r2, r8
 800d668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d670:	464b      	mov	r3, r9
 800d672:	f7f2 ff49 	bl	8000508 <__aeabi_dmul>
 800d676:	4680      	mov	r8, r0
 800d678:	4689      	mov	r9, r1
 800d67a:	f036 060f 	bics.w	r6, r6, #15
 800d67e:	d052      	beq.n	800d726 <_strtod_l+0x50e>
 800d680:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800d684:	dd27      	ble.n	800d6d6 <_strtod_l+0x4be>
 800d686:	f04f 0b00 	mov.w	fp, #0
 800d68a:	f8cd b010 	str.w	fp, [sp, #16]
 800d68e:	f8cd b020 	str.w	fp, [sp, #32]
 800d692:	f8cd b018 	str.w	fp, [sp, #24]
 800d696:	2322      	movs	r3, #34	; 0x22
 800d698:	f04f 0800 	mov.w	r8, #0
 800d69c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800d7a0 <_strtod_l+0x588>
 800d6a0:	f8ca 3000 	str.w	r3, [sl]
 800d6a4:	9b08      	ldr	r3, [sp, #32]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f43f adf7 	beq.w	800d29a <_strtod_l+0x82>
 800d6ac:	4650      	mov	r0, sl
 800d6ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d6b0:	f002 f94a 	bl	800f948 <_Bfree>
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	9906      	ldr	r1, [sp, #24]
 800d6b8:	f002 f946 	bl	800f948 <_Bfree>
 800d6bc:	4650      	mov	r0, sl
 800d6be:	9904      	ldr	r1, [sp, #16]
 800d6c0:	f002 f942 	bl	800f948 <_Bfree>
 800d6c4:	4650      	mov	r0, sl
 800d6c6:	9908      	ldr	r1, [sp, #32]
 800d6c8:	f002 f93e 	bl	800f948 <_Bfree>
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	4650      	mov	r0, sl
 800d6d0:	f002 f93a 	bl	800f948 <_Bfree>
 800d6d4:	e5e1      	b.n	800d29a <_strtod_l+0x82>
 800d6d6:	4b35      	ldr	r3, [pc, #212]	; (800d7ac <_strtod_l+0x594>)
 800d6d8:	4640      	mov	r0, r8
 800d6da:	9305      	str	r3, [sp, #20]
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4649      	mov	r1, r9
 800d6e0:	461f      	mov	r7, r3
 800d6e2:	1136      	asrs	r6, r6, #4
 800d6e4:	2e01      	cmp	r6, #1
 800d6e6:	dc21      	bgt.n	800d72c <_strtod_l+0x514>
 800d6e8:	b10b      	cbz	r3, 800d6ee <_strtod_l+0x4d6>
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	4689      	mov	r9, r1
 800d6ee:	4b2f      	ldr	r3, [pc, #188]	; (800d7ac <_strtod_l+0x594>)
 800d6f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d6f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6fe:	464b      	mov	r3, r9
 800d700:	f7f2 ff02 	bl	8000508 <__aeabi_dmul>
 800d704:	4b26      	ldr	r3, [pc, #152]	; (800d7a0 <_strtod_l+0x588>)
 800d706:	460a      	mov	r2, r1
 800d708:	400b      	ands	r3, r1
 800d70a:	4929      	ldr	r1, [pc, #164]	; (800d7b0 <_strtod_l+0x598>)
 800d70c:	4680      	mov	r8, r0
 800d70e:	428b      	cmp	r3, r1
 800d710:	d8b9      	bhi.n	800d686 <_strtod_l+0x46e>
 800d712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d716:	428b      	cmp	r3, r1
 800d718:	bf86      	itte	hi
 800d71a:	f04f 38ff 	movhi.w	r8, #4294967295
 800d71e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800d7b4 <_strtod_l+0x59c>
 800d722:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d726:	2300      	movs	r3, #0
 800d728:	9305      	str	r3, [sp, #20]
 800d72a:	e07f      	b.n	800d82c <_strtod_l+0x614>
 800d72c:	07f2      	lsls	r2, r6, #31
 800d72e:	d505      	bpl.n	800d73c <_strtod_l+0x524>
 800d730:	9b05      	ldr	r3, [sp, #20]
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f7f2 fee7 	bl	8000508 <__aeabi_dmul>
 800d73a:	2301      	movs	r3, #1
 800d73c:	9a05      	ldr	r2, [sp, #20]
 800d73e:	3701      	adds	r7, #1
 800d740:	3208      	adds	r2, #8
 800d742:	1076      	asrs	r6, r6, #1
 800d744:	9205      	str	r2, [sp, #20]
 800d746:	e7cd      	b.n	800d6e4 <_strtod_l+0x4cc>
 800d748:	d0ed      	beq.n	800d726 <_strtod_l+0x50e>
 800d74a:	4276      	negs	r6, r6
 800d74c:	f016 020f 	ands.w	r2, r6, #15
 800d750:	d00a      	beq.n	800d768 <_strtod_l+0x550>
 800d752:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <_strtod_l+0x590>)
 800d754:	4640      	mov	r0, r8
 800d756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d75a:	4649      	mov	r1, r9
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 fffc 	bl	800075c <__aeabi_ddiv>
 800d764:	4680      	mov	r8, r0
 800d766:	4689      	mov	r9, r1
 800d768:	1136      	asrs	r6, r6, #4
 800d76a:	d0dc      	beq.n	800d726 <_strtod_l+0x50e>
 800d76c:	2e1f      	cmp	r6, #31
 800d76e:	dd23      	ble.n	800d7b8 <_strtod_l+0x5a0>
 800d770:	f04f 0b00 	mov.w	fp, #0
 800d774:	f8cd b010 	str.w	fp, [sp, #16]
 800d778:	f8cd b020 	str.w	fp, [sp, #32]
 800d77c:	f8cd b018 	str.w	fp, [sp, #24]
 800d780:	2322      	movs	r3, #34	; 0x22
 800d782:	f04f 0800 	mov.w	r8, #0
 800d786:	f04f 0900 	mov.w	r9, #0
 800d78a:	f8ca 3000 	str.w	r3, [sl]
 800d78e:	e789      	b.n	800d6a4 <_strtod_l+0x48c>
 800d790:	080120f9 	.word	0x080120f9
 800d794:	0801213c 	.word	0x0801213c
 800d798:	080120f1 	.word	0x080120f1
 800d79c:	0801227c 	.word	0x0801227c
 800d7a0:	7ff00000 	.word	0x7ff00000
 800d7a4:	08012590 	.word	0x08012590
 800d7a8:	08012470 	.word	0x08012470
 800d7ac:	08012448 	.word	0x08012448
 800d7b0:	7ca00000 	.word	0x7ca00000
 800d7b4:	7fefffff 	.word	0x7fefffff
 800d7b8:	f016 0310 	ands.w	r3, r6, #16
 800d7bc:	bf18      	it	ne
 800d7be:	236a      	movne	r3, #106	; 0x6a
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	9305      	str	r3, [sp, #20]
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4fb0      	ldr	r7, [pc, #704]	; (800da8c <_strtod_l+0x874>)
 800d7ca:	07f2      	lsls	r2, r6, #31
 800d7cc:	d504      	bpl.n	800d7d8 <_strtod_l+0x5c0>
 800d7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7d2:	f7f2 fe99 	bl	8000508 <__aeabi_dmul>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	1076      	asrs	r6, r6, #1
 800d7da:	f107 0708 	add.w	r7, r7, #8
 800d7de:	d1f4      	bne.n	800d7ca <_strtod_l+0x5b2>
 800d7e0:	b10b      	cbz	r3, 800d7e6 <_strtod_l+0x5ce>
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	9b05      	ldr	r3, [sp, #20]
 800d7e8:	b1c3      	cbz	r3, 800d81c <_strtod_l+0x604>
 800d7ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d7ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	dd11      	ble.n	800d81c <_strtod_l+0x604>
 800d7f8:	2b1f      	cmp	r3, #31
 800d7fa:	f340 8127 	ble.w	800da4c <_strtod_l+0x834>
 800d7fe:	2b34      	cmp	r3, #52	; 0x34
 800d800:	bfd8      	it	le
 800d802:	f04f 33ff 	movle.w	r3, #4294967295
 800d806:	f04f 0800 	mov.w	r8, #0
 800d80a:	bfcf      	iteee	gt
 800d80c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d810:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d814:	fa03 f202 	lslle.w	r2, r3, r2
 800d818:	ea02 0901 	andle.w	r9, r2, r1
 800d81c:	2200      	movs	r2, #0
 800d81e:	2300      	movs	r3, #0
 800d820:	4640      	mov	r0, r8
 800d822:	4649      	mov	r1, r9
 800d824:	f7f3 f8d8 	bl	80009d8 <__aeabi_dcmpeq>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d1a1      	bne.n	800d770 <_strtod_l+0x558>
 800d82c:	9b06      	ldr	r3, [sp, #24]
 800d82e:	465a      	mov	r2, fp
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	4650      	mov	r0, sl
 800d834:	4623      	mov	r3, r4
 800d836:	9908      	ldr	r1, [sp, #32]
 800d838:	f002 f8ee 	bl	800fa18 <__s2b>
 800d83c:	9008      	str	r0, [sp, #32]
 800d83e:	2800      	cmp	r0, #0
 800d840:	f43f af21 	beq.w	800d686 <_strtod_l+0x46e>
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	f04f 0b00 	mov.w	fp, #0
 800d84a:	1b5d      	subs	r5, r3, r5
 800d84c:	9b07      	ldr	r3, [sp, #28]
 800d84e:	f8cd b010 	str.w	fp, [sp, #16]
 800d852:	2b00      	cmp	r3, #0
 800d854:	bfb4      	ite	lt
 800d856:	462b      	movlt	r3, r5
 800d858:	2300      	movge	r3, #0
 800d85a:	930e      	str	r3, [sp, #56]	; 0x38
 800d85c:	9b07      	ldr	r3, [sp, #28]
 800d85e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d862:	9314      	str	r3, [sp, #80]	; 0x50
 800d864:	9b08      	ldr	r3, [sp, #32]
 800d866:	4650      	mov	r0, sl
 800d868:	6859      	ldr	r1, [r3, #4]
 800d86a:	f002 f82d 	bl	800f8c8 <_Balloc>
 800d86e:	9006      	str	r0, [sp, #24]
 800d870:	2800      	cmp	r0, #0
 800d872:	f43f af10 	beq.w	800d696 <_strtod_l+0x47e>
 800d876:	9b08      	ldr	r3, [sp, #32]
 800d878:	300c      	adds	r0, #12
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	f103 010c 	add.w	r1, r3, #12
 800d880:	3202      	adds	r2, #2
 800d882:	0092      	lsls	r2, r2, #2
 800d884:	f7fe fc84 	bl	800c190 <memcpy>
 800d888:	ab1c      	add	r3, sp, #112	; 0x70
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	ab1b      	add	r3, sp, #108	; 0x6c
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	4642      	mov	r2, r8
 800d892:	464b      	mov	r3, r9
 800d894:	4650      	mov	r0, sl
 800d896:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800d89a:	f002 fbff 	bl	801009c <__d2b>
 800d89e:	901a      	str	r0, [sp, #104]	; 0x68
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	f43f aef8 	beq.w	800d696 <_strtod_l+0x47e>
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	4650      	mov	r0, sl
 800d8aa:	f002 f94d 	bl	800fb48 <__i2b>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	9004      	str	r0, [sp, #16]
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f43f aeef 	beq.w	800d696 <_strtod_l+0x47e>
 800d8b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d8ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d8bc:	2d00      	cmp	r5, #0
 800d8be:	bfab      	itete	ge
 800d8c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d8c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800d8c4:	18ee      	addge	r6, r5, r3
 800d8c6:	1b5c      	sublt	r4, r3, r5
 800d8c8:	9b05      	ldr	r3, [sp, #20]
 800d8ca:	bfa8      	it	ge
 800d8cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800d8ce:	eba5 0503 	sub.w	r5, r5, r3
 800d8d2:	4415      	add	r5, r2
 800d8d4:	4b6e      	ldr	r3, [pc, #440]	; (800da90 <_strtod_l+0x878>)
 800d8d6:	f105 35ff 	add.w	r5, r5, #4294967295
 800d8da:	bfb8      	it	lt
 800d8dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800d8de:	429d      	cmp	r5, r3
 800d8e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d8e4:	f280 80c4 	bge.w	800da70 <_strtod_l+0x858>
 800d8e8:	1b5b      	subs	r3, r3, r5
 800d8ea:	2b1f      	cmp	r3, #31
 800d8ec:	f04f 0701 	mov.w	r7, #1
 800d8f0:	eba2 0203 	sub.w	r2, r2, r3
 800d8f4:	f300 80b1 	bgt.w	800da5a <_strtod_l+0x842>
 800d8f8:	2500      	movs	r5, #0
 800d8fa:	fa07 f303 	lsl.w	r3, r7, r3
 800d8fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d900:	18b7      	adds	r7, r6, r2
 800d902:	9b05      	ldr	r3, [sp, #20]
 800d904:	42be      	cmp	r6, r7
 800d906:	4414      	add	r4, r2
 800d908:	441c      	add	r4, r3
 800d90a:	4633      	mov	r3, r6
 800d90c:	bfa8      	it	ge
 800d90e:	463b      	movge	r3, r7
 800d910:	42a3      	cmp	r3, r4
 800d912:	bfa8      	it	ge
 800d914:	4623      	movge	r3, r4
 800d916:	2b00      	cmp	r3, #0
 800d918:	bfc2      	ittt	gt
 800d91a:	1aff      	subgt	r7, r7, r3
 800d91c:	1ae4      	subgt	r4, r4, r3
 800d91e:	1af6      	subgt	r6, r6, r3
 800d920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d922:	2b00      	cmp	r3, #0
 800d924:	dd17      	ble.n	800d956 <_strtod_l+0x73e>
 800d926:	461a      	mov	r2, r3
 800d928:	4650      	mov	r0, sl
 800d92a:	9904      	ldr	r1, [sp, #16]
 800d92c:	f002 f9ca 	bl	800fcc4 <__pow5mult>
 800d930:	9004      	str	r0, [sp, #16]
 800d932:	2800      	cmp	r0, #0
 800d934:	f43f aeaf 	beq.w	800d696 <_strtod_l+0x47e>
 800d938:	4601      	mov	r1, r0
 800d93a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d93c:	4650      	mov	r0, sl
 800d93e:	f002 f919 	bl	800fb74 <__multiply>
 800d942:	9009      	str	r0, [sp, #36]	; 0x24
 800d944:	2800      	cmp	r0, #0
 800d946:	f43f aea6 	beq.w	800d696 <_strtod_l+0x47e>
 800d94a:	4650      	mov	r0, sl
 800d94c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d94e:	f001 fffb 	bl	800f948 <_Bfree>
 800d952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d954:	931a      	str	r3, [sp, #104]	; 0x68
 800d956:	2f00      	cmp	r7, #0
 800d958:	f300 808e 	bgt.w	800da78 <_strtod_l+0x860>
 800d95c:	9b07      	ldr	r3, [sp, #28]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	dd08      	ble.n	800d974 <_strtod_l+0x75c>
 800d962:	4650      	mov	r0, sl
 800d964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d966:	9906      	ldr	r1, [sp, #24]
 800d968:	f002 f9ac 	bl	800fcc4 <__pow5mult>
 800d96c:	9006      	str	r0, [sp, #24]
 800d96e:	2800      	cmp	r0, #0
 800d970:	f43f ae91 	beq.w	800d696 <_strtod_l+0x47e>
 800d974:	2c00      	cmp	r4, #0
 800d976:	dd08      	ble.n	800d98a <_strtod_l+0x772>
 800d978:	4622      	mov	r2, r4
 800d97a:	4650      	mov	r0, sl
 800d97c:	9906      	ldr	r1, [sp, #24]
 800d97e:	f002 f9fb 	bl	800fd78 <__lshift>
 800d982:	9006      	str	r0, [sp, #24]
 800d984:	2800      	cmp	r0, #0
 800d986:	f43f ae86 	beq.w	800d696 <_strtod_l+0x47e>
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	dd08      	ble.n	800d9a0 <_strtod_l+0x788>
 800d98e:	4632      	mov	r2, r6
 800d990:	4650      	mov	r0, sl
 800d992:	9904      	ldr	r1, [sp, #16]
 800d994:	f002 f9f0 	bl	800fd78 <__lshift>
 800d998:	9004      	str	r0, [sp, #16]
 800d99a:	2800      	cmp	r0, #0
 800d99c:	f43f ae7b 	beq.w	800d696 <_strtod_l+0x47e>
 800d9a0:	4650      	mov	r0, sl
 800d9a2:	9a06      	ldr	r2, [sp, #24]
 800d9a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d9a6:	f002 fa73 	bl	800fe90 <__mdiff>
 800d9aa:	4683      	mov	fp, r0
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	f43f ae72 	beq.w	800d696 <_strtod_l+0x47e>
 800d9b2:	2400      	movs	r4, #0
 800d9b4:	68c3      	ldr	r3, [r0, #12]
 800d9b6:	9904      	ldr	r1, [sp, #16]
 800d9b8:	60c4      	str	r4, [r0, #12]
 800d9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9bc:	f002 fa4c 	bl	800fe58 <__mcmp>
 800d9c0:	42a0      	cmp	r0, r4
 800d9c2:	da6b      	bge.n	800da9c <_strtod_l+0x884>
 800d9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9c6:	ea53 0308 	orrs.w	r3, r3, r8
 800d9ca:	f040 8091 	bne.w	800daf0 <_strtod_l+0x8d8>
 800d9ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f040 808c 	bne.w	800daf0 <_strtod_l+0x8d8>
 800d9d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9dc:	0d1b      	lsrs	r3, r3, #20
 800d9de:	051b      	lsls	r3, r3, #20
 800d9e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d9e4:	f240 8084 	bls.w	800daf0 <_strtod_l+0x8d8>
 800d9e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d9ec:	b91b      	cbnz	r3, 800d9f6 <_strtod_l+0x7de>
 800d9ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	dd7c      	ble.n	800daf0 <_strtod_l+0x8d8>
 800d9f6:	4659      	mov	r1, fp
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	4650      	mov	r0, sl
 800d9fc:	f002 f9bc 	bl	800fd78 <__lshift>
 800da00:	9904      	ldr	r1, [sp, #16]
 800da02:	4683      	mov	fp, r0
 800da04:	f002 fa28 	bl	800fe58 <__mcmp>
 800da08:	2800      	cmp	r0, #0
 800da0a:	dd71      	ble.n	800daf0 <_strtod_l+0x8d8>
 800da0c:	9905      	ldr	r1, [sp, #20]
 800da0e:	464b      	mov	r3, r9
 800da10:	4a20      	ldr	r2, [pc, #128]	; (800da94 <_strtod_l+0x87c>)
 800da12:	2900      	cmp	r1, #0
 800da14:	f000 808c 	beq.w	800db30 <_strtod_l+0x918>
 800da18:	ea02 0109 	and.w	r1, r2, r9
 800da1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800da20:	f300 8086 	bgt.w	800db30 <_strtod_l+0x918>
 800da24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800da28:	f77f aeaa 	ble.w	800d780 <_strtod_l+0x568>
 800da2c:	4640      	mov	r0, r8
 800da2e:	4649      	mov	r1, r9
 800da30:	4b19      	ldr	r3, [pc, #100]	; (800da98 <_strtod_l+0x880>)
 800da32:	2200      	movs	r2, #0
 800da34:	f7f2 fd68 	bl	8000508 <__aeabi_dmul>
 800da38:	460b      	mov	r3, r1
 800da3a:	4303      	orrs	r3, r0
 800da3c:	bf08      	it	eq
 800da3e:	2322      	moveq	r3, #34	; 0x22
 800da40:	4680      	mov	r8, r0
 800da42:	4689      	mov	r9, r1
 800da44:	bf08      	it	eq
 800da46:	f8ca 3000 	streq.w	r3, [sl]
 800da4a:	e62f      	b.n	800d6ac <_strtod_l+0x494>
 800da4c:	f04f 32ff 	mov.w	r2, #4294967295
 800da50:	fa02 f303 	lsl.w	r3, r2, r3
 800da54:	ea03 0808 	and.w	r8, r3, r8
 800da58:	e6e0      	b.n	800d81c <_strtod_l+0x604>
 800da5a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800da5e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800da62:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800da66:	35e2      	adds	r5, #226	; 0xe2
 800da68:	fa07 f505 	lsl.w	r5, r7, r5
 800da6c:	970f      	str	r7, [sp, #60]	; 0x3c
 800da6e:	e747      	b.n	800d900 <_strtod_l+0x6e8>
 800da70:	2301      	movs	r3, #1
 800da72:	2500      	movs	r5, #0
 800da74:	930f      	str	r3, [sp, #60]	; 0x3c
 800da76:	e743      	b.n	800d900 <_strtod_l+0x6e8>
 800da78:	463a      	mov	r2, r7
 800da7a:	4650      	mov	r0, sl
 800da7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800da7e:	f002 f97b 	bl	800fd78 <__lshift>
 800da82:	901a      	str	r0, [sp, #104]	; 0x68
 800da84:	2800      	cmp	r0, #0
 800da86:	f47f af69 	bne.w	800d95c <_strtod_l+0x744>
 800da8a:	e604      	b.n	800d696 <_strtod_l+0x47e>
 800da8c:	08012150 	.word	0x08012150
 800da90:	fffffc02 	.word	0xfffffc02
 800da94:	7ff00000 	.word	0x7ff00000
 800da98:	39500000 	.word	0x39500000
 800da9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800daa0:	d165      	bne.n	800db6e <_strtod_l+0x956>
 800daa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800daa8:	b35a      	cbz	r2, 800db02 <_strtod_l+0x8ea>
 800daaa:	4a99      	ldr	r2, [pc, #612]	; (800dd10 <_strtod_l+0xaf8>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d12b      	bne.n	800db08 <_strtod_l+0x8f0>
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	4641      	mov	r1, r8
 800dab4:	b303      	cbz	r3, 800daf8 <_strtod_l+0x8e0>
 800dab6:	464a      	mov	r2, r9
 800dab8:	4b96      	ldr	r3, [pc, #600]	; (800dd14 <_strtod_l+0xafc>)
 800daba:	4013      	ands	r3, r2
 800dabc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dac0:	f04f 32ff 	mov.w	r2, #4294967295
 800dac4:	d81b      	bhi.n	800dafe <_strtod_l+0x8e6>
 800dac6:	0d1b      	lsrs	r3, r3, #20
 800dac8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dacc:	fa02 f303 	lsl.w	r3, r2, r3
 800dad0:	4299      	cmp	r1, r3
 800dad2:	d119      	bne.n	800db08 <_strtod_l+0x8f0>
 800dad4:	4b90      	ldr	r3, [pc, #576]	; (800dd18 <_strtod_l+0xb00>)
 800dad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dad8:	429a      	cmp	r2, r3
 800dada:	d102      	bne.n	800dae2 <_strtod_l+0x8ca>
 800dadc:	3101      	adds	r1, #1
 800dade:	f43f adda 	beq.w	800d696 <_strtod_l+0x47e>
 800dae2:	f04f 0800 	mov.w	r8, #0
 800dae6:	4b8b      	ldr	r3, [pc, #556]	; (800dd14 <_strtod_l+0xafc>)
 800dae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daea:	401a      	ands	r2, r3
 800daec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800daf0:	9b05      	ldr	r3, [sp, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d19a      	bne.n	800da2c <_strtod_l+0x814>
 800daf6:	e5d9      	b.n	800d6ac <_strtod_l+0x494>
 800daf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dafc:	e7e8      	b.n	800dad0 <_strtod_l+0x8b8>
 800dafe:	4613      	mov	r3, r2
 800db00:	e7e6      	b.n	800dad0 <_strtod_l+0x8b8>
 800db02:	ea53 0308 	orrs.w	r3, r3, r8
 800db06:	d081      	beq.n	800da0c <_strtod_l+0x7f4>
 800db08:	b1e5      	cbz	r5, 800db44 <_strtod_l+0x92c>
 800db0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0c:	421d      	tst	r5, r3
 800db0e:	d0ef      	beq.n	800daf0 <_strtod_l+0x8d8>
 800db10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db12:	4640      	mov	r0, r8
 800db14:	4649      	mov	r1, r9
 800db16:	9a05      	ldr	r2, [sp, #20]
 800db18:	b1c3      	cbz	r3, 800db4c <_strtod_l+0x934>
 800db1a:	f7ff fb59 	bl	800d1d0 <sulp>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db26:	f7f2 fb39 	bl	800019c <__adddf3>
 800db2a:	4680      	mov	r8, r0
 800db2c:	4689      	mov	r9, r1
 800db2e:	e7df      	b.n	800daf0 <_strtod_l+0x8d8>
 800db30:	4013      	ands	r3, r2
 800db32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800db36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800db3a:	f04f 38ff 	mov.w	r8, #4294967295
 800db3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800db42:	e7d5      	b.n	800daf0 <_strtod_l+0x8d8>
 800db44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db46:	ea13 0f08 	tst.w	r3, r8
 800db4a:	e7e0      	b.n	800db0e <_strtod_l+0x8f6>
 800db4c:	f7ff fb40 	bl	800d1d0 <sulp>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db58:	f7f2 fb1e 	bl	8000198 <__aeabi_dsub>
 800db5c:	2200      	movs	r2, #0
 800db5e:	2300      	movs	r3, #0
 800db60:	4680      	mov	r8, r0
 800db62:	4689      	mov	r9, r1
 800db64:	f7f2 ff38 	bl	80009d8 <__aeabi_dcmpeq>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d0c1      	beq.n	800daf0 <_strtod_l+0x8d8>
 800db6c:	e608      	b.n	800d780 <_strtod_l+0x568>
 800db6e:	4658      	mov	r0, fp
 800db70:	9904      	ldr	r1, [sp, #16]
 800db72:	f002 faef 	bl	8010154 <__ratio>
 800db76:	2200      	movs	r2, #0
 800db78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db7c:	4606      	mov	r6, r0
 800db7e:	460f      	mov	r7, r1
 800db80:	f7f2 ff3e 	bl	8000a00 <__aeabi_dcmple>
 800db84:	2800      	cmp	r0, #0
 800db86:	d070      	beq.n	800dc6a <_strtod_l+0xa52>
 800db88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d042      	beq.n	800dc14 <_strtod_l+0x9fc>
 800db8e:	2600      	movs	r6, #0
 800db90:	4f62      	ldr	r7, [pc, #392]	; (800dd1c <_strtod_l+0xb04>)
 800db92:	4d62      	ldr	r5, [pc, #392]	; (800dd1c <_strtod_l+0xb04>)
 800db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db9a:	0d1b      	lsrs	r3, r3, #20
 800db9c:	051b      	lsls	r3, r3, #20
 800db9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dba2:	4b5f      	ldr	r3, [pc, #380]	; (800dd20 <_strtod_l+0xb08>)
 800dba4:	429a      	cmp	r2, r3
 800dba6:	f040 80c3 	bne.w	800dd30 <_strtod_l+0xb18>
 800dbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbac:	4640      	mov	r0, r8
 800dbae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	f002 f9f8 	bl	800ffa8 <__ulp>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	4639      	mov	r1, r7
 800dbc0:	f7f2 fca2 	bl	8000508 <__aeabi_dmul>
 800dbc4:	4642      	mov	r2, r8
 800dbc6:	464b      	mov	r3, r9
 800dbc8:	f7f2 fae8 	bl	800019c <__adddf3>
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4951      	ldr	r1, [pc, #324]	; (800dd14 <_strtod_l+0xafc>)
 800dbd0:	4a54      	ldr	r2, [pc, #336]	; (800dd24 <_strtod_l+0xb0c>)
 800dbd2:	4019      	ands	r1, r3
 800dbd4:	4291      	cmp	r1, r2
 800dbd6:	4680      	mov	r8, r0
 800dbd8:	d95d      	bls.n	800dc96 <_strtod_l+0xa7e>
 800dbda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbdc:	4b4e      	ldr	r3, [pc, #312]	; (800dd18 <_strtod_l+0xb00>)
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d103      	bne.n	800dbea <_strtod_l+0x9d2>
 800dbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	f43f ad56 	beq.w	800d696 <_strtod_l+0x47e>
 800dbea:	f04f 38ff 	mov.w	r8, #4294967295
 800dbee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800dd18 <_strtod_l+0xb00>
 800dbf2:	4650      	mov	r0, sl
 800dbf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dbf6:	f001 fea7 	bl	800f948 <_Bfree>
 800dbfa:	4650      	mov	r0, sl
 800dbfc:	9906      	ldr	r1, [sp, #24]
 800dbfe:	f001 fea3 	bl	800f948 <_Bfree>
 800dc02:	4650      	mov	r0, sl
 800dc04:	9904      	ldr	r1, [sp, #16]
 800dc06:	f001 fe9f 	bl	800f948 <_Bfree>
 800dc0a:	4659      	mov	r1, fp
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	f001 fe9b 	bl	800f948 <_Bfree>
 800dc12:	e627      	b.n	800d864 <_strtod_l+0x64c>
 800dc14:	f1b8 0f00 	cmp.w	r8, #0
 800dc18:	d119      	bne.n	800dc4e <_strtod_l+0xa36>
 800dc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc20:	b9e3      	cbnz	r3, 800dc5c <_strtod_l+0xa44>
 800dc22:	2200      	movs	r2, #0
 800dc24:	4630      	mov	r0, r6
 800dc26:	4639      	mov	r1, r7
 800dc28:	4b3c      	ldr	r3, [pc, #240]	; (800dd1c <_strtod_l+0xb04>)
 800dc2a:	f7f2 fedf 	bl	80009ec <__aeabi_dcmplt>
 800dc2e:	b9c8      	cbnz	r0, 800dc64 <_strtod_l+0xa4c>
 800dc30:	2200      	movs	r2, #0
 800dc32:	4630      	mov	r0, r6
 800dc34:	4639      	mov	r1, r7
 800dc36:	4b3c      	ldr	r3, [pc, #240]	; (800dd28 <_strtod_l+0xb10>)
 800dc38:	f7f2 fc66 	bl	8000508 <__aeabi_dmul>
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	460d      	mov	r5, r1
 800dc40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dc44:	9416      	str	r4, [sp, #88]	; 0x58
 800dc46:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc48:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800dc4c:	e7a2      	b.n	800db94 <_strtod_l+0x97c>
 800dc4e:	f1b8 0f01 	cmp.w	r8, #1
 800dc52:	d103      	bne.n	800dc5c <_strtod_l+0xa44>
 800dc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f43f ad92 	beq.w	800d780 <_strtod_l+0x568>
 800dc5c:	2600      	movs	r6, #0
 800dc5e:	2400      	movs	r4, #0
 800dc60:	4f32      	ldr	r7, [pc, #200]	; (800dd2c <_strtod_l+0xb14>)
 800dc62:	e796      	b.n	800db92 <_strtod_l+0x97a>
 800dc64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dc66:	4d30      	ldr	r5, [pc, #192]	; (800dd28 <_strtod_l+0xb10>)
 800dc68:	e7ea      	b.n	800dc40 <_strtod_l+0xa28>
 800dc6a:	4b2f      	ldr	r3, [pc, #188]	; (800dd28 <_strtod_l+0xb10>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	4630      	mov	r0, r6
 800dc70:	4639      	mov	r1, r7
 800dc72:	f7f2 fc49 	bl	8000508 <__aeabi_dmul>
 800dc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc78:	4604      	mov	r4, r0
 800dc7a:	460d      	mov	r5, r1
 800dc7c:	b933      	cbnz	r3, 800dc8c <_strtod_l+0xa74>
 800dc7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc82:	9010      	str	r0, [sp, #64]	; 0x40
 800dc84:	9311      	str	r3, [sp, #68]	; 0x44
 800dc86:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800dc8a:	e783      	b.n	800db94 <_strtod_l+0x97c>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800dc94:	e7f7      	b.n	800dc86 <_strtod_l+0xa6e>
 800dc96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1a8      	bne.n	800dbf2 <_strtod_l+0x9da>
 800dca0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dca6:	0d1b      	lsrs	r3, r3, #20
 800dca8:	051b      	lsls	r3, r3, #20
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d1a1      	bne.n	800dbf2 <_strtod_l+0x9da>
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f3 f9e7 	bl	8001084 <__aeabi_d2lz>
 800dcb6:	f7f2 fbf9 	bl	80004ac <__aeabi_l2d>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	f7f2 fa69 	bl	8000198 <__aeabi_dsub>
 800dcc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dccc:	ea43 0308 	orr.w	r3, r3, r8
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	d066      	beq.n	800dda6 <_strtod_l+0xb8e>
 800dcd8:	a309      	add	r3, pc, #36	; (adr r3, 800dd00 <_strtod_l+0xae8>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fe85 	bl	80009ec <__aeabi_dcmplt>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f47f ace2 	bne.w	800d6ac <_strtod_l+0x494>
 800dce8:	a307      	add	r3, pc, #28	; (adr r3, 800dd08 <_strtod_l+0xaf0>)
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 fe99 	bl	8000a28 <__aeabi_dcmpgt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f43f af7b 	beq.w	800dbf2 <_strtod_l+0x9da>
 800dcfc:	e4d6      	b.n	800d6ac <_strtod_l+0x494>
 800dcfe:	bf00      	nop
 800dd00:	94a03595 	.word	0x94a03595
 800dd04:	3fdfffff 	.word	0x3fdfffff
 800dd08:	35afe535 	.word	0x35afe535
 800dd0c:	3fe00000 	.word	0x3fe00000
 800dd10:	000fffff 	.word	0x000fffff
 800dd14:	7ff00000 	.word	0x7ff00000
 800dd18:	7fefffff 	.word	0x7fefffff
 800dd1c:	3ff00000 	.word	0x3ff00000
 800dd20:	7fe00000 	.word	0x7fe00000
 800dd24:	7c9fffff 	.word	0x7c9fffff
 800dd28:	3fe00000 	.word	0x3fe00000
 800dd2c:	bff00000 	.word	0xbff00000
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	b313      	cbz	r3, 800dd7a <_strtod_l+0xb62>
 800dd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd3a:	d81e      	bhi.n	800dd7a <_strtod_l+0xb62>
 800dd3c:	a326      	add	r3, pc, #152	; (adr r3, 800ddd8 <_strtod_l+0xbc0>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	4620      	mov	r0, r4
 800dd44:	4629      	mov	r1, r5
 800dd46:	f7f2 fe5b 	bl	8000a00 <__aeabi_dcmple>
 800dd4a:	b190      	cbz	r0, 800dd72 <_strtod_l+0xb5a>
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7f2 feb2 	bl	8000ab8 <__aeabi_d2uiz>
 800dd54:	2801      	cmp	r0, #1
 800dd56:	bf38      	it	cc
 800dd58:	2001      	movcc	r0, #1
 800dd5a:	f7f2 fb5b 	bl	8000414 <__aeabi_ui2d>
 800dd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd60:	4604      	mov	r4, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	b9d3      	cbnz	r3, 800dd9c <_strtod_l+0xb84>
 800dd66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd6a:	9012      	str	r0, [sp, #72]	; 0x48
 800dd6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800dd72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800dd78:	1a9f      	subs	r7, r3, r2
 800dd7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd7e:	f002 f913 	bl	800ffa8 <__ulp>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4630      	mov	r0, r6
 800dd88:	4639      	mov	r1, r7
 800dd8a:	f7f2 fbbd 	bl	8000508 <__aeabi_dmul>
 800dd8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dd92:	f7f2 fa03 	bl	800019c <__adddf3>
 800dd96:	4680      	mov	r8, r0
 800dd98:	4689      	mov	r9, r1
 800dd9a:	e77e      	b.n	800dc9a <_strtod_l+0xa82>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800dda4:	e7e3      	b.n	800dd6e <_strtod_l+0xb56>
 800dda6:	a30e      	add	r3, pc, #56	; (adr r3, 800dde0 <_strtod_l+0xbc8>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fe1e 	bl	80009ec <__aeabi_dcmplt>
 800ddb0:	e7a1      	b.n	800dcf6 <_strtod_l+0xade>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	930a      	str	r3, [sp, #40]	; 0x28
 800ddb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ddba:	6013      	str	r3, [r2, #0]
 800ddbc:	f7ff ba71 	b.w	800d2a2 <_strtod_l+0x8a>
 800ddc0:	2a65      	cmp	r2, #101	; 0x65
 800ddc2:	f43f ab63 	beq.w	800d48c <_strtod_l+0x274>
 800ddc6:	2a45      	cmp	r2, #69	; 0x45
 800ddc8:	f43f ab60 	beq.w	800d48c <_strtod_l+0x274>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	f7ff bb95 	b.w	800d4fc <_strtod_l+0x2e4>
 800ddd2:	bf00      	nop
 800ddd4:	f3af 8000 	nop.w
 800ddd8:	ffc00000 	.word	0xffc00000
 800dddc:	41dfffff 	.word	0x41dfffff
 800dde0:	94a03595 	.word	0x94a03595
 800dde4:	3fcfffff 	.word	0x3fcfffff

0800dde8 <_strtod_r>:
 800dde8:	4b01      	ldr	r3, [pc, #4]	; (800ddf0 <_strtod_r+0x8>)
 800ddea:	f7ff ba15 	b.w	800d218 <_strtod_l>
 800ddee:	bf00      	nop
 800ddf0:	20000098 	.word	0x20000098

0800ddf4 <_strtol_l.constprop.0>:
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddfa:	4680      	mov	r8, r0
 800ddfc:	d001      	beq.n	800de02 <_strtol_l.constprop.0+0xe>
 800ddfe:	2b24      	cmp	r3, #36	; 0x24
 800de00:	d906      	bls.n	800de10 <_strtol_l.constprop.0+0x1c>
 800de02:	f7fe f993 	bl	800c12c <__errno>
 800de06:	2316      	movs	r3, #22
 800de08:	6003      	str	r3, [r0, #0]
 800de0a:	2000      	movs	r0, #0
 800de0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de10:	460d      	mov	r5, r1
 800de12:	4f35      	ldr	r7, [pc, #212]	; (800dee8 <_strtol_l.constprop.0+0xf4>)
 800de14:	4628      	mov	r0, r5
 800de16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de1a:	5de6      	ldrb	r6, [r4, r7]
 800de1c:	f016 0608 	ands.w	r6, r6, #8
 800de20:	d1f8      	bne.n	800de14 <_strtol_l.constprop.0+0x20>
 800de22:	2c2d      	cmp	r4, #45	; 0x2d
 800de24:	d12f      	bne.n	800de86 <_strtol_l.constprop.0+0x92>
 800de26:	2601      	movs	r6, #1
 800de28:	782c      	ldrb	r4, [r5, #0]
 800de2a:	1c85      	adds	r5, r0, #2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d057      	beq.n	800dee0 <_strtol_l.constprop.0+0xec>
 800de30:	2b10      	cmp	r3, #16
 800de32:	d109      	bne.n	800de48 <_strtol_l.constprop.0+0x54>
 800de34:	2c30      	cmp	r4, #48	; 0x30
 800de36:	d107      	bne.n	800de48 <_strtol_l.constprop.0+0x54>
 800de38:	7828      	ldrb	r0, [r5, #0]
 800de3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800de3e:	2858      	cmp	r0, #88	; 0x58
 800de40:	d149      	bne.n	800ded6 <_strtol_l.constprop.0+0xe2>
 800de42:	2310      	movs	r3, #16
 800de44:	786c      	ldrb	r4, [r5, #1]
 800de46:	3502      	adds	r5, #2
 800de48:	2700      	movs	r7, #0
 800de4a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800de4e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800de52:	fbbe f9f3 	udiv	r9, lr, r3
 800de56:	4638      	mov	r0, r7
 800de58:	fb03 ea19 	mls	sl, r3, r9, lr
 800de5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800de60:	f1bc 0f09 	cmp.w	ip, #9
 800de64:	d814      	bhi.n	800de90 <_strtol_l.constprop.0+0x9c>
 800de66:	4664      	mov	r4, ip
 800de68:	42a3      	cmp	r3, r4
 800de6a:	dd22      	ble.n	800deb2 <_strtol_l.constprop.0+0xbe>
 800de6c:	2f00      	cmp	r7, #0
 800de6e:	db1d      	blt.n	800deac <_strtol_l.constprop.0+0xb8>
 800de70:	4581      	cmp	r9, r0
 800de72:	d31b      	bcc.n	800deac <_strtol_l.constprop.0+0xb8>
 800de74:	d101      	bne.n	800de7a <_strtol_l.constprop.0+0x86>
 800de76:	45a2      	cmp	sl, r4
 800de78:	db18      	blt.n	800deac <_strtol_l.constprop.0+0xb8>
 800de7a:	2701      	movs	r7, #1
 800de7c:	fb00 4003 	mla	r0, r0, r3, r4
 800de80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de84:	e7ea      	b.n	800de5c <_strtol_l.constprop.0+0x68>
 800de86:	2c2b      	cmp	r4, #43	; 0x2b
 800de88:	bf04      	itt	eq
 800de8a:	782c      	ldrbeq	r4, [r5, #0]
 800de8c:	1c85      	addeq	r5, r0, #2
 800de8e:	e7cd      	b.n	800de2c <_strtol_l.constprop.0+0x38>
 800de90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800de94:	f1bc 0f19 	cmp.w	ip, #25
 800de98:	d801      	bhi.n	800de9e <_strtol_l.constprop.0+0xaa>
 800de9a:	3c37      	subs	r4, #55	; 0x37
 800de9c:	e7e4      	b.n	800de68 <_strtol_l.constprop.0+0x74>
 800de9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dea2:	f1bc 0f19 	cmp.w	ip, #25
 800dea6:	d804      	bhi.n	800deb2 <_strtol_l.constprop.0+0xbe>
 800dea8:	3c57      	subs	r4, #87	; 0x57
 800deaa:	e7dd      	b.n	800de68 <_strtol_l.constprop.0+0x74>
 800deac:	f04f 37ff 	mov.w	r7, #4294967295
 800deb0:	e7e6      	b.n	800de80 <_strtol_l.constprop.0+0x8c>
 800deb2:	2f00      	cmp	r7, #0
 800deb4:	da07      	bge.n	800dec6 <_strtol_l.constprop.0+0xd2>
 800deb6:	2322      	movs	r3, #34	; 0x22
 800deb8:	4670      	mov	r0, lr
 800deba:	f8c8 3000 	str.w	r3, [r8]
 800debe:	2a00      	cmp	r2, #0
 800dec0:	d0a4      	beq.n	800de0c <_strtol_l.constprop.0+0x18>
 800dec2:	1e69      	subs	r1, r5, #1
 800dec4:	e005      	b.n	800ded2 <_strtol_l.constprop.0+0xde>
 800dec6:	b106      	cbz	r6, 800deca <_strtol_l.constprop.0+0xd6>
 800dec8:	4240      	negs	r0, r0
 800deca:	2a00      	cmp	r2, #0
 800decc:	d09e      	beq.n	800de0c <_strtol_l.constprop.0+0x18>
 800dece:	2f00      	cmp	r7, #0
 800ded0:	d1f7      	bne.n	800dec2 <_strtol_l.constprop.0+0xce>
 800ded2:	6011      	str	r1, [r2, #0]
 800ded4:	e79a      	b.n	800de0c <_strtol_l.constprop.0+0x18>
 800ded6:	2430      	movs	r4, #48	; 0x30
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1b5      	bne.n	800de48 <_strtol_l.constprop.0+0x54>
 800dedc:	2308      	movs	r3, #8
 800dede:	e7b3      	b.n	800de48 <_strtol_l.constprop.0+0x54>
 800dee0:	2c30      	cmp	r4, #48	; 0x30
 800dee2:	d0a9      	beq.n	800de38 <_strtol_l.constprop.0+0x44>
 800dee4:	230a      	movs	r3, #10
 800dee6:	e7af      	b.n	800de48 <_strtol_l.constprop.0+0x54>
 800dee8:	08012179 	.word	0x08012179

0800deec <_strtol_r>:
 800deec:	f7ff bf82 	b.w	800ddf4 <_strtol_l.constprop.0>

0800def0 <__swbuf_r>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	460e      	mov	r6, r1
 800def4:	4614      	mov	r4, r2
 800def6:	4605      	mov	r5, r0
 800def8:	b118      	cbz	r0, 800df02 <__swbuf_r+0x12>
 800defa:	6983      	ldr	r3, [r0, #24]
 800defc:	b90b      	cbnz	r3, 800df02 <__swbuf_r+0x12>
 800defe:	f001 f847 	bl	800ef90 <__sinit>
 800df02:	4b21      	ldr	r3, [pc, #132]	; (800df88 <__swbuf_r+0x98>)
 800df04:	429c      	cmp	r4, r3
 800df06:	d12b      	bne.n	800df60 <__swbuf_r+0x70>
 800df08:	686c      	ldr	r4, [r5, #4]
 800df0a:	69a3      	ldr	r3, [r4, #24]
 800df0c:	60a3      	str	r3, [r4, #8]
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	071a      	lsls	r2, r3, #28
 800df12:	d52f      	bpl.n	800df74 <__swbuf_r+0x84>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	b36b      	cbz	r3, 800df74 <__swbuf_r+0x84>
 800df18:	6923      	ldr	r3, [r4, #16]
 800df1a:	6820      	ldr	r0, [r4, #0]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	1ac0      	subs	r0, r0, r3
 800df20:	6963      	ldr	r3, [r4, #20]
 800df22:	4637      	mov	r7, r6
 800df24:	4283      	cmp	r3, r0
 800df26:	dc04      	bgt.n	800df32 <__swbuf_r+0x42>
 800df28:	4621      	mov	r1, r4
 800df2a:	4628      	mov	r0, r5
 800df2c:	f000 ff9c 	bl	800ee68 <_fflush_r>
 800df30:	bb30      	cbnz	r0, 800df80 <__swbuf_r+0x90>
 800df32:	68a3      	ldr	r3, [r4, #8]
 800df34:	3001      	adds	r0, #1
 800df36:	3b01      	subs	r3, #1
 800df38:	60a3      	str	r3, [r4, #8]
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	6022      	str	r2, [r4, #0]
 800df40:	701e      	strb	r6, [r3, #0]
 800df42:	6963      	ldr	r3, [r4, #20]
 800df44:	4283      	cmp	r3, r0
 800df46:	d004      	beq.n	800df52 <__swbuf_r+0x62>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	07db      	lsls	r3, r3, #31
 800df4c:	d506      	bpl.n	800df5c <__swbuf_r+0x6c>
 800df4e:	2e0a      	cmp	r6, #10
 800df50:	d104      	bne.n	800df5c <__swbuf_r+0x6c>
 800df52:	4621      	mov	r1, r4
 800df54:	4628      	mov	r0, r5
 800df56:	f000 ff87 	bl	800ee68 <_fflush_r>
 800df5a:	b988      	cbnz	r0, 800df80 <__swbuf_r+0x90>
 800df5c:	4638      	mov	r0, r7
 800df5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df60:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <__swbuf_r+0x9c>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d101      	bne.n	800df6a <__swbuf_r+0x7a>
 800df66:	68ac      	ldr	r4, [r5, #8]
 800df68:	e7cf      	b.n	800df0a <__swbuf_r+0x1a>
 800df6a:	4b09      	ldr	r3, [pc, #36]	; (800df90 <__swbuf_r+0xa0>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	bf08      	it	eq
 800df70:	68ec      	ldreq	r4, [r5, #12]
 800df72:	e7ca      	b.n	800df0a <__swbuf_r+0x1a>
 800df74:	4621      	mov	r1, r4
 800df76:	4628      	mov	r0, r5
 800df78:	f000 f80c 	bl	800df94 <__swsetup_r>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d0cb      	beq.n	800df18 <__swbuf_r+0x28>
 800df80:	f04f 37ff 	mov.w	r7, #4294967295
 800df84:	e7ea      	b.n	800df5c <__swbuf_r+0x6c>
 800df86:	bf00      	nop
 800df88:	0801232c 	.word	0x0801232c
 800df8c:	0801234c 	.word	0x0801234c
 800df90:	0801230c 	.word	0x0801230c

0800df94 <__swsetup_r>:
 800df94:	4b32      	ldr	r3, [pc, #200]	; (800e060 <__swsetup_r+0xcc>)
 800df96:	b570      	push	{r4, r5, r6, lr}
 800df98:	681d      	ldr	r5, [r3, #0]
 800df9a:	4606      	mov	r6, r0
 800df9c:	460c      	mov	r4, r1
 800df9e:	b125      	cbz	r5, 800dfaa <__swsetup_r+0x16>
 800dfa0:	69ab      	ldr	r3, [r5, #24]
 800dfa2:	b913      	cbnz	r3, 800dfaa <__swsetup_r+0x16>
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f000 fff3 	bl	800ef90 <__sinit>
 800dfaa:	4b2e      	ldr	r3, [pc, #184]	; (800e064 <__swsetup_r+0xd0>)
 800dfac:	429c      	cmp	r4, r3
 800dfae:	d10f      	bne.n	800dfd0 <__swsetup_r+0x3c>
 800dfb0:	686c      	ldr	r4, [r5, #4]
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfb8:	0719      	lsls	r1, r3, #28
 800dfba:	d42c      	bmi.n	800e016 <__swsetup_r+0x82>
 800dfbc:	06dd      	lsls	r5, r3, #27
 800dfbe:	d411      	bmi.n	800dfe4 <__swsetup_r+0x50>
 800dfc0:	2309      	movs	r3, #9
 800dfc2:	6033      	str	r3, [r6, #0]
 800dfc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfcc:	81a3      	strh	r3, [r4, #12]
 800dfce:	e03e      	b.n	800e04e <__swsetup_r+0xba>
 800dfd0:	4b25      	ldr	r3, [pc, #148]	; (800e068 <__swsetup_r+0xd4>)
 800dfd2:	429c      	cmp	r4, r3
 800dfd4:	d101      	bne.n	800dfda <__swsetup_r+0x46>
 800dfd6:	68ac      	ldr	r4, [r5, #8]
 800dfd8:	e7eb      	b.n	800dfb2 <__swsetup_r+0x1e>
 800dfda:	4b24      	ldr	r3, [pc, #144]	; (800e06c <__swsetup_r+0xd8>)
 800dfdc:	429c      	cmp	r4, r3
 800dfde:	bf08      	it	eq
 800dfe0:	68ec      	ldreq	r4, [r5, #12]
 800dfe2:	e7e6      	b.n	800dfb2 <__swsetup_r+0x1e>
 800dfe4:	0758      	lsls	r0, r3, #29
 800dfe6:	d512      	bpl.n	800e00e <__swsetup_r+0x7a>
 800dfe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfea:	b141      	cbz	r1, 800dffe <__swsetup_r+0x6a>
 800dfec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dff0:	4299      	cmp	r1, r3
 800dff2:	d002      	beq.n	800dffa <__swsetup_r+0x66>
 800dff4:	4630      	mov	r0, r6
 800dff6:	f7fe f8e1 	bl	800c1bc <_free_r>
 800dffa:	2300      	movs	r3, #0
 800dffc:	6363      	str	r3, [r4, #52]	; 0x34
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e004:	81a3      	strh	r3, [r4, #12]
 800e006:	2300      	movs	r3, #0
 800e008:	6063      	str	r3, [r4, #4]
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f043 0308 	orr.w	r3, r3, #8
 800e014:	81a3      	strh	r3, [r4, #12]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	b94b      	cbnz	r3, 800e02e <__swsetup_r+0x9a>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e024:	d003      	beq.n	800e02e <__swsetup_r+0x9a>
 800e026:	4621      	mov	r1, r4
 800e028:	4630      	mov	r0, r6
 800e02a:	f001 fbe1 	bl	800f7f0 <__smakebuf_r>
 800e02e:	89a0      	ldrh	r0, [r4, #12]
 800e030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e034:	f010 0301 	ands.w	r3, r0, #1
 800e038:	d00a      	beq.n	800e050 <__swsetup_r+0xbc>
 800e03a:	2300      	movs	r3, #0
 800e03c:	60a3      	str	r3, [r4, #8]
 800e03e:	6963      	ldr	r3, [r4, #20]
 800e040:	425b      	negs	r3, r3
 800e042:	61a3      	str	r3, [r4, #24]
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	b943      	cbnz	r3, 800e05a <__swsetup_r+0xc6>
 800e048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e04c:	d1ba      	bne.n	800dfc4 <__swsetup_r+0x30>
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	0781      	lsls	r1, r0, #30
 800e052:	bf58      	it	pl
 800e054:	6963      	ldrpl	r3, [r4, #20]
 800e056:	60a3      	str	r3, [r4, #8]
 800e058:	e7f4      	b.n	800e044 <__swsetup_r+0xb0>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e7f7      	b.n	800e04e <__swsetup_r+0xba>
 800e05e:	bf00      	nop
 800e060:	20000030 	.word	0x20000030
 800e064:	0801232c 	.word	0x0801232c
 800e068:	0801234c 	.word	0x0801234c
 800e06c:	0801230c 	.word	0x0801230c

0800e070 <quorem>:
 800e070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	6903      	ldr	r3, [r0, #16]
 800e076:	690c      	ldr	r4, [r1, #16]
 800e078:	4607      	mov	r7, r0
 800e07a:	42a3      	cmp	r3, r4
 800e07c:	f2c0 8082 	blt.w	800e184 <quorem+0x114>
 800e080:	3c01      	subs	r4, #1
 800e082:	f100 0514 	add.w	r5, r0, #20
 800e086:	f101 0814 	add.w	r8, r1, #20
 800e08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e098:	3301      	adds	r3, #1
 800e09a:	429a      	cmp	r2, r3
 800e09c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0a8:	d331      	bcc.n	800e10e <quorem+0x9e>
 800e0aa:	f04f 0e00 	mov.w	lr, #0
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	46ac      	mov	ip, r5
 800e0b2:	46f2      	mov	sl, lr
 800e0b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0b8:	b293      	uxth	r3, r2
 800e0ba:	fb06 e303 	mla	r3, r6, r3, lr
 800e0be:	0c12      	lsrs	r2, r2, #16
 800e0c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	fb06 e202 	mla	r2, r6, r2, lr
 800e0ca:	ebaa 0303 	sub.w	r3, sl, r3
 800e0ce:	f8dc a000 	ldr.w	sl, [ip]
 800e0d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e0d6:	fa1f fa8a 	uxth.w	sl, sl
 800e0da:	4453      	add	r3, sl
 800e0dc:	f8dc a000 	ldr.w	sl, [ip]
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e0e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0f0:	4581      	cmp	r9, r0
 800e0f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e0f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e0fa:	d2db      	bcs.n	800e0b4 <quorem+0x44>
 800e0fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e100:	b92b      	cbnz	r3, 800e10e <quorem+0x9e>
 800e102:	9b01      	ldr	r3, [sp, #4]
 800e104:	3b04      	subs	r3, #4
 800e106:	429d      	cmp	r5, r3
 800e108:	461a      	mov	r2, r3
 800e10a:	d32f      	bcc.n	800e16c <quorem+0xfc>
 800e10c:	613c      	str	r4, [r7, #16]
 800e10e:	4638      	mov	r0, r7
 800e110:	f001 fea2 	bl	800fe58 <__mcmp>
 800e114:	2800      	cmp	r0, #0
 800e116:	db25      	blt.n	800e164 <quorem+0xf4>
 800e118:	4628      	mov	r0, r5
 800e11a:	f04f 0c00 	mov.w	ip, #0
 800e11e:	3601      	adds	r6, #1
 800e120:	f858 1b04 	ldr.w	r1, [r8], #4
 800e124:	f8d0 e000 	ldr.w	lr, [r0]
 800e128:	b28b      	uxth	r3, r1
 800e12a:	ebac 0303 	sub.w	r3, ip, r3
 800e12e:	fa1f f28e 	uxth.w	r2, lr
 800e132:	4413      	add	r3, r2
 800e134:	0c0a      	lsrs	r2, r1, #16
 800e136:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e13a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e13e:	b29b      	uxth	r3, r3
 800e140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e144:	45c1      	cmp	r9, r8
 800e146:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e14a:	f840 3b04 	str.w	r3, [r0], #4
 800e14e:	d2e7      	bcs.n	800e120 <quorem+0xb0>
 800e150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e154:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e158:	b922      	cbnz	r2, 800e164 <quorem+0xf4>
 800e15a:	3b04      	subs	r3, #4
 800e15c:	429d      	cmp	r5, r3
 800e15e:	461a      	mov	r2, r3
 800e160:	d30a      	bcc.n	800e178 <quorem+0x108>
 800e162:	613c      	str	r4, [r7, #16]
 800e164:	4630      	mov	r0, r6
 800e166:	b003      	add	sp, #12
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	6812      	ldr	r2, [r2, #0]
 800e16e:	3b04      	subs	r3, #4
 800e170:	2a00      	cmp	r2, #0
 800e172:	d1cb      	bne.n	800e10c <quorem+0x9c>
 800e174:	3c01      	subs	r4, #1
 800e176:	e7c6      	b.n	800e106 <quorem+0x96>
 800e178:	6812      	ldr	r2, [r2, #0]
 800e17a:	3b04      	subs	r3, #4
 800e17c:	2a00      	cmp	r2, #0
 800e17e:	d1f0      	bne.n	800e162 <quorem+0xf2>
 800e180:	3c01      	subs	r4, #1
 800e182:	e7eb      	b.n	800e15c <quorem+0xec>
 800e184:	2000      	movs	r0, #0
 800e186:	e7ee      	b.n	800e166 <quorem+0xf6>

0800e188 <_dtoa_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4616      	mov	r6, r2
 800e18e:	461f      	mov	r7, r3
 800e190:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e192:	b099      	sub	sp, #100	; 0x64
 800e194:	4605      	mov	r5, r0
 800e196:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e19a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e19e:	b974      	cbnz	r4, 800e1be <_dtoa_r+0x36>
 800e1a0:	2010      	movs	r0, #16
 800e1a2:	f7fd ffed 	bl	800c180 <malloc>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	6268      	str	r0, [r5, #36]	; 0x24
 800e1aa:	b920      	cbnz	r0, 800e1b6 <_dtoa_r+0x2e>
 800e1ac:	21ea      	movs	r1, #234	; 0xea
 800e1ae:	4ba8      	ldr	r3, [pc, #672]	; (800e450 <_dtoa_r+0x2c8>)
 800e1b0:	48a8      	ldr	r0, [pc, #672]	; (800e454 <_dtoa_r+0x2cc>)
 800e1b2:	f002 fa2d 	bl	8010610 <__assert_func>
 800e1b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1ba:	6004      	str	r4, [r0, #0]
 800e1bc:	60c4      	str	r4, [r0, #12]
 800e1be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1c0:	6819      	ldr	r1, [r3, #0]
 800e1c2:	b151      	cbz	r1, 800e1da <_dtoa_r+0x52>
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	4093      	lsls	r3, r2
 800e1ca:	604a      	str	r2, [r1, #4]
 800e1cc:	608b      	str	r3, [r1, #8]
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f001 fbba 	bl	800f948 <_Bfree>
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	1e3b      	subs	r3, r7, #0
 800e1dc:	bfaf      	iteee	ge
 800e1de:	2300      	movge	r3, #0
 800e1e0:	2201      	movlt	r2, #1
 800e1e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e1e6:	9305      	strlt	r3, [sp, #20]
 800e1e8:	bfa8      	it	ge
 800e1ea:	f8c8 3000 	strge.w	r3, [r8]
 800e1ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e1f2:	4b99      	ldr	r3, [pc, #612]	; (800e458 <_dtoa_r+0x2d0>)
 800e1f4:	bfb8      	it	lt
 800e1f6:	f8c8 2000 	strlt.w	r2, [r8]
 800e1fa:	ea33 0309 	bics.w	r3, r3, r9
 800e1fe:	d119      	bne.n	800e234 <_dtoa_r+0xac>
 800e200:	f242 730f 	movw	r3, #9999	; 0x270f
 800e204:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e20c:	4333      	orrs	r3, r6
 800e20e:	f000 857f 	beq.w	800ed10 <_dtoa_r+0xb88>
 800e212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e214:	b953      	cbnz	r3, 800e22c <_dtoa_r+0xa4>
 800e216:	4b91      	ldr	r3, [pc, #580]	; (800e45c <_dtoa_r+0x2d4>)
 800e218:	e022      	b.n	800e260 <_dtoa_r+0xd8>
 800e21a:	4b91      	ldr	r3, [pc, #580]	; (800e460 <_dtoa_r+0x2d8>)
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	3308      	adds	r3, #8
 800e220:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	9803      	ldr	r0, [sp, #12]
 800e226:	b019      	add	sp, #100	; 0x64
 800e228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22c:	4b8b      	ldr	r3, [pc, #556]	; (800e45c <_dtoa_r+0x2d4>)
 800e22e:	9303      	str	r3, [sp, #12]
 800e230:	3303      	adds	r3, #3
 800e232:	e7f5      	b.n	800e220 <_dtoa_r+0x98>
 800e234:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e238:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e240:	2200      	movs	r2, #0
 800e242:	2300      	movs	r3, #0
 800e244:	f7f2 fbc8 	bl	80009d8 <__aeabi_dcmpeq>
 800e248:	4680      	mov	r8, r0
 800e24a:	b158      	cbz	r0, 800e264 <_dtoa_r+0xdc>
 800e24c:	2301      	movs	r3, #1
 800e24e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 8558 	beq.w	800ed0a <_dtoa_r+0xb82>
 800e25a:	4882      	ldr	r0, [pc, #520]	; (800e464 <_dtoa_r+0x2dc>)
 800e25c:	6018      	str	r0, [r3, #0]
 800e25e:	1e43      	subs	r3, r0, #1
 800e260:	9303      	str	r3, [sp, #12]
 800e262:	e7df      	b.n	800e224 <_dtoa_r+0x9c>
 800e264:	ab16      	add	r3, sp, #88	; 0x58
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	ab17      	add	r3, sp, #92	; 0x5c
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	4628      	mov	r0, r5
 800e26e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e272:	f001 ff13 	bl	801009c <__d2b>
 800e276:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e27a:	4683      	mov	fp, r0
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	d07f      	beq.n	800e380 <_dtoa_r+0x1f8>
 800e280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e286:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e28a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e28e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e292:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e296:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e29a:	2200      	movs	r2, #0
 800e29c:	4b72      	ldr	r3, [pc, #456]	; (800e468 <_dtoa_r+0x2e0>)
 800e29e:	f7f1 ff7b 	bl	8000198 <__aeabi_dsub>
 800e2a2:	a365      	add	r3, pc, #404	; (adr r3, 800e438 <_dtoa_r+0x2b0>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f2 f92e 	bl	8000508 <__aeabi_dmul>
 800e2ac:	a364      	add	r3, pc, #400	; (adr r3, 800e440 <_dtoa_r+0x2b8>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7f1 ff73 	bl	800019c <__adddf3>
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	460f      	mov	r7, r1
 800e2bc:	f7f2 f8ba 	bl	8000434 <__aeabi_i2d>
 800e2c0:	a361      	add	r3, pc, #388	; (adr r3, 800e448 <_dtoa_r+0x2c0>)
 800e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c6:	f7f2 f91f 	bl	8000508 <__aeabi_dmul>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	4639      	mov	r1, r7
 800e2d2:	f7f1 ff63 	bl	800019c <__adddf3>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	460f      	mov	r7, r1
 800e2da:	f7f2 fbc5 	bl	8000a68 <__aeabi_d2iz>
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	f7f2 fb80 	bl	80009ec <__aeabi_dcmplt>
 800e2ec:	b148      	cbz	r0, 800e302 <_dtoa_r+0x17a>
 800e2ee:	4650      	mov	r0, sl
 800e2f0:	f7f2 f8a0 	bl	8000434 <__aeabi_i2d>
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	f7f2 fb6e 	bl	80009d8 <__aeabi_dcmpeq>
 800e2fc:	b908      	cbnz	r0, 800e302 <_dtoa_r+0x17a>
 800e2fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e302:	f1ba 0f16 	cmp.w	sl, #22
 800e306:	d858      	bhi.n	800e3ba <_dtoa_r+0x232>
 800e308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e30c:	4b57      	ldr	r3, [pc, #348]	; (800e46c <_dtoa_r+0x2e4>)
 800e30e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e316:	f7f2 fb69 	bl	80009ec <__aeabi_dcmplt>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d04f      	beq.n	800e3be <_dtoa_r+0x236>
 800e31e:	2300      	movs	r3, #0
 800e320:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e324:	930f      	str	r3, [sp, #60]	; 0x3c
 800e326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e328:	1b1c      	subs	r4, r3, r4
 800e32a:	1e63      	subs	r3, r4, #1
 800e32c:	9309      	str	r3, [sp, #36]	; 0x24
 800e32e:	bf49      	itett	mi
 800e330:	f1c4 0301 	rsbmi	r3, r4, #1
 800e334:	2300      	movpl	r3, #0
 800e336:	9306      	strmi	r3, [sp, #24]
 800e338:	2300      	movmi	r3, #0
 800e33a:	bf54      	ite	pl
 800e33c:	9306      	strpl	r3, [sp, #24]
 800e33e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e340:	f1ba 0f00 	cmp.w	sl, #0
 800e344:	db3d      	blt.n	800e3c2 <_dtoa_r+0x23a>
 800e346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e348:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e34c:	4453      	add	r3, sl
 800e34e:	9309      	str	r3, [sp, #36]	; 0x24
 800e350:	2300      	movs	r3, #0
 800e352:	930a      	str	r3, [sp, #40]	; 0x28
 800e354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e356:	2b09      	cmp	r3, #9
 800e358:	f200 808c 	bhi.w	800e474 <_dtoa_r+0x2ec>
 800e35c:	2b05      	cmp	r3, #5
 800e35e:	bfc4      	itt	gt
 800e360:	3b04      	subgt	r3, #4
 800e362:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e366:	bfc8      	it	gt
 800e368:	2400      	movgt	r4, #0
 800e36a:	f1a3 0302 	sub.w	r3, r3, #2
 800e36e:	bfd8      	it	le
 800e370:	2401      	movle	r4, #1
 800e372:	2b03      	cmp	r3, #3
 800e374:	f200 808a 	bhi.w	800e48c <_dtoa_r+0x304>
 800e378:	e8df f003 	tbb	[pc, r3]
 800e37c:	5b4d4f2d 	.word	0x5b4d4f2d
 800e380:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e384:	441c      	add	r4, r3
 800e386:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e38a:	2b20      	cmp	r3, #32
 800e38c:	bfc3      	ittte	gt
 800e38e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e392:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e396:	fa09 f303 	lslgt.w	r3, r9, r3
 800e39a:	f1c3 0320 	rsble	r3, r3, #32
 800e39e:	bfc6      	itte	gt
 800e3a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3a4:	4318      	orrgt	r0, r3
 800e3a6:	fa06 f003 	lslle.w	r0, r6, r3
 800e3aa:	f7f2 f833 	bl	8000414 <__aeabi_ui2d>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e3b4:	3c01      	subs	r4, #1
 800e3b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e3b8:	e76f      	b.n	800e29a <_dtoa_r+0x112>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e7b2      	b.n	800e324 <_dtoa_r+0x19c>
 800e3be:	900f      	str	r0, [sp, #60]	; 0x3c
 800e3c0:	e7b1      	b.n	800e326 <_dtoa_r+0x19e>
 800e3c2:	9b06      	ldr	r3, [sp, #24]
 800e3c4:	eba3 030a 	sub.w	r3, r3, sl
 800e3c8:	9306      	str	r3, [sp, #24]
 800e3ca:	f1ca 0300 	rsb	r3, sl, #0
 800e3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	930e      	str	r3, [sp, #56]	; 0x38
 800e3d4:	e7be      	b.n	800e354 <_dtoa_r+0x1cc>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	dc58      	bgt.n	800e492 <_dtoa_r+0x30a>
 800e3e0:	f04f 0901 	mov.w	r9, #1
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	f8cd 9020 	str.w	r9, [sp, #32]
 800e3ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e3f2:	6042      	str	r2, [r0, #4]
 800e3f4:	2204      	movs	r2, #4
 800e3f6:	f102 0614 	add.w	r6, r2, #20
 800e3fa:	429e      	cmp	r6, r3
 800e3fc:	6841      	ldr	r1, [r0, #4]
 800e3fe:	d94e      	bls.n	800e49e <_dtoa_r+0x316>
 800e400:	4628      	mov	r0, r5
 800e402:	f001 fa61 	bl	800f8c8 <_Balloc>
 800e406:	9003      	str	r0, [sp, #12]
 800e408:	2800      	cmp	r0, #0
 800e40a:	d14c      	bne.n	800e4a6 <_dtoa_r+0x31e>
 800e40c:	4602      	mov	r2, r0
 800e40e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e412:	4b17      	ldr	r3, [pc, #92]	; (800e470 <_dtoa_r+0x2e8>)
 800e414:	e6cc      	b.n	800e1b0 <_dtoa_r+0x28>
 800e416:	2301      	movs	r3, #1
 800e418:	e7de      	b.n	800e3d8 <_dtoa_r+0x250>
 800e41a:	2300      	movs	r3, #0
 800e41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e41e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e420:	eb0a 0903 	add.w	r9, sl, r3
 800e424:	f109 0301 	add.w	r3, r9, #1
 800e428:	2b01      	cmp	r3, #1
 800e42a:	9308      	str	r3, [sp, #32]
 800e42c:	bfb8      	it	lt
 800e42e:	2301      	movlt	r3, #1
 800e430:	e7dd      	b.n	800e3ee <_dtoa_r+0x266>
 800e432:	2301      	movs	r3, #1
 800e434:	e7f2      	b.n	800e41c <_dtoa_r+0x294>
 800e436:	bf00      	nop
 800e438:	636f4361 	.word	0x636f4361
 800e43c:	3fd287a7 	.word	0x3fd287a7
 800e440:	8b60c8b3 	.word	0x8b60c8b3
 800e444:	3fc68a28 	.word	0x3fc68a28
 800e448:	509f79fb 	.word	0x509f79fb
 800e44c:	3fd34413 	.word	0x3fd34413
 800e450:	08012286 	.word	0x08012286
 800e454:	0801229d 	.word	0x0801229d
 800e458:	7ff00000 	.word	0x7ff00000
 800e45c:	08012282 	.word	0x08012282
 800e460:	08012279 	.word	0x08012279
 800e464:	080120fd 	.word	0x080120fd
 800e468:	3ff80000 	.word	0x3ff80000
 800e46c:	08012470 	.word	0x08012470
 800e470:	080122f8 	.word	0x080122f8
 800e474:	2401      	movs	r4, #1
 800e476:	2300      	movs	r3, #0
 800e478:	940b      	str	r4, [sp, #44]	; 0x2c
 800e47a:	9322      	str	r3, [sp, #136]	; 0x88
 800e47c:	f04f 39ff 	mov.w	r9, #4294967295
 800e480:	2200      	movs	r2, #0
 800e482:	2312      	movs	r3, #18
 800e484:	f8cd 9020 	str.w	r9, [sp, #32]
 800e488:	9223      	str	r2, [sp, #140]	; 0x8c
 800e48a:	e7b0      	b.n	800e3ee <_dtoa_r+0x266>
 800e48c:	2301      	movs	r3, #1
 800e48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e490:	e7f4      	b.n	800e47c <_dtoa_r+0x2f4>
 800e492:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800e496:	464b      	mov	r3, r9
 800e498:	f8cd 9020 	str.w	r9, [sp, #32]
 800e49c:	e7a7      	b.n	800e3ee <_dtoa_r+0x266>
 800e49e:	3101      	adds	r1, #1
 800e4a0:	6041      	str	r1, [r0, #4]
 800e4a2:	0052      	lsls	r2, r2, #1
 800e4a4:	e7a7      	b.n	800e3f6 <_dtoa_r+0x26e>
 800e4a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4a8:	9a03      	ldr	r2, [sp, #12]
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	9b08      	ldr	r3, [sp, #32]
 800e4ae:	2b0e      	cmp	r3, #14
 800e4b0:	f200 80a8 	bhi.w	800e604 <_dtoa_r+0x47c>
 800e4b4:	2c00      	cmp	r4, #0
 800e4b6:	f000 80a5 	beq.w	800e604 <_dtoa_r+0x47c>
 800e4ba:	f1ba 0f00 	cmp.w	sl, #0
 800e4be:	dd34      	ble.n	800e52a <_dtoa_r+0x3a2>
 800e4c0:	4a9a      	ldr	r2, [pc, #616]	; (800e72c <_dtoa_r+0x5a4>)
 800e4c2:	f00a 030f 	and.w	r3, sl, #15
 800e4c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e4ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e4d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e4d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800e4da:	d016      	beq.n	800e50a <_dtoa_r+0x382>
 800e4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4e0:	4b93      	ldr	r3, [pc, #588]	; (800e730 <_dtoa_r+0x5a8>)
 800e4e2:	2703      	movs	r7, #3
 800e4e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4e8:	f7f2 f938 	bl	800075c <__aeabi_ddiv>
 800e4ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4f0:	f004 040f 	and.w	r4, r4, #15
 800e4f4:	4e8e      	ldr	r6, [pc, #568]	; (800e730 <_dtoa_r+0x5a8>)
 800e4f6:	b954      	cbnz	r4, 800e50e <_dtoa_r+0x386>
 800e4f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e500:	f7f2 f92c 	bl	800075c <__aeabi_ddiv>
 800e504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e508:	e029      	b.n	800e55e <_dtoa_r+0x3d6>
 800e50a:	2702      	movs	r7, #2
 800e50c:	e7f2      	b.n	800e4f4 <_dtoa_r+0x36c>
 800e50e:	07e1      	lsls	r1, r4, #31
 800e510:	d508      	bpl.n	800e524 <_dtoa_r+0x39c>
 800e512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e516:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e51a:	f7f1 fff5 	bl	8000508 <__aeabi_dmul>
 800e51e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e522:	3701      	adds	r7, #1
 800e524:	1064      	asrs	r4, r4, #1
 800e526:	3608      	adds	r6, #8
 800e528:	e7e5      	b.n	800e4f6 <_dtoa_r+0x36e>
 800e52a:	f000 80a5 	beq.w	800e678 <_dtoa_r+0x4f0>
 800e52e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e532:	f1ca 0400 	rsb	r4, sl, #0
 800e536:	4b7d      	ldr	r3, [pc, #500]	; (800e72c <_dtoa_r+0x5a4>)
 800e538:	f004 020f 	and.w	r2, r4, #15
 800e53c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f1 ffe0 	bl	8000508 <__aeabi_dmul>
 800e548:	2702      	movs	r7, #2
 800e54a:	2300      	movs	r3, #0
 800e54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e550:	4e77      	ldr	r6, [pc, #476]	; (800e730 <_dtoa_r+0x5a8>)
 800e552:	1124      	asrs	r4, r4, #4
 800e554:	2c00      	cmp	r4, #0
 800e556:	f040 8084 	bne.w	800e662 <_dtoa_r+0x4da>
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1d2      	bne.n	800e504 <_dtoa_r+0x37c>
 800e55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 808b 	beq.w	800e67c <_dtoa_r+0x4f4>
 800e566:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e56a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e56e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e572:	2200      	movs	r2, #0
 800e574:	4b6f      	ldr	r3, [pc, #444]	; (800e734 <_dtoa_r+0x5ac>)
 800e576:	f7f2 fa39 	bl	80009ec <__aeabi_dcmplt>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d07e      	beq.n	800e67c <_dtoa_r+0x4f4>
 800e57e:	9b08      	ldr	r3, [sp, #32]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d07b      	beq.n	800e67c <_dtoa_r+0x4f4>
 800e584:	f1b9 0f00 	cmp.w	r9, #0
 800e588:	dd38      	ble.n	800e5fc <_dtoa_r+0x474>
 800e58a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e58e:	2200      	movs	r2, #0
 800e590:	4b69      	ldr	r3, [pc, #420]	; (800e738 <_dtoa_r+0x5b0>)
 800e592:	f7f1 ffb9 	bl	8000508 <__aeabi_dmul>
 800e596:	464c      	mov	r4, r9
 800e598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e59c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800e5a0:	3701      	adds	r7, #1
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	f7f1 ff46 	bl	8000434 <__aeabi_i2d>
 800e5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5ac:	f7f1 ffac 	bl	8000508 <__aeabi_dmul>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	4b62      	ldr	r3, [pc, #392]	; (800e73c <_dtoa_r+0x5b4>)
 800e5b4:	f7f1 fdf2 	bl	800019c <__adddf3>
 800e5b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e5bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e5c0:	9611      	str	r6, [sp, #68]	; 0x44
 800e5c2:	2c00      	cmp	r4, #0
 800e5c4:	d15d      	bne.n	800e682 <_dtoa_r+0x4fa>
 800e5c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	4b5c      	ldr	r3, [pc, #368]	; (800e740 <_dtoa_r+0x5b8>)
 800e5ce:	f7f1 fde3 	bl	8000198 <__aeabi_dsub>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5da:	4633      	mov	r3, r6
 800e5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e5de:	f7f2 fa23 	bl	8000a28 <__aeabi_dcmpgt>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	f040 829c 	bne.w	800eb20 <_dtoa_r+0x998>
 800e5e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e5ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e5f2:	f7f2 f9fb 	bl	80009ec <__aeabi_dcmplt>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	f040 8290 	bne.w	800eb1c <_dtoa_r+0x994>
 800e5fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e600:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e606:	2b00      	cmp	r3, #0
 800e608:	f2c0 8152 	blt.w	800e8b0 <_dtoa_r+0x728>
 800e60c:	f1ba 0f0e 	cmp.w	sl, #14
 800e610:	f300 814e 	bgt.w	800e8b0 <_dtoa_r+0x728>
 800e614:	4b45      	ldr	r3, [pc, #276]	; (800e72c <_dtoa_r+0x5a4>)
 800e616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e61a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e61e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e624:	2b00      	cmp	r3, #0
 800e626:	f280 80db 	bge.w	800e7e0 <_dtoa_r+0x658>
 800e62a:	9b08      	ldr	r3, [sp, #32]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f300 80d7 	bgt.w	800e7e0 <_dtoa_r+0x658>
 800e632:	f040 8272 	bne.w	800eb1a <_dtoa_r+0x992>
 800e636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e63a:	2200      	movs	r2, #0
 800e63c:	4b40      	ldr	r3, [pc, #256]	; (800e740 <_dtoa_r+0x5b8>)
 800e63e:	f7f1 ff63 	bl	8000508 <__aeabi_dmul>
 800e642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e646:	f7f2 f9e5 	bl	8000a14 <__aeabi_dcmpge>
 800e64a:	9c08      	ldr	r4, [sp, #32]
 800e64c:	4626      	mov	r6, r4
 800e64e:	2800      	cmp	r0, #0
 800e650:	f040 8248 	bne.w	800eae4 <_dtoa_r+0x95c>
 800e654:	2331      	movs	r3, #49	; 0x31
 800e656:	9f03      	ldr	r7, [sp, #12]
 800e658:	f10a 0a01 	add.w	sl, sl, #1
 800e65c:	f807 3b01 	strb.w	r3, [r7], #1
 800e660:	e244      	b.n	800eaec <_dtoa_r+0x964>
 800e662:	07e2      	lsls	r2, r4, #31
 800e664:	d505      	bpl.n	800e672 <_dtoa_r+0x4ea>
 800e666:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e66a:	f7f1 ff4d 	bl	8000508 <__aeabi_dmul>
 800e66e:	2301      	movs	r3, #1
 800e670:	3701      	adds	r7, #1
 800e672:	1064      	asrs	r4, r4, #1
 800e674:	3608      	adds	r6, #8
 800e676:	e76d      	b.n	800e554 <_dtoa_r+0x3cc>
 800e678:	2702      	movs	r7, #2
 800e67a:	e770      	b.n	800e55e <_dtoa_r+0x3d6>
 800e67c:	46d0      	mov	r8, sl
 800e67e:	9c08      	ldr	r4, [sp, #32]
 800e680:	e78f      	b.n	800e5a2 <_dtoa_r+0x41a>
 800e682:	9903      	ldr	r1, [sp, #12]
 800e684:	4b29      	ldr	r3, [pc, #164]	; (800e72c <_dtoa_r+0x5a4>)
 800e686:	4421      	add	r1, r4
 800e688:	9112      	str	r1, [sp, #72]	; 0x48
 800e68a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e68c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e690:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e694:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e698:	2900      	cmp	r1, #0
 800e69a:	d055      	beq.n	800e748 <_dtoa_r+0x5c0>
 800e69c:	2000      	movs	r0, #0
 800e69e:	4929      	ldr	r1, [pc, #164]	; (800e744 <_dtoa_r+0x5bc>)
 800e6a0:	f7f2 f85c 	bl	800075c <__aeabi_ddiv>
 800e6a4:	463b      	mov	r3, r7
 800e6a6:	4632      	mov	r2, r6
 800e6a8:	f7f1 fd76 	bl	8000198 <__aeabi_dsub>
 800e6ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e6b0:	9f03      	ldr	r7, [sp, #12]
 800e6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6b6:	f7f2 f9d7 	bl	8000a68 <__aeabi_d2iz>
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	f7f1 feba 	bl	8000434 <__aeabi_i2d>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6c8:	f7f1 fd66 	bl	8000198 <__aeabi_dsub>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	3430      	adds	r4, #48	; 0x30
 800e6d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e6da:	f807 4b01 	strb.w	r4, [r7], #1
 800e6de:	f7f2 f985 	bl	80009ec <__aeabi_dcmplt>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	d174      	bne.n	800e7d0 <_dtoa_r+0x648>
 800e6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	4911      	ldr	r1, [pc, #68]	; (800e734 <_dtoa_r+0x5ac>)
 800e6ee:	f7f1 fd53 	bl	8000198 <__aeabi_dsub>
 800e6f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e6f6:	f7f2 f979 	bl	80009ec <__aeabi_dcmplt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f040 80b7 	bne.w	800e86e <_dtoa_r+0x6e6>
 800e700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e702:	429f      	cmp	r7, r3
 800e704:	f43f af7a 	beq.w	800e5fc <_dtoa_r+0x474>
 800e708:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e70c:	2200      	movs	r2, #0
 800e70e:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <_dtoa_r+0x5b0>)
 800e710:	f7f1 fefa 	bl	8000508 <__aeabi_dmul>
 800e714:	2200      	movs	r2, #0
 800e716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e71e:	4b06      	ldr	r3, [pc, #24]	; (800e738 <_dtoa_r+0x5b0>)
 800e720:	f7f1 fef2 	bl	8000508 <__aeabi_dmul>
 800e724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e728:	e7c3      	b.n	800e6b2 <_dtoa_r+0x52a>
 800e72a:	bf00      	nop
 800e72c:	08012470 	.word	0x08012470
 800e730:	08012448 	.word	0x08012448
 800e734:	3ff00000 	.word	0x3ff00000
 800e738:	40240000 	.word	0x40240000
 800e73c:	401c0000 	.word	0x401c0000
 800e740:	40140000 	.word	0x40140000
 800e744:	3fe00000 	.word	0x3fe00000
 800e748:	4630      	mov	r0, r6
 800e74a:	4639      	mov	r1, r7
 800e74c:	f7f1 fedc 	bl	8000508 <__aeabi_dmul>
 800e750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e752:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e756:	9c03      	ldr	r4, [sp, #12]
 800e758:	9314      	str	r3, [sp, #80]	; 0x50
 800e75a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e75e:	f7f2 f983 	bl	8000a68 <__aeabi_d2iz>
 800e762:	9015      	str	r0, [sp, #84]	; 0x54
 800e764:	f7f1 fe66 	bl	8000434 <__aeabi_i2d>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e770:	f7f1 fd12 	bl	8000198 <__aeabi_dsub>
 800e774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e776:	4606      	mov	r6, r0
 800e778:	3330      	adds	r3, #48	; 0x30
 800e77a:	f804 3b01 	strb.w	r3, [r4], #1
 800e77e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e780:	460f      	mov	r7, r1
 800e782:	429c      	cmp	r4, r3
 800e784:	f04f 0200 	mov.w	r2, #0
 800e788:	d124      	bne.n	800e7d4 <_dtoa_r+0x64c>
 800e78a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e78e:	4bb0      	ldr	r3, [pc, #704]	; (800ea50 <_dtoa_r+0x8c8>)
 800e790:	f7f1 fd04 	bl	800019c <__adddf3>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4630      	mov	r0, r6
 800e79a:	4639      	mov	r1, r7
 800e79c:	f7f2 f944 	bl	8000a28 <__aeabi_dcmpgt>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d163      	bne.n	800e86c <_dtoa_r+0x6e4>
 800e7a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	49a9      	ldr	r1, [pc, #676]	; (800ea50 <_dtoa_r+0x8c8>)
 800e7ac:	f7f1 fcf4 	bl	8000198 <__aeabi_dsub>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	f7f2 f918 	bl	80009ec <__aeabi_dcmplt>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f43f af1d 	beq.w	800e5fc <_dtoa_r+0x474>
 800e7c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e7c4:	1e7b      	subs	r3, r7, #1
 800e7c6:	9314      	str	r3, [sp, #80]	; 0x50
 800e7c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e7cc:	2b30      	cmp	r3, #48	; 0x30
 800e7ce:	d0f8      	beq.n	800e7c2 <_dtoa_r+0x63a>
 800e7d0:	46c2      	mov	sl, r8
 800e7d2:	e03b      	b.n	800e84c <_dtoa_r+0x6c4>
 800e7d4:	4b9f      	ldr	r3, [pc, #636]	; (800ea54 <_dtoa_r+0x8cc>)
 800e7d6:	f7f1 fe97 	bl	8000508 <__aeabi_dmul>
 800e7da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7de:	e7bc      	b.n	800e75a <_dtoa_r+0x5d2>
 800e7e0:	9f03      	ldr	r7, [sp, #12]
 800e7e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e7e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	f7f1 ffb5 	bl	800075c <__aeabi_ddiv>
 800e7f2:	f7f2 f939 	bl	8000a68 <__aeabi_d2iz>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	f7f1 fe1c 	bl	8000434 <__aeabi_i2d>
 800e7fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e800:	f7f1 fe82 	bl	8000508 <__aeabi_dmul>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4640      	mov	r0, r8
 800e80a:	4649      	mov	r1, r9
 800e80c:	f7f1 fcc4 	bl	8000198 <__aeabi_dsub>
 800e810:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e814:	f807 6b01 	strb.w	r6, [r7], #1
 800e818:	9e03      	ldr	r6, [sp, #12]
 800e81a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e81e:	1bbe      	subs	r6, r7, r6
 800e820:	45b4      	cmp	ip, r6
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	d136      	bne.n	800e896 <_dtoa_r+0x70e>
 800e828:	f7f1 fcb8 	bl	800019c <__adddf3>
 800e82c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e830:	4680      	mov	r8, r0
 800e832:	4689      	mov	r9, r1
 800e834:	f7f2 f8f8 	bl	8000a28 <__aeabi_dcmpgt>
 800e838:	bb58      	cbnz	r0, 800e892 <_dtoa_r+0x70a>
 800e83a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e83e:	4640      	mov	r0, r8
 800e840:	4649      	mov	r1, r9
 800e842:	f7f2 f8c9 	bl	80009d8 <__aeabi_dcmpeq>
 800e846:	b108      	cbz	r0, 800e84c <_dtoa_r+0x6c4>
 800e848:	07e1      	lsls	r1, r4, #31
 800e84a:	d422      	bmi.n	800e892 <_dtoa_r+0x70a>
 800e84c:	4628      	mov	r0, r5
 800e84e:	4659      	mov	r1, fp
 800e850:	f001 f87a 	bl	800f948 <_Bfree>
 800e854:	2300      	movs	r3, #0
 800e856:	703b      	strb	r3, [r7, #0]
 800e858:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e85a:	f10a 0001 	add.w	r0, sl, #1
 800e85e:	6018      	str	r0, [r3, #0]
 800e860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e862:	2b00      	cmp	r3, #0
 800e864:	f43f acde 	beq.w	800e224 <_dtoa_r+0x9c>
 800e868:	601f      	str	r7, [r3, #0]
 800e86a:	e4db      	b.n	800e224 <_dtoa_r+0x9c>
 800e86c:	4627      	mov	r7, r4
 800e86e:	463b      	mov	r3, r7
 800e870:	461f      	mov	r7, r3
 800e872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e876:	2a39      	cmp	r2, #57	; 0x39
 800e878:	d107      	bne.n	800e88a <_dtoa_r+0x702>
 800e87a:	9a03      	ldr	r2, [sp, #12]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d1f7      	bne.n	800e870 <_dtoa_r+0x6e8>
 800e880:	2230      	movs	r2, #48	; 0x30
 800e882:	9903      	ldr	r1, [sp, #12]
 800e884:	f108 0801 	add.w	r8, r8, #1
 800e888:	700a      	strb	r2, [r1, #0]
 800e88a:	781a      	ldrb	r2, [r3, #0]
 800e88c:	3201      	adds	r2, #1
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	e79e      	b.n	800e7d0 <_dtoa_r+0x648>
 800e892:	46d0      	mov	r8, sl
 800e894:	e7eb      	b.n	800e86e <_dtoa_r+0x6e6>
 800e896:	2200      	movs	r2, #0
 800e898:	4b6e      	ldr	r3, [pc, #440]	; (800ea54 <_dtoa_r+0x8cc>)
 800e89a:	f7f1 fe35 	bl	8000508 <__aeabi_dmul>
 800e89e:	2200      	movs	r2, #0
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4680      	mov	r8, r0
 800e8a4:	4689      	mov	r9, r1
 800e8a6:	f7f2 f897 	bl	80009d8 <__aeabi_dcmpeq>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d09b      	beq.n	800e7e6 <_dtoa_r+0x65e>
 800e8ae:	e7cd      	b.n	800e84c <_dtoa_r+0x6c4>
 800e8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	f000 80d0 	beq.w	800ea58 <_dtoa_r+0x8d0>
 800e8b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e8ba:	2a01      	cmp	r2, #1
 800e8bc:	f300 80ae 	bgt.w	800ea1c <_dtoa_r+0x894>
 800e8c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	f000 80a6 	beq.w	800ea14 <_dtoa_r+0x88c>
 800e8c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e8ce:	9f06      	ldr	r7, [sp, #24]
 800e8d0:	9a06      	ldr	r2, [sp, #24]
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	441a      	add	r2, r3
 800e8d6:	9206      	str	r2, [sp, #24]
 800e8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8da:	4628      	mov	r0, r5
 800e8dc:	441a      	add	r2, r3
 800e8de:	9209      	str	r2, [sp, #36]	; 0x24
 800e8e0:	f001 f932 	bl	800fb48 <__i2b>
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	2f00      	cmp	r7, #0
 800e8e8:	dd0c      	ble.n	800e904 <_dtoa_r+0x77c>
 800e8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	dd09      	ble.n	800e904 <_dtoa_r+0x77c>
 800e8f0:	42bb      	cmp	r3, r7
 800e8f2:	bfa8      	it	ge
 800e8f4:	463b      	movge	r3, r7
 800e8f6:	9a06      	ldr	r2, [sp, #24]
 800e8f8:	1aff      	subs	r7, r7, r3
 800e8fa:	1ad2      	subs	r2, r2, r3
 800e8fc:	9206      	str	r2, [sp, #24]
 800e8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	9309      	str	r3, [sp, #36]	; 0x24
 800e904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e906:	b1f3      	cbz	r3, 800e946 <_dtoa_r+0x7be>
 800e908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 80a8 	beq.w	800ea60 <_dtoa_r+0x8d8>
 800e910:	2c00      	cmp	r4, #0
 800e912:	dd10      	ble.n	800e936 <_dtoa_r+0x7ae>
 800e914:	4631      	mov	r1, r6
 800e916:	4622      	mov	r2, r4
 800e918:	4628      	mov	r0, r5
 800e91a:	f001 f9d3 	bl	800fcc4 <__pow5mult>
 800e91e:	465a      	mov	r2, fp
 800e920:	4601      	mov	r1, r0
 800e922:	4606      	mov	r6, r0
 800e924:	4628      	mov	r0, r5
 800e926:	f001 f925 	bl	800fb74 <__multiply>
 800e92a:	4680      	mov	r8, r0
 800e92c:	4659      	mov	r1, fp
 800e92e:	4628      	mov	r0, r5
 800e930:	f001 f80a 	bl	800f948 <_Bfree>
 800e934:	46c3      	mov	fp, r8
 800e936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e938:	1b1a      	subs	r2, r3, r4
 800e93a:	d004      	beq.n	800e946 <_dtoa_r+0x7be>
 800e93c:	4659      	mov	r1, fp
 800e93e:	4628      	mov	r0, r5
 800e940:	f001 f9c0 	bl	800fcc4 <__pow5mult>
 800e944:	4683      	mov	fp, r0
 800e946:	2101      	movs	r1, #1
 800e948:	4628      	mov	r0, r5
 800e94a:	f001 f8fd 	bl	800fb48 <__i2b>
 800e94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e950:	4604      	mov	r4, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	f340 8086 	ble.w	800ea64 <_dtoa_r+0x8dc>
 800e958:	461a      	mov	r2, r3
 800e95a:	4601      	mov	r1, r0
 800e95c:	4628      	mov	r0, r5
 800e95e:	f001 f9b1 	bl	800fcc4 <__pow5mult>
 800e962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e964:	4604      	mov	r4, r0
 800e966:	2b01      	cmp	r3, #1
 800e968:	dd7f      	ble.n	800ea6a <_dtoa_r+0x8e2>
 800e96a:	f04f 0800 	mov.w	r8, #0
 800e96e:	6923      	ldr	r3, [r4, #16]
 800e970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e974:	6918      	ldr	r0, [r3, #16]
 800e976:	f001 f899 	bl	800faac <__hi0bits>
 800e97a:	f1c0 0020 	rsb	r0, r0, #32
 800e97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e980:	4418      	add	r0, r3
 800e982:	f010 001f 	ands.w	r0, r0, #31
 800e986:	f000 8092 	beq.w	800eaae <_dtoa_r+0x926>
 800e98a:	f1c0 0320 	rsb	r3, r0, #32
 800e98e:	2b04      	cmp	r3, #4
 800e990:	f340 808a 	ble.w	800eaa8 <_dtoa_r+0x920>
 800e994:	f1c0 001c 	rsb	r0, r0, #28
 800e998:	9b06      	ldr	r3, [sp, #24]
 800e99a:	4407      	add	r7, r0
 800e99c:	4403      	add	r3, r0
 800e99e:	9306      	str	r3, [sp, #24]
 800e9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a2:	4403      	add	r3, r0
 800e9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a6:	9b06      	ldr	r3, [sp, #24]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	dd05      	ble.n	800e9b8 <_dtoa_r+0x830>
 800e9ac:	4659      	mov	r1, fp
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f001 f9e1 	bl	800fd78 <__lshift>
 800e9b6:	4683      	mov	fp, r0
 800e9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dd05      	ble.n	800e9ca <_dtoa_r+0x842>
 800e9be:	4621      	mov	r1, r4
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f001 f9d8 	bl	800fd78 <__lshift>
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d070      	beq.n	800eab2 <_dtoa_r+0x92a>
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	4658      	mov	r0, fp
 800e9d4:	f001 fa40 	bl	800fe58 <__mcmp>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	da6a      	bge.n	800eab2 <_dtoa_r+0x92a>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	4659      	mov	r1, fp
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f000 ffd2 	bl	800f98c <__multadd>
 800e9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9ea:	4683      	mov	fp, r0
 800e9ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 8194 	beq.w	800ed1e <_dtoa_r+0xb96>
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	220a      	movs	r2, #10
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f000 ffc5 	bl	800f98c <__multadd>
 800ea02:	f1b9 0f00 	cmp.w	r9, #0
 800ea06:	4606      	mov	r6, r0
 800ea08:	f300 8093 	bgt.w	800eb32 <_dtoa_r+0x9aa>
 800ea0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	dc57      	bgt.n	800eac2 <_dtoa_r+0x93a>
 800ea12:	e08e      	b.n	800eb32 <_dtoa_r+0x9aa>
 800ea14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea1a:	e757      	b.n	800e8cc <_dtoa_r+0x744>
 800ea1c:	9b08      	ldr	r3, [sp, #32]
 800ea1e:	1e5c      	subs	r4, r3, #1
 800ea20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea22:	42a3      	cmp	r3, r4
 800ea24:	bfb7      	itett	lt
 800ea26:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea28:	1b1c      	subge	r4, r3, r4
 800ea2a:	1ae2      	sublt	r2, r4, r3
 800ea2c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ea2e:	bfbe      	ittt	lt
 800ea30:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ea32:	189b      	addlt	r3, r3, r2
 800ea34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ea36:	9b08      	ldr	r3, [sp, #32]
 800ea38:	bfb8      	it	lt
 800ea3a:	2400      	movlt	r4, #0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bfbb      	ittet	lt
 800ea40:	9b06      	ldrlt	r3, [sp, #24]
 800ea42:	9a08      	ldrlt	r2, [sp, #32]
 800ea44:	9f06      	ldrge	r7, [sp, #24]
 800ea46:	1a9f      	sublt	r7, r3, r2
 800ea48:	bfac      	ite	ge
 800ea4a:	9b08      	ldrge	r3, [sp, #32]
 800ea4c:	2300      	movlt	r3, #0
 800ea4e:	e73f      	b.n	800e8d0 <_dtoa_r+0x748>
 800ea50:	3fe00000 	.word	0x3fe00000
 800ea54:	40240000 	.word	0x40240000
 800ea58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ea5a:	9f06      	ldr	r7, [sp, #24]
 800ea5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ea5e:	e742      	b.n	800e8e6 <_dtoa_r+0x75e>
 800ea60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea62:	e76b      	b.n	800e93c <_dtoa_r+0x7b4>
 800ea64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	dc19      	bgt.n	800ea9e <_dtoa_r+0x916>
 800ea6a:	9b04      	ldr	r3, [sp, #16]
 800ea6c:	b9bb      	cbnz	r3, 800ea9e <_dtoa_r+0x916>
 800ea6e:	9b05      	ldr	r3, [sp, #20]
 800ea70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea74:	b99b      	cbnz	r3, 800ea9e <_dtoa_r+0x916>
 800ea76:	9b05      	ldr	r3, [sp, #20]
 800ea78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea7c:	0d1b      	lsrs	r3, r3, #20
 800ea7e:	051b      	lsls	r3, r3, #20
 800ea80:	b183      	cbz	r3, 800eaa4 <_dtoa_r+0x91c>
 800ea82:	f04f 0801 	mov.w	r8, #1
 800ea86:	9b06      	ldr	r3, [sp, #24]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	9306      	str	r3, [sp, #24]
 800ea8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea8e:	3301      	adds	r3, #1
 800ea90:	9309      	str	r3, [sp, #36]	; 0x24
 800ea92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f47f af6a 	bne.w	800e96e <_dtoa_r+0x7e6>
 800ea9a:	2001      	movs	r0, #1
 800ea9c:	e76f      	b.n	800e97e <_dtoa_r+0x7f6>
 800ea9e:	f04f 0800 	mov.w	r8, #0
 800eaa2:	e7f6      	b.n	800ea92 <_dtoa_r+0x90a>
 800eaa4:	4698      	mov	r8, r3
 800eaa6:	e7f4      	b.n	800ea92 <_dtoa_r+0x90a>
 800eaa8:	f43f af7d 	beq.w	800e9a6 <_dtoa_r+0x81e>
 800eaac:	4618      	mov	r0, r3
 800eaae:	301c      	adds	r0, #28
 800eab0:	e772      	b.n	800e998 <_dtoa_r+0x810>
 800eab2:	9b08      	ldr	r3, [sp, #32]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	dc36      	bgt.n	800eb26 <_dtoa_r+0x99e>
 800eab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	dd33      	ble.n	800eb26 <_dtoa_r+0x99e>
 800eabe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eac2:	f1b9 0f00 	cmp.w	r9, #0
 800eac6:	d10d      	bne.n	800eae4 <_dtoa_r+0x95c>
 800eac8:	4621      	mov	r1, r4
 800eaca:	464b      	mov	r3, r9
 800eacc:	2205      	movs	r2, #5
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 ff5c 	bl	800f98c <__multadd>
 800ead4:	4601      	mov	r1, r0
 800ead6:	4604      	mov	r4, r0
 800ead8:	4658      	mov	r0, fp
 800eada:	f001 f9bd 	bl	800fe58 <__mcmp>
 800eade:	2800      	cmp	r0, #0
 800eae0:	f73f adb8 	bgt.w	800e654 <_dtoa_r+0x4cc>
 800eae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eae6:	9f03      	ldr	r7, [sp, #12]
 800eae8:	ea6f 0a03 	mvn.w	sl, r3
 800eaec:	f04f 0800 	mov.w	r8, #0
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 ff28 	bl	800f948 <_Bfree>
 800eaf8:	2e00      	cmp	r6, #0
 800eafa:	f43f aea7 	beq.w	800e84c <_dtoa_r+0x6c4>
 800eafe:	f1b8 0f00 	cmp.w	r8, #0
 800eb02:	d005      	beq.n	800eb10 <_dtoa_r+0x988>
 800eb04:	45b0      	cmp	r8, r6
 800eb06:	d003      	beq.n	800eb10 <_dtoa_r+0x988>
 800eb08:	4641      	mov	r1, r8
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f000 ff1c 	bl	800f948 <_Bfree>
 800eb10:	4631      	mov	r1, r6
 800eb12:	4628      	mov	r0, r5
 800eb14:	f000 ff18 	bl	800f948 <_Bfree>
 800eb18:	e698      	b.n	800e84c <_dtoa_r+0x6c4>
 800eb1a:	2400      	movs	r4, #0
 800eb1c:	4626      	mov	r6, r4
 800eb1e:	e7e1      	b.n	800eae4 <_dtoa_r+0x95c>
 800eb20:	46c2      	mov	sl, r8
 800eb22:	4626      	mov	r6, r4
 800eb24:	e596      	b.n	800e654 <_dtoa_r+0x4cc>
 800eb26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f000 80fd 	beq.w	800ed2c <_dtoa_r+0xba4>
 800eb32:	2f00      	cmp	r7, #0
 800eb34:	dd05      	ble.n	800eb42 <_dtoa_r+0x9ba>
 800eb36:	4631      	mov	r1, r6
 800eb38:	463a      	mov	r2, r7
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f001 f91c 	bl	800fd78 <__lshift>
 800eb40:	4606      	mov	r6, r0
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	d05c      	beq.n	800ec02 <_dtoa_r+0xa7a>
 800eb48:	4628      	mov	r0, r5
 800eb4a:	6871      	ldr	r1, [r6, #4]
 800eb4c:	f000 febc 	bl	800f8c8 <_Balloc>
 800eb50:	4607      	mov	r7, r0
 800eb52:	b928      	cbnz	r0, 800eb60 <_dtoa_r+0x9d8>
 800eb54:	4602      	mov	r2, r0
 800eb56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb5a:	4b7f      	ldr	r3, [pc, #508]	; (800ed58 <_dtoa_r+0xbd0>)
 800eb5c:	f7ff bb28 	b.w	800e1b0 <_dtoa_r+0x28>
 800eb60:	6932      	ldr	r2, [r6, #16]
 800eb62:	f106 010c 	add.w	r1, r6, #12
 800eb66:	3202      	adds	r2, #2
 800eb68:	0092      	lsls	r2, r2, #2
 800eb6a:	300c      	adds	r0, #12
 800eb6c:	f7fd fb10 	bl	800c190 <memcpy>
 800eb70:	2201      	movs	r2, #1
 800eb72:	4639      	mov	r1, r7
 800eb74:	4628      	mov	r0, r5
 800eb76:	f001 f8ff 	bl	800fd78 <__lshift>
 800eb7a:	46b0      	mov	r8, r6
 800eb7c:	4606      	mov	r6, r0
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	3301      	adds	r3, #1
 800eb82:	9308      	str	r3, [sp, #32]
 800eb84:	9b03      	ldr	r3, [sp, #12]
 800eb86:	444b      	add	r3, r9
 800eb88:	930a      	str	r3, [sp, #40]	; 0x28
 800eb8a:	9b04      	ldr	r3, [sp, #16]
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	9309      	str	r3, [sp, #36]	; 0x24
 800eb92:	9b08      	ldr	r3, [sp, #32]
 800eb94:	4621      	mov	r1, r4
 800eb96:	3b01      	subs	r3, #1
 800eb98:	4658      	mov	r0, fp
 800eb9a:	9304      	str	r3, [sp, #16]
 800eb9c:	f7ff fa68 	bl	800e070 <quorem>
 800eba0:	4603      	mov	r3, r0
 800eba2:	4641      	mov	r1, r8
 800eba4:	3330      	adds	r3, #48	; 0x30
 800eba6:	9006      	str	r0, [sp, #24]
 800eba8:	4658      	mov	r0, fp
 800ebaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebac:	f001 f954 	bl	800fe58 <__mcmp>
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4681      	mov	r9, r0
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f001 f96a 	bl	800fe90 <__mdiff>
 800ebbc:	68c2      	ldr	r2, [r0, #12]
 800ebbe:	4607      	mov	r7, r0
 800ebc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebc2:	bb02      	cbnz	r2, 800ec06 <_dtoa_r+0xa7e>
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	4658      	mov	r0, fp
 800ebc8:	f001 f946 	bl	800fe58 <__mcmp>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ebd8:	f000 feb6 	bl	800f948 <_Bfree>
 800ebdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebe0:	9f08      	ldr	r7, [sp, #32]
 800ebe2:	ea43 0102 	orr.w	r1, r3, r2
 800ebe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebec:	d10d      	bne.n	800ec0a <_dtoa_r+0xa82>
 800ebee:	2b39      	cmp	r3, #57	; 0x39
 800ebf0:	d029      	beq.n	800ec46 <_dtoa_r+0xabe>
 800ebf2:	f1b9 0f00 	cmp.w	r9, #0
 800ebf6:	dd01      	ble.n	800ebfc <_dtoa_r+0xa74>
 800ebf8:	9b06      	ldr	r3, [sp, #24]
 800ebfa:	3331      	adds	r3, #49	; 0x31
 800ebfc:	9a04      	ldr	r2, [sp, #16]
 800ebfe:	7013      	strb	r3, [r2, #0]
 800ec00:	e776      	b.n	800eaf0 <_dtoa_r+0x968>
 800ec02:	4630      	mov	r0, r6
 800ec04:	e7b9      	b.n	800eb7a <_dtoa_r+0x9f2>
 800ec06:	2201      	movs	r2, #1
 800ec08:	e7e2      	b.n	800ebd0 <_dtoa_r+0xa48>
 800ec0a:	f1b9 0f00 	cmp.w	r9, #0
 800ec0e:	db06      	blt.n	800ec1e <_dtoa_r+0xa96>
 800ec10:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ec12:	ea41 0909 	orr.w	r9, r1, r9
 800ec16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec18:	ea59 0101 	orrs.w	r1, r9, r1
 800ec1c:	d120      	bne.n	800ec60 <_dtoa_r+0xad8>
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	ddec      	ble.n	800ebfc <_dtoa_r+0xa74>
 800ec22:	4659      	mov	r1, fp
 800ec24:	2201      	movs	r2, #1
 800ec26:	4628      	mov	r0, r5
 800ec28:	9308      	str	r3, [sp, #32]
 800ec2a:	f001 f8a5 	bl	800fd78 <__lshift>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4683      	mov	fp, r0
 800ec32:	f001 f911 	bl	800fe58 <__mcmp>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	9b08      	ldr	r3, [sp, #32]
 800ec3a:	dc02      	bgt.n	800ec42 <_dtoa_r+0xaba>
 800ec3c:	d1de      	bne.n	800ebfc <_dtoa_r+0xa74>
 800ec3e:	07da      	lsls	r2, r3, #31
 800ec40:	d5dc      	bpl.n	800ebfc <_dtoa_r+0xa74>
 800ec42:	2b39      	cmp	r3, #57	; 0x39
 800ec44:	d1d8      	bne.n	800ebf8 <_dtoa_r+0xa70>
 800ec46:	2339      	movs	r3, #57	; 0x39
 800ec48:	9a04      	ldr	r2, [sp, #16]
 800ec4a:	7013      	strb	r3, [r2, #0]
 800ec4c:	463b      	mov	r3, r7
 800ec4e:	461f      	mov	r7, r3
 800ec50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	2a39      	cmp	r2, #57	; 0x39
 800ec58:	d050      	beq.n	800ecfc <_dtoa_r+0xb74>
 800ec5a:	3201      	adds	r2, #1
 800ec5c:	701a      	strb	r2, [r3, #0]
 800ec5e:	e747      	b.n	800eaf0 <_dtoa_r+0x968>
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	dd03      	ble.n	800ec6c <_dtoa_r+0xae4>
 800ec64:	2b39      	cmp	r3, #57	; 0x39
 800ec66:	d0ee      	beq.n	800ec46 <_dtoa_r+0xabe>
 800ec68:	3301      	adds	r3, #1
 800ec6a:	e7c7      	b.n	800ebfc <_dtoa_r+0xa74>
 800ec6c:	9a08      	ldr	r2, [sp, #32]
 800ec6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec70:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ec74:	428a      	cmp	r2, r1
 800ec76:	d02a      	beq.n	800ecce <_dtoa_r+0xb46>
 800ec78:	4659      	mov	r1, fp
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	220a      	movs	r2, #10
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f000 fe84 	bl	800f98c <__multadd>
 800ec84:	45b0      	cmp	r8, r6
 800ec86:	4683      	mov	fp, r0
 800ec88:	f04f 0300 	mov.w	r3, #0
 800ec8c:	f04f 020a 	mov.w	r2, #10
 800ec90:	4641      	mov	r1, r8
 800ec92:	4628      	mov	r0, r5
 800ec94:	d107      	bne.n	800eca6 <_dtoa_r+0xb1e>
 800ec96:	f000 fe79 	bl	800f98c <__multadd>
 800ec9a:	4680      	mov	r8, r0
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	9b08      	ldr	r3, [sp, #32]
 800eca0:	3301      	adds	r3, #1
 800eca2:	9308      	str	r3, [sp, #32]
 800eca4:	e775      	b.n	800eb92 <_dtoa_r+0xa0a>
 800eca6:	f000 fe71 	bl	800f98c <__multadd>
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4680      	mov	r8, r0
 800ecae:	2300      	movs	r3, #0
 800ecb0:	220a      	movs	r2, #10
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f000 fe6a 	bl	800f98c <__multadd>
 800ecb8:	4606      	mov	r6, r0
 800ecba:	e7f0      	b.n	800ec9e <_dtoa_r+0xb16>
 800ecbc:	f1b9 0f00 	cmp.w	r9, #0
 800ecc0:	bfcc      	ite	gt
 800ecc2:	464f      	movgt	r7, r9
 800ecc4:	2701      	movle	r7, #1
 800ecc6:	f04f 0800 	mov.w	r8, #0
 800ecca:	9a03      	ldr	r2, [sp, #12]
 800eccc:	4417      	add	r7, r2
 800ecce:	4659      	mov	r1, fp
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	9308      	str	r3, [sp, #32]
 800ecd6:	f001 f84f 	bl	800fd78 <__lshift>
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4683      	mov	fp, r0
 800ecde:	f001 f8bb 	bl	800fe58 <__mcmp>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	dcb2      	bgt.n	800ec4c <_dtoa_r+0xac4>
 800ece6:	d102      	bne.n	800ecee <_dtoa_r+0xb66>
 800ece8:	9b08      	ldr	r3, [sp, #32]
 800ecea:	07db      	lsls	r3, r3, #31
 800ecec:	d4ae      	bmi.n	800ec4c <_dtoa_r+0xac4>
 800ecee:	463b      	mov	r3, r7
 800ecf0:	461f      	mov	r7, r3
 800ecf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecf6:	2a30      	cmp	r2, #48	; 0x30
 800ecf8:	d0fa      	beq.n	800ecf0 <_dtoa_r+0xb68>
 800ecfa:	e6f9      	b.n	800eaf0 <_dtoa_r+0x968>
 800ecfc:	9a03      	ldr	r2, [sp, #12]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d1a5      	bne.n	800ec4e <_dtoa_r+0xac6>
 800ed02:	2331      	movs	r3, #49	; 0x31
 800ed04:	f10a 0a01 	add.w	sl, sl, #1
 800ed08:	e779      	b.n	800ebfe <_dtoa_r+0xa76>
 800ed0a:	4b14      	ldr	r3, [pc, #80]	; (800ed5c <_dtoa_r+0xbd4>)
 800ed0c:	f7ff baa8 	b.w	800e260 <_dtoa_r+0xd8>
 800ed10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f47f aa81 	bne.w	800e21a <_dtoa_r+0x92>
 800ed18:	4b11      	ldr	r3, [pc, #68]	; (800ed60 <_dtoa_r+0xbd8>)
 800ed1a:	f7ff baa1 	b.w	800e260 <_dtoa_r+0xd8>
 800ed1e:	f1b9 0f00 	cmp.w	r9, #0
 800ed22:	dc03      	bgt.n	800ed2c <_dtoa_r+0xba4>
 800ed24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	f73f aecb 	bgt.w	800eac2 <_dtoa_r+0x93a>
 800ed2c:	9f03      	ldr	r7, [sp, #12]
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4658      	mov	r0, fp
 800ed32:	f7ff f99d 	bl	800e070 <quorem>
 800ed36:	9a03      	ldr	r2, [sp, #12]
 800ed38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ed3c:	f807 3b01 	strb.w	r3, [r7], #1
 800ed40:	1aba      	subs	r2, r7, r2
 800ed42:	4591      	cmp	r9, r2
 800ed44:	ddba      	ble.n	800ecbc <_dtoa_r+0xb34>
 800ed46:	4659      	mov	r1, fp
 800ed48:	2300      	movs	r3, #0
 800ed4a:	220a      	movs	r2, #10
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	f000 fe1d 	bl	800f98c <__multadd>
 800ed52:	4683      	mov	fp, r0
 800ed54:	e7eb      	b.n	800ed2e <_dtoa_r+0xba6>
 800ed56:	bf00      	nop
 800ed58:	080122f8 	.word	0x080122f8
 800ed5c:	080120fc 	.word	0x080120fc
 800ed60:	08012279 	.word	0x08012279

0800ed64 <__sflush_r>:
 800ed64:	898a      	ldrh	r2, [r1, #12]
 800ed66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed68:	4605      	mov	r5, r0
 800ed6a:	0710      	lsls	r0, r2, #28
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	d457      	bmi.n	800ee20 <__sflush_r+0xbc>
 800ed70:	684b      	ldr	r3, [r1, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	dc04      	bgt.n	800ed80 <__sflush_r+0x1c>
 800ed76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	dc01      	bgt.n	800ed80 <__sflush_r+0x1c>
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed82:	2e00      	cmp	r6, #0
 800ed84:	d0fa      	beq.n	800ed7c <__sflush_r+0x18>
 800ed86:	2300      	movs	r3, #0
 800ed88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed8c:	682f      	ldr	r7, [r5, #0]
 800ed8e:	602b      	str	r3, [r5, #0]
 800ed90:	d032      	beq.n	800edf8 <__sflush_r+0x94>
 800ed92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed94:	89a3      	ldrh	r3, [r4, #12]
 800ed96:	075a      	lsls	r2, r3, #29
 800ed98:	d505      	bpl.n	800eda6 <__sflush_r+0x42>
 800ed9a:	6863      	ldr	r3, [r4, #4]
 800ed9c:	1ac0      	subs	r0, r0, r3
 800ed9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eda0:	b10b      	cbz	r3, 800eda6 <__sflush_r+0x42>
 800eda2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eda4:	1ac0      	subs	r0, r0, r3
 800eda6:	2300      	movs	r3, #0
 800eda8:	4602      	mov	r2, r0
 800edaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edac:	4628      	mov	r0, r5
 800edae:	6a21      	ldr	r1, [r4, #32]
 800edb0:	47b0      	blx	r6
 800edb2:	1c43      	adds	r3, r0, #1
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	d106      	bne.n	800edc6 <__sflush_r+0x62>
 800edb8:	6829      	ldr	r1, [r5, #0]
 800edba:	291d      	cmp	r1, #29
 800edbc:	d82c      	bhi.n	800ee18 <__sflush_r+0xb4>
 800edbe:	4a29      	ldr	r2, [pc, #164]	; (800ee64 <__sflush_r+0x100>)
 800edc0:	40ca      	lsrs	r2, r1
 800edc2:	07d6      	lsls	r6, r2, #31
 800edc4:	d528      	bpl.n	800ee18 <__sflush_r+0xb4>
 800edc6:	2200      	movs	r2, #0
 800edc8:	6062      	str	r2, [r4, #4]
 800edca:	6922      	ldr	r2, [r4, #16]
 800edcc:	04d9      	lsls	r1, r3, #19
 800edce:	6022      	str	r2, [r4, #0]
 800edd0:	d504      	bpl.n	800eddc <__sflush_r+0x78>
 800edd2:	1c42      	adds	r2, r0, #1
 800edd4:	d101      	bne.n	800edda <__sflush_r+0x76>
 800edd6:	682b      	ldr	r3, [r5, #0]
 800edd8:	b903      	cbnz	r3, 800eddc <__sflush_r+0x78>
 800edda:	6560      	str	r0, [r4, #84]	; 0x54
 800eddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edde:	602f      	str	r7, [r5, #0]
 800ede0:	2900      	cmp	r1, #0
 800ede2:	d0cb      	beq.n	800ed7c <__sflush_r+0x18>
 800ede4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ede8:	4299      	cmp	r1, r3
 800edea:	d002      	beq.n	800edf2 <__sflush_r+0x8e>
 800edec:	4628      	mov	r0, r5
 800edee:	f7fd f9e5 	bl	800c1bc <_free_r>
 800edf2:	2000      	movs	r0, #0
 800edf4:	6360      	str	r0, [r4, #52]	; 0x34
 800edf6:	e7c2      	b.n	800ed7e <__sflush_r+0x1a>
 800edf8:	6a21      	ldr	r1, [r4, #32]
 800edfa:	2301      	movs	r3, #1
 800edfc:	4628      	mov	r0, r5
 800edfe:	47b0      	blx	r6
 800ee00:	1c41      	adds	r1, r0, #1
 800ee02:	d1c7      	bne.n	800ed94 <__sflush_r+0x30>
 800ee04:	682b      	ldr	r3, [r5, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d0c4      	beq.n	800ed94 <__sflush_r+0x30>
 800ee0a:	2b1d      	cmp	r3, #29
 800ee0c:	d001      	beq.n	800ee12 <__sflush_r+0xae>
 800ee0e:	2b16      	cmp	r3, #22
 800ee10:	d101      	bne.n	800ee16 <__sflush_r+0xb2>
 800ee12:	602f      	str	r7, [r5, #0]
 800ee14:	e7b2      	b.n	800ed7c <__sflush_r+0x18>
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1c:	81a3      	strh	r3, [r4, #12]
 800ee1e:	e7ae      	b.n	800ed7e <__sflush_r+0x1a>
 800ee20:	690f      	ldr	r7, [r1, #16]
 800ee22:	2f00      	cmp	r7, #0
 800ee24:	d0aa      	beq.n	800ed7c <__sflush_r+0x18>
 800ee26:	0793      	lsls	r3, r2, #30
 800ee28:	bf18      	it	ne
 800ee2a:	2300      	movne	r3, #0
 800ee2c:	680e      	ldr	r6, [r1, #0]
 800ee2e:	bf08      	it	eq
 800ee30:	694b      	ldreq	r3, [r1, #20]
 800ee32:	1bf6      	subs	r6, r6, r7
 800ee34:	600f      	str	r7, [r1, #0]
 800ee36:	608b      	str	r3, [r1, #8]
 800ee38:	2e00      	cmp	r6, #0
 800ee3a:	dd9f      	ble.n	800ed7c <__sflush_r+0x18>
 800ee3c:	4633      	mov	r3, r6
 800ee3e:	463a      	mov	r2, r7
 800ee40:	4628      	mov	r0, r5
 800ee42:	6a21      	ldr	r1, [r4, #32]
 800ee44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ee48:	47e0      	blx	ip
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	dc06      	bgt.n	800ee5c <__sflush_r+0xf8>
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	f04f 30ff 	mov.w	r0, #4294967295
 800ee54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	e790      	b.n	800ed7e <__sflush_r+0x1a>
 800ee5c:	4407      	add	r7, r0
 800ee5e:	1a36      	subs	r6, r6, r0
 800ee60:	e7ea      	b.n	800ee38 <__sflush_r+0xd4>
 800ee62:	bf00      	nop
 800ee64:	20400001 	.word	0x20400001

0800ee68 <_fflush_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	690b      	ldr	r3, [r1, #16]
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	b913      	cbnz	r3, 800ee78 <_fflush_r+0x10>
 800ee72:	2500      	movs	r5, #0
 800ee74:	4628      	mov	r0, r5
 800ee76:	bd38      	pop	{r3, r4, r5, pc}
 800ee78:	b118      	cbz	r0, 800ee82 <_fflush_r+0x1a>
 800ee7a:	6983      	ldr	r3, [r0, #24]
 800ee7c:	b90b      	cbnz	r3, 800ee82 <_fflush_r+0x1a>
 800ee7e:	f000 f887 	bl	800ef90 <__sinit>
 800ee82:	4b14      	ldr	r3, [pc, #80]	; (800eed4 <_fflush_r+0x6c>)
 800ee84:	429c      	cmp	r4, r3
 800ee86:	d11b      	bne.n	800eec0 <_fflush_r+0x58>
 800ee88:	686c      	ldr	r4, [r5, #4]
 800ee8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d0ef      	beq.n	800ee72 <_fflush_r+0xa>
 800ee92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee94:	07d0      	lsls	r0, r2, #31
 800ee96:	d404      	bmi.n	800eea2 <_fflush_r+0x3a>
 800ee98:	0599      	lsls	r1, r3, #22
 800ee9a:	d402      	bmi.n	800eea2 <_fflush_r+0x3a>
 800ee9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee9e:	f000 fc80 	bl	800f7a2 <__retarget_lock_acquire_recursive>
 800eea2:	4628      	mov	r0, r5
 800eea4:	4621      	mov	r1, r4
 800eea6:	f7ff ff5d 	bl	800ed64 <__sflush_r>
 800eeaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeac:	4605      	mov	r5, r0
 800eeae:	07da      	lsls	r2, r3, #31
 800eeb0:	d4e0      	bmi.n	800ee74 <_fflush_r+0xc>
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	059b      	lsls	r3, r3, #22
 800eeb6:	d4dd      	bmi.n	800ee74 <_fflush_r+0xc>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeba:	f000 fc73 	bl	800f7a4 <__retarget_lock_release_recursive>
 800eebe:	e7d9      	b.n	800ee74 <_fflush_r+0xc>
 800eec0:	4b05      	ldr	r3, [pc, #20]	; (800eed8 <_fflush_r+0x70>)
 800eec2:	429c      	cmp	r4, r3
 800eec4:	d101      	bne.n	800eeca <_fflush_r+0x62>
 800eec6:	68ac      	ldr	r4, [r5, #8]
 800eec8:	e7df      	b.n	800ee8a <_fflush_r+0x22>
 800eeca:	4b04      	ldr	r3, [pc, #16]	; (800eedc <_fflush_r+0x74>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	bf08      	it	eq
 800eed0:	68ec      	ldreq	r4, [r5, #12]
 800eed2:	e7da      	b.n	800ee8a <_fflush_r+0x22>
 800eed4:	0801232c 	.word	0x0801232c
 800eed8:	0801234c 	.word	0x0801234c
 800eedc:	0801230c 	.word	0x0801230c

0800eee0 <std>:
 800eee0:	2300      	movs	r3, #0
 800eee2:	b510      	push	{r4, lr}
 800eee4:	4604      	mov	r4, r0
 800eee6:	e9c0 3300 	strd	r3, r3, [r0]
 800eeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eeee:	6083      	str	r3, [r0, #8]
 800eef0:	8181      	strh	r1, [r0, #12]
 800eef2:	6643      	str	r3, [r0, #100]	; 0x64
 800eef4:	81c2      	strh	r2, [r0, #14]
 800eef6:	6183      	str	r3, [r0, #24]
 800eef8:	4619      	mov	r1, r3
 800eefa:	2208      	movs	r2, #8
 800eefc:	305c      	adds	r0, #92	; 0x5c
 800eefe:	f7fd f955 	bl	800c1ac <memset>
 800ef02:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <std+0x38>)
 800ef04:	6224      	str	r4, [r4, #32]
 800ef06:	6263      	str	r3, [r4, #36]	; 0x24
 800ef08:	4b04      	ldr	r3, [pc, #16]	; (800ef1c <std+0x3c>)
 800ef0a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef0c:	4b04      	ldr	r3, [pc, #16]	; (800ef20 <std+0x40>)
 800ef0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef10:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <std+0x44>)
 800ef12:	6323      	str	r3, [r4, #48]	; 0x30
 800ef14:	bd10      	pop	{r4, pc}
 800ef16:	bf00      	nop
 800ef18:	08010525 	.word	0x08010525
 800ef1c:	08010547 	.word	0x08010547
 800ef20:	0801057f 	.word	0x0801057f
 800ef24:	080105a3 	.word	0x080105a3

0800ef28 <_cleanup_r>:
 800ef28:	4901      	ldr	r1, [pc, #4]	; (800ef30 <_cleanup_r+0x8>)
 800ef2a:	f000 b8af 	b.w	800f08c <_fwalk_reent>
 800ef2e:	bf00      	nop
 800ef30:	0800ee69 	.word	0x0800ee69

0800ef34 <__sfmoreglue>:
 800ef34:	2268      	movs	r2, #104	; 0x68
 800ef36:	b570      	push	{r4, r5, r6, lr}
 800ef38:	1e4d      	subs	r5, r1, #1
 800ef3a:	4355      	muls	r5, r2
 800ef3c:	460e      	mov	r6, r1
 800ef3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef42:	f7fd f9a3 	bl	800c28c <_malloc_r>
 800ef46:	4604      	mov	r4, r0
 800ef48:	b140      	cbz	r0, 800ef5c <__sfmoreglue+0x28>
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef50:	300c      	adds	r0, #12
 800ef52:	60a0      	str	r0, [r4, #8]
 800ef54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef58:	f7fd f928 	bl	800c1ac <memset>
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}

0800ef60 <__sfp_lock_acquire>:
 800ef60:	4801      	ldr	r0, [pc, #4]	; (800ef68 <__sfp_lock_acquire+0x8>)
 800ef62:	f000 bc1e 	b.w	800f7a2 <__retarget_lock_acquire_recursive>
 800ef66:	bf00      	nop
 800ef68:	200013c9 	.word	0x200013c9

0800ef6c <__sfp_lock_release>:
 800ef6c:	4801      	ldr	r0, [pc, #4]	; (800ef74 <__sfp_lock_release+0x8>)
 800ef6e:	f000 bc19 	b.w	800f7a4 <__retarget_lock_release_recursive>
 800ef72:	bf00      	nop
 800ef74:	200013c9 	.word	0x200013c9

0800ef78 <__sinit_lock_acquire>:
 800ef78:	4801      	ldr	r0, [pc, #4]	; (800ef80 <__sinit_lock_acquire+0x8>)
 800ef7a:	f000 bc12 	b.w	800f7a2 <__retarget_lock_acquire_recursive>
 800ef7e:	bf00      	nop
 800ef80:	200013ca 	.word	0x200013ca

0800ef84 <__sinit_lock_release>:
 800ef84:	4801      	ldr	r0, [pc, #4]	; (800ef8c <__sinit_lock_release+0x8>)
 800ef86:	f000 bc0d 	b.w	800f7a4 <__retarget_lock_release_recursive>
 800ef8a:	bf00      	nop
 800ef8c:	200013ca 	.word	0x200013ca

0800ef90 <__sinit>:
 800ef90:	b510      	push	{r4, lr}
 800ef92:	4604      	mov	r4, r0
 800ef94:	f7ff fff0 	bl	800ef78 <__sinit_lock_acquire>
 800ef98:	69a3      	ldr	r3, [r4, #24]
 800ef9a:	b11b      	cbz	r3, 800efa4 <__sinit+0x14>
 800ef9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa0:	f7ff bff0 	b.w	800ef84 <__sinit_lock_release>
 800efa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efa8:	6523      	str	r3, [r4, #80]	; 0x50
 800efaa:	4b13      	ldr	r3, [pc, #76]	; (800eff8 <__sinit+0x68>)
 800efac:	4a13      	ldr	r2, [pc, #76]	; (800effc <__sinit+0x6c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	bf08      	it	eq
 800efb6:	2301      	moveq	r3, #1
 800efb8:	4620      	mov	r0, r4
 800efba:	bf08      	it	eq
 800efbc:	61a3      	streq	r3, [r4, #24]
 800efbe:	f000 f81f 	bl	800f000 <__sfp>
 800efc2:	6060      	str	r0, [r4, #4]
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 f81b 	bl	800f000 <__sfp>
 800efca:	60a0      	str	r0, [r4, #8]
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 f817 	bl	800f000 <__sfp>
 800efd2:	2200      	movs	r2, #0
 800efd4:	2104      	movs	r1, #4
 800efd6:	60e0      	str	r0, [r4, #12]
 800efd8:	6860      	ldr	r0, [r4, #4]
 800efda:	f7ff ff81 	bl	800eee0 <std>
 800efde:	2201      	movs	r2, #1
 800efe0:	2109      	movs	r1, #9
 800efe2:	68a0      	ldr	r0, [r4, #8]
 800efe4:	f7ff ff7c 	bl	800eee0 <std>
 800efe8:	2202      	movs	r2, #2
 800efea:	2112      	movs	r1, #18
 800efec:	68e0      	ldr	r0, [r4, #12]
 800efee:	f7ff ff77 	bl	800eee0 <std>
 800eff2:	2301      	movs	r3, #1
 800eff4:	61a3      	str	r3, [r4, #24]
 800eff6:	e7d1      	b.n	800ef9c <__sinit+0xc>
 800eff8:	080120e8 	.word	0x080120e8
 800effc:	0800ef29 	.word	0x0800ef29

0800f000 <__sfp>:
 800f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f002:	4607      	mov	r7, r0
 800f004:	f7ff ffac 	bl	800ef60 <__sfp_lock_acquire>
 800f008:	4b1e      	ldr	r3, [pc, #120]	; (800f084 <__sfp+0x84>)
 800f00a:	681e      	ldr	r6, [r3, #0]
 800f00c:	69b3      	ldr	r3, [r6, #24]
 800f00e:	b913      	cbnz	r3, 800f016 <__sfp+0x16>
 800f010:	4630      	mov	r0, r6
 800f012:	f7ff ffbd 	bl	800ef90 <__sinit>
 800f016:	3648      	adds	r6, #72	; 0x48
 800f018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f01c:	3b01      	subs	r3, #1
 800f01e:	d503      	bpl.n	800f028 <__sfp+0x28>
 800f020:	6833      	ldr	r3, [r6, #0]
 800f022:	b30b      	cbz	r3, 800f068 <__sfp+0x68>
 800f024:	6836      	ldr	r6, [r6, #0]
 800f026:	e7f7      	b.n	800f018 <__sfp+0x18>
 800f028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f02c:	b9d5      	cbnz	r5, 800f064 <__sfp+0x64>
 800f02e:	4b16      	ldr	r3, [pc, #88]	; (800f088 <__sfp+0x88>)
 800f030:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f034:	60e3      	str	r3, [r4, #12]
 800f036:	6665      	str	r5, [r4, #100]	; 0x64
 800f038:	f000 fbb2 	bl	800f7a0 <__retarget_lock_init_recursive>
 800f03c:	f7ff ff96 	bl	800ef6c <__sfp_lock_release>
 800f040:	2208      	movs	r2, #8
 800f042:	4629      	mov	r1, r5
 800f044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f04c:	6025      	str	r5, [r4, #0]
 800f04e:	61a5      	str	r5, [r4, #24]
 800f050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f054:	f7fd f8aa 	bl	800c1ac <memset>
 800f058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f05c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f060:	4620      	mov	r0, r4
 800f062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f064:	3468      	adds	r4, #104	; 0x68
 800f066:	e7d9      	b.n	800f01c <__sfp+0x1c>
 800f068:	2104      	movs	r1, #4
 800f06a:	4638      	mov	r0, r7
 800f06c:	f7ff ff62 	bl	800ef34 <__sfmoreglue>
 800f070:	4604      	mov	r4, r0
 800f072:	6030      	str	r0, [r6, #0]
 800f074:	2800      	cmp	r0, #0
 800f076:	d1d5      	bne.n	800f024 <__sfp+0x24>
 800f078:	f7ff ff78 	bl	800ef6c <__sfp_lock_release>
 800f07c:	230c      	movs	r3, #12
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	e7ee      	b.n	800f060 <__sfp+0x60>
 800f082:	bf00      	nop
 800f084:	080120e8 	.word	0x080120e8
 800f088:	ffff0001 	.word	0xffff0001

0800f08c <_fwalk_reent>:
 800f08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f090:	4606      	mov	r6, r0
 800f092:	4688      	mov	r8, r1
 800f094:	2700      	movs	r7, #0
 800f096:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f09a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f09e:	f1b9 0901 	subs.w	r9, r9, #1
 800f0a2:	d505      	bpl.n	800f0b0 <_fwalk_reent+0x24>
 800f0a4:	6824      	ldr	r4, [r4, #0]
 800f0a6:	2c00      	cmp	r4, #0
 800f0a8:	d1f7      	bne.n	800f09a <_fwalk_reent+0xe>
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b0:	89ab      	ldrh	r3, [r5, #12]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d907      	bls.n	800f0c6 <_fwalk_reent+0x3a>
 800f0b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	d003      	beq.n	800f0c6 <_fwalk_reent+0x3a>
 800f0be:	4629      	mov	r1, r5
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	47c0      	blx	r8
 800f0c4:	4307      	orrs	r7, r0
 800f0c6:	3568      	adds	r5, #104	; 0x68
 800f0c8:	e7e9      	b.n	800f09e <_fwalk_reent+0x12>

0800f0ca <rshift>:
 800f0ca:	6903      	ldr	r3, [r0, #16]
 800f0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f0d4:	f100 0414 	add.w	r4, r0, #20
 800f0d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f0dc:	dd46      	ble.n	800f16c <rshift+0xa2>
 800f0de:	f011 011f 	ands.w	r1, r1, #31
 800f0e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0ea:	d10c      	bne.n	800f106 <rshift+0x3c>
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	f100 0710 	add.w	r7, r0, #16
 800f0f2:	42b1      	cmp	r1, r6
 800f0f4:	d335      	bcc.n	800f162 <rshift+0x98>
 800f0f6:	1a9b      	subs	r3, r3, r2
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	1eea      	subs	r2, r5, #3
 800f0fc:	4296      	cmp	r6, r2
 800f0fe:	bf38      	it	cc
 800f100:	2300      	movcc	r3, #0
 800f102:	4423      	add	r3, r4
 800f104:	e015      	b.n	800f132 <rshift+0x68>
 800f106:	46a1      	mov	r9, r4
 800f108:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f10c:	f1c1 0820 	rsb	r8, r1, #32
 800f110:	40cf      	lsrs	r7, r1
 800f112:	f105 0e04 	add.w	lr, r5, #4
 800f116:	4576      	cmp	r6, lr
 800f118:	46f4      	mov	ip, lr
 800f11a:	d816      	bhi.n	800f14a <rshift+0x80>
 800f11c:	1a9a      	subs	r2, r3, r2
 800f11e:	0092      	lsls	r2, r2, #2
 800f120:	3a04      	subs	r2, #4
 800f122:	3501      	adds	r5, #1
 800f124:	42ae      	cmp	r6, r5
 800f126:	bf38      	it	cc
 800f128:	2200      	movcc	r2, #0
 800f12a:	18a3      	adds	r3, r4, r2
 800f12c:	50a7      	str	r7, [r4, r2]
 800f12e:	b107      	cbz	r7, 800f132 <rshift+0x68>
 800f130:	3304      	adds	r3, #4
 800f132:	42a3      	cmp	r3, r4
 800f134:	eba3 0204 	sub.w	r2, r3, r4
 800f138:	bf08      	it	eq
 800f13a:	2300      	moveq	r3, #0
 800f13c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f140:	6102      	str	r2, [r0, #16]
 800f142:	bf08      	it	eq
 800f144:	6143      	streq	r3, [r0, #20]
 800f146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f14a:	f8dc c000 	ldr.w	ip, [ip]
 800f14e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f152:	ea4c 0707 	orr.w	r7, ip, r7
 800f156:	f849 7b04 	str.w	r7, [r9], #4
 800f15a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f15e:	40cf      	lsrs	r7, r1
 800f160:	e7d9      	b.n	800f116 <rshift+0x4c>
 800f162:	f851 cb04 	ldr.w	ip, [r1], #4
 800f166:	f847 cf04 	str.w	ip, [r7, #4]!
 800f16a:	e7c2      	b.n	800f0f2 <rshift+0x28>
 800f16c:	4623      	mov	r3, r4
 800f16e:	e7e0      	b.n	800f132 <rshift+0x68>

0800f170 <__hexdig_fun>:
 800f170:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f174:	2b09      	cmp	r3, #9
 800f176:	d802      	bhi.n	800f17e <__hexdig_fun+0xe>
 800f178:	3820      	subs	r0, #32
 800f17a:	b2c0      	uxtb	r0, r0
 800f17c:	4770      	bx	lr
 800f17e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f182:	2b05      	cmp	r3, #5
 800f184:	d801      	bhi.n	800f18a <__hexdig_fun+0x1a>
 800f186:	3847      	subs	r0, #71	; 0x47
 800f188:	e7f7      	b.n	800f17a <__hexdig_fun+0xa>
 800f18a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f18e:	2b05      	cmp	r3, #5
 800f190:	d801      	bhi.n	800f196 <__hexdig_fun+0x26>
 800f192:	3827      	subs	r0, #39	; 0x27
 800f194:	e7f1      	b.n	800f17a <__hexdig_fun+0xa>
 800f196:	2000      	movs	r0, #0
 800f198:	4770      	bx	lr
	...

0800f19c <__gethex>:
 800f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	b08b      	sub	sp, #44	; 0x2c
 800f1a2:	9305      	str	r3, [sp, #20]
 800f1a4:	4bb2      	ldr	r3, [pc, #712]	; (800f470 <__gethex+0x2d4>)
 800f1a6:	9002      	str	r0, [sp, #8]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	468b      	mov	fp, r1
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	4690      	mov	r8, r2
 800f1b0:	9303      	str	r3, [sp, #12]
 800f1b2:	f7f0 ffe5 	bl	8000180 <strlen>
 800f1b6:	4682      	mov	sl, r0
 800f1b8:	9b03      	ldr	r3, [sp, #12]
 800f1ba:	f8db 2000 	ldr.w	r2, [fp]
 800f1be:	4403      	add	r3, r0
 800f1c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f1c4:	9306      	str	r3, [sp, #24]
 800f1c6:	1c93      	adds	r3, r2, #2
 800f1c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f1cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f1d0:	32fe      	adds	r2, #254	; 0xfe
 800f1d2:	18d1      	adds	r1, r2, r3
 800f1d4:	461f      	mov	r7, r3
 800f1d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f1da:	9101      	str	r1, [sp, #4]
 800f1dc:	2830      	cmp	r0, #48	; 0x30
 800f1de:	d0f8      	beq.n	800f1d2 <__gethex+0x36>
 800f1e0:	f7ff ffc6 	bl	800f170 <__hexdig_fun>
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d13a      	bne.n	800f260 <__gethex+0xc4>
 800f1ea:	4652      	mov	r2, sl
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	9903      	ldr	r1, [sp, #12]
 800f1f0:	f001 f9db 	bl	80105aa <strncmp>
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d166      	bne.n	800f2c8 <__gethex+0x12c>
 800f1fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f1fe:	eb07 060a 	add.w	r6, r7, sl
 800f202:	f7ff ffb5 	bl	800f170 <__hexdig_fun>
 800f206:	2800      	cmp	r0, #0
 800f208:	d060      	beq.n	800f2cc <__gethex+0x130>
 800f20a:	4633      	mov	r3, r6
 800f20c:	7818      	ldrb	r0, [r3, #0]
 800f20e:	461f      	mov	r7, r3
 800f210:	2830      	cmp	r0, #48	; 0x30
 800f212:	f103 0301 	add.w	r3, r3, #1
 800f216:	d0f9      	beq.n	800f20c <__gethex+0x70>
 800f218:	f7ff ffaa 	bl	800f170 <__hexdig_fun>
 800f21c:	2301      	movs	r3, #1
 800f21e:	fab0 f480 	clz	r4, r0
 800f222:	4635      	mov	r5, r6
 800f224:	0964      	lsrs	r4, r4, #5
 800f226:	9301      	str	r3, [sp, #4]
 800f228:	463a      	mov	r2, r7
 800f22a:	4616      	mov	r6, r2
 800f22c:	7830      	ldrb	r0, [r6, #0]
 800f22e:	3201      	adds	r2, #1
 800f230:	f7ff ff9e 	bl	800f170 <__hexdig_fun>
 800f234:	2800      	cmp	r0, #0
 800f236:	d1f8      	bne.n	800f22a <__gethex+0x8e>
 800f238:	4652      	mov	r2, sl
 800f23a:	4630      	mov	r0, r6
 800f23c:	9903      	ldr	r1, [sp, #12]
 800f23e:	f001 f9b4 	bl	80105aa <strncmp>
 800f242:	b980      	cbnz	r0, 800f266 <__gethex+0xca>
 800f244:	b94d      	cbnz	r5, 800f25a <__gethex+0xbe>
 800f246:	eb06 050a 	add.w	r5, r6, sl
 800f24a:	462a      	mov	r2, r5
 800f24c:	4616      	mov	r6, r2
 800f24e:	7830      	ldrb	r0, [r6, #0]
 800f250:	3201      	adds	r2, #1
 800f252:	f7ff ff8d 	bl	800f170 <__hexdig_fun>
 800f256:	2800      	cmp	r0, #0
 800f258:	d1f8      	bne.n	800f24c <__gethex+0xb0>
 800f25a:	1bad      	subs	r5, r5, r6
 800f25c:	00ad      	lsls	r5, r5, #2
 800f25e:	e004      	b.n	800f26a <__gethex+0xce>
 800f260:	2400      	movs	r4, #0
 800f262:	4625      	mov	r5, r4
 800f264:	e7e0      	b.n	800f228 <__gethex+0x8c>
 800f266:	2d00      	cmp	r5, #0
 800f268:	d1f7      	bne.n	800f25a <__gethex+0xbe>
 800f26a:	7833      	ldrb	r3, [r6, #0]
 800f26c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f270:	2b50      	cmp	r3, #80	; 0x50
 800f272:	d139      	bne.n	800f2e8 <__gethex+0x14c>
 800f274:	7873      	ldrb	r3, [r6, #1]
 800f276:	2b2b      	cmp	r3, #43	; 0x2b
 800f278:	d02a      	beq.n	800f2d0 <__gethex+0x134>
 800f27a:	2b2d      	cmp	r3, #45	; 0x2d
 800f27c:	d02c      	beq.n	800f2d8 <__gethex+0x13c>
 800f27e:	f04f 0900 	mov.w	r9, #0
 800f282:	1c71      	adds	r1, r6, #1
 800f284:	7808      	ldrb	r0, [r1, #0]
 800f286:	f7ff ff73 	bl	800f170 <__hexdig_fun>
 800f28a:	1e43      	subs	r3, r0, #1
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b18      	cmp	r3, #24
 800f290:	d82a      	bhi.n	800f2e8 <__gethex+0x14c>
 800f292:	f1a0 0210 	sub.w	r2, r0, #16
 800f296:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f29a:	f7ff ff69 	bl	800f170 <__hexdig_fun>
 800f29e:	1e43      	subs	r3, r0, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b18      	cmp	r3, #24
 800f2a4:	d91b      	bls.n	800f2de <__gethex+0x142>
 800f2a6:	f1b9 0f00 	cmp.w	r9, #0
 800f2aa:	d000      	beq.n	800f2ae <__gethex+0x112>
 800f2ac:	4252      	negs	r2, r2
 800f2ae:	4415      	add	r5, r2
 800f2b0:	f8cb 1000 	str.w	r1, [fp]
 800f2b4:	b1d4      	cbz	r4, 800f2ec <__gethex+0x150>
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bf14      	ite	ne
 800f2bc:	2700      	movne	r7, #0
 800f2be:	2706      	moveq	r7, #6
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	b00b      	add	sp, #44	; 0x2c
 800f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c8:	463e      	mov	r6, r7
 800f2ca:	4625      	mov	r5, r4
 800f2cc:	2401      	movs	r4, #1
 800f2ce:	e7cc      	b.n	800f26a <__gethex+0xce>
 800f2d0:	f04f 0900 	mov.w	r9, #0
 800f2d4:	1cb1      	adds	r1, r6, #2
 800f2d6:	e7d5      	b.n	800f284 <__gethex+0xe8>
 800f2d8:	f04f 0901 	mov.w	r9, #1
 800f2dc:	e7fa      	b.n	800f2d4 <__gethex+0x138>
 800f2de:	230a      	movs	r3, #10
 800f2e0:	fb03 0202 	mla	r2, r3, r2, r0
 800f2e4:	3a10      	subs	r2, #16
 800f2e6:	e7d6      	b.n	800f296 <__gethex+0xfa>
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	e7e1      	b.n	800f2b0 <__gethex+0x114>
 800f2ec:	4621      	mov	r1, r4
 800f2ee:	1bf3      	subs	r3, r6, r7
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	2b07      	cmp	r3, #7
 800f2f4:	dc0a      	bgt.n	800f30c <__gethex+0x170>
 800f2f6:	9802      	ldr	r0, [sp, #8]
 800f2f8:	f000 fae6 	bl	800f8c8 <_Balloc>
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	b940      	cbnz	r0, 800f312 <__gethex+0x176>
 800f300:	4602      	mov	r2, r0
 800f302:	21de      	movs	r1, #222	; 0xde
 800f304:	4b5b      	ldr	r3, [pc, #364]	; (800f474 <__gethex+0x2d8>)
 800f306:	485c      	ldr	r0, [pc, #368]	; (800f478 <__gethex+0x2dc>)
 800f308:	f001 f982 	bl	8010610 <__assert_func>
 800f30c:	3101      	adds	r1, #1
 800f30e:	105b      	asrs	r3, r3, #1
 800f310:	e7ef      	b.n	800f2f2 <__gethex+0x156>
 800f312:	f04f 0b00 	mov.w	fp, #0
 800f316:	f100 0914 	add.w	r9, r0, #20
 800f31a:	f1ca 0301 	rsb	r3, sl, #1
 800f31e:	f8cd 9010 	str.w	r9, [sp, #16]
 800f322:	f8cd b004 	str.w	fp, [sp, #4]
 800f326:	9308      	str	r3, [sp, #32]
 800f328:	42b7      	cmp	r7, r6
 800f32a:	d33f      	bcc.n	800f3ac <__gethex+0x210>
 800f32c:	9f04      	ldr	r7, [sp, #16]
 800f32e:	9b01      	ldr	r3, [sp, #4]
 800f330:	f847 3b04 	str.w	r3, [r7], #4
 800f334:	eba7 0709 	sub.w	r7, r7, r9
 800f338:	10bf      	asrs	r7, r7, #2
 800f33a:	6127      	str	r7, [r4, #16]
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 fbb5 	bl	800faac <__hi0bits>
 800f342:	017f      	lsls	r7, r7, #5
 800f344:	f8d8 6000 	ldr.w	r6, [r8]
 800f348:	1a3f      	subs	r7, r7, r0
 800f34a:	42b7      	cmp	r7, r6
 800f34c:	dd62      	ble.n	800f414 <__gethex+0x278>
 800f34e:	1bbf      	subs	r7, r7, r6
 800f350:	4639      	mov	r1, r7
 800f352:	4620      	mov	r0, r4
 800f354:	f000 ff4f 	bl	80101f6 <__any_on>
 800f358:	4682      	mov	sl, r0
 800f35a:	b1a8      	cbz	r0, 800f388 <__gethex+0x1ec>
 800f35c:	f04f 0a01 	mov.w	sl, #1
 800f360:	1e7b      	subs	r3, r7, #1
 800f362:	1159      	asrs	r1, r3, #5
 800f364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f368:	f003 021f 	and.w	r2, r3, #31
 800f36c:	fa0a f202 	lsl.w	r2, sl, r2
 800f370:	420a      	tst	r2, r1
 800f372:	d009      	beq.n	800f388 <__gethex+0x1ec>
 800f374:	4553      	cmp	r3, sl
 800f376:	dd05      	ble.n	800f384 <__gethex+0x1e8>
 800f378:	4620      	mov	r0, r4
 800f37a:	1eb9      	subs	r1, r7, #2
 800f37c:	f000 ff3b 	bl	80101f6 <__any_on>
 800f380:	2800      	cmp	r0, #0
 800f382:	d144      	bne.n	800f40e <__gethex+0x272>
 800f384:	f04f 0a02 	mov.w	sl, #2
 800f388:	4639      	mov	r1, r7
 800f38a:	4620      	mov	r0, r4
 800f38c:	f7ff fe9d 	bl	800f0ca <rshift>
 800f390:	443d      	add	r5, r7
 800f392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f396:	42ab      	cmp	r3, r5
 800f398:	da4a      	bge.n	800f430 <__gethex+0x294>
 800f39a:	4621      	mov	r1, r4
 800f39c:	9802      	ldr	r0, [sp, #8]
 800f39e:	f000 fad3 	bl	800f948 <_Bfree>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3a6:	27a3      	movs	r7, #163	; 0xa3
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	e789      	b.n	800f2c0 <__gethex+0x124>
 800f3ac:	1e73      	subs	r3, r6, #1
 800f3ae:	9a06      	ldr	r2, [sp, #24]
 800f3b0:	9307      	str	r3, [sp, #28]
 800f3b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d019      	beq.n	800f3ee <__gethex+0x252>
 800f3ba:	f1bb 0f20 	cmp.w	fp, #32
 800f3be:	d107      	bne.n	800f3d0 <__gethex+0x234>
 800f3c0:	9b04      	ldr	r3, [sp, #16]
 800f3c2:	9a01      	ldr	r2, [sp, #4]
 800f3c4:	f843 2b04 	str.w	r2, [r3], #4
 800f3c8:	9304      	str	r3, [sp, #16]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	469b      	mov	fp, r3
 800f3ce:	9301      	str	r3, [sp, #4]
 800f3d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f3d4:	f7ff fecc 	bl	800f170 <__hexdig_fun>
 800f3d8:	9b01      	ldr	r3, [sp, #4]
 800f3da:	f000 000f 	and.w	r0, r0, #15
 800f3de:	fa00 f00b 	lsl.w	r0, r0, fp
 800f3e2:	4303      	orrs	r3, r0
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	f10b 0b04 	add.w	fp, fp, #4
 800f3ea:	9b07      	ldr	r3, [sp, #28]
 800f3ec:	e00d      	b.n	800f40a <__gethex+0x26e>
 800f3ee:	9a08      	ldr	r2, [sp, #32]
 800f3f0:	1e73      	subs	r3, r6, #1
 800f3f2:	4413      	add	r3, r2
 800f3f4:	42bb      	cmp	r3, r7
 800f3f6:	d3e0      	bcc.n	800f3ba <__gethex+0x21e>
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	4652      	mov	r2, sl
 800f3fc:	9903      	ldr	r1, [sp, #12]
 800f3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f400:	f001 f8d3 	bl	80105aa <strncmp>
 800f404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f406:	2800      	cmp	r0, #0
 800f408:	d1d7      	bne.n	800f3ba <__gethex+0x21e>
 800f40a:	461e      	mov	r6, r3
 800f40c:	e78c      	b.n	800f328 <__gethex+0x18c>
 800f40e:	f04f 0a03 	mov.w	sl, #3
 800f412:	e7b9      	b.n	800f388 <__gethex+0x1ec>
 800f414:	da09      	bge.n	800f42a <__gethex+0x28e>
 800f416:	1bf7      	subs	r7, r6, r7
 800f418:	4621      	mov	r1, r4
 800f41a:	463a      	mov	r2, r7
 800f41c:	9802      	ldr	r0, [sp, #8]
 800f41e:	f000 fcab 	bl	800fd78 <__lshift>
 800f422:	4604      	mov	r4, r0
 800f424:	1bed      	subs	r5, r5, r7
 800f426:	f100 0914 	add.w	r9, r0, #20
 800f42a:	f04f 0a00 	mov.w	sl, #0
 800f42e:	e7b0      	b.n	800f392 <__gethex+0x1f6>
 800f430:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f434:	42a8      	cmp	r0, r5
 800f436:	dd72      	ble.n	800f51e <__gethex+0x382>
 800f438:	1b45      	subs	r5, r0, r5
 800f43a:	42ae      	cmp	r6, r5
 800f43c:	dc35      	bgt.n	800f4aa <__gethex+0x30e>
 800f43e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f442:	2b02      	cmp	r3, #2
 800f444:	d029      	beq.n	800f49a <__gethex+0x2fe>
 800f446:	2b03      	cmp	r3, #3
 800f448:	d02b      	beq.n	800f4a2 <__gethex+0x306>
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d11c      	bne.n	800f488 <__gethex+0x2ec>
 800f44e:	42ae      	cmp	r6, r5
 800f450:	d11a      	bne.n	800f488 <__gethex+0x2ec>
 800f452:	2e01      	cmp	r6, #1
 800f454:	d112      	bne.n	800f47c <__gethex+0x2e0>
 800f456:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f45a:	9a05      	ldr	r2, [sp, #20]
 800f45c:	2762      	movs	r7, #98	; 0x62
 800f45e:	6013      	str	r3, [r2, #0]
 800f460:	2301      	movs	r3, #1
 800f462:	6123      	str	r3, [r4, #16]
 800f464:	f8c9 3000 	str.w	r3, [r9]
 800f468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f46a:	601c      	str	r4, [r3, #0]
 800f46c:	e728      	b.n	800f2c0 <__gethex+0x124>
 800f46e:	bf00      	nop
 800f470:	080123d4 	.word	0x080123d4
 800f474:	080122f8 	.word	0x080122f8
 800f478:	0801236c 	.word	0x0801236c
 800f47c:	4620      	mov	r0, r4
 800f47e:	1e71      	subs	r1, r6, #1
 800f480:	f000 feb9 	bl	80101f6 <__any_on>
 800f484:	2800      	cmp	r0, #0
 800f486:	d1e6      	bne.n	800f456 <__gethex+0x2ba>
 800f488:	4621      	mov	r1, r4
 800f48a:	9802      	ldr	r0, [sp, #8]
 800f48c:	f000 fa5c 	bl	800f948 <_Bfree>
 800f490:	2300      	movs	r3, #0
 800f492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f494:	2750      	movs	r7, #80	; 0x50
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	e712      	b.n	800f2c0 <__gethex+0x124>
 800f49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f3      	bne.n	800f488 <__gethex+0x2ec>
 800f4a0:	e7d9      	b.n	800f456 <__gethex+0x2ba>
 800f4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1d6      	bne.n	800f456 <__gethex+0x2ba>
 800f4a8:	e7ee      	b.n	800f488 <__gethex+0x2ec>
 800f4aa:	1e6f      	subs	r7, r5, #1
 800f4ac:	f1ba 0f00 	cmp.w	sl, #0
 800f4b0:	d132      	bne.n	800f518 <__gethex+0x37c>
 800f4b2:	b127      	cbz	r7, 800f4be <__gethex+0x322>
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 fe9d 	bl	80101f6 <__any_on>
 800f4bc:	4682      	mov	sl, r0
 800f4be:	2101      	movs	r1, #1
 800f4c0:	117b      	asrs	r3, r7, #5
 800f4c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f4c6:	f007 071f 	and.w	r7, r7, #31
 800f4ca:	fa01 f707 	lsl.w	r7, r1, r7
 800f4ce:	421f      	tst	r7, r3
 800f4d0:	f04f 0702 	mov.w	r7, #2
 800f4d4:	4629      	mov	r1, r5
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	bf18      	it	ne
 800f4da:	f04a 0a02 	orrne.w	sl, sl, #2
 800f4de:	1b76      	subs	r6, r6, r5
 800f4e0:	f7ff fdf3 	bl	800f0ca <rshift>
 800f4e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f4e8:	f1ba 0f00 	cmp.w	sl, #0
 800f4ec:	d048      	beq.n	800f580 <__gethex+0x3e4>
 800f4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	d015      	beq.n	800f522 <__gethex+0x386>
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d017      	beq.n	800f52a <__gethex+0x38e>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d109      	bne.n	800f512 <__gethex+0x376>
 800f4fe:	f01a 0f02 	tst.w	sl, #2
 800f502:	d006      	beq.n	800f512 <__gethex+0x376>
 800f504:	f8d9 0000 	ldr.w	r0, [r9]
 800f508:	ea4a 0a00 	orr.w	sl, sl, r0
 800f50c:	f01a 0f01 	tst.w	sl, #1
 800f510:	d10e      	bne.n	800f530 <__gethex+0x394>
 800f512:	f047 0710 	orr.w	r7, r7, #16
 800f516:	e033      	b.n	800f580 <__gethex+0x3e4>
 800f518:	f04f 0a01 	mov.w	sl, #1
 800f51c:	e7cf      	b.n	800f4be <__gethex+0x322>
 800f51e:	2701      	movs	r7, #1
 800f520:	e7e2      	b.n	800f4e8 <__gethex+0x34c>
 800f522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f524:	f1c3 0301 	rsb	r3, r3, #1
 800f528:	9315      	str	r3, [sp, #84]	; 0x54
 800f52a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d0f0      	beq.n	800f512 <__gethex+0x376>
 800f530:	f04f 0c00 	mov.w	ip, #0
 800f534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f538:	f104 0314 	add.w	r3, r4, #20
 800f53c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f544:	4618      	mov	r0, r3
 800f546:	f853 2b04 	ldr.w	r2, [r3], #4
 800f54a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f54e:	d01c      	beq.n	800f58a <__gethex+0x3ee>
 800f550:	3201      	adds	r2, #1
 800f552:	6002      	str	r2, [r0, #0]
 800f554:	2f02      	cmp	r7, #2
 800f556:	f104 0314 	add.w	r3, r4, #20
 800f55a:	d13d      	bne.n	800f5d8 <__gethex+0x43c>
 800f55c:	f8d8 2000 	ldr.w	r2, [r8]
 800f560:	3a01      	subs	r2, #1
 800f562:	42b2      	cmp	r2, r6
 800f564:	d10a      	bne.n	800f57c <__gethex+0x3e0>
 800f566:	2201      	movs	r2, #1
 800f568:	1171      	asrs	r1, r6, #5
 800f56a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f56e:	f006 061f 	and.w	r6, r6, #31
 800f572:	fa02 f606 	lsl.w	r6, r2, r6
 800f576:	421e      	tst	r6, r3
 800f578:	bf18      	it	ne
 800f57a:	4617      	movne	r7, r2
 800f57c:	f047 0720 	orr.w	r7, r7, #32
 800f580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f582:	601c      	str	r4, [r3, #0]
 800f584:	9b05      	ldr	r3, [sp, #20]
 800f586:	601d      	str	r5, [r3, #0]
 800f588:	e69a      	b.n	800f2c0 <__gethex+0x124>
 800f58a:	4299      	cmp	r1, r3
 800f58c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f590:	d8d8      	bhi.n	800f544 <__gethex+0x3a8>
 800f592:	68a3      	ldr	r3, [r4, #8]
 800f594:	459b      	cmp	fp, r3
 800f596:	db17      	blt.n	800f5c8 <__gethex+0x42c>
 800f598:	6861      	ldr	r1, [r4, #4]
 800f59a:	9802      	ldr	r0, [sp, #8]
 800f59c:	3101      	adds	r1, #1
 800f59e:	f000 f993 	bl	800f8c8 <_Balloc>
 800f5a2:	4681      	mov	r9, r0
 800f5a4:	b918      	cbnz	r0, 800f5ae <__gethex+0x412>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	2184      	movs	r1, #132	; 0x84
 800f5aa:	4b19      	ldr	r3, [pc, #100]	; (800f610 <__gethex+0x474>)
 800f5ac:	e6ab      	b.n	800f306 <__gethex+0x16a>
 800f5ae:	6922      	ldr	r2, [r4, #16]
 800f5b0:	f104 010c 	add.w	r1, r4, #12
 800f5b4:	3202      	adds	r2, #2
 800f5b6:	0092      	lsls	r2, r2, #2
 800f5b8:	300c      	adds	r0, #12
 800f5ba:	f7fc fde9 	bl	800c190 <memcpy>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	9802      	ldr	r0, [sp, #8]
 800f5c2:	f000 f9c1 	bl	800f948 <_Bfree>
 800f5c6:	464c      	mov	r4, r9
 800f5c8:	6923      	ldr	r3, [r4, #16]
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	6122      	str	r2, [r4, #16]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5d4:	615a      	str	r2, [r3, #20]
 800f5d6:	e7bd      	b.n	800f554 <__gethex+0x3b8>
 800f5d8:	6922      	ldr	r2, [r4, #16]
 800f5da:	455a      	cmp	r2, fp
 800f5dc:	dd0b      	ble.n	800f5f6 <__gethex+0x45a>
 800f5de:	2101      	movs	r1, #1
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f7ff fd72 	bl	800f0ca <rshift>
 800f5e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5ea:	3501      	adds	r5, #1
 800f5ec:	42ab      	cmp	r3, r5
 800f5ee:	f6ff aed4 	blt.w	800f39a <__gethex+0x1fe>
 800f5f2:	2701      	movs	r7, #1
 800f5f4:	e7c2      	b.n	800f57c <__gethex+0x3e0>
 800f5f6:	f016 061f 	ands.w	r6, r6, #31
 800f5fa:	d0fa      	beq.n	800f5f2 <__gethex+0x456>
 800f5fc:	4453      	add	r3, sl
 800f5fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f602:	f000 fa53 	bl	800faac <__hi0bits>
 800f606:	f1c6 0620 	rsb	r6, r6, #32
 800f60a:	42b0      	cmp	r0, r6
 800f60c:	dbe7      	blt.n	800f5de <__gethex+0x442>
 800f60e:	e7f0      	b.n	800f5f2 <__gethex+0x456>
 800f610:	080122f8 	.word	0x080122f8

0800f614 <L_shift>:
 800f614:	f1c2 0208 	rsb	r2, r2, #8
 800f618:	0092      	lsls	r2, r2, #2
 800f61a:	b570      	push	{r4, r5, r6, lr}
 800f61c:	f1c2 0620 	rsb	r6, r2, #32
 800f620:	6843      	ldr	r3, [r0, #4]
 800f622:	6804      	ldr	r4, [r0, #0]
 800f624:	fa03 f506 	lsl.w	r5, r3, r6
 800f628:	432c      	orrs	r4, r5
 800f62a:	40d3      	lsrs	r3, r2
 800f62c:	6004      	str	r4, [r0, #0]
 800f62e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f632:	4288      	cmp	r0, r1
 800f634:	d3f4      	bcc.n	800f620 <L_shift+0xc>
 800f636:	bd70      	pop	{r4, r5, r6, pc}

0800f638 <__match>:
 800f638:	b530      	push	{r4, r5, lr}
 800f63a:	6803      	ldr	r3, [r0, #0]
 800f63c:	3301      	adds	r3, #1
 800f63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f642:	b914      	cbnz	r4, 800f64a <__match+0x12>
 800f644:	6003      	str	r3, [r0, #0]
 800f646:	2001      	movs	r0, #1
 800f648:	bd30      	pop	{r4, r5, pc}
 800f64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f64e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f652:	2d19      	cmp	r5, #25
 800f654:	bf98      	it	ls
 800f656:	3220      	addls	r2, #32
 800f658:	42a2      	cmp	r2, r4
 800f65a:	d0f0      	beq.n	800f63e <__match+0x6>
 800f65c:	2000      	movs	r0, #0
 800f65e:	e7f3      	b.n	800f648 <__match+0x10>

0800f660 <__hexnan>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	2500      	movs	r5, #0
 800f666:	680b      	ldr	r3, [r1, #0]
 800f668:	4682      	mov	sl, r0
 800f66a:	115e      	asrs	r6, r3, #5
 800f66c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f670:	f013 031f 	ands.w	r3, r3, #31
 800f674:	bf18      	it	ne
 800f676:	3604      	addne	r6, #4
 800f678:	1f37      	subs	r7, r6, #4
 800f67a:	46b9      	mov	r9, r7
 800f67c:	463c      	mov	r4, r7
 800f67e:	46ab      	mov	fp, r5
 800f680:	b087      	sub	sp, #28
 800f682:	4690      	mov	r8, r2
 800f684:	6802      	ldr	r2, [r0, #0]
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	f846 5c04 	str.w	r5, [r6, #-4]
 800f68c:	9502      	str	r5, [sp, #8]
 800f68e:	7851      	ldrb	r1, [r2, #1]
 800f690:	1c53      	adds	r3, r2, #1
 800f692:	9303      	str	r3, [sp, #12]
 800f694:	b341      	cbz	r1, 800f6e8 <__hexnan+0x88>
 800f696:	4608      	mov	r0, r1
 800f698:	9205      	str	r2, [sp, #20]
 800f69a:	9104      	str	r1, [sp, #16]
 800f69c:	f7ff fd68 	bl	800f170 <__hexdig_fun>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d14f      	bne.n	800f744 <__hexnan+0xe4>
 800f6a4:	9904      	ldr	r1, [sp, #16]
 800f6a6:	9a05      	ldr	r2, [sp, #20]
 800f6a8:	2920      	cmp	r1, #32
 800f6aa:	d818      	bhi.n	800f6de <__hexnan+0x7e>
 800f6ac:	9b02      	ldr	r3, [sp, #8]
 800f6ae:	459b      	cmp	fp, r3
 800f6b0:	dd13      	ble.n	800f6da <__hexnan+0x7a>
 800f6b2:	454c      	cmp	r4, r9
 800f6b4:	d206      	bcs.n	800f6c4 <__hexnan+0x64>
 800f6b6:	2d07      	cmp	r5, #7
 800f6b8:	dc04      	bgt.n	800f6c4 <__hexnan+0x64>
 800f6ba:	462a      	mov	r2, r5
 800f6bc:	4649      	mov	r1, r9
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff ffa8 	bl	800f614 <L_shift>
 800f6c4:	4544      	cmp	r4, r8
 800f6c6:	d950      	bls.n	800f76a <__hexnan+0x10a>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f1a4 0904 	sub.w	r9, r4, #4
 800f6ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6d2:	461d      	mov	r5, r3
 800f6d4:	464c      	mov	r4, r9
 800f6d6:	f8cd b008 	str.w	fp, [sp, #8]
 800f6da:	9a03      	ldr	r2, [sp, #12]
 800f6dc:	e7d7      	b.n	800f68e <__hexnan+0x2e>
 800f6de:	2929      	cmp	r1, #41	; 0x29
 800f6e0:	d156      	bne.n	800f790 <__hexnan+0x130>
 800f6e2:	3202      	adds	r2, #2
 800f6e4:	f8ca 2000 	str.w	r2, [sl]
 800f6e8:	f1bb 0f00 	cmp.w	fp, #0
 800f6ec:	d050      	beq.n	800f790 <__hexnan+0x130>
 800f6ee:	454c      	cmp	r4, r9
 800f6f0:	d206      	bcs.n	800f700 <__hexnan+0xa0>
 800f6f2:	2d07      	cmp	r5, #7
 800f6f4:	dc04      	bgt.n	800f700 <__hexnan+0xa0>
 800f6f6:	462a      	mov	r2, r5
 800f6f8:	4649      	mov	r1, r9
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7ff ff8a 	bl	800f614 <L_shift>
 800f700:	4544      	cmp	r4, r8
 800f702:	d934      	bls.n	800f76e <__hexnan+0x10e>
 800f704:	4623      	mov	r3, r4
 800f706:	f1a8 0204 	sub.w	r2, r8, #4
 800f70a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f70e:	429f      	cmp	r7, r3
 800f710:	f842 1f04 	str.w	r1, [r2, #4]!
 800f714:	d2f9      	bcs.n	800f70a <__hexnan+0xaa>
 800f716:	1b3b      	subs	r3, r7, r4
 800f718:	f023 0303 	bic.w	r3, r3, #3
 800f71c:	3304      	adds	r3, #4
 800f71e:	3401      	adds	r4, #1
 800f720:	3e03      	subs	r6, #3
 800f722:	42b4      	cmp	r4, r6
 800f724:	bf88      	it	hi
 800f726:	2304      	movhi	r3, #4
 800f728:	2200      	movs	r2, #0
 800f72a:	4443      	add	r3, r8
 800f72c:	f843 2b04 	str.w	r2, [r3], #4
 800f730:	429f      	cmp	r7, r3
 800f732:	d2fb      	bcs.n	800f72c <__hexnan+0xcc>
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	b91b      	cbnz	r3, 800f740 <__hexnan+0xe0>
 800f738:	4547      	cmp	r7, r8
 800f73a:	d127      	bne.n	800f78c <__hexnan+0x12c>
 800f73c:	2301      	movs	r3, #1
 800f73e:	603b      	str	r3, [r7, #0]
 800f740:	2005      	movs	r0, #5
 800f742:	e026      	b.n	800f792 <__hexnan+0x132>
 800f744:	3501      	adds	r5, #1
 800f746:	2d08      	cmp	r5, #8
 800f748:	f10b 0b01 	add.w	fp, fp, #1
 800f74c:	dd06      	ble.n	800f75c <__hexnan+0xfc>
 800f74e:	4544      	cmp	r4, r8
 800f750:	d9c3      	bls.n	800f6da <__hexnan+0x7a>
 800f752:	2300      	movs	r3, #0
 800f754:	2501      	movs	r5, #1
 800f756:	f844 3c04 	str.w	r3, [r4, #-4]
 800f75a:	3c04      	subs	r4, #4
 800f75c:	6822      	ldr	r2, [r4, #0]
 800f75e:	f000 000f 	and.w	r0, r0, #15
 800f762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f766:	6022      	str	r2, [r4, #0]
 800f768:	e7b7      	b.n	800f6da <__hexnan+0x7a>
 800f76a:	2508      	movs	r5, #8
 800f76c:	e7b5      	b.n	800f6da <__hexnan+0x7a>
 800f76e:	9b01      	ldr	r3, [sp, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d0df      	beq.n	800f734 <__hexnan+0xd4>
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	f1c3 0320 	rsb	r3, r3, #32
 800f77c:	fa22 f303 	lsr.w	r3, r2, r3
 800f780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f784:	401a      	ands	r2, r3
 800f786:	f846 2c04 	str.w	r2, [r6, #-4]
 800f78a:	e7d3      	b.n	800f734 <__hexnan+0xd4>
 800f78c:	3f04      	subs	r7, #4
 800f78e:	e7d1      	b.n	800f734 <__hexnan+0xd4>
 800f790:	2004      	movs	r0, #4
 800f792:	b007      	add	sp, #28
 800f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f798 <_localeconv_r>:
 800f798:	4800      	ldr	r0, [pc, #0]	; (800f79c <_localeconv_r+0x4>)
 800f79a:	4770      	bx	lr
 800f79c:	20000188 	.word	0x20000188

0800f7a0 <__retarget_lock_init_recursive>:
 800f7a0:	4770      	bx	lr

0800f7a2 <__retarget_lock_acquire_recursive>:
 800f7a2:	4770      	bx	lr

0800f7a4 <__retarget_lock_release_recursive>:
 800f7a4:	4770      	bx	lr

0800f7a6 <__swhatbuf_r>:
 800f7a6:	b570      	push	{r4, r5, r6, lr}
 800f7a8:	460e      	mov	r6, r1
 800f7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ae:	4614      	mov	r4, r2
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	461d      	mov	r5, r3
 800f7b4:	b096      	sub	sp, #88	; 0x58
 800f7b6:	da08      	bge.n	800f7ca <__swhatbuf_r+0x24>
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7be:	602a      	str	r2, [r5, #0]
 800f7c0:	061a      	lsls	r2, r3, #24
 800f7c2:	d410      	bmi.n	800f7e6 <__swhatbuf_r+0x40>
 800f7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7c8:	e00e      	b.n	800f7e8 <__swhatbuf_r+0x42>
 800f7ca:	466a      	mov	r2, sp
 800f7cc:	f000 ff60 	bl	8010690 <_fstat_r>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	dbf1      	blt.n	800f7b8 <__swhatbuf_r+0x12>
 800f7d4:	9a01      	ldr	r2, [sp, #4]
 800f7d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7de:	425a      	negs	r2, r3
 800f7e0:	415a      	adcs	r2, r3
 800f7e2:	602a      	str	r2, [r5, #0]
 800f7e4:	e7ee      	b.n	800f7c4 <__swhatbuf_r+0x1e>
 800f7e6:	2340      	movs	r3, #64	; 0x40
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	b016      	add	sp, #88	; 0x58
 800f7ee:	bd70      	pop	{r4, r5, r6, pc}

0800f7f0 <__smakebuf_r>:
 800f7f0:	898b      	ldrh	r3, [r1, #12]
 800f7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7f4:	079d      	lsls	r5, r3, #30
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460c      	mov	r4, r1
 800f7fa:	d507      	bpl.n	800f80c <__smakebuf_r+0x1c>
 800f7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	6123      	str	r3, [r4, #16]
 800f804:	2301      	movs	r3, #1
 800f806:	6163      	str	r3, [r4, #20]
 800f808:	b002      	add	sp, #8
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	466a      	mov	r2, sp
 800f80e:	ab01      	add	r3, sp, #4
 800f810:	f7ff ffc9 	bl	800f7a6 <__swhatbuf_r>
 800f814:	9900      	ldr	r1, [sp, #0]
 800f816:	4605      	mov	r5, r0
 800f818:	4630      	mov	r0, r6
 800f81a:	f7fc fd37 	bl	800c28c <_malloc_r>
 800f81e:	b948      	cbnz	r0, 800f834 <__smakebuf_r+0x44>
 800f820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f824:	059a      	lsls	r2, r3, #22
 800f826:	d4ef      	bmi.n	800f808 <__smakebuf_r+0x18>
 800f828:	f023 0303 	bic.w	r3, r3, #3
 800f82c:	f043 0302 	orr.w	r3, r3, #2
 800f830:	81a3      	strh	r3, [r4, #12]
 800f832:	e7e3      	b.n	800f7fc <__smakebuf_r+0xc>
 800f834:	4b0d      	ldr	r3, [pc, #52]	; (800f86c <__smakebuf_r+0x7c>)
 800f836:	62b3      	str	r3, [r6, #40]	; 0x28
 800f838:	89a3      	ldrh	r3, [r4, #12]
 800f83a:	6020      	str	r0, [r4, #0]
 800f83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f840:	81a3      	strh	r3, [r4, #12]
 800f842:	9b00      	ldr	r3, [sp, #0]
 800f844:	6120      	str	r0, [r4, #16]
 800f846:	6163      	str	r3, [r4, #20]
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	b15b      	cbz	r3, 800f864 <__smakebuf_r+0x74>
 800f84c:	4630      	mov	r0, r6
 800f84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f852:	f000 ff2f 	bl	80106b4 <_isatty_r>
 800f856:	b128      	cbz	r0, 800f864 <__smakebuf_r+0x74>
 800f858:	89a3      	ldrh	r3, [r4, #12]
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	f043 0301 	orr.w	r3, r3, #1
 800f862:	81a3      	strh	r3, [r4, #12]
 800f864:	89a0      	ldrh	r0, [r4, #12]
 800f866:	4305      	orrs	r5, r0
 800f868:	81a5      	strh	r5, [r4, #12]
 800f86a:	e7cd      	b.n	800f808 <__smakebuf_r+0x18>
 800f86c:	0800ef29 	.word	0x0800ef29

0800f870 <__ascii_mbtowc>:
 800f870:	b082      	sub	sp, #8
 800f872:	b901      	cbnz	r1, 800f876 <__ascii_mbtowc+0x6>
 800f874:	a901      	add	r1, sp, #4
 800f876:	b142      	cbz	r2, 800f88a <__ascii_mbtowc+0x1a>
 800f878:	b14b      	cbz	r3, 800f88e <__ascii_mbtowc+0x1e>
 800f87a:	7813      	ldrb	r3, [r2, #0]
 800f87c:	600b      	str	r3, [r1, #0]
 800f87e:	7812      	ldrb	r2, [r2, #0]
 800f880:	1e10      	subs	r0, r2, #0
 800f882:	bf18      	it	ne
 800f884:	2001      	movne	r0, #1
 800f886:	b002      	add	sp, #8
 800f888:	4770      	bx	lr
 800f88a:	4610      	mov	r0, r2
 800f88c:	e7fb      	b.n	800f886 <__ascii_mbtowc+0x16>
 800f88e:	f06f 0001 	mvn.w	r0, #1
 800f892:	e7f8      	b.n	800f886 <__ascii_mbtowc+0x16>

0800f894 <memchr>:
 800f894:	4603      	mov	r3, r0
 800f896:	b510      	push	{r4, lr}
 800f898:	b2c9      	uxtb	r1, r1
 800f89a:	4402      	add	r2, r0
 800f89c:	4293      	cmp	r3, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	d101      	bne.n	800f8a6 <memchr+0x12>
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	e003      	b.n	800f8ae <memchr+0x1a>
 800f8a6:	7804      	ldrb	r4, [r0, #0]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	428c      	cmp	r4, r1
 800f8ac:	d1f6      	bne.n	800f89c <memchr+0x8>
 800f8ae:	bd10      	pop	{r4, pc}

0800f8b0 <__malloc_lock>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	; (800f8b8 <__malloc_lock+0x8>)
 800f8b2:	f7ff bf76 	b.w	800f7a2 <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	200013c8 	.word	0x200013c8

0800f8bc <__malloc_unlock>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	; (800f8c4 <__malloc_unlock+0x8>)
 800f8be:	f7ff bf71 	b.w	800f7a4 <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	200013c8 	.word	0x200013c8

0800f8c8 <_Balloc>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	460d      	mov	r5, r1
 800f8d0:	b976      	cbnz	r6, 800f8f0 <_Balloc+0x28>
 800f8d2:	2010      	movs	r0, #16
 800f8d4:	f7fc fc54 	bl	800c180 <malloc>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	6260      	str	r0, [r4, #36]	; 0x24
 800f8dc:	b920      	cbnz	r0, 800f8e8 <_Balloc+0x20>
 800f8de:	2166      	movs	r1, #102	; 0x66
 800f8e0:	4b17      	ldr	r3, [pc, #92]	; (800f940 <_Balloc+0x78>)
 800f8e2:	4818      	ldr	r0, [pc, #96]	; (800f944 <_Balloc+0x7c>)
 800f8e4:	f000 fe94 	bl	8010610 <__assert_func>
 800f8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8ec:	6006      	str	r6, [r0, #0]
 800f8ee:	60c6      	str	r6, [r0, #12]
 800f8f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8f2:	68f3      	ldr	r3, [r6, #12]
 800f8f4:	b183      	cbz	r3, 800f918 <_Balloc+0x50>
 800f8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8fe:	b9b8      	cbnz	r0, 800f930 <_Balloc+0x68>
 800f900:	2101      	movs	r1, #1
 800f902:	fa01 f605 	lsl.w	r6, r1, r5
 800f906:	1d72      	adds	r2, r6, #5
 800f908:	4620      	mov	r0, r4
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	f000 fc94 	bl	8010238 <_calloc_r>
 800f910:	b160      	cbz	r0, 800f92c <_Balloc+0x64>
 800f912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f916:	e00e      	b.n	800f936 <_Balloc+0x6e>
 800f918:	2221      	movs	r2, #33	; 0x21
 800f91a:	2104      	movs	r1, #4
 800f91c:	4620      	mov	r0, r4
 800f91e:	f000 fc8b 	bl	8010238 <_calloc_r>
 800f922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f924:	60f0      	str	r0, [r6, #12]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1e4      	bne.n	800f8f6 <_Balloc+0x2e>
 800f92c:	2000      	movs	r0, #0
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	6802      	ldr	r2, [r0, #0]
 800f932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f936:	2300      	movs	r3, #0
 800f938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f93c:	e7f7      	b.n	800f92e <_Balloc+0x66>
 800f93e:	bf00      	nop
 800f940:	08012286 	.word	0x08012286
 800f944:	080123e8 	.word	0x080123e8

0800f948 <_Bfree>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f94c:	4605      	mov	r5, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	b976      	cbnz	r6, 800f970 <_Bfree+0x28>
 800f952:	2010      	movs	r0, #16
 800f954:	f7fc fc14 	bl	800c180 <malloc>
 800f958:	4602      	mov	r2, r0
 800f95a:	6268      	str	r0, [r5, #36]	; 0x24
 800f95c:	b920      	cbnz	r0, 800f968 <_Bfree+0x20>
 800f95e:	218a      	movs	r1, #138	; 0x8a
 800f960:	4b08      	ldr	r3, [pc, #32]	; (800f984 <_Bfree+0x3c>)
 800f962:	4809      	ldr	r0, [pc, #36]	; (800f988 <_Bfree+0x40>)
 800f964:	f000 fe54 	bl	8010610 <__assert_func>
 800f968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f96c:	6006      	str	r6, [r0, #0]
 800f96e:	60c6      	str	r6, [r0, #12]
 800f970:	b13c      	cbz	r4, 800f982 <_Bfree+0x3a>
 800f972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f974:	6862      	ldr	r2, [r4, #4]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f97c:	6021      	str	r1, [r4, #0]
 800f97e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	08012286 	.word	0x08012286
 800f988:	080123e8 	.word	0x080123e8

0800f98c <__multadd>:
 800f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f990:	4607      	mov	r7, r0
 800f992:	460c      	mov	r4, r1
 800f994:	461e      	mov	r6, r3
 800f996:	2000      	movs	r0, #0
 800f998:	690d      	ldr	r5, [r1, #16]
 800f99a:	f101 0c14 	add.w	ip, r1, #20
 800f99e:	f8dc 3000 	ldr.w	r3, [ip]
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	b299      	uxth	r1, r3
 800f9a6:	fb02 6101 	mla	r1, r2, r1, r6
 800f9aa:	0c1e      	lsrs	r6, r3, #16
 800f9ac:	0c0b      	lsrs	r3, r1, #16
 800f9ae:	fb02 3306 	mla	r3, r2, r6, r3
 800f9b2:	b289      	uxth	r1, r1
 800f9b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9b8:	4285      	cmp	r5, r0
 800f9ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9be:	f84c 1b04 	str.w	r1, [ip], #4
 800f9c2:	dcec      	bgt.n	800f99e <__multadd+0x12>
 800f9c4:	b30e      	cbz	r6, 800fa0a <__multadd+0x7e>
 800f9c6:	68a3      	ldr	r3, [r4, #8]
 800f9c8:	42ab      	cmp	r3, r5
 800f9ca:	dc19      	bgt.n	800fa00 <__multadd+0x74>
 800f9cc:	6861      	ldr	r1, [r4, #4]
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	3101      	adds	r1, #1
 800f9d2:	f7ff ff79 	bl	800f8c8 <_Balloc>
 800f9d6:	4680      	mov	r8, r0
 800f9d8:	b928      	cbnz	r0, 800f9e6 <__multadd+0x5a>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	21b5      	movs	r1, #181	; 0xb5
 800f9de:	4b0c      	ldr	r3, [pc, #48]	; (800fa10 <__multadd+0x84>)
 800f9e0:	480c      	ldr	r0, [pc, #48]	; (800fa14 <__multadd+0x88>)
 800f9e2:	f000 fe15 	bl	8010610 <__assert_func>
 800f9e6:	6922      	ldr	r2, [r4, #16]
 800f9e8:	f104 010c 	add.w	r1, r4, #12
 800f9ec:	3202      	adds	r2, #2
 800f9ee:	0092      	lsls	r2, r2, #2
 800f9f0:	300c      	adds	r0, #12
 800f9f2:	f7fc fbcd 	bl	800c190 <memcpy>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f7ff ffa5 	bl	800f948 <_Bfree>
 800f9fe:	4644      	mov	r4, r8
 800fa00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa04:	3501      	adds	r5, #1
 800fa06:	615e      	str	r6, [r3, #20]
 800fa08:	6125      	str	r5, [r4, #16]
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa10:	080122f8 	.word	0x080122f8
 800fa14:	080123e8 	.word	0x080123e8

0800fa18 <__s2b>:
 800fa18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa1c:	4615      	mov	r5, r2
 800fa1e:	2209      	movs	r2, #9
 800fa20:	461f      	mov	r7, r3
 800fa22:	3308      	adds	r3, #8
 800fa24:	460c      	mov	r4, r1
 800fa26:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	2100      	movs	r1, #0
 800fa30:	429a      	cmp	r2, r3
 800fa32:	db09      	blt.n	800fa48 <__s2b+0x30>
 800fa34:	4630      	mov	r0, r6
 800fa36:	f7ff ff47 	bl	800f8c8 <_Balloc>
 800fa3a:	b940      	cbnz	r0, 800fa4e <__s2b+0x36>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	21ce      	movs	r1, #206	; 0xce
 800fa40:	4b18      	ldr	r3, [pc, #96]	; (800faa4 <__s2b+0x8c>)
 800fa42:	4819      	ldr	r0, [pc, #100]	; (800faa8 <__s2b+0x90>)
 800fa44:	f000 fde4 	bl	8010610 <__assert_func>
 800fa48:	0052      	lsls	r2, r2, #1
 800fa4a:	3101      	adds	r1, #1
 800fa4c:	e7f0      	b.n	800fa30 <__s2b+0x18>
 800fa4e:	9b08      	ldr	r3, [sp, #32]
 800fa50:	2d09      	cmp	r5, #9
 800fa52:	6143      	str	r3, [r0, #20]
 800fa54:	f04f 0301 	mov.w	r3, #1
 800fa58:	6103      	str	r3, [r0, #16]
 800fa5a:	dd16      	ble.n	800fa8a <__s2b+0x72>
 800fa5c:	f104 0909 	add.w	r9, r4, #9
 800fa60:	46c8      	mov	r8, r9
 800fa62:	442c      	add	r4, r5
 800fa64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa68:	4601      	mov	r1, r0
 800fa6a:	220a      	movs	r2, #10
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	3b30      	subs	r3, #48	; 0x30
 800fa70:	f7ff ff8c 	bl	800f98c <__multadd>
 800fa74:	45a0      	cmp	r8, r4
 800fa76:	d1f5      	bne.n	800fa64 <__s2b+0x4c>
 800fa78:	f1a5 0408 	sub.w	r4, r5, #8
 800fa7c:	444c      	add	r4, r9
 800fa7e:	1b2d      	subs	r5, r5, r4
 800fa80:	1963      	adds	r3, r4, r5
 800fa82:	42bb      	cmp	r3, r7
 800fa84:	db04      	blt.n	800fa90 <__s2b+0x78>
 800fa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa8a:	2509      	movs	r5, #9
 800fa8c:	340a      	adds	r4, #10
 800fa8e:	e7f6      	b.n	800fa7e <__s2b+0x66>
 800fa90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa94:	4601      	mov	r1, r0
 800fa96:	220a      	movs	r2, #10
 800fa98:	4630      	mov	r0, r6
 800fa9a:	3b30      	subs	r3, #48	; 0x30
 800fa9c:	f7ff ff76 	bl	800f98c <__multadd>
 800faa0:	e7ee      	b.n	800fa80 <__s2b+0x68>
 800faa2:	bf00      	nop
 800faa4:	080122f8 	.word	0x080122f8
 800faa8:	080123e8 	.word	0x080123e8

0800faac <__hi0bits>:
 800faac:	0c02      	lsrs	r2, r0, #16
 800faae:	0412      	lsls	r2, r2, #16
 800fab0:	4603      	mov	r3, r0
 800fab2:	b9ca      	cbnz	r2, 800fae8 <__hi0bits+0x3c>
 800fab4:	0403      	lsls	r3, r0, #16
 800fab6:	2010      	movs	r0, #16
 800fab8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fabc:	bf04      	itt	eq
 800fabe:	021b      	lsleq	r3, r3, #8
 800fac0:	3008      	addeq	r0, #8
 800fac2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fac6:	bf04      	itt	eq
 800fac8:	011b      	lsleq	r3, r3, #4
 800faca:	3004      	addeq	r0, #4
 800facc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fad0:	bf04      	itt	eq
 800fad2:	009b      	lsleq	r3, r3, #2
 800fad4:	3002      	addeq	r0, #2
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	db05      	blt.n	800fae6 <__hi0bits+0x3a>
 800fada:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800fade:	f100 0001 	add.w	r0, r0, #1
 800fae2:	bf08      	it	eq
 800fae4:	2020      	moveq	r0, #32
 800fae6:	4770      	bx	lr
 800fae8:	2000      	movs	r0, #0
 800faea:	e7e5      	b.n	800fab8 <__hi0bits+0xc>

0800faec <__lo0bits>:
 800faec:	6803      	ldr	r3, [r0, #0]
 800faee:	4602      	mov	r2, r0
 800faf0:	f013 0007 	ands.w	r0, r3, #7
 800faf4:	d00b      	beq.n	800fb0e <__lo0bits+0x22>
 800faf6:	07d9      	lsls	r1, r3, #31
 800faf8:	d421      	bmi.n	800fb3e <__lo0bits+0x52>
 800fafa:	0798      	lsls	r0, r3, #30
 800fafc:	bf49      	itett	mi
 800fafe:	085b      	lsrmi	r3, r3, #1
 800fb00:	089b      	lsrpl	r3, r3, #2
 800fb02:	2001      	movmi	r0, #1
 800fb04:	6013      	strmi	r3, [r2, #0]
 800fb06:	bf5c      	itt	pl
 800fb08:	2002      	movpl	r0, #2
 800fb0a:	6013      	strpl	r3, [r2, #0]
 800fb0c:	4770      	bx	lr
 800fb0e:	b299      	uxth	r1, r3
 800fb10:	b909      	cbnz	r1, 800fb16 <__lo0bits+0x2a>
 800fb12:	2010      	movs	r0, #16
 800fb14:	0c1b      	lsrs	r3, r3, #16
 800fb16:	b2d9      	uxtb	r1, r3
 800fb18:	b909      	cbnz	r1, 800fb1e <__lo0bits+0x32>
 800fb1a:	3008      	adds	r0, #8
 800fb1c:	0a1b      	lsrs	r3, r3, #8
 800fb1e:	0719      	lsls	r1, r3, #28
 800fb20:	bf04      	itt	eq
 800fb22:	091b      	lsreq	r3, r3, #4
 800fb24:	3004      	addeq	r0, #4
 800fb26:	0799      	lsls	r1, r3, #30
 800fb28:	bf04      	itt	eq
 800fb2a:	089b      	lsreq	r3, r3, #2
 800fb2c:	3002      	addeq	r0, #2
 800fb2e:	07d9      	lsls	r1, r3, #31
 800fb30:	d403      	bmi.n	800fb3a <__lo0bits+0x4e>
 800fb32:	085b      	lsrs	r3, r3, #1
 800fb34:	f100 0001 	add.w	r0, r0, #1
 800fb38:	d003      	beq.n	800fb42 <__lo0bits+0x56>
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	4770      	bx	lr
 800fb3e:	2000      	movs	r0, #0
 800fb40:	4770      	bx	lr
 800fb42:	2020      	movs	r0, #32
 800fb44:	4770      	bx	lr
	...

0800fb48 <__i2b>:
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	f7ff febb 	bl	800f8c8 <_Balloc>
 800fb52:	4602      	mov	r2, r0
 800fb54:	b928      	cbnz	r0, 800fb62 <__i2b+0x1a>
 800fb56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb5a:	4b04      	ldr	r3, [pc, #16]	; (800fb6c <__i2b+0x24>)
 800fb5c:	4804      	ldr	r0, [pc, #16]	; (800fb70 <__i2b+0x28>)
 800fb5e:	f000 fd57 	bl	8010610 <__assert_func>
 800fb62:	2301      	movs	r3, #1
 800fb64:	6144      	str	r4, [r0, #20]
 800fb66:	6103      	str	r3, [r0, #16]
 800fb68:	bd10      	pop	{r4, pc}
 800fb6a:	bf00      	nop
 800fb6c:	080122f8 	.word	0x080122f8
 800fb70:	080123e8 	.word	0x080123e8

0800fb74 <__multiply>:
 800fb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb78:	4691      	mov	r9, r2
 800fb7a:	690a      	ldr	r2, [r1, #16]
 800fb7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb80:	460c      	mov	r4, r1
 800fb82:	429a      	cmp	r2, r3
 800fb84:	bfbe      	ittt	lt
 800fb86:	460b      	movlt	r3, r1
 800fb88:	464c      	movlt	r4, r9
 800fb8a:	4699      	movlt	r9, r3
 800fb8c:	6927      	ldr	r7, [r4, #16]
 800fb8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	6861      	ldr	r1, [r4, #4]
 800fb96:	eb07 060a 	add.w	r6, r7, sl
 800fb9a:	42b3      	cmp	r3, r6
 800fb9c:	b085      	sub	sp, #20
 800fb9e:	bfb8      	it	lt
 800fba0:	3101      	addlt	r1, #1
 800fba2:	f7ff fe91 	bl	800f8c8 <_Balloc>
 800fba6:	b930      	cbnz	r0, 800fbb6 <__multiply+0x42>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	f240 115d 	movw	r1, #349	; 0x15d
 800fbae:	4b43      	ldr	r3, [pc, #268]	; (800fcbc <__multiply+0x148>)
 800fbb0:	4843      	ldr	r0, [pc, #268]	; (800fcc0 <__multiply+0x14c>)
 800fbb2:	f000 fd2d 	bl	8010610 <__assert_func>
 800fbb6:	f100 0514 	add.w	r5, r0, #20
 800fbba:	462b      	mov	r3, r5
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbc2:	4543      	cmp	r3, r8
 800fbc4:	d321      	bcc.n	800fc0a <__multiply+0x96>
 800fbc6:	f104 0314 	add.w	r3, r4, #20
 800fbca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fbce:	f109 0314 	add.w	r3, r9, #20
 800fbd2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fbd6:	9202      	str	r2, [sp, #8]
 800fbd8:	1b3a      	subs	r2, r7, r4
 800fbda:	3a15      	subs	r2, #21
 800fbdc:	f022 0203 	bic.w	r2, r2, #3
 800fbe0:	3204      	adds	r2, #4
 800fbe2:	f104 0115 	add.w	r1, r4, #21
 800fbe6:	428f      	cmp	r7, r1
 800fbe8:	bf38      	it	cc
 800fbea:	2204      	movcc	r2, #4
 800fbec:	9201      	str	r2, [sp, #4]
 800fbee:	9a02      	ldr	r2, [sp, #8]
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d80c      	bhi.n	800fc10 <__multiply+0x9c>
 800fbf6:	2e00      	cmp	r6, #0
 800fbf8:	dd03      	ble.n	800fc02 <__multiply+0x8e>
 800fbfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d059      	beq.n	800fcb6 <__multiply+0x142>
 800fc02:	6106      	str	r6, [r0, #16]
 800fc04:	b005      	add	sp, #20
 800fc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0a:	f843 2b04 	str.w	r2, [r3], #4
 800fc0e:	e7d8      	b.n	800fbc2 <__multiply+0x4e>
 800fc10:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc14:	f1ba 0f00 	cmp.w	sl, #0
 800fc18:	d023      	beq.n	800fc62 <__multiply+0xee>
 800fc1a:	46a9      	mov	r9, r5
 800fc1c:	f04f 0c00 	mov.w	ip, #0
 800fc20:	f104 0e14 	add.w	lr, r4, #20
 800fc24:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc28:	f8d9 1000 	ldr.w	r1, [r9]
 800fc2c:	fa1f fb82 	uxth.w	fp, r2
 800fc30:	b289      	uxth	r1, r1
 800fc32:	fb0a 110b 	mla	r1, sl, fp, r1
 800fc36:	4461      	add	r1, ip
 800fc38:	f8d9 c000 	ldr.w	ip, [r9]
 800fc3c:	0c12      	lsrs	r2, r2, #16
 800fc3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800fc42:	fb0a c202 	mla	r2, sl, r2, ip
 800fc46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc4a:	b289      	uxth	r1, r1
 800fc4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc50:	4577      	cmp	r7, lr
 800fc52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc56:	f849 1b04 	str.w	r1, [r9], #4
 800fc5a:	d8e3      	bhi.n	800fc24 <__multiply+0xb0>
 800fc5c:	9a01      	ldr	r2, [sp, #4]
 800fc5e:	f845 c002 	str.w	ip, [r5, r2]
 800fc62:	9a03      	ldr	r2, [sp, #12]
 800fc64:	3304      	adds	r3, #4
 800fc66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc6a:	f1b9 0f00 	cmp.w	r9, #0
 800fc6e:	d020      	beq.n	800fcb2 <__multiply+0x13e>
 800fc70:	46ae      	mov	lr, r5
 800fc72:	f04f 0a00 	mov.w	sl, #0
 800fc76:	6829      	ldr	r1, [r5, #0]
 800fc78:	f104 0c14 	add.w	ip, r4, #20
 800fc7c:	f8bc b000 	ldrh.w	fp, [ip]
 800fc80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fc84:	b289      	uxth	r1, r1
 800fc86:	fb09 220b 	mla	r2, r9, fp, r2
 800fc8a:	4492      	add	sl, r2
 800fc8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fc90:	f84e 1b04 	str.w	r1, [lr], #4
 800fc94:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fc98:	f8be 1000 	ldrh.w	r1, [lr]
 800fc9c:	0c12      	lsrs	r2, r2, #16
 800fc9e:	fb09 1102 	mla	r1, r9, r2, r1
 800fca2:	4567      	cmp	r7, ip
 800fca4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fca8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fcac:	d8e6      	bhi.n	800fc7c <__multiply+0x108>
 800fcae:	9a01      	ldr	r2, [sp, #4]
 800fcb0:	50a9      	str	r1, [r5, r2]
 800fcb2:	3504      	adds	r5, #4
 800fcb4:	e79b      	b.n	800fbee <__multiply+0x7a>
 800fcb6:	3e01      	subs	r6, #1
 800fcb8:	e79d      	b.n	800fbf6 <__multiply+0x82>
 800fcba:	bf00      	nop
 800fcbc:	080122f8 	.word	0x080122f8
 800fcc0:	080123e8 	.word	0x080123e8

0800fcc4 <__pow5mult>:
 800fcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc8:	4615      	mov	r5, r2
 800fcca:	f012 0203 	ands.w	r2, r2, #3
 800fcce:	4606      	mov	r6, r0
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	d007      	beq.n	800fce4 <__pow5mult+0x20>
 800fcd4:	4c25      	ldr	r4, [pc, #148]	; (800fd6c <__pow5mult+0xa8>)
 800fcd6:	3a01      	subs	r2, #1
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcde:	f7ff fe55 	bl	800f98c <__multadd>
 800fce2:	4607      	mov	r7, r0
 800fce4:	10ad      	asrs	r5, r5, #2
 800fce6:	d03d      	beq.n	800fd64 <__pow5mult+0xa0>
 800fce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fcea:	b97c      	cbnz	r4, 800fd0c <__pow5mult+0x48>
 800fcec:	2010      	movs	r0, #16
 800fcee:	f7fc fa47 	bl	800c180 <malloc>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	6270      	str	r0, [r6, #36]	; 0x24
 800fcf6:	b928      	cbnz	r0, 800fd04 <__pow5mult+0x40>
 800fcf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcfc:	4b1c      	ldr	r3, [pc, #112]	; (800fd70 <__pow5mult+0xac>)
 800fcfe:	481d      	ldr	r0, [pc, #116]	; (800fd74 <__pow5mult+0xb0>)
 800fd00:	f000 fc86 	bl	8010610 <__assert_func>
 800fd04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd08:	6004      	str	r4, [r0, #0]
 800fd0a:	60c4      	str	r4, [r0, #12]
 800fd0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd14:	b94c      	cbnz	r4, 800fd2a <__pow5mult+0x66>
 800fd16:	f240 2171 	movw	r1, #625	; 0x271
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f7ff ff14 	bl	800fb48 <__i2b>
 800fd20:	2300      	movs	r3, #0
 800fd22:	4604      	mov	r4, r0
 800fd24:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd28:	6003      	str	r3, [r0, #0]
 800fd2a:	f04f 0900 	mov.w	r9, #0
 800fd2e:	07eb      	lsls	r3, r5, #31
 800fd30:	d50a      	bpl.n	800fd48 <__pow5mult+0x84>
 800fd32:	4639      	mov	r1, r7
 800fd34:	4622      	mov	r2, r4
 800fd36:	4630      	mov	r0, r6
 800fd38:	f7ff ff1c 	bl	800fb74 <__multiply>
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4639      	mov	r1, r7
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7ff fe01 	bl	800f948 <_Bfree>
 800fd46:	4647      	mov	r7, r8
 800fd48:	106d      	asrs	r5, r5, #1
 800fd4a:	d00b      	beq.n	800fd64 <__pow5mult+0xa0>
 800fd4c:	6820      	ldr	r0, [r4, #0]
 800fd4e:	b938      	cbnz	r0, 800fd60 <__pow5mult+0x9c>
 800fd50:	4622      	mov	r2, r4
 800fd52:	4621      	mov	r1, r4
 800fd54:	4630      	mov	r0, r6
 800fd56:	f7ff ff0d 	bl	800fb74 <__multiply>
 800fd5a:	6020      	str	r0, [r4, #0]
 800fd5c:	f8c0 9000 	str.w	r9, [r0]
 800fd60:	4604      	mov	r4, r0
 800fd62:	e7e4      	b.n	800fd2e <__pow5mult+0x6a>
 800fd64:	4638      	mov	r0, r7
 800fd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd6a:	bf00      	nop
 800fd6c:	08012538 	.word	0x08012538
 800fd70:	08012286 	.word	0x08012286
 800fd74:	080123e8 	.word	0x080123e8

0800fd78 <__lshift>:
 800fd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	4607      	mov	r7, r0
 800fd80:	4691      	mov	r9, r2
 800fd82:	6923      	ldr	r3, [r4, #16]
 800fd84:	6849      	ldr	r1, [r1, #4]
 800fd86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd8a:	68a3      	ldr	r3, [r4, #8]
 800fd8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd90:	f108 0601 	add.w	r6, r8, #1
 800fd94:	42b3      	cmp	r3, r6
 800fd96:	db0b      	blt.n	800fdb0 <__lshift+0x38>
 800fd98:	4638      	mov	r0, r7
 800fd9a:	f7ff fd95 	bl	800f8c8 <_Balloc>
 800fd9e:	4605      	mov	r5, r0
 800fda0:	b948      	cbnz	r0, 800fdb6 <__lshift+0x3e>
 800fda2:	4602      	mov	r2, r0
 800fda4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fda8:	4b29      	ldr	r3, [pc, #164]	; (800fe50 <__lshift+0xd8>)
 800fdaa:	482a      	ldr	r0, [pc, #168]	; (800fe54 <__lshift+0xdc>)
 800fdac:	f000 fc30 	bl	8010610 <__assert_func>
 800fdb0:	3101      	adds	r1, #1
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	e7ee      	b.n	800fd94 <__lshift+0x1c>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	f100 0114 	add.w	r1, r0, #20
 800fdbc:	f100 0210 	add.w	r2, r0, #16
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	4553      	cmp	r3, sl
 800fdc4:	db37      	blt.n	800fe36 <__lshift+0xbe>
 800fdc6:	6920      	ldr	r0, [r4, #16]
 800fdc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdcc:	f104 0314 	add.w	r3, r4, #20
 800fdd0:	f019 091f 	ands.w	r9, r9, #31
 800fdd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fddc:	d02f      	beq.n	800fe3e <__lshift+0xc6>
 800fdde:	468a      	mov	sl, r1
 800fde0:	f04f 0c00 	mov.w	ip, #0
 800fde4:	f1c9 0e20 	rsb	lr, r9, #32
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	fa02 f209 	lsl.w	r2, r2, r9
 800fdee:	ea42 020c 	orr.w	r2, r2, ip
 800fdf2:	f84a 2b04 	str.w	r2, [sl], #4
 800fdf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfa:	4298      	cmp	r0, r3
 800fdfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fe00:	d8f2      	bhi.n	800fde8 <__lshift+0x70>
 800fe02:	1b03      	subs	r3, r0, r4
 800fe04:	3b15      	subs	r3, #21
 800fe06:	f023 0303 	bic.w	r3, r3, #3
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	f104 0215 	add.w	r2, r4, #21
 800fe10:	4290      	cmp	r0, r2
 800fe12:	bf38      	it	cc
 800fe14:	2304      	movcc	r3, #4
 800fe16:	f841 c003 	str.w	ip, [r1, r3]
 800fe1a:	f1bc 0f00 	cmp.w	ip, #0
 800fe1e:	d001      	beq.n	800fe24 <__lshift+0xac>
 800fe20:	f108 0602 	add.w	r6, r8, #2
 800fe24:	3e01      	subs	r6, #1
 800fe26:	4638      	mov	r0, r7
 800fe28:	4621      	mov	r1, r4
 800fe2a:	612e      	str	r6, [r5, #16]
 800fe2c:	f7ff fd8c 	bl	800f948 <_Bfree>
 800fe30:	4628      	mov	r0, r5
 800fe32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe36:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	e7c1      	b.n	800fdc2 <__lshift+0x4a>
 800fe3e:	3904      	subs	r1, #4
 800fe40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe44:	4298      	cmp	r0, r3
 800fe46:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe4a:	d8f9      	bhi.n	800fe40 <__lshift+0xc8>
 800fe4c:	e7ea      	b.n	800fe24 <__lshift+0xac>
 800fe4e:	bf00      	nop
 800fe50:	080122f8 	.word	0x080122f8
 800fe54:	080123e8 	.word	0x080123e8

0800fe58 <__mcmp>:
 800fe58:	4603      	mov	r3, r0
 800fe5a:	690a      	ldr	r2, [r1, #16]
 800fe5c:	6900      	ldr	r0, [r0, #16]
 800fe5e:	b530      	push	{r4, r5, lr}
 800fe60:	1a80      	subs	r0, r0, r2
 800fe62:	d10d      	bne.n	800fe80 <__mcmp+0x28>
 800fe64:	3314      	adds	r3, #20
 800fe66:	3114      	adds	r1, #20
 800fe68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe78:	4295      	cmp	r5, r2
 800fe7a:	d002      	beq.n	800fe82 <__mcmp+0x2a>
 800fe7c:	d304      	bcc.n	800fe88 <__mcmp+0x30>
 800fe7e:	2001      	movs	r0, #1
 800fe80:	bd30      	pop	{r4, r5, pc}
 800fe82:	42a3      	cmp	r3, r4
 800fe84:	d3f4      	bcc.n	800fe70 <__mcmp+0x18>
 800fe86:	e7fb      	b.n	800fe80 <__mcmp+0x28>
 800fe88:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8c:	e7f8      	b.n	800fe80 <__mcmp+0x28>
	...

0800fe90 <__mdiff>:
 800fe90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	460d      	mov	r5, r1
 800fe96:	4607      	mov	r7, r0
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	4614      	mov	r4, r2
 800fe9e:	f7ff ffdb 	bl	800fe58 <__mcmp>
 800fea2:	1e06      	subs	r6, r0, #0
 800fea4:	d111      	bne.n	800feca <__mdiff+0x3a>
 800fea6:	4631      	mov	r1, r6
 800fea8:	4638      	mov	r0, r7
 800feaa:	f7ff fd0d 	bl	800f8c8 <_Balloc>
 800feae:	4602      	mov	r2, r0
 800feb0:	b928      	cbnz	r0, 800febe <__mdiff+0x2e>
 800feb2:	f240 2132 	movw	r1, #562	; 0x232
 800feb6:	4b3a      	ldr	r3, [pc, #232]	; (800ffa0 <__mdiff+0x110>)
 800feb8:	483a      	ldr	r0, [pc, #232]	; (800ffa4 <__mdiff+0x114>)
 800feba:	f000 fba9 	bl	8010610 <__assert_func>
 800febe:	2301      	movs	r3, #1
 800fec0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fec4:	4610      	mov	r0, r2
 800fec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	bfa4      	itt	ge
 800fecc:	4623      	movge	r3, r4
 800fece:	462c      	movge	r4, r5
 800fed0:	4638      	mov	r0, r7
 800fed2:	6861      	ldr	r1, [r4, #4]
 800fed4:	bfa6      	itte	ge
 800fed6:	461d      	movge	r5, r3
 800fed8:	2600      	movge	r6, #0
 800feda:	2601      	movlt	r6, #1
 800fedc:	f7ff fcf4 	bl	800f8c8 <_Balloc>
 800fee0:	4602      	mov	r2, r0
 800fee2:	b918      	cbnz	r0, 800feec <__mdiff+0x5c>
 800fee4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fee8:	4b2d      	ldr	r3, [pc, #180]	; (800ffa0 <__mdiff+0x110>)
 800feea:	e7e5      	b.n	800feb8 <__mdiff+0x28>
 800feec:	f102 0814 	add.w	r8, r2, #20
 800fef0:	46c2      	mov	sl, r8
 800fef2:	f04f 0c00 	mov.w	ip, #0
 800fef6:	6927      	ldr	r7, [r4, #16]
 800fef8:	60c6      	str	r6, [r0, #12]
 800fefa:	692e      	ldr	r6, [r5, #16]
 800fefc:	f104 0014 	add.w	r0, r4, #20
 800ff00:	f105 0914 	add.w	r9, r5, #20
 800ff04:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ff08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff0c:	3410      	adds	r4, #16
 800ff0e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ff12:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff16:	fa1f f18b 	uxth.w	r1, fp
 800ff1a:	448c      	add	ip, r1
 800ff1c:	b299      	uxth	r1, r3
 800ff1e:	0c1b      	lsrs	r3, r3, #16
 800ff20:	ebac 0101 	sub.w	r1, ip, r1
 800ff24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff28:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ff2c:	b289      	uxth	r1, r1
 800ff2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ff32:	454e      	cmp	r6, r9
 800ff34:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ff38:	f84a 3b04 	str.w	r3, [sl], #4
 800ff3c:	d8e7      	bhi.n	800ff0e <__mdiff+0x7e>
 800ff3e:	1b73      	subs	r3, r6, r5
 800ff40:	3b15      	subs	r3, #21
 800ff42:	f023 0303 	bic.w	r3, r3, #3
 800ff46:	3515      	adds	r5, #21
 800ff48:	3304      	adds	r3, #4
 800ff4a:	42ae      	cmp	r6, r5
 800ff4c:	bf38      	it	cc
 800ff4e:	2304      	movcc	r3, #4
 800ff50:	4418      	add	r0, r3
 800ff52:	4443      	add	r3, r8
 800ff54:	461e      	mov	r6, r3
 800ff56:	4605      	mov	r5, r0
 800ff58:	4575      	cmp	r5, lr
 800ff5a:	d30e      	bcc.n	800ff7a <__mdiff+0xea>
 800ff5c:	f10e 0103 	add.w	r1, lr, #3
 800ff60:	1a09      	subs	r1, r1, r0
 800ff62:	f021 0103 	bic.w	r1, r1, #3
 800ff66:	3803      	subs	r0, #3
 800ff68:	4586      	cmp	lr, r0
 800ff6a:	bf38      	it	cc
 800ff6c:	2100      	movcc	r1, #0
 800ff6e:	4419      	add	r1, r3
 800ff70:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ff74:	b18b      	cbz	r3, 800ff9a <__mdiff+0x10a>
 800ff76:	6117      	str	r7, [r2, #16]
 800ff78:	e7a4      	b.n	800fec4 <__mdiff+0x34>
 800ff7a:	f855 8b04 	ldr.w	r8, [r5], #4
 800ff7e:	fa1f f188 	uxth.w	r1, r8
 800ff82:	4461      	add	r1, ip
 800ff84:	140c      	asrs	r4, r1, #16
 800ff86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ff8a:	b289      	uxth	r1, r1
 800ff8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ff90:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ff94:	f846 1b04 	str.w	r1, [r6], #4
 800ff98:	e7de      	b.n	800ff58 <__mdiff+0xc8>
 800ff9a:	3f01      	subs	r7, #1
 800ff9c:	e7e8      	b.n	800ff70 <__mdiff+0xe0>
 800ff9e:	bf00      	nop
 800ffa0:	080122f8 	.word	0x080122f8
 800ffa4:	080123e8 	.word	0x080123e8

0800ffa8 <__ulp>:
 800ffa8:	4b11      	ldr	r3, [pc, #68]	; (800fff0 <__ulp+0x48>)
 800ffaa:	400b      	ands	r3, r1
 800ffac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dd02      	ble.n	800ffba <__ulp+0x12>
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	4770      	bx	lr
 800ffba:	425b      	negs	r3, r3
 800ffbc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ffc0:	f04f 0000 	mov.w	r0, #0
 800ffc4:	f04f 0100 	mov.w	r1, #0
 800ffc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ffcc:	da04      	bge.n	800ffd8 <__ulp+0x30>
 800ffce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ffd2:	fa43 f102 	asr.w	r1, r3, r2
 800ffd6:	4770      	bx	lr
 800ffd8:	f1a2 0314 	sub.w	r3, r2, #20
 800ffdc:	2b1e      	cmp	r3, #30
 800ffde:	bfd6      	itet	le
 800ffe0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ffe4:	2301      	movgt	r3, #1
 800ffe6:	fa22 f303 	lsrle.w	r3, r2, r3
 800ffea:	4618      	mov	r0, r3
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	7ff00000 	.word	0x7ff00000

0800fff4 <__b2d>:
 800fff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff8:	6907      	ldr	r7, [r0, #16]
 800fffa:	f100 0914 	add.w	r9, r0, #20
 800fffe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010002:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010006:	f1a7 0804 	sub.w	r8, r7, #4
 801000a:	4630      	mov	r0, r6
 801000c:	f7ff fd4e 	bl	800faac <__hi0bits>
 8010010:	f1c0 0320 	rsb	r3, r0, #32
 8010014:	280a      	cmp	r0, #10
 8010016:	600b      	str	r3, [r1, #0]
 8010018:	491f      	ldr	r1, [pc, #124]	; (8010098 <__b2d+0xa4>)
 801001a:	dc17      	bgt.n	801004c <__b2d+0x58>
 801001c:	45c1      	cmp	r9, r8
 801001e:	bf28      	it	cs
 8010020:	2200      	movcs	r2, #0
 8010022:	f1c0 0c0b 	rsb	ip, r0, #11
 8010026:	fa26 f30c 	lsr.w	r3, r6, ip
 801002a:	bf38      	it	cc
 801002c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010030:	ea43 0501 	orr.w	r5, r3, r1
 8010034:	f100 0315 	add.w	r3, r0, #21
 8010038:	fa06 f303 	lsl.w	r3, r6, r3
 801003c:	fa22 f20c 	lsr.w	r2, r2, ip
 8010040:	ea43 0402 	orr.w	r4, r3, r2
 8010044:	4620      	mov	r0, r4
 8010046:	4629      	mov	r1, r5
 8010048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801004c:	45c1      	cmp	r9, r8
 801004e:	bf2e      	itee	cs
 8010050:	2200      	movcs	r2, #0
 8010052:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010056:	f1a7 0808 	subcc.w	r8, r7, #8
 801005a:	f1b0 030b 	subs.w	r3, r0, #11
 801005e:	d016      	beq.n	801008e <__b2d+0x9a>
 8010060:	f1c3 0720 	rsb	r7, r3, #32
 8010064:	fa22 f107 	lsr.w	r1, r2, r7
 8010068:	45c8      	cmp	r8, r9
 801006a:	fa06 f603 	lsl.w	r6, r6, r3
 801006e:	ea46 0601 	orr.w	r6, r6, r1
 8010072:	bf94      	ite	ls
 8010074:	2100      	movls	r1, #0
 8010076:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801007a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801007e:	fa02 f003 	lsl.w	r0, r2, r3
 8010082:	40f9      	lsrs	r1, r7
 8010084:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010088:	ea40 0401 	orr.w	r4, r0, r1
 801008c:	e7da      	b.n	8010044 <__b2d+0x50>
 801008e:	4614      	mov	r4, r2
 8010090:	ea46 0501 	orr.w	r5, r6, r1
 8010094:	e7d6      	b.n	8010044 <__b2d+0x50>
 8010096:	bf00      	nop
 8010098:	3ff00000 	.word	0x3ff00000

0801009c <__d2b>:
 801009c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80100a0:	2101      	movs	r1, #1
 80100a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80100a6:	4690      	mov	r8, r2
 80100a8:	461d      	mov	r5, r3
 80100aa:	f7ff fc0d 	bl	800f8c8 <_Balloc>
 80100ae:	4604      	mov	r4, r0
 80100b0:	b930      	cbnz	r0, 80100c0 <__d2b+0x24>
 80100b2:	4602      	mov	r2, r0
 80100b4:	f240 310a 	movw	r1, #778	; 0x30a
 80100b8:	4b24      	ldr	r3, [pc, #144]	; (801014c <__d2b+0xb0>)
 80100ba:	4825      	ldr	r0, [pc, #148]	; (8010150 <__d2b+0xb4>)
 80100bc:	f000 faa8 	bl	8010610 <__assert_func>
 80100c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80100c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80100c8:	bb2d      	cbnz	r5, 8010116 <__d2b+0x7a>
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	f1b8 0300 	subs.w	r3, r8, #0
 80100d0:	d026      	beq.n	8010120 <__d2b+0x84>
 80100d2:	4668      	mov	r0, sp
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	f7ff fd09 	bl	800faec <__lo0bits>
 80100da:	9900      	ldr	r1, [sp, #0]
 80100dc:	b1f0      	cbz	r0, 801011c <__d2b+0x80>
 80100de:	9a01      	ldr	r2, [sp, #4]
 80100e0:	f1c0 0320 	rsb	r3, r0, #32
 80100e4:	fa02 f303 	lsl.w	r3, r2, r3
 80100e8:	430b      	orrs	r3, r1
 80100ea:	40c2      	lsrs	r2, r0
 80100ec:	6163      	str	r3, [r4, #20]
 80100ee:	9201      	str	r2, [sp, #4]
 80100f0:	9b01      	ldr	r3, [sp, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	bf14      	ite	ne
 80100f6:	2102      	movne	r1, #2
 80100f8:	2101      	moveq	r1, #1
 80100fa:	61a3      	str	r3, [r4, #24]
 80100fc:	6121      	str	r1, [r4, #16]
 80100fe:	b1c5      	cbz	r5, 8010132 <__d2b+0x96>
 8010100:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010104:	4405      	add	r5, r0
 8010106:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801010a:	603d      	str	r5, [r7, #0]
 801010c:	6030      	str	r0, [r6, #0]
 801010e:	4620      	mov	r0, r4
 8010110:	b002      	add	sp, #8
 8010112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801011a:	e7d6      	b.n	80100ca <__d2b+0x2e>
 801011c:	6161      	str	r1, [r4, #20]
 801011e:	e7e7      	b.n	80100f0 <__d2b+0x54>
 8010120:	a801      	add	r0, sp, #4
 8010122:	f7ff fce3 	bl	800faec <__lo0bits>
 8010126:	2101      	movs	r1, #1
 8010128:	9b01      	ldr	r3, [sp, #4]
 801012a:	6121      	str	r1, [r4, #16]
 801012c:	6163      	str	r3, [r4, #20]
 801012e:	3020      	adds	r0, #32
 8010130:	e7e5      	b.n	80100fe <__d2b+0x62>
 8010132:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010136:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801013a:	6038      	str	r0, [r7, #0]
 801013c:	6918      	ldr	r0, [r3, #16]
 801013e:	f7ff fcb5 	bl	800faac <__hi0bits>
 8010142:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010146:	6031      	str	r1, [r6, #0]
 8010148:	e7e1      	b.n	801010e <__d2b+0x72>
 801014a:	bf00      	nop
 801014c:	080122f8 	.word	0x080122f8
 8010150:	080123e8 	.word	0x080123e8

08010154 <__ratio>:
 8010154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010158:	4688      	mov	r8, r1
 801015a:	4669      	mov	r1, sp
 801015c:	4681      	mov	r9, r0
 801015e:	f7ff ff49 	bl	800fff4 <__b2d>
 8010162:	460f      	mov	r7, r1
 8010164:	4604      	mov	r4, r0
 8010166:	460d      	mov	r5, r1
 8010168:	4640      	mov	r0, r8
 801016a:	a901      	add	r1, sp, #4
 801016c:	f7ff ff42 	bl	800fff4 <__b2d>
 8010170:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010174:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010178:	468b      	mov	fp, r1
 801017a:	eba3 0c02 	sub.w	ip, r3, r2
 801017e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010182:	1a9b      	subs	r3, r3, r2
 8010184:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010188:	2b00      	cmp	r3, #0
 801018a:	bfd5      	itete	le
 801018c:	460a      	movle	r2, r1
 801018e:	462a      	movgt	r2, r5
 8010190:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010194:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010198:	bfd8      	it	le
 801019a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801019e:	465b      	mov	r3, fp
 80101a0:	4602      	mov	r2, r0
 80101a2:	4639      	mov	r1, r7
 80101a4:	4620      	mov	r0, r4
 80101a6:	f7f0 fad9 	bl	800075c <__aeabi_ddiv>
 80101aa:	b003      	add	sp, #12
 80101ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101b0 <__copybits>:
 80101b0:	3901      	subs	r1, #1
 80101b2:	b570      	push	{r4, r5, r6, lr}
 80101b4:	1149      	asrs	r1, r1, #5
 80101b6:	6914      	ldr	r4, [r2, #16]
 80101b8:	3101      	adds	r1, #1
 80101ba:	f102 0314 	add.w	r3, r2, #20
 80101be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80101c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101c6:	1f05      	subs	r5, r0, #4
 80101c8:	42a3      	cmp	r3, r4
 80101ca:	d30c      	bcc.n	80101e6 <__copybits+0x36>
 80101cc:	1aa3      	subs	r3, r4, r2
 80101ce:	3b11      	subs	r3, #17
 80101d0:	f023 0303 	bic.w	r3, r3, #3
 80101d4:	3211      	adds	r2, #17
 80101d6:	42a2      	cmp	r2, r4
 80101d8:	bf88      	it	hi
 80101da:	2300      	movhi	r3, #0
 80101dc:	4418      	add	r0, r3
 80101de:	2300      	movs	r3, #0
 80101e0:	4288      	cmp	r0, r1
 80101e2:	d305      	bcc.n	80101f0 <__copybits+0x40>
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
 80101e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80101ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80101ee:	e7eb      	b.n	80101c8 <__copybits+0x18>
 80101f0:	f840 3b04 	str.w	r3, [r0], #4
 80101f4:	e7f4      	b.n	80101e0 <__copybits+0x30>

080101f6 <__any_on>:
 80101f6:	f100 0214 	add.w	r2, r0, #20
 80101fa:	6900      	ldr	r0, [r0, #16]
 80101fc:	114b      	asrs	r3, r1, #5
 80101fe:	4298      	cmp	r0, r3
 8010200:	b510      	push	{r4, lr}
 8010202:	db11      	blt.n	8010228 <__any_on+0x32>
 8010204:	dd0a      	ble.n	801021c <__any_on+0x26>
 8010206:	f011 011f 	ands.w	r1, r1, #31
 801020a:	d007      	beq.n	801021c <__any_on+0x26>
 801020c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010210:	fa24 f001 	lsr.w	r0, r4, r1
 8010214:	fa00 f101 	lsl.w	r1, r0, r1
 8010218:	428c      	cmp	r4, r1
 801021a:	d10b      	bne.n	8010234 <__any_on+0x3e>
 801021c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010220:	4293      	cmp	r3, r2
 8010222:	d803      	bhi.n	801022c <__any_on+0x36>
 8010224:	2000      	movs	r0, #0
 8010226:	bd10      	pop	{r4, pc}
 8010228:	4603      	mov	r3, r0
 801022a:	e7f7      	b.n	801021c <__any_on+0x26>
 801022c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010230:	2900      	cmp	r1, #0
 8010232:	d0f5      	beq.n	8010220 <__any_on+0x2a>
 8010234:	2001      	movs	r0, #1
 8010236:	e7f6      	b.n	8010226 <__any_on+0x30>

08010238 <_calloc_r>:
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	fba1 5402 	umull	r5, r4, r1, r2
 801023e:	b934      	cbnz	r4, 801024e <_calloc_r+0x16>
 8010240:	4629      	mov	r1, r5
 8010242:	f7fc f823 	bl	800c28c <_malloc_r>
 8010246:	4606      	mov	r6, r0
 8010248:	b928      	cbnz	r0, 8010256 <_calloc_r+0x1e>
 801024a:	4630      	mov	r0, r6
 801024c:	bd70      	pop	{r4, r5, r6, pc}
 801024e:	220c      	movs	r2, #12
 8010250:	2600      	movs	r6, #0
 8010252:	6002      	str	r2, [r0, #0]
 8010254:	e7f9      	b.n	801024a <_calloc_r+0x12>
 8010256:	462a      	mov	r2, r5
 8010258:	4621      	mov	r1, r4
 801025a:	f7fb ffa7 	bl	800c1ac <memset>
 801025e:	e7f4      	b.n	801024a <_calloc_r+0x12>

08010260 <__ssputs_r>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	688e      	ldr	r6, [r1, #8]
 8010266:	4682      	mov	sl, r0
 8010268:	429e      	cmp	r6, r3
 801026a:	460c      	mov	r4, r1
 801026c:	4690      	mov	r8, r2
 801026e:	461f      	mov	r7, r3
 8010270:	d838      	bhi.n	80102e4 <__ssputs_r+0x84>
 8010272:	898a      	ldrh	r2, [r1, #12]
 8010274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010278:	d032      	beq.n	80102e0 <__ssputs_r+0x80>
 801027a:	6825      	ldr	r5, [r4, #0]
 801027c:	6909      	ldr	r1, [r1, #16]
 801027e:	3301      	adds	r3, #1
 8010280:	eba5 0901 	sub.w	r9, r5, r1
 8010284:	6965      	ldr	r5, [r4, #20]
 8010286:	444b      	add	r3, r9
 8010288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801028c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010290:	106d      	asrs	r5, r5, #1
 8010292:	429d      	cmp	r5, r3
 8010294:	bf38      	it	cc
 8010296:	461d      	movcc	r5, r3
 8010298:	0553      	lsls	r3, r2, #21
 801029a:	d531      	bpl.n	8010300 <__ssputs_r+0xa0>
 801029c:	4629      	mov	r1, r5
 801029e:	f7fb fff5 	bl	800c28c <_malloc_r>
 80102a2:	4606      	mov	r6, r0
 80102a4:	b950      	cbnz	r0, 80102bc <__ssputs_r+0x5c>
 80102a6:	230c      	movs	r3, #12
 80102a8:	f04f 30ff 	mov.w	r0, #4294967295
 80102ac:	f8ca 3000 	str.w	r3, [sl]
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102bc:	464a      	mov	r2, r9
 80102be:	6921      	ldr	r1, [r4, #16]
 80102c0:	f7fb ff66 	bl	800c190 <memcpy>
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ce:	81a3      	strh	r3, [r4, #12]
 80102d0:	6126      	str	r6, [r4, #16]
 80102d2:	444e      	add	r6, r9
 80102d4:	6026      	str	r6, [r4, #0]
 80102d6:	463e      	mov	r6, r7
 80102d8:	6165      	str	r5, [r4, #20]
 80102da:	eba5 0509 	sub.w	r5, r5, r9
 80102de:	60a5      	str	r5, [r4, #8]
 80102e0:	42be      	cmp	r6, r7
 80102e2:	d900      	bls.n	80102e6 <__ssputs_r+0x86>
 80102e4:	463e      	mov	r6, r7
 80102e6:	4632      	mov	r2, r6
 80102e8:	4641      	mov	r1, r8
 80102ea:	6820      	ldr	r0, [r4, #0]
 80102ec:	f000 fa04 	bl	80106f8 <memmove>
 80102f0:	68a3      	ldr	r3, [r4, #8]
 80102f2:	2000      	movs	r0, #0
 80102f4:	1b9b      	subs	r3, r3, r6
 80102f6:	60a3      	str	r3, [r4, #8]
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	4433      	add	r3, r6
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	e7db      	b.n	80102b8 <__ssputs_r+0x58>
 8010300:	462a      	mov	r2, r5
 8010302:	f000 fa13 	bl	801072c <_realloc_r>
 8010306:	4606      	mov	r6, r0
 8010308:	2800      	cmp	r0, #0
 801030a:	d1e1      	bne.n	80102d0 <__ssputs_r+0x70>
 801030c:	4650      	mov	r0, sl
 801030e:	6921      	ldr	r1, [r4, #16]
 8010310:	f7fb ff54 	bl	800c1bc <_free_r>
 8010314:	e7c7      	b.n	80102a6 <__ssputs_r+0x46>
	...

08010318 <_svfiprintf_r>:
 8010318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031c:	4698      	mov	r8, r3
 801031e:	898b      	ldrh	r3, [r1, #12]
 8010320:	4607      	mov	r7, r0
 8010322:	061b      	lsls	r3, r3, #24
 8010324:	460d      	mov	r5, r1
 8010326:	4614      	mov	r4, r2
 8010328:	b09d      	sub	sp, #116	; 0x74
 801032a:	d50e      	bpl.n	801034a <_svfiprintf_r+0x32>
 801032c:	690b      	ldr	r3, [r1, #16]
 801032e:	b963      	cbnz	r3, 801034a <_svfiprintf_r+0x32>
 8010330:	2140      	movs	r1, #64	; 0x40
 8010332:	f7fb ffab 	bl	800c28c <_malloc_r>
 8010336:	6028      	str	r0, [r5, #0]
 8010338:	6128      	str	r0, [r5, #16]
 801033a:	b920      	cbnz	r0, 8010346 <_svfiprintf_r+0x2e>
 801033c:	230c      	movs	r3, #12
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	f04f 30ff 	mov.w	r0, #4294967295
 8010344:	e0d1      	b.n	80104ea <_svfiprintf_r+0x1d2>
 8010346:	2340      	movs	r3, #64	; 0x40
 8010348:	616b      	str	r3, [r5, #20]
 801034a:	2300      	movs	r3, #0
 801034c:	9309      	str	r3, [sp, #36]	; 0x24
 801034e:	2320      	movs	r3, #32
 8010350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010354:	2330      	movs	r3, #48	; 0x30
 8010356:	f04f 0901 	mov.w	r9, #1
 801035a:	f8cd 800c 	str.w	r8, [sp, #12]
 801035e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010504 <_svfiprintf_r+0x1ec>
 8010362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010366:	4623      	mov	r3, r4
 8010368:	469a      	mov	sl, r3
 801036a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801036e:	b10a      	cbz	r2, 8010374 <_svfiprintf_r+0x5c>
 8010370:	2a25      	cmp	r2, #37	; 0x25
 8010372:	d1f9      	bne.n	8010368 <_svfiprintf_r+0x50>
 8010374:	ebba 0b04 	subs.w	fp, sl, r4
 8010378:	d00b      	beq.n	8010392 <_svfiprintf_r+0x7a>
 801037a:	465b      	mov	r3, fp
 801037c:	4622      	mov	r2, r4
 801037e:	4629      	mov	r1, r5
 8010380:	4638      	mov	r0, r7
 8010382:	f7ff ff6d 	bl	8010260 <__ssputs_r>
 8010386:	3001      	adds	r0, #1
 8010388:	f000 80aa 	beq.w	80104e0 <_svfiprintf_r+0x1c8>
 801038c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801038e:	445a      	add	r2, fp
 8010390:	9209      	str	r2, [sp, #36]	; 0x24
 8010392:	f89a 3000 	ldrb.w	r3, [sl]
 8010396:	2b00      	cmp	r3, #0
 8010398:	f000 80a2 	beq.w	80104e0 <_svfiprintf_r+0x1c8>
 801039c:	2300      	movs	r3, #0
 801039e:	f04f 32ff 	mov.w	r2, #4294967295
 80103a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103a6:	f10a 0a01 	add.w	sl, sl, #1
 80103aa:	9304      	str	r3, [sp, #16]
 80103ac:	9307      	str	r3, [sp, #28]
 80103ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103b2:	931a      	str	r3, [sp, #104]	; 0x68
 80103b4:	4654      	mov	r4, sl
 80103b6:	2205      	movs	r2, #5
 80103b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103bc:	4851      	ldr	r0, [pc, #324]	; (8010504 <_svfiprintf_r+0x1ec>)
 80103be:	f7ff fa69 	bl	800f894 <memchr>
 80103c2:	9a04      	ldr	r2, [sp, #16]
 80103c4:	b9d8      	cbnz	r0, 80103fe <_svfiprintf_r+0xe6>
 80103c6:	06d0      	lsls	r0, r2, #27
 80103c8:	bf44      	itt	mi
 80103ca:	2320      	movmi	r3, #32
 80103cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103d0:	0711      	lsls	r1, r2, #28
 80103d2:	bf44      	itt	mi
 80103d4:	232b      	movmi	r3, #43	; 0x2b
 80103d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103da:	f89a 3000 	ldrb.w	r3, [sl]
 80103de:	2b2a      	cmp	r3, #42	; 0x2a
 80103e0:	d015      	beq.n	801040e <_svfiprintf_r+0xf6>
 80103e2:	4654      	mov	r4, sl
 80103e4:	2000      	movs	r0, #0
 80103e6:	f04f 0c0a 	mov.w	ip, #10
 80103ea:	9a07      	ldr	r2, [sp, #28]
 80103ec:	4621      	mov	r1, r4
 80103ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f2:	3b30      	subs	r3, #48	; 0x30
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	d94e      	bls.n	8010496 <_svfiprintf_r+0x17e>
 80103f8:	b1b0      	cbz	r0, 8010428 <_svfiprintf_r+0x110>
 80103fa:	9207      	str	r2, [sp, #28]
 80103fc:	e014      	b.n	8010428 <_svfiprintf_r+0x110>
 80103fe:	eba0 0308 	sub.w	r3, r0, r8
 8010402:	fa09 f303 	lsl.w	r3, r9, r3
 8010406:	4313      	orrs	r3, r2
 8010408:	46a2      	mov	sl, r4
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	e7d2      	b.n	80103b4 <_svfiprintf_r+0x9c>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	1d19      	adds	r1, r3, #4
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	9103      	str	r1, [sp, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	bfbb      	ittet	lt
 801041a:	425b      	neglt	r3, r3
 801041c:	f042 0202 	orrlt.w	r2, r2, #2
 8010420:	9307      	strge	r3, [sp, #28]
 8010422:	9307      	strlt	r3, [sp, #28]
 8010424:	bfb8      	it	lt
 8010426:	9204      	strlt	r2, [sp, #16]
 8010428:	7823      	ldrb	r3, [r4, #0]
 801042a:	2b2e      	cmp	r3, #46	; 0x2e
 801042c:	d10c      	bne.n	8010448 <_svfiprintf_r+0x130>
 801042e:	7863      	ldrb	r3, [r4, #1]
 8010430:	2b2a      	cmp	r3, #42	; 0x2a
 8010432:	d135      	bne.n	80104a0 <_svfiprintf_r+0x188>
 8010434:	9b03      	ldr	r3, [sp, #12]
 8010436:	3402      	adds	r4, #2
 8010438:	1d1a      	adds	r2, r3, #4
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	9203      	str	r2, [sp, #12]
 801043e:	2b00      	cmp	r3, #0
 8010440:	bfb8      	it	lt
 8010442:	f04f 33ff 	movlt.w	r3, #4294967295
 8010446:	9305      	str	r3, [sp, #20]
 8010448:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010508 <_svfiprintf_r+0x1f0>
 801044c:	2203      	movs	r2, #3
 801044e:	4650      	mov	r0, sl
 8010450:	7821      	ldrb	r1, [r4, #0]
 8010452:	f7ff fa1f 	bl	800f894 <memchr>
 8010456:	b140      	cbz	r0, 801046a <_svfiprintf_r+0x152>
 8010458:	2340      	movs	r3, #64	; 0x40
 801045a:	eba0 000a 	sub.w	r0, r0, sl
 801045e:	fa03 f000 	lsl.w	r0, r3, r0
 8010462:	9b04      	ldr	r3, [sp, #16]
 8010464:	3401      	adds	r4, #1
 8010466:	4303      	orrs	r3, r0
 8010468:	9304      	str	r3, [sp, #16]
 801046a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046e:	2206      	movs	r2, #6
 8010470:	4826      	ldr	r0, [pc, #152]	; (801050c <_svfiprintf_r+0x1f4>)
 8010472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010476:	f7ff fa0d 	bl	800f894 <memchr>
 801047a:	2800      	cmp	r0, #0
 801047c:	d038      	beq.n	80104f0 <_svfiprintf_r+0x1d8>
 801047e:	4b24      	ldr	r3, [pc, #144]	; (8010510 <_svfiprintf_r+0x1f8>)
 8010480:	bb1b      	cbnz	r3, 80104ca <_svfiprintf_r+0x1b2>
 8010482:	9b03      	ldr	r3, [sp, #12]
 8010484:	3307      	adds	r3, #7
 8010486:	f023 0307 	bic.w	r3, r3, #7
 801048a:	3308      	adds	r3, #8
 801048c:	9303      	str	r3, [sp, #12]
 801048e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010490:	4433      	add	r3, r6
 8010492:	9309      	str	r3, [sp, #36]	; 0x24
 8010494:	e767      	b.n	8010366 <_svfiprintf_r+0x4e>
 8010496:	460c      	mov	r4, r1
 8010498:	2001      	movs	r0, #1
 801049a:	fb0c 3202 	mla	r2, ip, r2, r3
 801049e:	e7a5      	b.n	80103ec <_svfiprintf_r+0xd4>
 80104a0:	2300      	movs	r3, #0
 80104a2:	f04f 0c0a 	mov.w	ip, #10
 80104a6:	4619      	mov	r1, r3
 80104a8:	3401      	adds	r4, #1
 80104aa:	9305      	str	r3, [sp, #20]
 80104ac:	4620      	mov	r0, r4
 80104ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104b2:	3a30      	subs	r2, #48	; 0x30
 80104b4:	2a09      	cmp	r2, #9
 80104b6:	d903      	bls.n	80104c0 <_svfiprintf_r+0x1a8>
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d0c5      	beq.n	8010448 <_svfiprintf_r+0x130>
 80104bc:	9105      	str	r1, [sp, #20]
 80104be:	e7c3      	b.n	8010448 <_svfiprintf_r+0x130>
 80104c0:	4604      	mov	r4, r0
 80104c2:	2301      	movs	r3, #1
 80104c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80104c8:	e7f0      	b.n	80104ac <_svfiprintf_r+0x194>
 80104ca:	ab03      	add	r3, sp, #12
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	462a      	mov	r2, r5
 80104d0:	4638      	mov	r0, r7
 80104d2:	4b10      	ldr	r3, [pc, #64]	; (8010514 <_svfiprintf_r+0x1fc>)
 80104d4:	a904      	add	r1, sp, #16
 80104d6:	f7fb ffeb 	bl	800c4b0 <_printf_float>
 80104da:	1c42      	adds	r2, r0, #1
 80104dc:	4606      	mov	r6, r0
 80104de:	d1d6      	bne.n	801048e <_svfiprintf_r+0x176>
 80104e0:	89ab      	ldrh	r3, [r5, #12]
 80104e2:	065b      	lsls	r3, r3, #25
 80104e4:	f53f af2c 	bmi.w	8010340 <_svfiprintf_r+0x28>
 80104e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104ea:	b01d      	add	sp, #116	; 0x74
 80104ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f0:	ab03      	add	r3, sp, #12
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	462a      	mov	r2, r5
 80104f6:	4638      	mov	r0, r7
 80104f8:	4b06      	ldr	r3, [pc, #24]	; (8010514 <_svfiprintf_r+0x1fc>)
 80104fa:	a904      	add	r1, sp, #16
 80104fc:	f7fc fa74 	bl	800c9e8 <_printf_i>
 8010500:	e7eb      	b.n	80104da <_svfiprintf_r+0x1c2>
 8010502:	bf00      	nop
 8010504:	08012544 	.word	0x08012544
 8010508:	0801254a 	.word	0x0801254a
 801050c:	0801254e 	.word	0x0801254e
 8010510:	0800c4b1 	.word	0x0800c4b1
 8010514:	08010261 	.word	0x08010261

08010518 <nan>:
 8010518:	2000      	movs	r0, #0
 801051a:	4901      	ldr	r1, [pc, #4]	; (8010520 <nan+0x8>)
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	7ff80000 	.word	0x7ff80000

08010524 <__sread>:
 8010524:	b510      	push	{r4, lr}
 8010526:	460c      	mov	r4, r1
 8010528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801052c:	f000 fa84 	bl	8010a38 <_read_r>
 8010530:	2800      	cmp	r0, #0
 8010532:	bfab      	itete	ge
 8010534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010536:	89a3      	ldrhlt	r3, [r4, #12]
 8010538:	181b      	addge	r3, r3, r0
 801053a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801053e:	bfac      	ite	ge
 8010540:	6563      	strge	r3, [r4, #84]	; 0x54
 8010542:	81a3      	strhlt	r3, [r4, #12]
 8010544:	bd10      	pop	{r4, pc}

08010546 <__swrite>:
 8010546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801054a:	461f      	mov	r7, r3
 801054c:	898b      	ldrh	r3, [r1, #12]
 801054e:	4605      	mov	r5, r0
 8010550:	05db      	lsls	r3, r3, #23
 8010552:	460c      	mov	r4, r1
 8010554:	4616      	mov	r6, r2
 8010556:	d505      	bpl.n	8010564 <__swrite+0x1e>
 8010558:	2302      	movs	r3, #2
 801055a:	2200      	movs	r2, #0
 801055c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010560:	f000 f8b8 	bl	80106d4 <_lseek_r>
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	4632      	mov	r2, r6
 8010568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	4628      	mov	r0, r5
 8010570:	463b      	mov	r3, r7
 8010572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801057a:	f000 b837 	b.w	80105ec <_write_r>

0801057e <__sseek>:
 801057e:	b510      	push	{r4, lr}
 8010580:	460c      	mov	r4, r1
 8010582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010586:	f000 f8a5 	bl	80106d4 <_lseek_r>
 801058a:	1c43      	adds	r3, r0, #1
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	bf15      	itete	ne
 8010590:	6560      	strne	r0, [r4, #84]	; 0x54
 8010592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801059a:	81a3      	strheq	r3, [r4, #12]
 801059c:	bf18      	it	ne
 801059e:	81a3      	strhne	r3, [r4, #12]
 80105a0:	bd10      	pop	{r4, pc}

080105a2 <__sclose>:
 80105a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a6:	f000 b851 	b.w	801064c <_close_r>

080105aa <strncmp>:
 80105aa:	4603      	mov	r3, r0
 80105ac:	b510      	push	{r4, lr}
 80105ae:	b172      	cbz	r2, 80105ce <strncmp+0x24>
 80105b0:	3901      	subs	r1, #1
 80105b2:	1884      	adds	r4, r0, r2
 80105b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80105b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105bc:	4290      	cmp	r0, r2
 80105be:	d101      	bne.n	80105c4 <strncmp+0x1a>
 80105c0:	42a3      	cmp	r3, r4
 80105c2:	d101      	bne.n	80105c8 <strncmp+0x1e>
 80105c4:	1a80      	subs	r0, r0, r2
 80105c6:	bd10      	pop	{r4, pc}
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d1f3      	bne.n	80105b4 <strncmp+0xa>
 80105cc:	e7fa      	b.n	80105c4 <strncmp+0x1a>
 80105ce:	4610      	mov	r0, r2
 80105d0:	e7f9      	b.n	80105c6 <strncmp+0x1c>

080105d2 <__ascii_wctomb>:
 80105d2:	4603      	mov	r3, r0
 80105d4:	4608      	mov	r0, r1
 80105d6:	b141      	cbz	r1, 80105ea <__ascii_wctomb+0x18>
 80105d8:	2aff      	cmp	r2, #255	; 0xff
 80105da:	d904      	bls.n	80105e6 <__ascii_wctomb+0x14>
 80105dc:	228a      	movs	r2, #138	; 0x8a
 80105de:	f04f 30ff 	mov.w	r0, #4294967295
 80105e2:	601a      	str	r2, [r3, #0]
 80105e4:	4770      	bx	lr
 80105e6:	2001      	movs	r0, #1
 80105e8:	700a      	strb	r2, [r1, #0]
 80105ea:	4770      	bx	lr

080105ec <_write_r>:
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	4611      	mov	r1, r2
 80105f4:	2200      	movs	r2, #0
 80105f6:	4d05      	ldr	r5, [pc, #20]	; (801060c <_write_r+0x20>)
 80105f8:	602a      	str	r2, [r5, #0]
 80105fa:	461a      	mov	r2, r3
 80105fc:	f7f1 ff1c 	bl	8002438 <_write>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d102      	bne.n	801060a <_write_r+0x1e>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	b103      	cbz	r3, 801060a <_write_r+0x1e>
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	bd38      	pop	{r3, r4, r5, pc}
 801060c:	200013cc 	.word	0x200013cc

08010610 <__assert_func>:
 8010610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010612:	4614      	mov	r4, r2
 8010614:	461a      	mov	r2, r3
 8010616:	4b09      	ldr	r3, [pc, #36]	; (801063c <__assert_func+0x2c>)
 8010618:	4605      	mov	r5, r0
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68d8      	ldr	r0, [r3, #12]
 801061e:	b14c      	cbz	r4, 8010634 <__assert_func+0x24>
 8010620:	4b07      	ldr	r3, [pc, #28]	; (8010640 <__assert_func+0x30>)
 8010622:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010626:	9100      	str	r1, [sp, #0]
 8010628:	462b      	mov	r3, r5
 801062a:	4906      	ldr	r1, [pc, #24]	; (8010644 <__assert_func+0x34>)
 801062c:	f000 f81e 	bl	801066c <fiprintf>
 8010630:	f000 fa14 	bl	8010a5c <abort>
 8010634:	4b04      	ldr	r3, [pc, #16]	; (8010648 <__assert_func+0x38>)
 8010636:	461c      	mov	r4, r3
 8010638:	e7f3      	b.n	8010622 <__assert_func+0x12>
 801063a:	bf00      	nop
 801063c:	20000030 	.word	0x20000030
 8010640:	08012555 	.word	0x08012555
 8010644:	08012562 	.word	0x08012562
 8010648:	08012590 	.word	0x08012590

0801064c <_close_r>:
 801064c:	b538      	push	{r3, r4, r5, lr}
 801064e:	2300      	movs	r3, #0
 8010650:	4d05      	ldr	r5, [pc, #20]	; (8010668 <_close_r+0x1c>)
 8010652:	4604      	mov	r4, r0
 8010654:	4608      	mov	r0, r1
 8010656:	602b      	str	r3, [r5, #0]
 8010658:	f7f1 ff0a 	bl	8002470 <_close>
 801065c:	1c43      	adds	r3, r0, #1
 801065e:	d102      	bne.n	8010666 <_close_r+0x1a>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	b103      	cbz	r3, 8010666 <_close_r+0x1a>
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	bd38      	pop	{r3, r4, r5, pc}
 8010668:	200013cc 	.word	0x200013cc

0801066c <fiprintf>:
 801066c:	b40e      	push	{r1, r2, r3}
 801066e:	b503      	push	{r0, r1, lr}
 8010670:	4601      	mov	r1, r0
 8010672:	ab03      	add	r3, sp, #12
 8010674:	4805      	ldr	r0, [pc, #20]	; (801068c <fiprintf+0x20>)
 8010676:	f853 2b04 	ldr.w	r2, [r3], #4
 801067a:	6800      	ldr	r0, [r0, #0]
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	f000 f8ab 	bl	80107d8 <_vfiprintf_r>
 8010682:	b002      	add	sp, #8
 8010684:	f85d eb04 	ldr.w	lr, [sp], #4
 8010688:	b003      	add	sp, #12
 801068a:	4770      	bx	lr
 801068c:	20000030 	.word	0x20000030

08010690 <_fstat_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	2300      	movs	r3, #0
 8010694:	4d06      	ldr	r5, [pc, #24]	; (80106b0 <_fstat_r+0x20>)
 8010696:	4604      	mov	r4, r0
 8010698:	4608      	mov	r0, r1
 801069a:	4611      	mov	r1, r2
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	f7f1 fef2 	bl	8002486 <_fstat>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d102      	bne.n	80106ac <_fstat_r+0x1c>
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	b103      	cbz	r3, 80106ac <_fstat_r+0x1c>
 80106aa:	6023      	str	r3, [r4, #0]
 80106ac:	bd38      	pop	{r3, r4, r5, pc}
 80106ae:	bf00      	nop
 80106b0:	200013cc 	.word	0x200013cc

080106b4 <_isatty_r>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	2300      	movs	r3, #0
 80106b8:	4d05      	ldr	r5, [pc, #20]	; (80106d0 <_isatty_r+0x1c>)
 80106ba:	4604      	mov	r4, r0
 80106bc:	4608      	mov	r0, r1
 80106be:	602b      	str	r3, [r5, #0]
 80106c0:	f7f1 fef0 	bl	80024a4 <_isatty>
 80106c4:	1c43      	adds	r3, r0, #1
 80106c6:	d102      	bne.n	80106ce <_isatty_r+0x1a>
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	b103      	cbz	r3, 80106ce <_isatty_r+0x1a>
 80106cc:	6023      	str	r3, [r4, #0]
 80106ce:	bd38      	pop	{r3, r4, r5, pc}
 80106d0:	200013cc 	.word	0x200013cc

080106d4 <_lseek_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4604      	mov	r4, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	4611      	mov	r1, r2
 80106dc:	2200      	movs	r2, #0
 80106de:	4d05      	ldr	r5, [pc, #20]	; (80106f4 <_lseek_r+0x20>)
 80106e0:	602a      	str	r2, [r5, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	f7f1 fee8 	bl	80024b8 <_lseek>
 80106e8:	1c43      	adds	r3, r0, #1
 80106ea:	d102      	bne.n	80106f2 <_lseek_r+0x1e>
 80106ec:	682b      	ldr	r3, [r5, #0]
 80106ee:	b103      	cbz	r3, 80106f2 <_lseek_r+0x1e>
 80106f0:	6023      	str	r3, [r4, #0]
 80106f2:	bd38      	pop	{r3, r4, r5, pc}
 80106f4:	200013cc 	.word	0x200013cc

080106f8 <memmove>:
 80106f8:	4288      	cmp	r0, r1
 80106fa:	b510      	push	{r4, lr}
 80106fc:	eb01 0402 	add.w	r4, r1, r2
 8010700:	d902      	bls.n	8010708 <memmove+0x10>
 8010702:	4284      	cmp	r4, r0
 8010704:	4623      	mov	r3, r4
 8010706:	d807      	bhi.n	8010718 <memmove+0x20>
 8010708:	1e43      	subs	r3, r0, #1
 801070a:	42a1      	cmp	r1, r4
 801070c:	d008      	beq.n	8010720 <memmove+0x28>
 801070e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010716:	e7f8      	b.n	801070a <memmove+0x12>
 8010718:	4601      	mov	r1, r0
 801071a:	4402      	add	r2, r0
 801071c:	428a      	cmp	r2, r1
 801071e:	d100      	bne.n	8010722 <memmove+0x2a>
 8010720:	bd10      	pop	{r4, pc}
 8010722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801072a:	e7f7      	b.n	801071c <memmove+0x24>

0801072c <_realloc_r>:
 801072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010730:	4680      	mov	r8, r0
 8010732:	4614      	mov	r4, r2
 8010734:	460e      	mov	r6, r1
 8010736:	b921      	cbnz	r1, 8010742 <_realloc_r+0x16>
 8010738:	4611      	mov	r1, r2
 801073a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801073e:	f7fb bda5 	b.w	800c28c <_malloc_r>
 8010742:	b92a      	cbnz	r2, 8010750 <_realloc_r+0x24>
 8010744:	f7fb fd3a 	bl	800c1bc <_free_r>
 8010748:	4625      	mov	r5, r4
 801074a:	4628      	mov	r0, r5
 801074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010750:	f000 f98b 	bl	8010a6a <_malloc_usable_size_r>
 8010754:	4284      	cmp	r4, r0
 8010756:	4607      	mov	r7, r0
 8010758:	d802      	bhi.n	8010760 <_realloc_r+0x34>
 801075a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801075e:	d812      	bhi.n	8010786 <_realloc_r+0x5a>
 8010760:	4621      	mov	r1, r4
 8010762:	4640      	mov	r0, r8
 8010764:	f7fb fd92 	bl	800c28c <_malloc_r>
 8010768:	4605      	mov	r5, r0
 801076a:	2800      	cmp	r0, #0
 801076c:	d0ed      	beq.n	801074a <_realloc_r+0x1e>
 801076e:	42bc      	cmp	r4, r7
 8010770:	4622      	mov	r2, r4
 8010772:	4631      	mov	r1, r6
 8010774:	bf28      	it	cs
 8010776:	463a      	movcs	r2, r7
 8010778:	f7fb fd0a 	bl	800c190 <memcpy>
 801077c:	4631      	mov	r1, r6
 801077e:	4640      	mov	r0, r8
 8010780:	f7fb fd1c 	bl	800c1bc <_free_r>
 8010784:	e7e1      	b.n	801074a <_realloc_r+0x1e>
 8010786:	4635      	mov	r5, r6
 8010788:	e7df      	b.n	801074a <_realloc_r+0x1e>

0801078a <__sfputc_r>:
 801078a:	6893      	ldr	r3, [r2, #8]
 801078c:	b410      	push	{r4}
 801078e:	3b01      	subs	r3, #1
 8010790:	2b00      	cmp	r3, #0
 8010792:	6093      	str	r3, [r2, #8]
 8010794:	da07      	bge.n	80107a6 <__sfputc_r+0x1c>
 8010796:	6994      	ldr	r4, [r2, #24]
 8010798:	42a3      	cmp	r3, r4
 801079a:	db01      	blt.n	80107a0 <__sfputc_r+0x16>
 801079c:	290a      	cmp	r1, #10
 801079e:	d102      	bne.n	80107a6 <__sfputc_r+0x1c>
 80107a0:	bc10      	pop	{r4}
 80107a2:	f7fd bba5 	b.w	800def0 <__swbuf_r>
 80107a6:	6813      	ldr	r3, [r2, #0]
 80107a8:	1c58      	adds	r0, r3, #1
 80107aa:	6010      	str	r0, [r2, #0]
 80107ac:	7019      	strb	r1, [r3, #0]
 80107ae:	4608      	mov	r0, r1
 80107b0:	bc10      	pop	{r4}
 80107b2:	4770      	bx	lr

080107b4 <__sfputs_r>:
 80107b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b6:	4606      	mov	r6, r0
 80107b8:	460f      	mov	r7, r1
 80107ba:	4614      	mov	r4, r2
 80107bc:	18d5      	adds	r5, r2, r3
 80107be:	42ac      	cmp	r4, r5
 80107c0:	d101      	bne.n	80107c6 <__sfputs_r+0x12>
 80107c2:	2000      	movs	r0, #0
 80107c4:	e007      	b.n	80107d6 <__sfputs_r+0x22>
 80107c6:	463a      	mov	r2, r7
 80107c8:	4630      	mov	r0, r6
 80107ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ce:	f7ff ffdc 	bl	801078a <__sfputc_r>
 80107d2:	1c43      	adds	r3, r0, #1
 80107d4:	d1f3      	bne.n	80107be <__sfputs_r+0xa>
 80107d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107d8 <_vfiprintf_r>:
 80107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	460d      	mov	r5, r1
 80107de:	4614      	mov	r4, r2
 80107e0:	4698      	mov	r8, r3
 80107e2:	4606      	mov	r6, r0
 80107e4:	b09d      	sub	sp, #116	; 0x74
 80107e6:	b118      	cbz	r0, 80107f0 <_vfiprintf_r+0x18>
 80107e8:	6983      	ldr	r3, [r0, #24]
 80107ea:	b90b      	cbnz	r3, 80107f0 <_vfiprintf_r+0x18>
 80107ec:	f7fe fbd0 	bl	800ef90 <__sinit>
 80107f0:	4b89      	ldr	r3, [pc, #548]	; (8010a18 <_vfiprintf_r+0x240>)
 80107f2:	429d      	cmp	r5, r3
 80107f4:	d11b      	bne.n	801082e <_vfiprintf_r+0x56>
 80107f6:	6875      	ldr	r5, [r6, #4]
 80107f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107fa:	07d9      	lsls	r1, r3, #31
 80107fc:	d405      	bmi.n	801080a <_vfiprintf_r+0x32>
 80107fe:	89ab      	ldrh	r3, [r5, #12]
 8010800:	059a      	lsls	r2, r3, #22
 8010802:	d402      	bmi.n	801080a <_vfiprintf_r+0x32>
 8010804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010806:	f7fe ffcc 	bl	800f7a2 <__retarget_lock_acquire_recursive>
 801080a:	89ab      	ldrh	r3, [r5, #12]
 801080c:	071b      	lsls	r3, r3, #28
 801080e:	d501      	bpl.n	8010814 <_vfiprintf_r+0x3c>
 8010810:	692b      	ldr	r3, [r5, #16]
 8010812:	b9eb      	cbnz	r3, 8010850 <_vfiprintf_r+0x78>
 8010814:	4629      	mov	r1, r5
 8010816:	4630      	mov	r0, r6
 8010818:	f7fd fbbc 	bl	800df94 <__swsetup_r>
 801081c:	b1c0      	cbz	r0, 8010850 <_vfiprintf_r+0x78>
 801081e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010820:	07dc      	lsls	r4, r3, #31
 8010822:	d50e      	bpl.n	8010842 <_vfiprintf_r+0x6a>
 8010824:	f04f 30ff 	mov.w	r0, #4294967295
 8010828:	b01d      	add	sp, #116	; 0x74
 801082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082e:	4b7b      	ldr	r3, [pc, #492]	; (8010a1c <_vfiprintf_r+0x244>)
 8010830:	429d      	cmp	r5, r3
 8010832:	d101      	bne.n	8010838 <_vfiprintf_r+0x60>
 8010834:	68b5      	ldr	r5, [r6, #8]
 8010836:	e7df      	b.n	80107f8 <_vfiprintf_r+0x20>
 8010838:	4b79      	ldr	r3, [pc, #484]	; (8010a20 <_vfiprintf_r+0x248>)
 801083a:	429d      	cmp	r5, r3
 801083c:	bf08      	it	eq
 801083e:	68f5      	ldreq	r5, [r6, #12]
 8010840:	e7da      	b.n	80107f8 <_vfiprintf_r+0x20>
 8010842:	89ab      	ldrh	r3, [r5, #12]
 8010844:	0598      	lsls	r0, r3, #22
 8010846:	d4ed      	bmi.n	8010824 <_vfiprintf_r+0x4c>
 8010848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801084a:	f7fe ffab 	bl	800f7a4 <__retarget_lock_release_recursive>
 801084e:	e7e9      	b.n	8010824 <_vfiprintf_r+0x4c>
 8010850:	2300      	movs	r3, #0
 8010852:	9309      	str	r3, [sp, #36]	; 0x24
 8010854:	2320      	movs	r3, #32
 8010856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801085a:	2330      	movs	r3, #48	; 0x30
 801085c:	f04f 0901 	mov.w	r9, #1
 8010860:	f8cd 800c 	str.w	r8, [sp, #12]
 8010864:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010a24 <_vfiprintf_r+0x24c>
 8010868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801086c:	4623      	mov	r3, r4
 801086e:	469a      	mov	sl, r3
 8010870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010874:	b10a      	cbz	r2, 801087a <_vfiprintf_r+0xa2>
 8010876:	2a25      	cmp	r2, #37	; 0x25
 8010878:	d1f9      	bne.n	801086e <_vfiprintf_r+0x96>
 801087a:	ebba 0b04 	subs.w	fp, sl, r4
 801087e:	d00b      	beq.n	8010898 <_vfiprintf_r+0xc0>
 8010880:	465b      	mov	r3, fp
 8010882:	4622      	mov	r2, r4
 8010884:	4629      	mov	r1, r5
 8010886:	4630      	mov	r0, r6
 8010888:	f7ff ff94 	bl	80107b4 <__sfputs_r>
 801088c:	3001      	adds	r0, #1
 801088e:	f000 80aa 	beq.w	80109e6 <_vfiprintf_r+0x20e>
 8010892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010894:	445a      	add	r2, fp
 8010896:	9209      	str	r2, [sp, #36]	; 0x24
 8010898:	f89a 3000 	ldrb.w	r3, [sl]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 80a2 	beq.w	80109e6 <_vfiprintf_r+0x20e>
 80108a2:	2300      	movs	r3, #0
 80108a4:	f04f 32ff 	mov.w	r2, #4294967295
 80108a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108ac:	f10a 0a01 	add.w	sl, sl, #1
 80108b0:	9304      	str	r3, [sp, #16]
 80108b2:	9307      	str	r3, [sp, #28]
 80108b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108b8:	931a      	str	r3, [sp, #104]	; 0x68
 80108ba:	4654      	mov	r4, sl
 80108bc:	2205      	movs	r2, #5
 80108be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c2:	4858      	ldr	r0, [pc, #352]	; (8010a24 <_vfiprintf_r+0x24c>)
 80108c4:	f7fe ffe6 	bl	800f894 <memchr>
 80108c8:	9a04      	ldr	r2, [sp, #16]
 80108ca:	b9d8      	cbnz	r0, 8010904 <_vfiprintf_r+0x12c>
 80108cc:	06d1      	lsls	r1, r2, #27
 80108ce:	bf44      	itt	mi
 80108d0:	2320      	movmi	r3, #32
 80108d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108d6:	0713      	lsls	r3, r2, #28
 80108d8:	bf44      	itt	mi
 80108da:	232b      	movmi	r3, #43	; 0x2b
 80108dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108e0:	f89a 3000 	ldrb.w	r3, [sl]
 80108e4:	2b2a      	cmp	r3, #42	; 0x2a
 80108e6:	d015      	beq.n	8010914 <_vfiprintf_r+0x13c>
 80108e8:	4654      	mov	r4, sl
 80108ea:	2000      	movs	r0, #0
 80108ec:	f04f 0c0a 	mov.w	ip, #10
 80108f0:	9a07      	ldr	r2, [sp, #28]
 80108f2:	4621      	mov	r1, r4
 80108f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108f8:	3b30      	subs	r3, #48	; 0x30
 80108fa:	2b09      	cmp	r3, #9
 80108fc:	d94e      	bls.n	801099c <_vfiprintf_r+0x1c4>
 80108fe:	b1b0      	cbz	r0, 801092e <_vfiprintf_r+0x156>
 8010900:	9207      	str	r2, [sp, #28]
 8010902:	e014      	b.n	801092e <_vfiprintf_r+0x156>
 8010904:	eba0 0308 	sub.w	r3, r0, r8
 8010908:	fa09 f303 	lsl.w	r3, r9, r3
 801090c:	4313      	orrs	r3, r2
 801090e:	46a2      	mov	sl, r4
 8010910:	9304      	str	r3, [sp, #16]
 8010912:	e7d2      	b.n	80108ba <_vfiprintf_r+0xe2>
 8010914:	9b03      	ldr	r3, [sp, #12]
 8010916:	1d19      	adds	r1, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	bfbb      	ittet	lt
 8010920:	425b      	neglt	r3, r3
 8010922:	f042 0202 	orrlt.w	r2, r2, #2
 8010926:	9307      	strge	r3, [sp, #28]
 8010928:	9307      	strlt	r3, [sp, #28]
 801092a:	bfb8      	it	lt
 801092c:	9204      	strlt	r2, [sp, #16]
 801092e:	7823      	ldrb	r3, [r4, #0]
 8010930:	2b2e      	cmp	r3, #46	; 0x2e
 8010932:	d10c      	bne.n	801094e <_vfiprintf_r+0x176>
 8010934:	7863      	ldrb	r3, [r4, #1]
 8010936:	2b2a      	cmp	r3, #42	; 0x2a
 8010938:	d135      	bne.n	80109a6 <_vfiprintf_r+0x1ce>
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	3402      	adds	r4, #2
 801093e:	1d1a      	adds	r2, r3, #4
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	9203      	str	r2, [sp, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	bfb8      	it	lt
 8010948:	f04f 33ff 	movlt.w	r3, #4294967295
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010a28 <_vfiprintf_r+0x250>
 8010952:	2203      	movs	r2, #3
 8010954:	4650      	mov	r0, sl
 8010956:	7821      	ldrb	r1, [r4, #0]
 8010958:	f7fe ff9c 	bl	800f894 <memchr>
 801095c:	b140      	cbz	r0, 8010970 <_vfiprintf_r+0x198>
 801095e:	2340      	movs	r3, #64	; 0x40
 8010960:	eba0 000a 	sub.w	r0, r0, sl
 8010964:	fa03 f000 	lsl.w	r0, r3, r0
 8010968:	9b04      	ldr	r3, [sp, #16]
 801096a:	3401      	adds	r4, #1
 801096c:	4303      	orrs	r3, r0
 801096e:	9304      	str	r3, [sp, #16]
 8010970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010974:	2206      	movs	r2, #6
 8010976:	482d      	ldr	r0, [pc, #180]	; (8010a2c <_vfiprintf_r+0x254>)
 8010978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801097c:	f7fe ff8a 	bl	800f894 <memchr>
 8010980:	2800      	cmp	r0, #0
 8010982:	d03f      	beq.n	8010a04 <_vfiprintf_r+0x22c>
 8010984:	4b2a      	ldr	r3, [pc, #168]	; (8010a30 <_vfiprintf_r+0x258>)
 8010986:	bb1b      	cbnz	r3, 80109d0 <_vfiprintf_r+0x1f8>
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	3307      	adds	r3, #7
 801098c:	f023 0307 	bic.w	r3, r3, #7
 8010990:	3308      	adds	r3, #8
 8010992:	9303      	str	r3, [sp, #12]
 8010994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010996:	443b      	add	r3, r7
 8010998:	9309      	str	r3, [sp, #36]	; 0x24
 801099a:	e767      	b.n	801086c <_vfiprintf_r+0x94>
 801099c:	460c      	mov	r4, r1
 801099e:	2001      	movs	r0, #1
 80109a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80109a4:	e7a5      	b.n	80108f2 <_vfiprintf_r+0x11a>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f04f 0c0a 	mov.w	ip, #10
 80109ac:	4619      	mov	r1, r3
 80109ae:	3401      	adds	r4, #1
 80109b0:	9305      	str	r3, [sp, #20]
 80109b2:	4620      	mov	r0, r4
 80109b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b8:	3a30      	subs	r2, #48	; 0x30
 80109ba:	2a09      	cmp	r2, #9
 80109bc:	d903      	bls.n	80109c6 <_vfiprintf_r+0x1ee>
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0c5      	beq.n	801094e <_vfiprintf_r+0x176>
 80109c2:	9105      	str	r1, [sp, #20]
 80109c4:	e7c3      	b.n	801094e <_vfiprintf_r+0x176>
 80109c6:	4604      	mov	r4, r0
 80109c8:	2301      	movs	r3, #1
 80109ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80109ce:	e7f0      	b.n	80109b2 <_vfiprintf_r+0x1da>
 80109d0:	ab03      	add	r3, sp, #12
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	462a      	mov	r2, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	4b16      	ldr	r3, [pc, #88]	; (8010a34 <_vfiprintf_r+0x25c>)
 80109da:	a904      	add	r1, sp, #16
 80109dc:	f7fb fd68 	bl	800c4b0 <_printf_float>
 80109e0:	4607      	mov	r7, r0
 80109e2:	1c78      	adds	r0, r7, #1
 80109e4:	d1d6      	bne.n	8010994 <_vfiprintf_r+0x1bc>
 80109e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e8:	07d9      	lsls	r1, r3, #31
 80109ea:	d405      	bmi.n	80109f8 <_vfiprintf_r+0x220>
 80109ec:	89ab      	ldrh	r3, [r5, #12]
 80109ee:	059a      	lsls	r2, r3, #22
 80109f0:	d402      	bmi.n	80109f8 <_vfiprintf_r+0x220>
 80109f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109f4:	f7fe fed6 	bl	800f7a4 <__retarget_lock_release_recursive>
 80109f8:	89ab      	ldrh	r3, [r5, #12]
 80109fa:	065b      	lsls	r3, r3, #25
 80109fc:	f53f af12 	bmi.w	8010824 <_vfiprintf_r+0x4c>
 8010a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a02:	e711      	b.n	8010828 <_vfiprintf_r+0x50>
 8010a04:	ab03      	add	r3, sp, #12
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	462a      	mov	r2, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	4b09      	ldr	r3, [pc, #36]	; (8010a34 <_vfiprintf_r+0x25c>)
 8010a0e:	a904      	add	r1, sp, #16
 8010a10:	f7fb ffea 	bl	800c9e8 <_printf_i>
 8010a14:	e7e4      	b.n	80109e0 <_vfiprintf_r+0x208>
 8010a16:	bf00      	nop
 8010a18:	0801232c 	.word	0x0801232c
 8010a1c:	0801234c 	.word	0x0801234c
 8010a20:	0801230c 	.word	0x0801230c
 8010a24:	08012544 	.word	0x08012544
 8010a28:	0801254a 	.word	0x0801254a
 8010a2c:	0801254e 	.word	0x0801254e
 8010a30:	0800c4b1 	.word	0x0800c4b1
 8010a34:	080107b5 	.word	0x080107b5

08010a38 <_read_r>:
 8010a38:	b538      	push	{r3, r4, r5, lr}
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	4608      	mov	r0, r1
 8010a3e:	4611      	mov	r1, r2
 8010a40:	2200      	movs	r2, #0
 8010a42:	4d05      	ldr	r5, [pc, #20]	; (8010a58 <_read_r+0x20>)
 8010a44:	602a      	str	r2, [r5, #0]
 8010a46:	461a      	mov	r2, r3
 8010a48:	f7f1 fcd9 	bl	80023fe <_read>
 8010a4c:	1c43      	adds	r3, r0, #1
 8010a4e:	d102      	bne.n	8010a56 <_read_r+0x1e>
 8010a50:	682b      	ldr	r3, [r5, #0]
 8010a52:	b103      	cbz	r3, 8010a56 <_read_r+0x1e>
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	200013cc 	.word	0x200013cc

08010a5c <abort>:
 8010a5c:	2006      	movs	r0, #6
 8010a5e:	b508      	push	{r3, lr}
 8010a60:	f000 f834 	bl	8010acc <raise>
 8010a64:	2001      	movs	r0, #1
 8010a66:	f7f1 fcc0 	bl	80023ea <_exit>

08010a6a <_malloc_usable_size_r>:
 8010a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a6e:	1f18      	subs	r0, r3, #4
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	bfbc      	itt	lt
 8010a74:	580b      	ldrlt	r3, [r1, r0]
 8010a76:	18c0      	addlt	r0, r0, r3
 8010a78:	4770      	bx	lr

08010a7a <_raise_r>:
 8010a7a:	291f      	cmp	r1, #31
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4604      	mov	r4, r0
 8010a80:	460d      	mov	r5, r1
 8010a82:	d904      	bls.n	8010a8e <_raise_r+0x14>
 8010a84:	2316      	movs	r3, #22
 8010a86:	6003      	str	r3, [r0, #0]
 8010a88:	f04f 30ff 	mov.w	r0, #4294967295
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010a90:	b112      	cbz	r2, 8010a98 <_raise_r+0x1e>
 8010a92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a96:	b94b      	cbnz	r3, 8010aac <_raise_r+0x32>
 8010a98:	4620      	mov	r0, r4
 8010a9a:	f000 f831 	bl	8010b00 <_getpid_r>
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	4601      	mov	r1, r0
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010aa8:	f000 b818 	b.w	8010adc <_kill_r>
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d00a      	beq.n	8010ac6 <_raise_r+0x4c>
 8010ab0:	1c59      	adds	r1, r3, #1
 8010ab2:	d103      	bne.n	8010abc <_raise_r+0x42>
 8010ab4:	2316      	movs	r3, #22
 8010ab6:	6003      	str	r3, [r0, #0]
 8010ab8:	2001      	movs	r0, #1
 8010aba:	e7e7      	b.n	8010a8c <_raise_r+0x12>
 8010abc:	2400      	movs	r4, #0
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ac4:	4798      	blx	r3
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	e7e0      	b.n	8010a8c <_raise_r+0x12>
	...

08010acc <raise>:
 8010acc:	4b02      	ldr	r3, [pc, #8]	; (8010ad8 <raise+0xc>)
 8010ace:	4601      	mov	r1, r0
 8010ad0:	6818      	ldr	r0, [r3, #0]
 8010ad2:	f7ff bfd2 	b.w	8010a7a <_raise_r>
 8010ad6:	bf00      	nop
 8010ad8:	20000030 	.word	0x20000030

08010adc <_kill_r>:
 8010adc:	b538      	push	{r3, r4, r5, lr}
 8010ade:	2300      	movs	r3, #0
 8010ae0:	4d06      	ldr	r5, [pc, #24]	; (8010afc <_kill_r+0x20>)
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4608      	mov	r0, r1
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	602b      	str	r3, [r5, #0]
 8010aea:	f7f1 fc6e 	bl	80023ca <_kill>
 8010aee:	1c43      	adds	r3, r0, #1
 8010af0:	d102      	bne.n	8010af8 <_kill_r+0x1c>
 8010af2:	682b      	ldr	r3, [r5, #0]
 8010af4:	b103      	cbz	r3, 8010af8 <_kill_r+0x1c>
 8010af6:	6023      	str	r3, [r4, #0]
 8010af8:	bd38      	pop	{r3, r4, r5, pc}
 8010afa:	bf00      	nop
 8010afc:	200013cc 	.word	0x200013cc

08010b00 <_getpid_r>:
 8010b00:	f7f1 bc5c 	b.w	80023bc <_getpid>

08010b04 <_init>:
 8010b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b06:	bf00      	nop
 8010b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b0a:	bc08      	pop	{r3}
 8010b0c:	469e      	mov	lr, r3
 8010b0e:	4770      	bx	lr

08010b10 <_fini>:
 8010b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b12:	bf00      	nop
 8010b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b16:	bc08      	pop	{r3}
 8010b18:	469e      	mov	lr, r3
 8010b1a:	4770      	bx	lr
